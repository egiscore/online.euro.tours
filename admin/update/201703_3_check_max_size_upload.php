<?php
 class check_max_size_upload extends UpdateModel { public function make() { $upload_tmp_dir = ini_get('upload_tmp_dir'); if (!is_writable($upload_tmp_dir)) { return $this->save(1); } $tmpFile = SMARTY_COMPILE_DIR . 'msuf.tmp'; $blankFile = SMARTY_COMPILE_DIR . 'blank.tmp'; $maxSizeVals = [ Samo_Utils::convert_bytes(ini_get('upload_max_filesize')), Samo_Utils::convert_bytes(ini_get('post_max_size')), Samo_Utils::convert_bytes(ini_get('memory_limit')), ]; $maxSizeVals = array_filter( $maxSizeVals, function($size) { return $size > 0; } ); if (is_file($tmpFile)) { $maxSize = file_get_contents($tmpFile); } $maxSize = (isset($maxSize) && $maxSize > 0) ? $maxSize : min($maxSizeVals); if (!extension_loaded('curl')) { return $this->save($maxSize); } file_put_contents($tmpFile, $maxSize); $handler = fopen($blankFile, 'w+'); ftruncate($handler, $maxSize); fclose($handler); file_put_contents($tmpFile, $maxSize - Samo_Utils::convert_bytes('1M'), LOCK_EX); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_online_link', [ 'entity' => 'TESTUPLOAD', ] ); if ($url = $this->db->fetchOne($sql)) { $postdata = [ 'upload' => curl_file_create($blankFile), ]; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLINFO_HEADER_OUT, false); curl_setopt($ch, CURLOPT_HEADER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $postdata); curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5); curl_setopt($ch, CURLOPT_TIMEOUT, ini_get('max_execution_time')); $result = curl_exec($ch); curl_close($ch); if ($result) { $_FILES = json_decode($result, true); } if (isset($_FILES['upload']) && UPLOAD_ERR_OK == $_FILES['upload']['error'] && $maxSize == $_FILES['upload']['size']) { $this->save($maxSize); @unlink($tmpFile); @unlink($blankFile); return 0; } return -1; } else { return $this->save($maxSize); } } public function save($size) { $sql = $this->db->formatExec( $this->OFFICEDB . '.Settings.SetParam', [ 'p_user_code' => null, 'p_section' => 'Online', 'p_name' => 'UploadMaxFilesize', 'p_value' => $size, ] ); $this->db->query($sql); return 0; } } 