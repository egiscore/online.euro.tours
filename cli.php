<?php
if ('cli' != PHP_SAPI) { header('HTTP/1.0 404 Not Found', true, 404); exit; } $opts = [ 'servers-cache' => "Update servers_cache.php", 'smarty-cache' => "Cleanup templates_c", 'sql-cache' => "Cleanup database cache", 'classmap-cache' => "Update classmap_cache.php", 'app-cache' => "Cleanup templates_c and application cache", 'app-cleanup' => "Cleanup temporary files", 'app-deploy' => "Post-deploy procedures", 'crontab' => "Execute background tasks", 'fix-perms' => "Make required directories world-wide writable, default 0777, override as --fix-perms=0775", 'download-images' => "Download new images from database, specify stamp as --download-images=0x00000001, use '0x0000000000' for full refresh images", 'update-icons-css' => "Rebuild icons.css file", ]; $options = getopt( '', array_map( function ($item) { return $item . '::'; }, array_keys($opts) ) ); $return = true; if (!empty($options)) { $_SERVER['HTTP_HOST'] = 'local.host'; $_SERVER['SERVER_ADDR'] = 'local.host'; $_SERVER['SERVER_PORT'] = '80'; $_SERVER['REMOTE_ADDR'] = '127.0.0.1'; $_SERVER['DOCUMENT_ROOT'] = __DIR__; include __DIR__ . '/properties.php'; include_once _ROOT . 'includes/classes/class.samo_config.php'; chdir(_ROOT); Samo_Loader::register_autoload(); $_tools = Samo_Loader::load_object('Samo_Tools'); class Cli_Tools { private $tools = null; public function __construct(Samo_Tools $tools) { $this->tools = $tools; } public function __call($method, $args) { if (method_exists($this->tools, $method)) { Samo_Debug_Helper::proctitle(sprintf('background task: %s', $method)); return $this->tools->multiply($method, $args); } throw new RuntimeException('Unknown method ' . $method); } } $tools = new Cli_Tools($_tools); $start = microtime(true); $commands = array_keys($options); foreach ($commands as $method) { if ($return) { switch ($method) { case 'app-cleanup': $return = $tools->clear_dnl() && $tools->session_gc() && $tools->remove_hotel_images() && $tools->remove_ptype_images() && $tools->remove_partner_logos() && $tools->vacuum_cache(); case 'app-deploy': $return = $tools->create_classmap() && $tools->droptemptab() && $tools->clear_cache() && $tools->clear_smarty_cache(); break; case 'servers-cache': $return = $tools->create_servers_cache(); break; case 'classmap-cache': $return = $tools->create_classmap(); break; case 'app-cache': $return = $tools->droptemptab() && $tools->clear_cache() && $tools->clear_smarty_cache(); break; case 'smarty-cache': $return = $tools->clear_smarty_cache(); break; case 'sql-cache': $return = $tools->droptemptab(); break; case 'crontab': $return = $tools->crontab(); break; case 'fix-perms': $perms = (false !== $options[$method] && strlen($options[$method]) == 4) ? $options[$method] : 0777; $umask = umask(0); $writable_dirs = [ 'dnl', 'data/hotelparam', 'data/hotel', 'data/spool', 'data/partner', 'data/search_tour', ]; foreach ($writable_dirs as $dir) { $fullpath = _ROOT . $dir; if (file_exists($dir) && substr(sprintf('%o', fileperms($fullpath)), -4) != $perms) { echo "Fix permissions on $fullpath:\t"; echo (false !== chmod($fullpath, intval($perms, 8))) ? "OK" : "FAIL"; echo PHP_EOL; } } umask($umask); $return = true; break; case 'download-images': do { $isDownloaded = $tools->download_images(); } while (!$isDownloaded); break; case 'update-icons-css': $return = $tools->buildCssIcons(); break; default: $return = false; break; } } } echo ($return ? "OK" : "FAIL") . ', commands: ' . implode(', ', $commands) . ', took ' . (microtime(true) - $start) . 's' . PHP_EOL; } else { $script = isset($_SERVER['argv']) ? $_SERVER['argv'][0] : basename(__FILE__); $msg = 'Usage ' . $script . ' --options:' . PHP_EOL; foreach ($opts as $opt => $desc) { $msg .= "\t--$opt\t# $desc" . PHP_EOL; } echo $msg; } exit($return ? 0 : 8); 