<?php
 class Api_Model extends Samo { public $defaults = array(); protected $_callback = null; protected $field_type = array( 'integers' => array('INCOMINGPARTNER', 'HOTELTYPES', 'TOWNTO', 'TOWNS', 'HOTELS', 'STARS', 'STARINC', 'MEALS', 'MEALINC', 'AGES', 'ROOMS', 'ROOMINC'), 'datetime' => array('CHECKIN_BEG', 'CHECKIN_END', 'CHECKIN', 'CHECKOUT', 'DATEOUT', 'PVALIDDATE'), 'string' => array('ACTION', 'SEARCHMODE'), 'non-unique' => array('AGES'), 'hexval' => array('CATCLAIM'), ); protected $host_name = ''; protected $_cacheTownFrom = null; protected $_cacheState = array(); protected $_messages = null; public function __construct(Samo_Config $config, $callback = null, $full_links = true) { if (!Samo_Registry::find('cache')) { Samo_Registry::load('cache', 'Samo_Cache'); } $this->config = $config; if (null !== $callback && is_callable($callback)) { $this->_callback = $callback; } $this->db = Samo_Registry::get('db'); $this->cache = Samo_Registry::get('cache'); $this->db_init(); $this->lng = Samo_Request::langid(); if ($full_links) { $this->host_name = Samo_Request::scheme() . '://' . Samo_Request::host(); } } public function __call($name, $arguments) { if (strpos($name, 'get') === 0) { $method = '_' . $name; if (method_exists($this, $method)) { if (count($arguments) > 0) { $args = array_splice($arguments, 0, 1); $this->setParams($args[0]); } $return = call_user_func_array(array($this, $method), $arguments); if (null !== $this->_callback) { call_user_func($this->_callback, $this); } return $return; } } throw new Exception('Incorrect action '.$name); } public function setParams($params = array(), $value = null) { $return = $this->defaults; if (is_string($params) && !empty($params) && null !== $value) { $return = $this->defaults[$params] = $value; } elseif (is_array($params)) { $return = $this->defaults = array_merge($this->defaults, $params); } if (isset($this->defaults['TOWNFROMINC']) && isset($this->defaults['STATEINC'])) { $townFrom = $this->defaults['TOWNFROMINC']; $state = $this->defaults['STATEINC']; $options = isset($this->defaults['STATEFROM']) ? ['stateFrom' => $this->defaults['STATEFROM']] : []; $this->db = db_connect($townFrom, $state, $options); $this->db_init(); } return $return; } public function getParam($param = null, $default = null) { if (is_string($param)) { $return = null; foreach ($this->field_type as $type => $vars) { if (in_array($param, $vars)) { break; } else { $type = null; } } $type = (null === $type) ? 'integer' : $type; if (isset($this->defaults[$param])) { $return = $this->defaults[$param]; if ($type == 'integers') { $return = is_array($return) ? $return : explode(',', $return); foreach ($return as $idx => $val) { $options = ['min_range' => 1]; if ($param == 'AGES') { $options = ['min_range' => 0]; } if (false === filter_var($val, FILTER_VALIDATE_INT, ['options' => $options])) { unset($return[$idx]); } } $return = (in_array($param, $this->field_type['non-unique'])) ? array_values($return) : array_values(array_unique($return)); sort($return); } elseif ($type == 'datetime') { if ($return instanceof Samo_DateTime == false) { $return = Samo_Datetime::parse($return); } } elseif ($type == 'hexval') { $return = (strpos($return, '0x') === 0 && ctype_xdigit(substr($return, 2))) ? $return : null; } elseif (null !== $return && !in_array($param, $this->field_type['string'])) { $return = intval($return); } } elseif (null === $return) { if (null !== $default) { $return = $default; } elseif ($type == 'integers') { $return = array(); } elseif ($type == 'datetime') { $return = Samo_Datetime::null(); } } return $return; } elseif (!empty($param)) { return null; } return $this->defaults; } public function state($stateinc = null) { if (null !== $stateinc) { $this->STATEINC = $stateinc; } return $this->STATEINC; } public function townFrom($townfrominc = null) { if (null !== $townfrominc) { $this->TOWNFROMINC = $townfrominc; } return $this->TOWNFROMINC; } private function TOWNFROMS($orderByName = null) { if (null !== $this->_cacheTownFrom) { return $this->_cacheTownFrom; } $result = array(); if (false !== ($towns = getServers())) { if (null === $orderByName) { $orderByName = $this->getConfig('TOWN_ORDER_BY_NAME'); } $name = $orderByName ? 'Name' : 'LName'; $nameAlt = $orderByName ? 'LName' : 'Name'; if (!($selected = $this->getParam('TOWNFROMINC'))) { $selected = TOWNFROMINC; } $selected_exists = false; $apiVersion = Samo_Request::api_version(); foreach ($towns as $town) { $key = $town['townFrom']; if (!isset($result[$key])) { $item = array( 'id' => $town['townFrom'], 'name' => $town['town' . $name], 'stateFromKey' => $town['stateFrom'], 'stateFromName' => $town['stateFrom' . $name], 'selected' => 0 ); if ('2.0' != $apiVersion) { $item['nameAlt'] = $town['town' . $nameAlt]; $item['stateFromNameAlt'] = $town['stateFrom' . $nameAlt]; } if (!$this->filterTownFrom($item)) { continue; } if (!$selected_exists && $selected == $town['townFrom']) { $selected_exists = $item['selected'] = 1; $this->townFrom($selected); } $result[$key] = $item; } } usort( $result, function ($a, $b) { $sort = strnatcasecmp($a['stateFromName'], $b['stateFromName']); if (0 == $sort) { return strnatcasecmp($a['name'], $b['name']); } return $sort; } ); $result = array_values($result); } return $this->_cacheTownFrom = (count($result)) ? $result : false; } protected function filterTownFrom($town) { return true; } private function STATES($orderByName = null) { if (!array_key_exists('TOWNFROMINC', $this->defaults)) { throw new Samo_Exception('Method expects parameter "TOWNFROMINC", which was not supplied.'); } $TOWNFROM = $this->getParam('TOWNFROMINC'); if (isset($this->_cacheState[$TOWNFROM])) { return $this->_cacheState[$TOWNFROM]; } $result = array(); $selected_exists = false; if (false !== ($states = getServers())) { if (null === $orderByName) { $orderByName = $this->getConfig('STATE_ORDER_BY_NAME'); } $name = $orderByName ? 'Name' : 'LName'; $nameAlt = $orderByName ? 'LName' : 'Name'; if (!($selected = $this->getParam('STATEINC'))) { $selected = $this->getConfig('STATE_DEFAULT'); } $apiVersion = Samo_Request::api_version(); foreach ($states as $state) { if (!isset($result[$state['state']])) { if ($TOWNFROM == $state['townFrom']) { $item = [ 'id' => $state['state'], 'name' => $state['state' . $name], 'selected' => 0, ]; if ('2.0' != $apiVersion) { $item['nameAlt'] = $state['state' . $nameAlt]; } $town = array( 'id' => $state['townFrom'], ); if (!$this->filterTownFrom($town)) { continue; } if (!$selected_exists && $selected == $state['state']) { $selected_exists = $item['selected'] = 1; $this->state($selected); } $result[$item['id']] = $item; } } } if (count($result)) { usort( $result, function ($a, $b) { return strcasecmp($a['name'], $b['name']); } ); } } return $this->_cacheState[$TOWNFROM] = $result; } protected function _getTOWNFROMS($orderByName = null) { return $this->TOWNFROMS($orderByName); } protected function _getSTATES($orderByName = null) { return $this->STATES($orderByName); } protected function setSelected($data, $value, $key = 'id') { if ($data && $value) { $is_array = is_array($value); foreach ($data as &$row) { $row['selected'] = intval(($is_array) ? in_array($row[$key], $value) : $row[$key] == $value); } } return $data; } protected function messages($name) { if (null === $this->_messages) { $registry = Samo_Registry::instance(); if (!isset($registry['messages'])) { $file = _ROOT . 'includes/messages/messages_' . Samo_Request::lang() . '.php'; if (file_exists($file) && is_file($file)) { $messages = array(); include $file; $this->_messages = $messages; } else { $this->_messages = array(); } } else { $this->_messages = $registry['messages']; } } return isset($this->_messages[$name]) ? $this->_messages[$name] : ''; } protected function _getVersions() { return [ '1.0', '2.0', ]; } } 