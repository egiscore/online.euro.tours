<?php
class Claim_Documents extends Samo_Environment { public function index($claim) { $return = array(); $model = Samo_Loader::load_object('Samo_Claim'); $model->construct($claim); $info = $model->claimInfo(); $routes = Samo_Registry::get('routes'); $messages = Samo_Registry::get('messages'); if (!in_array($info['Status'], [Samo_Claim::STATUS_CANCELED, Samo_Claim::STATUS_PAID_PENALTY, Samo_Claim::STATUS_CALCULATED])) { if ($info['Confirmed'] == 1 && $info['RequestCancelDate']->is_null()) { if ($info['Status'] != Samo_Claim::STATUS_PAID && (isset($routes['invoice']) || isset($routes['psbank']) || isset($routes['troyka_pay_system']) || isset($routes['plat_por']))) { $return[] = array('type' => $messages['CL_DOC_ACCOUNT_TYPE'], 'name' => $routes['pay_variant']['title'], 'id' => base64_encode($routes['pay_variant']['url'] . 'CLAIM=' . $claim), 'module' => 'pay_variant'); } if ($info['Status'] != Samo_Claim::STATUS_PENALTY) { $_GET['CLAIM'] = $claim; $_SERVER['REQUEST_METHOD'] = 'GET'; $links = $this->invoke_method('cl_refer', 'documentList', [$claim]); if ($links) { foreach ($links as $link) { if (empty($link['error']) && !in_array($link['module'], array('agreement_person'))) { $type = $link['t']; $name = strip_tags(str_replace('<br />', '; ', nl2br($link['td']))); $return[] = array('type' => $type, 'name' => $name, 'id' => base64_encode($link['a']), 'module' => $link['module']); } } } if ($info['Status'] == Samo_Claim::STATUS_PAID) { if ($model->has_permission('invoice') && isset($routes['buh_doc'])) { $return[] = array('type' => $messages['CL_DOC_ACCOUNT_TYPE'], 'name' => $routes['buh_doc']['title'], 'id' => base64_encode($routes['buh_doc']['url'] . 'CLAIM=' . $claim), 'module' => 'buh_doc'); } } } } else { if ($info['Status'] == Samo_Claim::STATUS_PENALTY && (isset($routes['invoice']) || isset($routes['psbank']) || isset($routes['troyka_pay_system']) || isset($routes['plat_por']))) { $return[] = array('type' => $messages['CL_DOC_ACCOUNT_TYPE'], 'name' => $routes['pay_variant']['title'], 'id' => base64_encode($routes['pay_variant']['url'] . 'CLAIM=' . $claim), 'module' => 'pay_variant'); } } } foreach ($return as &$doc) { $doc['type'] = mb_convert_encoding($doc['type'], 'utf-8', 'cp1251'); $doc['name'] = mb_convert_encoding($doc['name'], 'utf-8', 'cp1251'); } return $return; } public function get($docid) { Samo_Registry::load('response', 'Response_Stub'); $response = Samo_Registry::get('response'); $view = Samo_Loader::load_object('Samo_View', 'samo.jQuery', $response); Samo_Registry::set('view', $view); $params = base64_decode($docid); $tmp = parse_url($params); parse_str($tmp['query'], $get); if (!isset($get['page'])) { $tmp = explode('/', trim($tmp['path'], '/')); $module = end($tmp); } else { $module = $get['page']; } if (in_array($module, array('pay_variant', 'claim_tourist', 'agreement_tourist'))) { $response->redirect_to($params . '&contentonly=1'); } else { $routes = Samo_Registry::get('routes'); if (isset($routes[$module])) { $action = isset($get['samo_action']) ? $get['samo_action'] : 'default_action'; $_GET = $get; $_GET['page'] = $module; $_GET['contentonly'] = 1; $_GET['guid'] = uniqid(); $try_again = true; while ($try_again) { try { $this->invoke_action($module, $action); $response->get_url(); $try_again = false; } catch (RetryException $e) { sleep(1); } catch (TryAgainLaterException $e) { $try_again = false; } catch (DocumentNotAvailableException $e) { throw $e; } } } else { $response->redirect_to($params); } } return $response->get_url(); } } class Response_Stub extends Samo_Response { private $url = null; private $html = ''; private $js = ''; public function redirect_to($url) { $this->url = $url; } public function get_url() { if (null === $this->url) { $this->output(); } if ($this->url) { $url = parse_url($this->url); if (isset($url['host']) && !empty($url['host'])) { return (isset($url['scheme']) ? '' : 'http://') . $this->url; } } return Samo_Request::scheme() . '://' . Samo_Request::host() . $this->url; } public function as_html($html) { $this->html .= $html; } public function as_js($js, $prepend = false) { $this->js = $js; } public function output($html = null) { if (null !== $html) { $this->html = $html; } if ($this->html == '' && !empty($this->js) && preg_match('~samo\.download_result\((.*)\)~', $this->js, $matches)) { $srv = new Services_JSON(SERVICES_JSON_LOOSE_TYPE); $json = $srv->decode($matches[1]); if (isset($json['url'])) { $this->url = $json['url']; } elseif (isset($json['error'])) { $module = Samo_Registry::get('module'); if (false !== ($name = Samo_Utils::tempFile($module['module'], 'html', $json['error']))) { $this->url = $name; } throw new TryAgainLaterException($json['error']); } elseif (isset($json['lifetime'])) { if ($json['lifetime'] < 29) { throw new RetryException(isset($json['wait']) ? $json['wait'] : 1); } else { throw new DocumentNotAvailableException('Timeout expired', 3500); } } } else { $module = Samo_Registry::get('module'); $name = Samo_Utils::tempFile($module['module'], 'html', $this->html); $this->html = ''; $this->url = $name; } } public function finish() { } public function __call($name, $params) { return false; } public function respond_to_js() { return false; } } class RetryException extends \Samo_Exception { } class TryAgainLaterException extends \Samo_Exception { } class DocumentNotAvailableException extends \Samo_Exception { } 