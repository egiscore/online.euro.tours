<?php
 class DadataClient extends Samo_Partner { public $url = 'https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/', $token, $query, $format; public function init($query, $format) { $this->getQuery($query); $this->getToken(); $this->getFormat($format); if (!$this->query) { throw new DadataClientException('Query not defined', 1); } return $this; } public function suggest($resource, $data) { $url = $this->url . $resource; $token = "token={$this->token}"; $data = http_build_query($data); $result = Samo_Curl::request("{$url}?{$token}&{$data}", null, 'GET'); return $result; } public function getByInn() { $inn = ['query' => $this->query]; $data = $this->suggest("party", $inn); return $this->getResult($data, $this->format); } public function getResultXML($data) { if (!$data) { throw new DadataClientException("Data on the Dadata service was not found.", 2); } return $this->fieldSchema($data, 'xml'); } public function getResultJSON($data) { if (!$data) { throw new DadataClientException("Data on the Dadata service was not found.", 2); } return $this->fieldSchema($data, 'json'); } public function getResult($data, $format) { if ($data) { $resp = json_decode($data)->suggestions; $data = null; if (count($resp) > 1) { foreach ($resp as $r) { if ($r->data->inn == $this->query) { $data = $r; break; } } } elseif (count($resp) == 1) { $data = $resp[0]; } if ($format == 'json') { return $this->getResultJSON($data); } if ($format == 'xml') { return $this->getResultXML($data); } } return false; } public function getQuery($query) { $this->query = $query; return $this->query; } public function getFormat($format) { $this->format = $format; return $this->format; } public function getToken() { $this->token = $this->getConfig('DaDataRuToken', 'Online'); if (!$this->token) { return false; } return $this->token; } public function fieldSchema($data, $format) { $pattern = [ 'data-name-short' => 'PARTNER_NAME', 'data-name-short_with_opf' => 'PARTNER_OFFICIALNAME', 'data-opf-short' => 'PARTNER_OWNERSHIP', 'data-opf-full' => 'PARTNER_OWNERSHIP_FULL', 'data-management-post' => 'PARTNER_DIRECTORPOSITION', 'data-management-name' => 'PARTNER_BOSS', 'data-name-full' => 'PARTNER_BOSS_IP', 'data-inn' => 'PARTNER_INN', 'data-ogrn' => 'PARTNER_OGRN', 'data-kpp' => 'PARTNER_KPP', 'data-okved' => 'PARTNER_OKONH', 'data-okpo' => 'PARTNER_OKPO', 'data-state-registration_date' => 'PARTNER_REGDATE', 'data-state-liquidation_date' => 'PARTNER_LIQUIDATION_DATE', 'data-address-unrestricted_value' => 'PARTNER_ADDRESS', 'data-address-value' => 'PARTNER_PADDRESS', 'data-address-data-postal_code' => 'PARTNER_ADDRESSCODE', 'data-address-data-geo_lat' => 'PARTNER_GEOLAT', 'data-address-data-geo_lon' => 'PARTNER_GEOLON', 'data-address-data-country' => 'PARTNER_COUNTRY', 'data-address-data-region_with_type' => 'PARTNER_REGION', 'data-address-data-city' => 'PARTNER_TOWN', 'data-address-data-street_with_type' => 'PARTNER_STREET', 'data-address-data-house' => 'PARTNER_HOUSE', 'data-address-data-house_type' => 'PARTNER_HOUSE_TYPE', ]; $data = json_encode($data); $data = json_decode($data, true); $address = ''; $hook_PARTNER_OFFICIALNAME = false; $hook_PARTNER_ADDRESS = false; $hook_PARTNER_BOSS = false; $hook_PARTNER_IP_ADDRESS = false; $schema = []; foreach ($pattern as $dadataf => $samof) { $gdata = $data; $keys = explode('-', $dadataf); $value = ''; $count = count($keys); for ($i = 0; $i < $count; $i++) { if (isset($gdata[$keys[$i]])) { if (is_array($gdata[$keys[$i]])) { $gdata =& $gdata[$keys[$i]]; } else { $value = $gdata[$keys[$i]]; } } } if ($samof == 'PARTNER_ADDRESS') { $address = $value; $value = (isset($gdata['data']['postal_code'])) ? $gdata['data']['postal_code'] . ' ' . $value : $value; } if ($samof == 'PARTNER_PADDRESS') { $value = $address; $hook_PARTNER_ADDRESS = true; } if ($samof == 'PARTNER_OWNERSHIP' && (mb_convert_encoding($value, 'windows-1251', 'utf-8') == 'ИП')) { $hook_PARTNER_OFFICIALNAME = true; $hook_PARTNER_BOSS = true; $hook_PARTNER_IP_ADDRESS = true; } switch ($format) { case 'xml': if ($samof == 'PARTNER_REGDATE' || $samof == 'PARTNER_LIQUIDATION_DATE') { $value = Samo_Datetime::parse($value)->format('sql'); } $schema[$samof] = $value; break; default: $schema[$dadataf]['field'] = $samof; $schema[$dadataf]['value'] = $value; break; } } if ($hook_PARTNER_OFFICIALNAME) { switch ($format) { case 'xml': $newName = explode(' ', $schema['PARTNER_OFFICIALNAME']); $schema['PARTNER_NAME'] = $newName[0] . ' ' . $newName[1]; break; default: $newName = explode(' ', $schema['data-name-short_with_opf']['value']); $schema['data-name-short']['value'] = $newName[0] . ' ' . $newName[1]; break; } } if ($hook_PARTNER_ADDRESS) { if ($hook_PARTNER_IP_ADDRESS) { switch ($format) { case 'xml': $schema['PARTNER_PADDRESS'] = iconv('windows-1251', 'utf8', 'В соответствии с регистрацией'); break; default: $schema['data-address-value']['value'] = iconv('windows-1251', 'utf8', 'В соответствии с регистрацией'); break; } } else { switch ($format) { case 'xml': $schema['PARTNER_PADDRESS'] = $schema['PARTNER_STREET'] . ', ' . $schema['PARTNER_HOUSE_TYPE'] . '. ' . $schema['PARTNER_HOUSE']; break; default: $schema['data-address-value']['value'] = $schema['data-address-data-street_with_type']['value'] . ', ' . $schema['data-address-data-house_type']['value'] . '. ' . $schema['data-address-data-house']['value']; break; } } } if ($hook_PARTNER_BOSS) { switch ($format) { case 'xml': $schema['PARTNER_BOSS'] = $schema['PARTNER_BOSS_IP']; break; default: $schema['data-management-name']['value'] = $schema['data-name-full']['value']; break; } } return $schema; } } class DadataClientException extends Samo_Exception { public function getError($format = 'json') { if ($format == 'xml') { echo "<result><status>{$this->getCode()}</status><message>{$this->getMessage()}</message></result>"; } if ($format == 'json') { Samo_Registry::get('logger')->err($this->getMessage()); } } } 