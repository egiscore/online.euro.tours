<?php
 class Export_Model extends Samo { protected $oauth = null; public function __construct(Samo_Config $config = null) { parent::__construct($config); $this->defaults['TYPE'] = Samo_Request::find('type'); $this->defaults['SOURCETYPE'] = Samo_Request::strval('sourcetype', 1, 16); $this->defaults['LASTSTAMP'] = Samo_Utils::ifs(Samo_Request::hexval('laststamp'), '0x0000000000000001'); $this->defaults['DELSTAMP'] = Samo_Utils::ifs(Samo_Request::hexval('delstamp'), '0x0000000000000001'); $this->defaults['CATALOG'] = Samo_Request::intval('catalog'); $this->defaults['TOWN'] = Samo_Request::intval('town'); $this->defaults['TOWNFROM'] = Samo_Request::intval('townfrom'); $this->defaults['STATE'] = Samo_Utils::ifs(Samo_Request::intval('state'), 0); $this->defaults['STAR'] = Samo_Request::intval('star'); $this->defaults['HOTEL'] = Samo_Request::intval('hotel'); $this->defaults['CHECKIN'] = Samo_Utils::ifs(Samo_Request::date('checkin'), Samo_Datetime::parse('today')); $this->defaults['DATEBEG'] = Samo_Utils::ifs(Samo_Request::date('datebeg'), Samo_Datetime::parse('today')); $this->defaults['DATEEND'] = Samo_Utils::ifs(Samo_Request::date('dateend'), Samo_Datetime::parse('+7 day')); $this->defaults['NIGHTSMIN'] = Samo_Request::intval('nightsmin'); $this->defaults['NIGHTSMAX'] = Samo_Request::intval('nightsmax'); $this->defaults['NIGHTS'] = Samo_Request::intval('nights'); $this->defaults['SUMMIN'] = Samo_Utils::ifs(Samo_Request::intval('summin'), 0); $this->defaults['SUMMAX'] = Samo_Utils::ifs(Samo_Request::intval('summax'), 0); $this->defaults['ADULT'] = Samo_Utils::ifs(Samo_Request::intval('adult'), 2); $this->defaults['CHILD'] = Samo_Utils::ifs(Samo_Request::intval('child'), 0); $this->defaults['DATA'] = Samo_Utils::ifs(Samo_Request::intval('data'), 0); $this->defaults['CLAIM'] = Samo_Utils::ifs(Samo_Request::intval('claim'), 0); $this->defaults['SUMMIN'] = Samo_Utils::ifs(Samo_Request::floatval('summin'), 0); $this->defaults['SUMMAX'] = Samo_Utils::ifs(Samo_Request::floatval('summax'), 0); $this->defaults['TOURTYPE'] = 34; $this->defaults['XML'] = (Samo_Request::is_post()) ? file_get_contents('php://input') : null; $this->defaults['AES_KEY'] = "3b2968ed99379acb81e2f1051e5c1039"; $this->defaults['LOGIN'] = (isset($_POST['login'])) ? $_POST['login'] : ''; $this->defaults['PASSWORDDIGEST'] = Samo_Request::post('passwordDigest'); $this->defaults['SID'] = Samo_Request::get('sid'); $this->defaults['INCLIST'] = Samo_Request::integers('inclist'); } public function auths() { $return = false; if (!empty($this->defaults['LOGIN']) && !empty($this->defaults['PASSWORDDIGEST'])) { $aes = new Samo_CryptAes(); $aes->setKey($this->defaults['AES_KEY']); $data = $aes->decrypt(base64_decode(rawurldecode($this->defaults['PASSWORDDIGEST']))); $password = substr($data, 0, -32); $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . "." . $this->OFFICEDB . ".dbo.sl_online_st_get_sid", array( 'alias' => $this->defaults['LOGIN'], 'psw' => $password, 'xml' => 1 ) ); if (($result = $this->db->fetchRow($sql)) && isset($result['xml'])) { $return = $result['xml']; } } return $return; } public function setOauth(Samo_OAuth2 $oauth) { $this->oauth = $oauth; } public function references() { switch ($this->defaults['TYPE']) { case 'townstate': return $this->townstate(); case 'currentstamp': return $this->currentstamp(); default: return $this->types(); } } public function deposits() { $return = false; if (!empty($this->defaults['TYPE'])) { $db = $this->db; switch ($this->defaults['TYPE']) { case "DEPOSIT_LIST": case "UNPAID_RES": case "USE_DEPOSIT": $sql = $this->db->formatExec( "<OFFICEDB>.dbo.sl_gate_action_deposit", array( 'action' => $this->defaults['TYPE'], 'sid' => $this->defaults['SID'], 'post_params' => ($this->defaults['TYPE'] == "USE_DEPOSIT") ? $this->defaults['XML'] : '' ) ); break; default: $return = false; } if (($result = $db->fetchRow($sql)) && isset($result['xml'])) { $return = $result['xml']; } } return $return; } protected function types() { $return = false; if (!empty($this->defaults['TYPE'])) { $db = $this->db; switch ($this->defaults['TYPE']) { case "getclaim": $sql = $this->db->formatExec( "<OFFICEDB>.dbo.sl_online_st_get_claim_xml", array( 'Claim' => $this->defaults['CLAIM'], 'Sid' => $this->defaults['SID'], 'Xml' => 0, 'Developer' => 0 ) ); break; case "claimlist": $sql = $this->db->formatExec( "<OFFICEDB>.dbo.sl_online_st_get_claim_list", array( 'Inc_List' => implode(',', $this->defaults['INCLIST']), 'Sid' => $this->defaults['SID'], 'Xml' => 0, 'Developer' => 0 ) ); break; case "spolist": $sql = $this->db->formatExec( "<OFFICEDB>.dbo.sl_gate_GetSpoListByTownState", array( 'Town' => $this->defaults['TOWN'], 'State' => $this->defaults['STATE'], 'stateFrom' => $this->getStateFrom(), ) ); break; case "fit": $sql = $this->db->formatExec( "<OFFICEDB>.dbo.up_fit_getprices", array( 'State' => $this->defaults['STATE'], 'Town' => $this->defaults['TOWN'], 'Star' => $this->defaults['STAR'], 'DateBeg' => $this->defaults['DATEBEG'], 'DateEnd' => $this->defaults['DATEEND'], 'NightsMin' => $this->defaults['NIGHTSMIN'], 'NightsMax' => $this->defaults['NIGHTSMAX'], 'SumMin' => $this->defaults['SUMMIN'], 'SumMax' => $this->defaults['SUMMAX'], 'TourType' => $this->defaults['TOURTYPE'], ) ); break; case "fithotel": $sql = $this->db->formatExec( "<OFFICEDB>.dbo.up_fit_getprices_hotel", array( 'State' => $this->defaults['STATE'], 'Town' => $this->defaults['TOWN'], 'Star' => $this->defaults['STAR'], 'DateBeg' => $this->defaults['DATEBEG'], 'DateEnd' => $this->defaults['DATEEND'], 'Adult' => $this->defaults['ADULT'], 'Child' => $this->defaults['CHILD'], 'SumMin' => $this->defaults['SUMMIN'], 'SumMax' => $this->defaults['SUMMAX'], ) ); break; case "bookfit": $auth = $this->oauth->samo_auth(); $sql = $this->db->formatExec( "<OFFICEDB>.dbo.up_fit_create_reservation", array( 'Partpass' => $auth['PartPassInc'], 'Claim' => $this->defaults['XML'], ) ); break; case "price": $sql = $this->db->formatExec( "<OFFICEDB>.dbo.up_gate_GetPrice", array( 'townfrom' => $this->defaults['TOWNFROM'], 'state' => $this->defaults['STATE'], 'catalog' => $this->defaults['CATALOG'], 'data' => $this->defaults['DATA'], 'nights' => $this->defaults['NIGHTS'], 'checkin' => $this->defaults['CHECKIN'], 'stateFrom' => $this->getStateFrom(), ) ); break; case "hotelattributes": $sql = $this->db->formatExec( "<OFFICEDB>.dbo.up_gate_GetHotelAttributes", array( 'LastStamp' => $this->defaults['LASTSTAMP'], 'DelStamp' => $this->defaults['DELSTAMP'], 'xml' => 1, 'hotel' => $this->defaults['HOTEL'] ) ); break; case "book_external": $sql = $this->db->formatExec( "<OFFICEDB>.dbo.sl_book_external", array( 'Claim' => $this->defaults['XML'], 'Sid' => $this->defaults['SID'], 'Type' => $this->defaults['SOURCETYPE'], ) ); break; default: $sql = $this->db->formatExec( "<OFFICEDB>.dbo.sl_gate_GetRepository", [ 'Table' => $this->defaults['TYPE'], 'LastStamp' => $this->defaults['LASTSTAMP'], 'DelStamp' => $this->defaults['DELSTAMP'], 'Xml' => 1, ] ); break; } if (($result = $db->fetchRow($sql)) && isset($result['xml'])) { $return = $result['xml']; } } return $return; } private function getStateFrom() { $stateFrom = defined('STATEFROM') ? STATEFROM : null; if (!$stateFrom) { if (defined('TOWNSFROM_CACHE') && file_exists(TOWNSFROM_CACHE)) { $TOWNSFROM = array(); include TOWNSFROM_CACHE; foreach ($TOWNSFROM as $data) { if ($data['townFrom'] == $this->defaults['TOWNFROM'] && $data['state'] == $this->defaults['STATE']) { $stateFrom = $data['stateFrom']; break; } } } } return $stateFrom ? $stateFrom : 0; } protected function currentstamp() { $sql = "<OFFICEDB>.dbo.sl_gate_GetCurrentStamp @xml = 1"; $result = $this->db->fetchRow($sql); return (isset($result['xml'])) ? $result['xml'] : false; } protected function townstate() { $return = false; if (defined('TOWNSFROM_CACHE') && file_exists(TOWNSFROM_CACHE)) { $TOWNSFROM = array(); include TOWNSFROM_CACHE; $result = array(); foreach ($TOWNSFROM as $data) { $result[] = '<townstate town="' . $data['townFrom'] . '" state="' . $data['state'] . '"/>'; } $return = implode('', $result); } return $return; } } 