<?php
 class Fondy { protected $merchantID = ''; protected $password = ''; const PAY_URL = 'https://api.fondy.eu/api/checkout/redirect/'; const STATUS_URL = 'https://api.fondy.eu/api/status/order_id'; const CAPTURE_URL = 'https://api.fondy.eu/api/capture/order_id'; const REVERSE_URL = 'https://api.fondy.eu/api/reverse/order_id'; public function __construct($merchantID, $password) { $this->merchantID = $merchantID; $this->password = $password; } protected function _sign($data) { foreach (['signature', 'response_signature_string'] as $u) { if (isset($data[$u])) { unset($data[$u]); } } ksort($data); foreach ($data as $i => $j) { if ($j === '') { unset($data[$i]); } } $data = array_values($data); array_unshift($data, $this->password); $data = implode('|', $data); return sha1($data); } public function getFormData($orderId, $amount, $currency, $description, $backURL = '', $preAuth = false) { $return = [ 'order_id' => (string)$orderId, 'merchant_id' => (string)$this->merchantID, 'order_desc' => (string)$description, 'amount' => (string)($amount * 100), 'currency' => (string)$currency, 'preauth' => $preAuth ? 'Y' : 'N', ]; if ($preAuth) { $return['merchant_data'] = json_encode(['preauth' => true]); } if ($backURL) { $return['response_url'] = (string)$backURL; } $return['signature'] = $this->_sign($return); return $return; } protected function _request($url, $post) { $post['signature'] = $this->_sign($post); $res = Samo_Curl::request($url, $post); if ($res === false) { throw new Samo_Exception($this->messages('ACQUIRING_RESPONSE_FAILED')); } parse_str($res, $res); if (isset($res['response_status']) && $res['response_status'] == 'failure') { throw new Fondy_Exception((isset($res['error_message']) && $res['error_message']) ? $res['error_message'] : $this->messages('ACQUIRING_UNKNOWN_ERROR'), isset($res['error_code']) ? (int)$res['error_code'] : 0); } return $res; } public function getStatus($orderId) { $post = [ 'order_id' => $orderId, 'merchant_id' => $this->merchantID, ]; $res = $this->_request(static::STATUS_URL, $post); $status = $res['order_status']; if ($res['merchant_data']) { $tmp = json_decode($res['merchant_data'], true); if (isset($tmp['preauth']) && $tmp['preauth'] && $status == 'approved') { $status = 'hold'; } } return $status; } public function capture($orderId, $amount, $currency) { $post = [ 'order_id' => $orderId, 'merchant_id' => $this->merchantID, 'amount' => $amount * 100, 'currency' => $currency, ]; $res = $this->_request(static::CAPTURE_URL, $post); return $res['capture_status']; } public function reverse($orderId, $amount, $currency) { $post = [ 'order_id' => $orderId, 'merchant_id' => $this->merchantID, 'amount' => $amount * 100, 'currency' => $currency, ]; $res = $this->_request(static::REVERSE_URL, $post); return $res['reverse_status']; } protected function messages($key) { static $messages = null; if ($messages === null) { $registry = Samo_Registry::instance(); if (isset($registry['messages'])) { $messages = $registry['messages']; } else { include _ROOT . 'includes/messages/messages_' . Samo_Request::lang() . '.php'; } } return isset($messages[$key]) ? $messages[$key] : $key; } } 