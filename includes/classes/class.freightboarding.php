<?php
 class FreightBoarding extends Samo { private $peoples = null; private $freight = null; private $datebeg = null; private $dateend = null; private $class = null; private $claim = null; private $tour = null; private $cdate = null; private $seats = []; private $last_error = null; public function setPeoples($peoples) { $this->peoples = $peoples; } public function setFreight($freight) { $this->freight = $freight; } public function setDateBeg(Samo_Datetime $datebeg) { $this->datebeg = $datebeg; } public function setDateEnd(Samo_Datetime $dateend) { $this->dateend = $dateend; } public function setClass($class) { $this->class = $class; } public function setClaim($claim) { $this->claim = $claim; } public function setTour($value) { $this->tour = $value; } public function setCdate($value) { $this->cdate = $value; } public function getLastError() { return $this->last_error; } public function boarding() { if (null === $this->freight || null === $this->datebeg || null === $this->dateend || null === $this->class || null === $this->tour) { throw new InvalidArgumentException('Unable to fetch freight boarding information', 1); } $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_4_board_list', [ 'Freight' => $this->freight, 'DateBeg' => $this->datebeg, 'DateEnd' => $this->dateend, 'Class' => $this->class, 'Tour' => $this->tour, 'CDate' => $this->cdate, ] ); $query = $this->db->query($sql); $result = $this->db->fetchAll($query); if ($result) { $return = []; $messages = Samo_Registry::get('messages'); $opeoples = array_map( function ($people) { return (array_key_exists('opeople', $people)) ? $people['opeople'] : -1; }, $this->peoples ); foreach ($result as $cell) { if (null !== $this->claim && $this->claim == $cell['ClaimInc'] && in_array($cell['OpeopleInc'], $opeoples)) { $this->seats[$cell['PeopleInc']] = $cell['Inc']; } if (!isset($return[$cell['Wagon']])) { $return[$cell['Wagon']] = []; } if (!isset($return[$cell['Wagon']][$cell['Row']])) { $return[$cell['Wagon']][$cell['Row']] = []; } if ($cell['FrPlacementTypeInc'] > 2) { $cell['CellName'] = $messages['FRPLACEMENT_TYPE_' . $cell['FrPlacementTypeInc']]; } if ($cell['FrPlacementTypeInc'] == 1 && $this->class != $cell['FrPlacementClass']) { $cell['FrPlacementTypeInc'] = 9; $cell['FrPlacementTypeName'] = $messages['FRPLACEMENT_OTHER_CLASS']; } $return[$cell['Wagon']][$cell['Row']][$cell['Col']] = $cell; } $freight = $this->db->fetchRow($query); $this->db->nextResult($query); $frplacement = $this->db->fetchRow($query); $this->db->freeResult($query); return [ 'boarding' => $return, 'peoples' => $this->peoples, 'freight' => $freight, 'seats' => !empty($this->seats) ? $this->seats : null, 'description' => $frplacement, 'FrPlacementClass' => $this->class, ]; } else { return false; } } public function save($opeople, $frplacement = null) { if (null === $opeople) { throw new InvalidArgumentException('Unable to save freight boarding information'); } if (0 == $frplacement) { $frplacement = null; } $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_board_save', [ 'Opeople' => $opeople, 'PlacementCode' => $frplacement, 'UserCode' => $this->internet_user(), 'PartPass' => $this->getPartPassInc(), 'ip' => Samo_Request::remote_addr(), 'LangId' => Samo_Request::langid(), ] ); if (false !== $res = $this->db->fetchRow($sql)) { if ($res['Result'] == 0) { return true; } $this->last_error = $res['error']; } return false; } } 