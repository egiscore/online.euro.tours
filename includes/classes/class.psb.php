<?php
class Psb { const PAY_URL = 'https://3ds.payment.ru/cgi-bin/cgi_link'; protected $terminal = ''; protected $merchant = ''; protected $merchantName = ''; protected $key = ''; public function __construct($terminal, $merchant, $merchantName, $key) { $this->terminal = $terminal; $this->merchant = $merchant; $this->merchantName = $merchantName; $this->key = $key; } public function getFormData($amount, $currency, $order, $description, $backUrl, $trType = 1, $rrn = '', $int_ref = '') { $amount = sprintf('%.2f', $amount); $ts = new DateTime('now', new DateTimeZone('UTC')); $nonce = Samo_Utils::randomString(32, 'hexdec'); $desc = Samo_String::set($description)->utf8()->__toString(); $ts = $ts->format('YmdHis'); if ($trType == 22 || $trType == 21) { $return = [ 'ORDER' => $order, 'AMOUNT' => $amount, 'CURRENCY' => $currency, 'ORG_AMOUNT' => $amount, 'TRTYPE' => $trType, 'TERMINAL' => $this->terminal, 'BACKREF' => $backUrl, 'TIMESTAMP' => $ts, 'NONCE' => $nonce, 'RRN' => $rrn, 'INT_REF' => $int_ref, ]; $arr = ['ORDER', 'AMOUNT', 'CURRENCY', 'ORG_AMOUNT', 'RRN', 'INT_REF', 'TRTYPE', 'TERMINAL', 'BACKREF', 'EMAIL', 'TIMESTAMP', 'NONCE']; } else { $return = [ 'AMOUNT' => $amount, 'CURRENCY' => $currency, 'ORDER' => $order, 'DESC' => $desc, 'TERMINAL' => $this->terminal, 'MERCH_NAME' => $this->merchantName, 'TRTYPE' => $trType, 'MERCHANT' => $this->merchant, 'NONCE' => $nonce, 'BACKREF' => $backUrl, 'TIMESTAMP' => $ts, ]; $arr = ['AMOUNT', 'CURRENCY', 'ORDER', 'MERCH_NAME', 'MERCHANT', 'TERMINAL', 'EMAIL', 'TRTYPE', 'TIMESTAMP', 'NONCE' ,'BACKREF']; } $return['P_SIGN'] = $this->sign($return, $arr); return $return; } public function sign($data, $fields) { $str = ''; foreach ($fields as $f) { $str .= (isset($data[$f]) && $data[$f] !== '') ? mb_strlen($data[$f]) . $data[$f] : '-'; } return strtoupper(hash_hmac('sha1', $str, pack('H*', $this->key))); } public function reverse($amount, $currency, $order, $backUrl = '', $rrn = '', $int_ref = '') { $this->request($this->getFormData($amount, $currency, $order, '', $backUrl, 22, $rrn, $int_ref)); return $this; } public function capture($amount, $currency, $order, $backUrl = '', $rrn = '', $int_ref = '') { $this->request($this->getFormData($amount, $currency, $order, '', $backUrl, 21, $rrn, $int_ref)); return $this; } protected function request($params) { $registry = Samo_Registry::instance(); $oldLogger = null; if (isset($registry['logger'])) { $oldLogger = $registry['logger']; } $logger = Samo_Loader::load_object('WSPAY_Logger', $oldLogger); $logger->init(); $logger->setMethod(__METHOD__); if (isset($params['ORDER'])) { $logger->setInumber($params['ORDER']); } $registry['logger'] = $logger; try { Samo_Curl::request(static::PAY_URL, $params, 'POST', ['Host: ' . parse_url(self::PAY_URL, PHP_URL_HOST), 'User-agent: SAMO', 'Accept: */*', 'Content-Type: application/x-www-form-urlencoded']); } catch (Exception $e) { $logger->exception($e); } $logger->commit(); if ($oldLogger) { $registry['logger'] = $oldLogger; } return $this; } public function getPayURL() { return static::PAY_URL; } } 