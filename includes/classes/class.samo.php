<?php
 class Samo { protected $db = null; public $defaults = array(); protected $OFFICEDB = null; protected $CATALOGDB = null; protected $ONLINEDB = null; protected $OFFICE_SQLSERVER = null; protected $auth_required = false; public $TOWNFROMINC = null; public $STATEINC = null; protected $cache = null; protected $config = null; private $crossRates = null; public $action = null; protected $frclasses = ['econom' => 1, 'busines' => 0, 'comfort' => 0, 'premium' => 0]; const MAXLONGINT = -2147483647; protected $_cachePartner = array(); protected $_cacheRates = null; protected $api = array(); protected $api_name = null; protected $andr_root = 'http://st.samo.travel/'; protected $callback = false; protected $user_uri = null; public $lng = null; protected $internet_user = null; public $external = false; const TOWNFROMHOTELINC = 1; const PRINT_JOB_TIMEOUT = 120; public function __construct(Samo_Config $config = null) { $this->config = $config ? $config : Samo_Config::factory(); $this->db = Samo_Registry::get('db'); $this->cache = Samo_Registry::get('cache'); $this->db_init(); $this->lng = Samo_Request::langid(); $instance = Samo_Registry::instance(); if (!$instance->offsetExists('embeded')) { Samo_Registry::set('embeded', false); } } protected function db_init() { $tmp = Samo_Registry::get('ServerSettings'); $this->CATALOGDB = $tmp['onlineCatalogDB']; $this->OFFICEDB = $tmp['officeSamoDB']; $this->ONLINEDB = $tmp['onlineSamoDB']; $this->OFFICE_SQLSERVER = $tmp['officeSamoAlias']; $this->TOWNFROMINC = $tmp['townFrom']; $this->STATEINC = $tmp['state']; } public function find_available_server() { if ($db = find_available_server()) { $this->db = $db; $srv = Samo_Registry::get('ServerSettings'); $this->db_init(); $cookie_path = defined('COOKIE_PATH') ? COOKIE_PATH : WWWROOT; $response = Samo_Registry::get('response'); $response->save_pref('pSTATEINC', $srv['state'], $cookie_path); $response->save_pref('pTOWNFROMINC', $srv['townFrom'], $cookie_path); } return $db; } public function internet_user() { return $this->config->get('INTERNET_USER'); } public function calc_stats() { $registry = Samo_Registry::instance(); $action = $this->action; if ('embed' == $this->action) { if ($embed_action = Samo_Request::get('embed_action')) { $action = $embed_action; } } if ('proxy_action' == $this->action) { if ($proxy_action = Samo_Request::get('proxy_action')) { $action = $proxy_action; } } if ('default_action' == $this->action && Samo_Request::get('DOLOAD')) { $action = 'DOLOAD'; } $sql = $this->db->formatExec( '<ONLINEDB>.dbo.up_WEB_3_online_stats', [ 'module' => $registry['module']['module'], 'action' => $action, 'client' => ip2long(Samo_Request::remote_addr()), 'oauth_token' => Samo_Request::get('oauth_token'), ] ); $this->db->lazyFetch( $sql, function ($return) { $probably_robot = false; if (false !== $return) { $record = array_shift($return); if (isset($record['result']) && $record['result'] > 0) { $probably_robot = true; } } if (!$probably_robot && defined('GEOIP_CHECK')) { $allowed_countries = explode(',', GEOIP_CHECK); $sxgeo = new SxGeo(_ROOT . 'vendor/sxgeo/SxGeo.dat'); $country = $sxgeo->getCountry(Samo_Request::remote_addr()); if ($country && !in_array($country, $allowed_countries)) { $probably_robot = true; } } if ($probably_robot) { Samo_Registry::get('controller')->check_antibot(); } } ); } public function auth_required() { return $this->auth_required; } public function construct() { } public function api($class = null, $set = true) { if (null === $this->api_name) { if (null === $class) { $this->api_name = str_replace( ['custom_', '_model'], ['', '_api'], strtolower(get_class($this)) ); } else { $this->api_name = $class; } } if (!isset($this->api[$this->api_name])) { try { $this->api[$this->api_name] = Samo_Loader::load_object(ucwords($this->api_name, '_'), $this->config, array($this, 'api_callback'), Samo_Registry::get('embeded')); } catch (Exception $e) { $messages = Samo_Registry::get('messages'); throw new Samo_Exception($messages['BROKEN_CONFIG']); } } if ($set) { $this->api[$this->api_name]->setParams($this->defaults); } return $this->api[$this->api_name]; } public function api_callback($api) { $this->defaults = array_merge($this->defaults, $api->defaults); if ((null !== $api->CATALOGDB || null !== $api->TOWNFROMINC || null !== $api->STATEINC) && ($this->CATALOGDB != $api->CATALOGDB || $this->TOWNFROMINC != $api->TOWNFROMINC || $this->STATEINC != $api->STATEINC)) { $this->db_init(); } } public function getConfig($param, $module = 'online_config', $default = null) { $result = $this->config($param, $module); if (null !== $result) { return $result; } if (null === $result && null === $default) { $messages = Samo_Registry::get('messages'); throw new Samo_Exception($messages['BROKEN_CONFIG']); } return $default; } public function loadData($name) { $method = 'get' . $name; if (method_exists($this, $method)) { return $this->{$method}(); } return ''; } public function getPartner() { if (isset($_SESSION['samo_auth'])) { return $_SESSION['samo_auth']['Partner']; } return false; } public function getPartnerEmail() { $result = array(); if (isset($_SESSION['samo_auth'])) { $pinfo = $_SESSION['samo_auth']; if (isset($pinfo['PartnerEmail1'])) { $matches = array(); $blackMagick = '~(?<![a-z0-9_\.\-@])([a-z0-9_\-]+(?:\.[a-z0-9_\-]+)*@(?:[a-z0-9_\-]+\.)+[a-z0-9_\-]+)(?![a-z0-9_\.\-@])~i'; if (!preg_match_all($blackMagick, $pinfo['PartnerEmail1'], $matches, PREG_PATTERN_ORDER)) { preg_match_all($blackMagick, $pinfo['PartnerEmail1'], $matches, PREG_PATTERN_ORDER); } if (count($matches)) { foreach ($matches[1] as $email) { $email = trim($email); if (!in_array($email, $result)) { $result[] = $email; } } $result = implode(', ', $result); return $result; } } } return false; } public function getPartPassInc() { if (isset($_SESSION['samo_auth'])) { return $_SESSION['samo_auth']['PartPassInc']; } return false; } public function _getPartnerInfo($inc, $type = 'Partner') { $return = array(); if (!isset($this->_cachePartner[$inc])) { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_partner_GetInfo', ['partner' => $inc]); $this->_cachePartner[$inc] = $this->db->fetchRow($sql); } if ($this->_cachePartner[$inc]) { if ($type) { foreach ($this->_cachePartner[$inc] as $key => $value) { $return[$type . '_' . $key] = trim($value); } } else { $return = $this->_cachePartner[$inc]; } } return $return; } public function getPartnerInfo($inc) { return $this->_getPartnerInfo($inc); } public function sendInMessage($type, $claim, $message) { $this->db->exec( '<OFFICEDB>.dbo.up_SendInMessage', [ 'TypeInMessage' => (int)$type, 'Message' => $message, 'Claim' => (int)$claim, ] ); } public function townFrom($townfrominc = null) { if (null !== $townfrominc) { $this->TOWNFROMINC = $townfrominc; $this->defaults['TOWNFROMINC'] = $townfrominc; } return $this->TOWNFROMINC; } public function getTOWNFROMINC() { $result = array(); if (false !== ($towns = getServers())) { $order_by = ($this->getConfig('TOWN_ORDER_BY_NAME')) ? 'Name' : 'LName'; $townFrom = $this->townFrom(); $selected_exists = false; foreach ($towns as $town) { if (!isset($result[$town['town' . $order_by]])) { $key = $town['town' . $order_by]; if (!isset($result[$key])) { $item = array('selected' => false); if (!$selected_exists && $townFrom == $town['townFrom']) { $item['selected'] = true; $selected_exists = true; } $item['TownInc'] = $town['townFrom']; $item['TownName'] = $town['townName']; $item['TownLName'] = $town['town' . $order_by]; $result[$key] = $item; } } } ksort($result); if (!$selected_exists && count($result)) { $result[0]['selected'] = true; $this->townFrom($result[0]['TownInc']); } } return $result; } public function state($stateinc = null) { if (null !== $stateinc) { $this->STATEINC = $stateinc; $this->defaults['STATEINC'] = $stateinc; } return $this->STATEINC; } public function getSTATEINC() { $result = array(); $default = $this->defaults['STATEINC']; $selected_exists = false; if (false !== ($states = getServers())) { $order_by = ($this->getConfig('STATE_ORDER_BY_NAME')) ? 'Name' : 'LName'; foreach ($states as $state) { if (!isset($result[$state['state' . $order_by]])) { if ($this->TOWNFROMINC == $state['townFrom']) { if (!$selected_exists) { $selected_exists = $item['selected'] = ($state['state'] == $default); } else { $item['selected'] = false; } $item['Inc'] = $state['state']; $item['Name'] = $state['stateName']; $item['LName'] = $state['state' . $order_by]; $result[$item[$order_by]] = $item; } } } ksort($result); $result = array_values($result); if (!$selected_exists && count($result)) { $result[0]['selected'] = true; $this->state($result[0]['Inc']); } } return $result; } public function defaults($var) { return (isset($this->{$var})) ? $this->{$var} : ((isset($this->defaults[$var])) ? $this->defaults[$var] : ''); } public function getCurrencyRates() { if (!$this->crossRates) { $cache_key = 'CURRENCY_RATE'; if (!$this->crossRates = $this->cache->get($cache_key)) { $cross_rates = array(); $sql = '<ONLINEDB>.dbo.up_WEB_3_CurrencyRates'; $res = $this->db->query($sql); if ($this->db->numRows($res)) { while (false !== ($row = $this->db->fetchRow($res))) { if (!isset($cross_rates[$row['curr_from']])) { $cross_rates[$row['curr_from']] = array( 'Inc' => $row['curr_from'], 'Name' => $row['alias_from'], 'Date' => $row['date'] ); } $cross_rates[$row['curr_from']][$row['curr_to']] = $row['rate']; } } ksort($cross_rates); $this->crossRates = $this->cache->set($cache_key, $cross_rates); } } return $this->crossRates; } public function convertPrice($price, $currency_from, $currency_to, $currname = '') { if ($currency_from != $currency_to) { if (null === $this->_cacheRates) { $this->_cacheRates = $this->getCurrencyRates(); } if (null !== $currname) { foreach ($this->_cacheRates as $data) { if ($data['Inc'] == $currency_to) { $currname = $data['Name']; break; } } } if (!isset($this->_cacheRates[$currency_from])) { return "???"; } $price = ($currency_to == $this->_cacheRates[$currency_from]['Inc']) ? $price : $price * $this->_cacheRates[$currency_from][$currency_to]; } $price = $this->roundPrice($price); return (null !== $currname) ? sprintf("%s %s", $price, $currname) : $price; } public function checkAuth($login, $password) { if (!empty($login) && !empty($password)) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_partner_Code', [ 'Alias' => $login, 'Psw' => $password, 'UserCode' => $this->internet_user(), ] ); if (false !== ($auth = $this->db->fetchRow($sql))) { if (isset($auth['PartPassInc'])) { $auth['permissions'] = $this->load_permissions($auth['PartPassInc']); return $auth; } if (isset($auth['error'])) { throw new TooManyLoginFailures(); } } } return false; } public function checkCodeAuth($code) { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_oauth_code_check', ['Code' => $code]); $result = $this->db->fetchRow($sql); if (false !== $result) { parse_str($result['scope'], $scope); if ($scope) { if (isset($scope['partner']) && isset($result['partpass'])) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_partner_Inc', [ 'Partner' => $scope['partner'], 'PartPass' => $result['partpass'], ] ); if ((false !== ($auth = $this->db->fetchRow($sql))) && isset($auth['PartPassInc'])) { $auth['permissions'] = $this->load_permissions($auth['PartPassInc']); $auth['redirect_uri'] = $result['redirect_uri']; $result['auth'] = $auth; } } elseif (isset($scope['entity']) && in_array($scope['entity'], ['BUYER', 'CLAIM_PHYS_BUYER'])) { $claim = 'BUYER' == $scope['entity'] && isset($scope['CLAIM']) ? $scope['CLAIM'] : (isset($scope['inc']) ? $scope['inc'] : false); if ($claim) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_Logon_Person', [ 'Claim' => $claim, 'Pnumber' => 'OneTimePassword', 'skip_passport_check' => 1, ] ); if ((false !== ($auth = $this->db->fetchRow($sql))) && isset($auth['PartPassInc'])) { $auth['ClaimList'] = explode(',', $auth['ClaimList']); $auth['permissions'] = $this->load_permissions($auth['PartPassInc']); $auth['redirect_uri'] = $result['redirect_uri']; $result['auth'] = $auth; } } else { $result = false; } } } return $result; } return false; } public function checkAgencyAndrAuth($crypted, $client_id) { $sql = $this->db->formatExec( '<OFFICEDB>.[dbo].[up_WEB_3_oauth_ws]', [ 'Client_id' => $client_id, 'Nonce' => uniqid(), 'Created' => Samo_Datetime::now(), ] ); if ($data = $this->db->fetchRow($sql)) { $crypter = new Samo_CryptAes(); $crypter->setKey(strtolower(SAMOGUID . $data['ClientSecret'])); if (false !== ($data = $crypter->decrypt(base64_decode($crypted)))) { list($session_id, $claimId) = explode(':', $data); $opts = [ 'http' => [ 'method' => 'GET', 'header' => 'Cookie: SAMO=' . $session_id, 'user_agent' => Samo_Request::user_agent(), ], ]; $context = stream_context_create($opts); if ($return = file_get_contents($this->andr_root() . 'web/claims?samo_action=agent_check_identity&claimid=' . $claimId, false, $context)) { if ($data = json_decode($return, true)) { if (!empty($data['Partner']) && !empty($data['Partpass'])) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_partner_Inc', [ 'Partner' => $data['Partner'], 'PartPass' => $data['Partpass'], ] ); if ((false !== ($auth = $this->db->fetchRow($sql))) && isset($auth['PartPassInc'])) { $auth['permissions'] = $this->load_permissions($auth['PartPassInc']); return $auth; } } } } } } return false; } public function load_permissions($partpass) { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_4_partner_access', ['PartPass' => $partpass]); $permissions = array(); $this->db->fetchAll( $sql, function ($row) use (&$permissions) { $permissions[$row['Rule']] = $row['Access']; } ); return $permissions; } protected function array_reduce($array, $unset_keys) { foreach ($array as & $item) { foreach ($unset_keys as $key) { unset($item[$key]); } } return $array; } public function cat_claim($src, $k = 0) { return ($k) ? str_replace('0x', '', $src) : ((0 === strpos($src, '0x')) ? '' : '0x') . $src; } public function find_template($files) { if (!is_array($files)) { $files = array($files); } foreach ($files as $file) { if (file_exists($file)) { return $file; } } return false; } public function pager($max, $current, $links_per_page = 10) { if ($max <= 1) { return false; } if ($max <= $links_per_page) { $return = range(1, $max); } else { $half = ceil($links_per_page / 2); $low = ($current - $half); if ($low <= 0) { $low = 1; } $hi = $low + $links_per_page; if ($hi > $max) { $hi = $max; } $return = range($low, $hi); } return (count($return) > 1) ? $return : false; } public function claim_description($claim = null) { $claim = ifs($claim, Samo_Request::intval('CLAIM')); if ($claim) { $model = Samo_Loader::load_object('Samo_Claim', $this->config); $model->construct($claim); if ($result = $model->claimInfo()) { $result = array(); $result['claim_info'] = $model->defaults['claim_info']; $result['peoples'] = $model->claimPeoples(); $result['freights'] = $model->claimFreights(); $result['hotels'] = $model->claimHotels(); $result['services'] = $model->claimServices(); $result['insures'] = $model->claimInsures(); $result['visas'] = $model->claimVisas(); try { if ($costs = $model->claimCost()) { $result['cost'] = array_shift($costs); } } catch (Samo_Exception $e) { $e; } $routes = Samo_Registry::get('routes'); $result['cl_refer_url'] = $routes['cl_refer']['url'] . 'CLAIM=' . $model->defaults['CLAIM']; } return $result; } return false; } public function getOnline_field($entity, $group = 'Group', $entityInc = null, $override = array()) { $sql = $this->sql_getOnline_field($entity, $entityInc); if (false !== ($return = $this->db->fetchAllWithKeyGroup($sql, $group))) { foreach ($return as &$ret) { foreach ($ret as &$res) { if ('string' == $res['Type'] && isset($res['Value'])) { $res['Value'] = strval(Samo_String::set($res['Value'])->safehtml()); } $this->{$res['Field']} = $res['Value']; $res['attributes'] = array(); $regex = $res['Pattern']; if ($pos = strpos($regex, 'u', strrpos($regex, '/'))) { $regex = substr($regex, 0, $pos) . substr($regex, $pos + 1); $regex = preg_replace('/(?<!\\\\)(?>\\\\\\\\)*\\\\x{([a-fA-F0-9]+)}/', '\\u$1', $regex); } if (!empty($regex)) { $res['attributes']['data-pattern'] = $regex; $res['attributes']['data-pattern-title'] = $res['PatternTitle']; } if (!empty($res['Mask'])) { $res['attributes']['data-mask'] = $res['Mask']; } $res['css_classes'] = explode(',', $res['Class']); if ($res['Required']) { $res['css_classes'] = array_merge($res['css_classes'], array('required')); if (!$res['Editable']) { if (in_array($res['Type'], array('string', 'bik_bank')) && (!isset($res['Value']) || (isset($res['Value']) && '' == trim($res['Value'])))) { $res['Editable'] = 1; } elseif ('select' == $res['Type'] && (!isset($res['Value']) || (isset($res['Value']) && (Samo::MAXLONGINT == trim($res['Value']) || '' == trim($res['Value']))))) { $res['Editable'] = 1; } } } $res = array_merge($res, $override); } } unset($ret, $res); } return $return; } protected function sql_getOnline_field($entity, $entityInc = null) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_get_online_field', [ 'Entity' => $entity, 'EntityInc' => $entityInc, 'LangId' => Samo_Request::langid(), ] ); return $sql; } public function field_error($format, $field_title, $val) { $messages = Samo_Registry::get('messages'); $format = isset($messages[$format]) ? $messages[$format] : $format; return sprintf($format, $field_title, $val); } public function check_field($value, $field) { $title = trim(preg_replace('~\(.*\)~', '', $field['Title'])); $value = trim($value); $strlen = strlen($value); if ($value != '') { if ($strlen == 0) { return $value; } if ($field['min_length'] > 0 && $strlen < $field['min_length']) { throw new Samo_Exception($this->field_error('FIELD_FILTER_MIN_LENGTH', $title, $field['min_length']), 3); } if ($field['max_length'] > 0 && $strlen > $field['max_length']) { throw new Samo_Exception($this->field_error('FIELD_FILTER_MAX_LENGTH', $title, $field['max_length']), 4); } if (!empty($field['Pattern'])) { if (!preg_match($field['Pattern'], $value)) { throw new Samo_Exception($this->field_error('FIELD_FILTER_ALARM', $title, $field['PatternTitle']), 1); } } $validator = Samo_Loader::load_object('Samo_Validate'); $method = $field['Entity'] . '_' . $field['EntityField']; if (method_exists($validator, $method)) { if (!$validator->$method($value, array('instance' => $this))) { throw new Samo_Exception($this->field_error('FIELD_FILTER_INCORRECT', $title, ''), 2); } } } return $value; } public function newid() { $sql = '<OFFICEDB>.dbo.up_WEB_3_newid'; return $this->db->fetchOne($sql); } public function get_model_method($module, $method, $params = array()) { $routes = Samo_Registry::get('routes'); if (isset($routes[$module])) { $model = Samo_Loader::load_object(ucwords($module . '_model', '_'), $this->config); $model->construct(); return call_user_func_array(array($model, $method), $params); } return false; } public function link_to_page() { $vars = $_GET; foreach (['_', 'rev', 'embed'] as $garbage) { if (isset($vars[$garbage])) { unset($vars[$garbage]); } } $empty_vars = array('CHILD', 'ADULT', 'CLASS'); foreach ($vars as $idx => $var) { if (!in_array($idx, $empty_vars) && empty($var)) { unset($vars[$idx]); } } if (isset($vars['samo_action'])) { if (in_array($vars['samo_action'], array('PRICES', 'SPOS', 'HOTELLIST', 'FREIGHTS', 'FREIGHTTIME', 'SEARCH', 'RESULT'))) { $vars['DOLOAD'] = 1; if (isset($vars['embed_action'])) { unset($vars['embed_action']); } unset($vars['samo_action']); } elseif (!isset($vars['embed_action'])) { unset($vars['samo_action']); } else { $vars['samo_action'] = $vars['embed_action']; unset($vars['embed_action']); } } $host = Samo_Request::scheme() . '://' . Samo_Request::host() . WWWROOT; if (FRIENDLY_URLS) { $host .= $vars['page'] . '?'; unset($vars['page']); } else { $host .= 'default.php?'; } return $host . http_build_query($vars); } protected function config($param, $section = null, $townfrom = null, $state = null, $tour = null, $database = null) { return $this->config->find($param, $section, $townfrom, $state, $tour, $database); } protected function tour_config($param, $section = null, $server = null, $tour = null) { $tour = (null === $tour) ? (isset($this->defaults['TOURINC']) && is_int($this->defaults['TOURINC']) ? $this->defaults['TOURINC'] : null) : $tour; return $this->config($param, $section, $this->TOWNFROMINC, $this->STATEINC, $tour, $server); } public function is_module_installed($module) { $registry = Samo_Registry::instance(); return (isset($registry['routes'][$module])) ? $registry['routes'][$module] : false; } protected function parse_andr_key() { if (!isset($this->defaults['CATCLAIM']) && $key = Samo_Request::find('KEY')) { if (!isset($_SESSION['KEY'][$key])) { $url = $this->andr_root() . 'generate_key/?key3=' . $key; if (($data = @file_get_contents($url)) && ($tmp = json_decode($data))) { $_SESSION['KEY'][$key] = array( 'TOWNFROM' => isset($tmp['TOWNFROM']) ? $tmp['TOWNFROM'] : null, 'CATCLAIM' => isset($tmp['CATCLAIM']) ? $tmp['CATCLAIM'] : null, 'RETURL' => isset($tmp['RETURL']) ? $tmp['RETURL'] : null, 'URI' => isset($tmp['URI']) ? $tmp['URI'] : null, 'STATE' => isset($tmp['STATE']) ? $tmp['STATE'] : null, ); } else { return false; } } $this->townFrom($_SESSION['KEY'][$key]['TOWNFROM']); $this->state($_SESSION['KEY'][$key]['STATE']); $this->defaults['CATCLAIM'] = $_SESSION['KEY'][$key]['CATCLAIM']; $this->callback = $_SESSION['KEY'][$key]['RETURL']; $this->user_uri = $_SESSION['KEY'][$key]['URI']; return true; } return false; } protected function claim_mediator() { if ($client_id = $this->user_uri) { try { return $this->getConfig('mediator_' . $client_id, 'andromeda'); } catch (Samo_Exception $e) { $e; } } return null; } public function callback($claim = null) { if (null === $claim) { return $this->callback; } $this->callback = str_replace(array('PCLAIM', 'PGUID'), array($claim['Claim'], $claim['guid']), $this->callback); } public function has_permission($module, $category = 'Print', $tour = null) { if (!isset($_SESSION['samo_auth']['permissions']) || !isset($_SESSION['samo_auth']['permissions'][$module])) { $_SESSION['samo_auth']['permissions'] = $this->load_permissions($_SESSION['samo_auth']['PartPassInc']); } if (!isset($_SESSION['samo_auth']['permissions'][$module])) { $_SESSION['samo_auth']['permissions'][$module] = false; } if (isset($_SESSION['samo_auth']['permissions']) && $_SESSION['samo_auth']['permissions'][$module]) { if ('Print' != $category) { return true; } if (null === $tour && isset($this->defaults['TOURINC'])) { $tour = $this->defaults['TOURINC']; } if (null === $tour) { throw new InvalidArgumentException('Expected tour: integer, actual: null'); } $cache = $this->cache; $key = 'doccategory_enable_' . $tour; if (!array_key_exists($key, $cache)) { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_doccategory_enable', ['Tour' => $tour]); $settings = $this->db->fetchAllWithKey( $sql, 'DocCategory', function ($row) { return $row['Internet']; } ); $cache[$key] = $settings; } else { $settings = $cache[$key]; } $doccategory = DocCategory::by_module($module); return $doccategory && array_key_exists($doccategory, $settings) ? $settings[$doccategory] : true; } return false; } public function andr_root($andr_root = null) { if (null !== $andr_root) { $this->andr_root = $andr_root; } elseif ('dev' === APPMODE && defined('ANDR_WEBROOT')) { $this->andr_root = ANDR_WEBROOT; } return $this->andr_root; } public function getExternalDocument() { $result = array('guid' => Samo_Request::strval('guid')); try { return array_merge($result, $this->getExternalDocumentInit()); } catch (Samo_Exception $e) { return array_merge($result, array('error' => $e->getMessage())); } } protected function getExternalDocumentJob($key, $filenameMask = null, $ext = 'pdf') { if (!isset($this->messages)) { $this->messages = Samo_Registry::get('messages'); } $result = array(); $job = false; if (isset($_SESSION['external_job']) && isset($_SESSION['external_job'][$key])) { $job = $_SESSION['external_job'][$key]['inc']; $ext = $_SESSION['external_job'][$key]['ext']; $filenameMask = $_SESSION['external_job'][$key]['filenameMask']; } if ($job) { if (null !== $filenameMask) { $fNameFrag = explode('.', $filenameMask); array_pop($fNameFrag); $filenameMask = implode('.', $fNameFrag) . '.' . $ext; $mask = sprintf($filenameMask, $job, '*'); $filename = sprintf($filenameMask, $job, Samo_Utils::randomString(16)); $pwd = getcwd(); chdir(_ROOT . 'dnl'); $files = glob($mask); chdir($pwd); if (is_array($files) && (1 == count($files))) { $result['url'] = WWWROOT . 'dnl/' . reset($files); unset($_SESSION['external_job'][$key]); return $result; } else { $this->db->rawMode(true); $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_printform_get_job', ['job' => $job]); if ($row = $this->db->fetchOneRow($sql)) { if (!empty($row['error'])) { unset($_SESSION['external_job'][$key]); throw new Samo_Exception(DEBUG === true ? $row['error'] : $this->messages['CANNOT_PRINT']); } $result = array('status' => $row['status'], 'lifetime' => $row['lifetime']); if (!empty($row['content'])) { if (null === $filename) { throw new Samo_Exception($this->messages['CANNOT_PRINT']); } $fileuri = 'dnl/' . $filename; $result['url'] = WWWROOT . $fileuri; if (!Samo_Utils::writeFile(_ROOT . $fileuri, $row['content'])) { throw new Samo_Exception($this->messages['CANNOT_PRINT'], 403); } unset($_SESSION['external_job'][$key]); } elseif ($row['status'] == 2) { unset($_SESSION['external_job'][$key]); return $this->getExternalDocumentJob($key); } } else { unset($_SESSION['external_job']); } $this->db->rawMode(false); } } else { throw new Samo_Exception($this->messages['CANNOT_PRINT']); } } else { $params = $this->getExternalDocumentParams(); if (isset($params['error'])) { throw new Samo_Exception($params['error']); } if (!isset($params['template'])) { throw new Samo_Exception($this->messages['TEMPLATE_NOT_CONFIGURE']); } if (!isset($params['user'])) { $params['user'] = $this->internet_user(); } if (!isset($params['auth_type'])) { $params['auth_type'] = isset($_SESSION['samo_auth']) && isset($_SESSION['samo_auth']['type']) ? $_SESSION['samo_auth']['type'] : 'agency'; } if (isset($params['doccategory'])) { unset($params['doccategory']); } if (!isset($params['lang_id'])) { $params['lang_id'] = Samo_Request::langid(); } $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_report_create_job', [ 'claim' => isset($params['claim']) ? $params['claim'] : (isset($this->defaults['CLAIM']) ? $this->defaults['CLAIM'] : null), 'template' => $params['template'], 'params' => $this->packPrintParams($params), 'priority' => isset($params['priority']) ? $params['priority'] : 1, 'embedfonts' => isset($params['embedfonts']) ? $params['embedfonts'] : 1, ] ); if ($inc = $this->db->fetchOne($sql)) { $ext = isset($params['OutputFormat']) ? mb_strtolower($params['OutputFormat']) : 'pdf'; $_SESSION['external_job'][$key] = [ 'inc' => $inc, 'ext' => $ext, 'filenameMask' => $filenameMask, ]; return $this->getExternalDocumentJob($key); } else { throw new Samo_Exception($this->messages['CANNOT_PRINT']); } } if (isset($_SESSION['external_job'][$key]['last'])) { if ($_SESSION['external_job'][$key]['last'] + self::PRINT_JOB_TIMEOUT < Samo_Request::time()) { unset($_SESSION['external_job'][$key]['last']); throw new Samo_Exception($this->messages['CL_R_JOB_PRINT_NOT_AVAILABLE']); } } elseif (isset($_SESSION['external_job'][$key])) { $_SESSION['external_job'][$key]['last'] = Samo_Request::time(); } return $result; } protected function getExternalDocumentInit() { throw new Samo_Exception($this->messages['CANNOT_PRINT']); } protected function getExternalDocumentParams() { throw new Samo_Exception($this->messages['CANNOT_PRINT']); } public function samotourMail($email_type, $params, $mail_to = null, $subject = null, $mail_cc = null) { if (!isset($params['x_remote_addr'])) { $params['x_remote_addr'] = Samo_Request::remote_addr(); } if (!isset($params['x_user_agent'])) { $params['x_user_agent'] = Samo_Request::user_agent(); } if (!isset($params['x_server'])) { $params['x_server'] = Samo_Request::host(); } if ((!isset($params['x_source'])) && $SOURCE = Samo_Request::get('SOURCE')) { $params['x_source'] = $SOURCE; } if (!isset($params['lang_id'])) { $params['lang_id'] = Samo_Request::langid(); } $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_mail_job', [ 'email_type' => $email_type, 'subject' => $subject, 'to' => $mail_to, 'cc' => $mail_cc, 'params' => $this->packPrintParams($params), ] ); if ($mailInc = $this->db->fetchOne($sql)) { return $mailInc; } return false; } protected function packPrintParams($params) { if (isset($params['template'])) { unset($params['template']); } return urldecode( http_build_query( array_map( function ($b) { return sprintf("'%s'", $b); }, $params ), '', ";" ) ); } public function get_settings_printform($doccategory, $partner = null, $tour = null, $state = null, $inszone = null, $contracttype = null, $agreement_year = null, $email_type = null, $online_bank = null, $owner = null) { if (is_array($doccategory) && array_key_exists('doccategory', $doccategory)) { extract($doccategory); } $tpl = false; $this->defaults['template'] = null; $this->external = false; $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_Get_AIV_Template', [ 'doccategory' => $doccategory, 'Partner' => $partner, 'tour' => $tour, 'state' => $state, 'inszone' => $inszone, 'contracttype' => $contracttype, 'agreement_year' => $agreement_year, 'email_type' => $email_type, 'online_bank' => $online_bank, 'owner' => $owner, ] ); if ($row = $this->db->fetchRow($sql)) { if ($row['external']) { $this->defaults['template'] = $row['tpl']; $this->external = true; $tpl = $row['tpl']; } else { $tpl = $this->lookupLegacyTemplate($doccategory, $row['tpl']); $this->defaults['template'] = $tpl; } } return $tpl; } protected function lookupLegacyTemplate($doccategory, $tpl) { if (in_array($doccategory, [DocCategory::VOUCHER, DocCategory::INSURANCE_MEDICAL, DocCategory::INSURANCE_CANCEL])) { return false; } $folder = [ 1 => 'invoice', 3 => 'insurance', 4 => 'voucher', 5 => 'agreement', 6 => 'claim_act', 7 => 'aviaticket_cost', 8 => 'aviaticket', 9 => 'anketa', 10 => 'booklet', 11 => 'confirmation', 16 => 'warrant', 17 => 'agreement_person', 18 => 'cancel_claim', 20 => 'psbank', 21 => 'insurance', ]; $lookup = array(); if (isset($folder[$doccategory])) { if (defined('CUSTOM')) { $lookup[] = _ROOT . '/.dev/custom/' . CUSTOM . '/data/' . $folder[$doccategory] . '/' . $tpl; } $lookup[] = _ROOT . 'data/' . $folder[$doccategory] . '/' . $tpl; $lookup[] = _ROOT . 'templates/' . $folder[$doccategory] . '/' . $tpl; foreach ($lookup as $file) { if (file_exists($file)) { $this->defaults['template'] = $file; return $file; } } } return false; } public function gen_filename($prefix, $orig_filename, $mime_type = null) { $return = uniqid($prefix); if (!empty($orig_filename)) { $parts = explode('.', strtolower($orig_filename)); $ext = end($parts); } elseif (!empty($mime_type)) { $mime_type = strtolower($mime_type); $exts = array( 'image/jpeg' => 'jpg', 'text/plain' => 'txt', 'application/pdf' => 'pdf', 'application/msword' => 'doc', 'text/html' => 'html', 'application/vnd.ms-excel' => 'xls', 'application/vnd.ms-powerpoint' => 'ppt', ); if (isset($exts[$mime_type])) { $ext = $exts[$mime_type]; } else { $ext = end(explode('/', $mime_type)); } } else { $ext = 'bin'; } if (in_array($ext, array('exe', 'dll', 'so', 'php'))) { throw new Samo_Exception('Security error: dangerous filetype'); } return $return . '.' . $ext; } public function hotelTypesFilter() { return defined('ATTRIBUTE_LTAGS_HOTELTYPE') ? ATTRIBUTE_LTAGS_HOTELTYPE : 'Hotel type'; } public function SEARCHMODE($fast = false) { $servers = getServers(); $modes = [ [ 'id' => 'tour', 'module' => $fast ? 'fast_search' : 'search_tour', 'alias' => [], 'filter' => function () use ($servers) { foreach ($servers as $server) { if (Samo::TOWNFROMHOTELINC != $server['townFrom']) { return true; } } return false; }, ], [ 'id' => 'hotel', 'module' => $fast ? 'fast_search' : 'search_hotel', 'alias' => [], 'filter' => function () use ($servers) { foreach ($servers as $server) { if (Samo::TOWNFROMHOTELINC == $server['townFrom']) { return true; } } return false; }, ], [ 'id' => 'ticket', 'module' => 'tickets', 'alias' => [], 'filter' => function () { return true; }, ], ]; $module = Samo_Registry::get('module')['module']; $messages = Samo_Registry::get('messages'); $person = (false !== strpos($module, '_person')); $selected_exists = false; $return = []; foreach ($modes as $mode) { $exists = $this->is_module_installed($mode['module']) && $mode['filter'](); $alias = array_merge($mode['alias'], [$mode['module']]); $selected = in_array($module, $alias) || in_array(str_replace('_person', '', $module), $alias); if (!$exists && !$selected) { continue; } $params = ('tickets' == $mode['module'] && $fast) ? ['samo_action' => 'fast'] : ($fast ? ['mode' => 'search_' . $mode['id']] : []); $url = $person && $this->is_module_installed($mode['module'] . '_person') ? Samo_Url::route($mode['module'] . '_person', $params) : Samo_Url::route($mode['module'], $params); if (empty($params) && defined('FRIENDLY_URLS') && FRIENDLY_URLS) { $url .= '?'; } $return[$mode['id']] = [ 'id' => $mode['id'], 'name' => $messages['SEARCHMODE'][$mode['id']], 'selected' => $selected, 'url' => $url, ]; $selected_exists = $selected_exists || $selected; } if (!$selected_exists) { foreach ($return as $key => $val) { $return[$key]['selected'] = true; break; } } return $return; } public function roundConfig() { $forceRound = (bool)$this->config('FORCE_ROUND', 'search'); $result = [ 'precision' => !$forceRound && (bool)$this->config('RoundCurrency', 'Firm') == false ? 2 : 0, 'type' => $forceRound || (bool)$this->config('Round', 'Firm'), ]; return $result; } public function roundPrice($value) { $config = $this->roundConfig(); if ($config['type']) { $value = round($value, $config['precision'], PHP_ROUND_HALF_UP); } else { if ($config['precision']) { $value = floor($value * pow(10, $config['precision'])) / pow(10, $config['precision']); } else { $value = floor($value); } } return sprintf($config['precision'] ? "%.2f" : "%d", $value); } public function maxChildAge() { return intval($this->config('MaxChildAge', 'Tourist')); } } class TooManyLoginFailures extends Samo_Exception { } 