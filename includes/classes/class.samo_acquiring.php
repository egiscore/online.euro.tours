<?php
 class Samo_Acquiring extends Samo_EPlatez { protected $bankInc = null; protected $bankAlias = null; protected static $acquiringConfig = []; public $maxAmount = 0; public $minAmount = 0; protected $_amount = 0; protected $_claim = 0; public static $isB2C = null; public function construct($claim = null, $people = null, $order = null) { parent::construct($claim, $people, $order); $this->defaults['BANK'] = $this->bankInc; $this->_claim = Samo_Request::intval('CLAIM'); $this->_amount = Samo_Request::floatval('amount'); } public static function factory($bank) { $model = null; switch (mb_strtoupper($bank)) { case mb_strtoupper(static::acquiringConfig('FONDY_SAMO_ALIAS')): $model = Samo_Loader::load_object('Fondy_Model'); break; case mb_strtoupper(static::acquiringConfig('PSB_SAMO_ALIAS')): $model = Samo_Loader::load_object('Psb_Model'); break; default: throw new Samo_Exception(sprintf(Samo_EPlatez::messages('ACQUIRING_UNKNOWN_PAYMENT_SYSTEM'), $bank)); break; } return $model; } protected $moduleName = 'none'; public function isEnabled() { parent::is_enabled(); $this->fetchOwner(); } public function Check_Print_By_Tour() { return true; } public static function isB2C() { if (self::$isB2C !== null) { return self::$isB2C; } return isset($_SESSION) && isset($_SESSION['samo_auth']) && isset($_SESSION['samo_auth']['type']) && $_SESSION['samo_auth']['type'] && $_SESSION['samo_auth']['type'] == 'person'; } public function getPayInfo() { parent::getPaymentInfo(); if (0 === $this->minAmount) { $this->minAmount = floatval($this->defaults['CLAIM_COST'][1]['MinAmount']); } return [ 'paid' => floatval($this->defaults['CLAIM_COST'][1]['Paid']), 'amount' => floatval($this->defaults['CLAIM_COST'][1]['Debt']), 'currency' => $this->defaults['TYPE_OWNER_CONFIG']['document_currency_alias'], ]; } public function getHiddenFields() { return array(); } public function getModuleName() { if ($this->moduleName == 'none') { $this->moduleName = strtolower(preg_replace('/_model$/i', '', get_class($this))); } return $this->moduleName; } public function makeFormData() { return array(); } public function getVisibleFields() { return array(); } public function getFormAction() { return ''; } protected function getReturnURL() { return Samo_Url::parse(Samo_Url::route((self::isB2C()) ? 'cl_refer_person' : 'pay_variant', ['CLAIM' => $this->_claim])); } public function checkPayData() { $epsilon = 0.01; $amount = $this->_amount; $cur = $this->getPayInfo(); $cur = $cur['currency']; if (!$amount) { $this->_die($this->messages['ACQUIRING_EMPTY_AMOUNT']); } if ($this->maxAmount && abs($amount - $this->maxAmount) > $epsilon && $amount > $this->maxAmount) { $this->_die(sprintf($this->messages['ACQUIRING_AMOUNT_OVER_MAX_LIMIT'], $this->maxAmount, $cur)); } if ($this->minAmount && abs($amount - $this->minAmount) > $epsilon && $amount < $this->minAmount) { $this->_die(sprintf($this->messages['ACQUIRING_AMOUNT_OVER_MIN_LIMIT'], $this->minAmount, $cur)); } return $this; } protected function getInvoice() { $this->isEnabled(); $amount = $this->_amount; if (!$amount) { $this->_die($this->messages['ACQUIRING_EMPTY_AMOUNT']); } $this->fetchOwner(); $this->getPaymentInfo(); if ($amount > $this->defaults['CLAIM_COST'][1]['Debt']) { $this->_die($this->messages['ACQUIRING_OVER_AMOUNT'] . $this->defaults['CLAIM_COST'][1]['Debt']); } $this->fetch_eplatez_Number(); $inumber = $this->defaults['inumber']; $this->defaults['PAYER']['TOPAY'] = $amount; $this->setPayerInfo(); $this->SaveToInvoicesForBank(); return array( 'inumber' => $inumber ); } protected static function setInvoiceExternalData($inumber, $data) { $db = Samo_Registry::get('db'); $db->exec('<BANKDB>.[dbo].[up_fill_external_data]', ['INumber' => $inumber, 'External_data' => json_encode($data)]); return true; } protected static function _die($message, $code = 0) { throw new Samo_Exception($message, $code); } protected function setPayerInfo() { $this->defaults['PAYER']['PAYER_FIO'] = Samo_Request::remote_addr(); $this->defaults['PAYER']['PAYER_PSERIE'] = null; $this->defaults['PAYER']['PAYER_PNUMBER'] = null; $this->defaults['PAYER']['PAYER_PGIVENDATE'] = 0; $this->defaults['PAYER']['PAYER_PGIVENORG'] = null; $this->defaults['PAYER']['PAYER_PGIVENORG_MENT'] = null; $this->defaults['PAYER']['PAYER_ADDRESS'] = null; $this->defaults['PAYER']['PAYER_BORN'] = null; } protected function makeOkURL($inumber = '') { return $this->getModuleCallbackURL('OK', $inumber); } protected function makeFailURL($inumber = '') { return $this->getModuleCallbackURL('FAIL', $inumber); } protected function getModuleCallbackURL($result, $inumber = '') { return Samo_Url::route( $this->moduleName, [ 'inumber' => $inumber, 'samo_action' => 'CALLBACK', 'CLAIM' => $this->defaults['CLAIM'], 'RESULT' => $result, ] ); } protected function getClientURL() { return Samo_Url::route( 'acquiring_client', [ 's' => $this->moduleName, 'pm' => self::isB2C() ? 1 : 0, ] ); } public function parseCallback() { return null; } protected static function _getDB() { $storage = Samo_Registry::instance(); if (isset($storage['db'])) { $db = $storage['db']; } else { include _ROOT . 'includes/db.php'; $db = db_connect(null, null); } return $db; } protected static function _getModel($bankLogin) { $db = static::_getDB(); $model = Samo_Loader::load_class('WSPAY_model'); $model = new $model($db); $model->getBank($bankLogin); return $model; } protected static function setHoldInvoiceByINumber($bankLogin, $inumber) { $model = static::_getModel($bankLogin); $model->setHoldInvoiceByINumber($inumber); return true; } protected function createSendCheckJob($inumber) { $class = static::acquiringConfig('ACQUIRING_CHECK_MODEL'); if (!$class) { $class = get_called_class(); } else { $class .= '_Model'; } $data = static::getPaymentInfoData($inumber); self::createJob(' $result = ' . $class . '::sendCheck(' . var_export($inumber, true) . ', ' . var_export($data, 1) . '); return $result; '); return true; } public static function confirmOrder($bankLogin, $inumber) { $model = static::_getModel($bankLogin); try { $invoice = $model->getInvoiceData($inumber); } catch (WSPAY_exception $e) { if ($e->getCode() == WSPAY_model::TICKET_CONFIRMED) { return true; } throw $e; } if (!$invoice['ConfirmPay']) { $model->confirmInvoiceByINumber($inumber, PSBANK_DEFAULT_OPERATION); static::createSendCheckJob($inumber); } return true; } public static function createJob($code, $timeout = null) { $spool = (defined('MAIL_SPOOL')) ? MAIL_SPOOL : _ROOT . 'data/spool/'; $taskid = uniqid(); $taskfile = $spool . 'cron_' . __CLASS__ . '_check_' . $taskid . '.php'; $job = ($timeout ? 'if (time() - filemtime(__FILE__) > ' . $timeout . ') { return true; }' . PHP_EOL : '') . 'require_once "includes/classes/class.samo_config.php";' . PHP_EOL . 'Samo_Loader::register_autoload();' . PHP_EOL . "Samo_Registry::set('logger', Log::singleton(LOG_TYPE));" . PHP_EOL . $code; $job = '<' . '?php' . PHP_EOL . $job; return Samo_Utils::writeFile($taskfile, $job); } public static function createCheckOrderStatusJob($code, $timeout = null) { return static::createJob($code, $timeout); } public function pay_variant($claim) { $claim; if ($this->is_module_installed($this->getModuleName())) { return true; } return false; } public static function acquiringConfig($key, $claim = null, $inumber = null) { if (!$claim && $inumber) { $commitHook = true; } if ($claim || $inumber) { $commitHook = true; } $value = null; foreach (['_B2C', ''] as $pf) { if ($pf == '_B2C' && !self::isB2C()) { continue; } $found = false; $_key = $key . $pf; if (isset(static::$acquiringConfig[$_key])) { $value = static::$acquiringConfig[$_key]; $found = true; } elseif (defined($_key)) { $value = constant($_key); $found = true; } else { $value = null; } if ($found) { break; } } return $value; } protected static function _log($what) { $fname = strtolower(get_called_class()) . '_' . date('YmdHis') . '.log'; if (!is_scalar($what)) { $what = var_export($what, 1); } $what = '[' . date('Y-m-d H:i:s') . ']' . PHP_EOL . $what . PHP_EOL . PHP_EOL; $fname = _TMP . $fname; return @file_put_contents($fname, $what, FILE_APPEND); } public static function parseCallbackNotify($data) { return ''; } protected function _capture($invoice) { throw new Samo_Exception(Samo_EPlatez::messages('ACQUIRING_CAPTURE_METHOD_NOT_IMPLEMENTED')); } protected function _reverse($invoice) { throw new Samo_Exception(Samo_EPlatez::messages('ACQUIRING_REVERSE_METHOD_NOT_IMPLEMENTED')); } public function capture($inumber) { if ($this->_capture($this->getInvoiceInfo($inumber))) { self::confirmOrder($this->bankAlias, $inumber); } else { throw new Samo_Exception(Samo_EPlatez::messages('ACQUIRING_CAPTURE_FAILED')); } return $this; } public function reverse($inumber) { if (!$this->_reverse($this->getInvoiceInfo($inumber))) { throw new Samo_Exception(Samo_EPlatez::messages('ACQUIRING_REVERSE_FAILED')); } return $this; } public static function getInvoiceInfo($inumber = null, $id = null) { $db = static::_getDB(); $res = $db->exec( '<BANKDB>.[dbo].[up_GetInvoiceData]', [ 'INumber' => $inumber, 'Id' => $id, ] )->fetchRow(); if (!$res) { throw new Samo_Exception(Samo_EPlatez::messages('ACQUIRING_INVOICE_NOT_FOUND')); } if (isset($res['ExternalData']) && $res['ExternalData']) { $res['ExternalData'] = json_decode($res['ExternalData'], true); } return $res; } protected function saveCurrentTransactionId($tid) { $this->defaults['TRANSACTIONID'] = $tid; $this->SaveToInvoicesForBank(); } protected static function getPaymentInfoData($inumber) { $db = Samo_Registry::get('db'); $res = $db->exec(OFFICE_SQLSERVER . '.' . OFFICEDB . '.[dbo].[up_WEBST_payment_label]', ['inumber' => $inumber]); $res = $res->fetchAll(); return $res ? $res : []; } public static function sendCheck($inumber, $data) { return true; } } 