<?php
 class Samo_API { protected $db = null; protected $version = '1.0'; protected $response = null; protected $oauth = null; protected $authorized = false; protected $method = 'api'; public function __construct(Samo_Response $response, Samo_Database $db, Samo_OAuth2 $oauth) { $this->db = $db; $type = Samo_Utils::ifs(Samo_Request::get('type'), 'json'); $response->respond_to($type); $this->response = $response; $this->oauth = $oauth; } protected function output($method, $result) { $output = ''; $format = $this->response->respond_to(); if ('json' == $format) { if (version_compare(Samo_Request::api_version(), '2.0') >= 0 && isset($result['error'])) { $method = 'error'; unset($result['error']); } $result = $this->result($result); $output = $this->json(array($method => $result)); } elseif ('xml' == $format) { if (strtolower($method) == 'visa_spain_number') { $output = new DomDocument('1.0', 'utf-8'); $root = $output->appendChild($output->createElement($this->utf8($method))); foreach ($result as $key => $row) { if (is_array($row)) { foreach ($row as $crow) { $element = $root->appendChild($output->createElement($this->utf8($key))); $element->appendChild($output->createTextNode($this->utf8($crow))); } } else { $element = $root->appendChild($output->createElement($this->utf8($key))); $element->appendChild($output->createTextNode($this->utf8($row))); } } $output->formatOutput = true; $output = $output->saveXML(); } elseif (strtolower($method) == 'reference') { $output = _xml_format($result); } else { $output = $result; } } return $output; } public function __call($method, $params) { $this->method = $method; if (method_exists($this, '_' . $this->method)) { $result = call_user_func_array(array($this, '_' . $this->method), $params); $result = (false !== $result) ? $result : array(); return $this->output($this->method, $result); } else { $this->response->not_found(); } } protected function loadmodel($model) { $samo = Samo_Loader::load_object(ucwords($model, '_')); if ($townfrom = Samo_Request::intval('townfrom')) { $samo->townFrom($townfrom); } if ($state = Samo_Request::intval('state')) { $samo->state($state); } return $samo; } protected function is_module_installed($module) { $registry = Samo_Registry::instance(); if (!isset($registry['_routes'])) { if (!defined('ROUTES_PATH')) { define('ROUTES_PATH', _ROOT . 'routes.php'); } $routes = array(); include_once ROUTES_PATH; $registry['_routes'] = $routes; } return (isset($registry['_routes'][$module])) ? $registry['_routes'][$module] : false; } protected function load_messages($module = null) { $registry = Samo_Registry::instance(); $messages = isset($registry['messages']) ? $registry['messages'] : array(); if (!count($messages)) { include _ROOT . 'includes/messages/messages_' . Samo_Request::lang() . '.php'; } if (false !== ($module = $this->is_module_installed($module))) { if (isset($module['path']) && file_exists($module['path'] . '/lang/messages_' . Samo_Request::lang() . '.php')) { include $module['path'] . '/lang/messages_' . Samo_Request::lang() . '.php'; } } $registry['messages'] = $messages; return $messages; } public function _currency_rate() { $samo = $this->loadModel('Samo'); $result = $samo->getCurrencyRates(); foreach ($result as &$currency) { unset($currency['Date']); if (isset($currency[$currency['Inc']])) { unset($currency[$currency['Inc']]); } } return $this->api_prepare_result($result); } public function _currency_rates() { if (false !== $this->is_module_installed('currency')) { $currency = $this->loadModel('Currency_Model'); $currency->construct(); if (false !== $result = $currency->todayRates()) { $return = array(); foreach ($result as $ts => $data) { $rate = []; foreach ($data as $currency => $rates) { $rate[$currency] = $rates['BankRate']; } $return[Samo_Datetime::parse($ts)->format('xml')] = $rate; } $result = $return; } return $this->api_prepare_result($result); } $this->response->not_found(); } public function _auth() { if (false !== $this->is_module_installed('export')) { $this->response->respond_to('xml'); $export = $this->loadModel('Export_Model'); return $export->auths(); } $this->response->not_found(); } public function _deposit() { if (false !== $this->is_module_installed('export')) { $this->response->respond_to('xml'); $export = $this->loadModel('Export_Model'); return $export->deposits(); } $this->response->not_found(); } public function _reference() { if (false !== $this->is_module_installed('export')) { $this->response->respond_to('xml'); $export = $this->loadModel('Export_Model'); $export->setOauth($this->oauth); return $export->references(); } $this->response->not_found(); } public function _visa_spain_number() { $log = null; $this->response->respond_to('xml'); $host = Samo_Request::scheme() . '://' . Samo_Request::host(); try { if (false !== $this->is_module_installed('anketa_spain_mow_v1')) { $this->is_stuff(); $debug = 0; $type = 'form'; if (isset($_GET['action']) && in_array($_GET['action'], array('download', 'field_list', 'javascript'))) { if ($_GET['action'] == 'download') { $type = 'download'; } elseif ($_GET['action'] == 'field_list') { $debug = 1; } elseif ($_GET['action'] == 'javascript') { $debug = 2; } } $log = $this->visa_log(null, $host . $_SERVER['REQUEST_URI'], null, null, $type); if (!empty($_FILES)) { $file = $_FILES[key($_FILES)]['tmp_name']; if (file_exists($file) && is_file($file)) { $info = file_get_contents($file); } } elseif (!empty($_POST)) { $info = $_POST[key($_POST)]; } else { $info = file_get_contents('php://input'); } $download = true; $visatour = new VISATUR(Samo_Request::find('session'), $info, $debug); $this->visa_log($log, null, $info); if ($type == 'form') { $return = $visatour->form(); } elseif (isset($_GET['number'])) { if ($type == 'download') { $return = array( 'status' => 'success', 'number' => $_GET['number'] ); $download = $visatour->download($_GET['number'], true); if (!is_array($download)) { $name = 'vt-' . md5($return['number'] . substr($_GET['oauth_token'], 2, 10)) . '.pdf'; $file = _ROOT . 'dnl/' . $name; if (Samo_Utils::writeFile($file, $download)) { $return['file'] = $host . WWWROOT . 'dnl/' . $name; } } else { $return = $download; } $download = false; } else { $return = $visatour->$type($_GET['number']); } } if (!($return['status'] == 'success' && isset($return['number']))) { $return['status'] = 'error'; } $this->visa_log($log, null, null, var_export($return, true)); if ($return['status'] == 'error' && $log) { $return['status'] = 'error (' . $log . ')'; if (defined('DEBUG') && DEBUG) { $return['response'] = base64_encode(serialize($visatour->getLog())); } } return $return; } throw new Exception('Incorrect parameters'); } catch (Exception $e) { $this->visa_log($log, $log ? null : ($host . $_SERVER['REQUEST_URI']), null, $e->getMessage()); die($this->output('visa_spain_number', array('status' => 'error', 'message' => $e->getMessage()))); } } protected function visa_log($id = null, $query = '', $rawdata = '', $source = '', $type = 'form') { if (defined('VISATUR_DEBUG') && VISATUR_DEBUG) { $params = array( 'claim' => Samo_Request::intval('CLAIM'), 'priority' => 'visatur', 'sql' => $this->cp1251($query), 'partpass' => null, 'result' => $this->cp1251($source), 'ip' => Samo_Request::remote_addr(), 'claiminc' => -2, 'claimDocument' => $this->cp1251($rawdata), 'message' => 'spain' . $type, ); $sql = $this->db->formatExec(OFFICE_SQLSERVER . "." . OFFICEDB . '.[dbo].[up_WEB_3_log]', $params); return $this->db->fetchOne($sql); } else { return null; } } protected function _hoteltypes() { $samo = $this->loadmodel('Search_Tour_Model'); if ($result = $samo->getHOTELTYPES()) { $result = array_values($result); } return $this->api_prepare_result($result); } protected function _update_pnr() { $pnr = Samo_Request::strval('pnr'); $pnr = explode(',', $pnr); $pnr = array_map('trim', $pnr); $pnr = implode(',', $pnr); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.sl_WEB_3_GDS_pingByPNR', [ 'pnr' => $pnr, ] ); $params = array( 'priority' => 'gds', 'message' => 'update_pnr', 'sql' => $sql, ); $id = $this->db->web_log_table($params); $return = $this->db->fetchOneRow($sql); $params['result'] = $return; $this->db->web_log_table($params, $id); return $return; } protected function result($val) { if (null === $val) { return null; } if ($val === false) { return false; } if ($val === true) { return true; } if (is_scalar($val)) { if (is_float($val)) { return str_replace(',', '.', (string)$val); } if (is_numeric($val)) { return $val; } return $val; } $isList = true; for ($i = 0, reset($val), $length = count($val); $i < $length; $i++, next($val)) { if (key($val) !== $i) { $isList = false; break; } } $result = array(); if ($isList) { foreach ($val as $v) { $result[] = $this->result($v); } return $result; } else { foreach ($val as $k => $v) { $result[$this->result($k)] = $this->result($v); } return $result; } } public function json($result) { $callback = (null !== ($tmp = Samo_Request::get('callback'))) ? $tmp : false; if (version_compare(Samo_Request::api_version(), '2.0') >= 0 ) { array_walk_recursive( $result, function (&$value, $key) { if (is_string($value) && is_numeric($value)) { if ('0' === $value || !preg_match('/^(\+|0)/', $value)) { $value += 0; } } } ); } $result = json_encode($result); if ($callback) { $result = sprintf('%s(%s)', $callback, $result); } return $result; } protected function utf8($str) { return 'utf8' == $this->db->getConnectParams()['charset'] ? $str : Samo_String::set($str)->utf8()->__toString(); } protected function cp1251($str) { return Samo_String::set($str)->ansi()->__toString(); } protected function _api() { $_action = Samo_Request::get('action'); try { $this->authorize(); $action = explode('_', $_action); $module = Samo_Inflector::slug(Samo_Inflector::humanize(Samo_Inflector::underscore(implode('', array_slice($action, 0, 1))))); if (!$this->is_module_installed(strtolower($module)) && $module != 'Claim_Person') { throw new Samo_Exception('Method does not exists'); } $action = 'get' . implode('_', array_slice($action, 1)); $this->load_messages($module); if ($module == 'Tickets' && $action == 'getBRON') { $this->load_messages('bron'); } try { $api = Samo_Loader::load_object(ucwords($module . '_Api', '_'), Samo_Config::factory()); } catch (Exception $e) { throw new Samo_Exception('Incorrect action'); } if (method_exists($api, '_' . $action)) { $this->method = $_action; if (!empty($_FILES)) { $file = $_FILES[key($_FILES)]['tmp_name']; if (file_exists($file) && is_file($file)) { $params = file_get_contents($file); } } elseif (!empty($_POST)) { $params = $_POST; } else { $params = file_get_contents('php://input'); } if ($params && !is_array($params)) { try { $json = json_decode($params, true); if (json_last_error() === JSON_ERROR_NONE) { $params = $json; } else { $params = $this->api_xml_to_array($params, true); } } catch (Exception $e) { $params = array(); } } if (empty($params)) { $params = $_GET; foreach (array('samo_action', 'type', 'action', 'version', 'oauth_token') as $row) { if (isset($params[$row])) { unset($params[$row]); } } } $result = $api->$action($params); } else { throw new Samo_Exception('Incorrect action'); } } catch (Exception $e) { if (DEBUG) { $trace = array(str_replace(strtolower(str_replace('\\', '/', _ROOT)), '', strtolower(str_replace('\\', '/', $e->getFile()))) . ' (line: ' . $e->getLine() . ')'); foreach ($e->getTrace() as $row) { if (!empty($row['file'])) { $trace[] = str_replace(strtolower(str_replace('\\', '/', _ROOT)), '', strtolower(str_replace('\\', '/', $row['file']))) . ' (line: ' . $row['line'] . ')'; } } krsort($trace); $result = array( 'error' => $e->getCode(), 'action' => $_action, 'message' => $e->getMessage(), 'traces' => $trace ); } else { $result = [ 'error' => $e->getCode(), 'action' => $_action, 'message' => (($e instanceof Samo_Exception) && !($e instanceof Samo_Exceptionizer_Exception)) ? $e->getMessage() : 'Internal server error', ]; } $_action = 'error'; } switch (Samo_Request::get('type')) { case 'xml': if (is_array($result)) { $keys = array_keys($result); if (is_int(reset($keys))) { $result = array('items' => $result); } } $result = $this->api_xml($result, $_action); break; default: $result = $this->api_prepare_result($result); } return $result; } protected function api_xml_to_array($data, $conv = false, $list = false) { if (is_array($data)) { return $data; } $return = array(); if ($data instanceof SimpleXMLElement) { $xml = $data; } else { $xml = @simplexml_load_string($data); } if ($xml) { foreach ($xml->attributes() as $key => $val) { $return[$key] = $this->api_xml_to_array($val, $conv); } foreach ($xml->children() as $key => $row) { $name = $row->getName(); $single = Samo_Inflector::singularize($name); if (isset($row->{$single}) && $name != $single) { $val = $this->api_xml_to_array($row, $conv, true); } else { $val = $this->api_xml_to_array($row, $conv); } if (!in_array($name, ['REC_ON_PAGE', 'MAXRECORD'])) { if ($list) { $return[] = $val; } else { $return[$name] = $val; } } } } if (empty($return)) { return $conv ? $this->cp1251(strval($data)) : strval($data); } return $return; } protected function api_prepare_result($data) { if ($data instanceof Samo_Datetime) { return $data->format('sql'); } elseif (is_array($data)) { foreach ($data as $key => $row) { $data[$key] = $this->api_prepare_result($row); } return $data; } else { if (!is_numeric($data)) { return $this->utf8(html_entity_decode($data)); } return $data; } } protected function api_output_xml($xml, $parent, $data, $name = 'root') { $nameisinuppercase = mb_strtoupper($name) == $name; $singularize = false; $root = $parent->appendChild($xml->createElement($name)); if (is_array($data)) { foreach ($data as $key => $row) { if (is_int($key)) { $key = Samo_Inflector::singularize($name); $singularize = true; } if (is_array($row)) { $this->api_output_xml($xml, $root, $row, $key); if ($singularize && $nameisinuppercase && mb_strtoupper($key) != $key) { $this->api_output_xml($xml, $root, $row, mb_strtoupper($key)); } } else { $element = $root->appendChild($xml->createElement($this->utf8($key))); $element->appendChild($xml->createTextNode($row)); } } } else { $root->appendChild($xml->createTextNode($data)); } } protected function api_xml($data, $root = 'root') { $output = new DomDocument('1.0', 'utf-8'); $this->api_output_xml($output, $output, $this->api_prepare_result($data), $root); $output->formatOutput = true; return $output->saveXML(); } protected function authorize() { if (!$this->authorized) { if ($tmp = $this->oauth->samo_auth()) { $cookie_path = defined('COOKIE_PATH') ? COOKIE_PATH : WWWROOT; ini_set('session.cookie_path', $cookie_path); ini_set('session.cookie_domain', COOKIE_DOMAIN); session_name(SESSION_NAME); session_start(); $_SESSION['samo_auth'] = $tmp; $this->authorized = true; } } if ($this->authorized) { $samo = $this->loadmodel('Samo'); return $samo; } throw new Samo_Exception('Login failed'); } final protected function is_stuff() { $samo = $this->authorize(); try { $firmcode = $samo->getConfig('VISAPARTNER', 'export'); } catch (Samo_Exception $e) { $firmcode = $samo->getConfig('FIRMCODE'); } $partner = $samo->getPartner(); if ($firmcode != $partner) { throw new Samo_Exception('Access denied', 401); } return true; } } 