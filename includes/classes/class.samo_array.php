<?php
 class Samo_Array { public static function array_unique($array, $key, $return = true) { if (is_array($array)) { (isset($temp_array)) ?: $temp_array = []; foreach ($array as $v) { if (!array_key_exists($key, $v)) { $temp_array = array_merge($temp_array, self::array_unique($v, $key, false)); } else { if (!array_key_exists($v[$key], $temp_array) && $v[$key] !== null) { $temp_array[$v[$key]] = $v[$key]; } } } if ($return) { $array = array_unique(array_map('unserialize', array_map('serialize', $temp_array))); return $array; } else { return $temp_array; } } else { return []; } } public static function args2var($args) { if (!is_array($args)) { throw new Samo_Exception('Require array Samo_Array::args2var'); } if (!isset($args[0]['args'])) { return false; } else { $vars = []; foreach ($args[0]['args'] as $k => $v) { $vars["a2v_{$k}"] = $v; } return $vars; } } public static function multiInOne(&$array) { if (!is_array($array)) { throw new Samo_Exception('Require array Samo_Array::multiInOne'); } $arrOut = array(); foreach ($array as $subArr) { $arrOut = array_merge($arrOut, $subArr); } $array = $arrOut; } } 