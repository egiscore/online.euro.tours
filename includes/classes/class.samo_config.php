<?php
 class Samo_Config { private static $instances = []; protected $internet_user = null; protected $price_cache = null; protected $db = null; protected $cache = null; public function __construct($internet_user = null) { $this->internet_user = $internet_user; $this->db = Samo_Registry::get('db'); $this->cache = Samo_Registry::get('cache'); } public static function factory($internet_user = null) { if (array_key_exists($internet_user, self::$instances)) { return self::$instances[$internet_user]; } $config = Samo_Loader::load_object('Samo_Config', $internet_user); self::$instances[$internet_user] = $config; return $config; } public function get($param, $section = null, $townfrom = null, $state = null, $tour = null, $database = null) { return $this->online_tour_config($param, $section, $townfrom, $state, $tour, $database, true); } public function find($param, $section = null, $townfrom = null, $state = null, $tour = null, $database = null) { return $this->online_tour_config($param, $section, $townfrom, $state, $tour, $database, false); } public function internet_user() { if (!$this->internet_user) { if ('dev' == APPMODE && isset($_GET['INTERNET_USER']) && intval($_GET['INTERNET_USER'])) { $this->internet_user = intval($_GET['INTERNET_USER']); } else { $this->internet_user = defined('INTERNET_USER') ? INTERNET_USER : $this->db->fetchOne('<ONLINEDB>.dbo.up_WEB_3_default_usercode'); } Samo_Registry::set('INTERNET_USER', $this->internet_user); } return $this->internet_user; } public function price_cache($use = null) { if (null !== $use) { $this->price_cache = $use; } if (null === $this->price_cache) { $this->price_cache = defined('PRICE_CACHE_REDIS') && false !== PRICE_CACHE_REDIS && extension_loaded('redis'); } return $this->price_cache; } protected function online_tour_config($param, $section = null, $townfrom = null, $state = null, $tour = null, $database = null, $strict = false) { $userCode = $this->internet_user(); if ('INTERNET_USER' == $param) { return $userCode; } $cache_key = 'config_' . $section . '_' . $townfrom . '_' . $state . '_' . $tour . '_' . $userCode; if (!$data = $this->cache->get($cache_key)) { $sql = $this->db->formatExec( ((null == $database) ? '<ONLINEDB>' : $database) . '.dbo.up_WEB_3_tour_config', [ 'TownFrom' => $townfrom, 'State' => $state, 'Tour' => $tour, 'Section' => $section, 'UserCode' => $userCode, ] ); $data = $this->db->fetchAllWithKey( $sql, 'What', function ($row) { foreach (['EDate', 'Tour', 'State', 'TownFrom'] as $key) { unset($row[$key]); } return $row; } ); $this->cache->set($cache_key, $data); } if ($strict && !isset($data[$param])) { $messages = Samo_Registry::find('messages'); $message = is_array($messages) && isset($messages['BROKEN_CONFIG']) ? $messages['BROKEN_CONFIG'] : 'BROKEN_CONFIG'; throw new Samo_Exception($message . ' [' . $param . ']'); } return ($data && isset($data[$param])) ? $data[$param]['Value'] : null; } } class Samo_Registry extends ArrayObject { private static $_registry = null; public static function instance() { if (is_null(self::$_registry)) { self::$_registry = new Samo_Registry(); } return self::$_registry; } public static function reset() { self::$_registry = null; } public static function find($index) { $instance = self::instance(); if (!$instance->offsetExists($index)) { return null; } return $instance->offsetGet($index); } public static function get($index) { $instance = self::instance(); if (!$instance->offsetExists($index)) { throw new Samo_Exception("No entry is registered for key '$index'"); } return $instance->offsetGet($index); } public static function load($index, $className) { $value = Samo_Loader::load_object($className); self::set($index, $value); } public static function set($index, $value) { $instance = self::instance(); $instance->offsetSet($index, $value); } } class Samo_Loader { public static function find_class($class) { static $classmap = null; if (is_null($classmap)) { $classmap = array(); if (!file_exists(INCLUDE_PATH_CACHE)) { if (!class_exists('Samo_Tools', false)) { include _ROOT . 'includes/classes/class.samo_tools.php'; } $tools = new Samo_Tools; $tools->create_classmap(); } $__classmap__ = array(); include INCLUDE_PATH_CACHE; $classmap = $__classmap__; } if (isset($classmap[$class])) { $filename = _ROOT . $classmap[$class]; unset($classmap[$class]); return $filename; } return false; } public static function load_class($class) { $result = $class = strtolower($class); if (!class_exists($class, false) && !interface_exists($class, false) && $filename = self::find_class($class)) { include $filename; $result = $class; } if (strpos($class, 'custom_') !== 0) { if (!class_exists('custom_' . $class, false) && !interface_exists('custom_' . $class, false)) { if ($custom = self::find_class('custom_' . $class)) { include $custom; $result = 'custom_' . $class; } } else { $result = 'custom_' . $class; } } if (!class_exists($result, false) && !interface_exists($result, false)) { if (class_exists($class, false) || interface_exists($class, false)) { return $class; } throw new Samo_Exception("File '$filename' was loaded but class '$result' not found in the file"); } return $result; } public static function load_object(...$params) { $class = array_shift($params); $className = self::load_class($class); if (count($params)) { $r = new ReflectionClass($className); $obj = $r->newInstanceArgs($params); } else { $obj = new $className; } return $obj; } public static function autoload($class) { try { self::load_class($class); return $class; } catch (Samo_Exception $e) { return false; } } public static function register_autoload($class = 'Samo_Loader', $enabled = true) { if (!function_exists('spl_autoload_register')) { throw new Samo_Exception('spl_autoload does not exist in this PHP installation'); } self::load_class($class); $methods = get_class_methods($class); if (!in_array('autoload', (array)$methods)) { throw new Samo_Exception("The class '$class' does not have an autoload() method"); } if ($enabled === true) { spl_autoload_register(array($class, 'autoload')); if (file_exists(_ROOT . 'vendor/autoload.php')) { include_once _ROOT . 'vendor/autoload.php'; } } else { spl_autoload_unregister(array($class, 'autoload')); } } } class Samo_Debug_Helper { public static function proctitle($msg) { if (!empty($msg)) { if ('cli' == PHP_SAPI && function_exists('cli_set_process_title')) { $msg = sprintf('[samotour] %s', $msg); cli_set_process_title($msg); register_shutdown_function( function () { cli_set_process_title('[samotour] waiting for shutdown'); } ); } if (function_exists('pinba_script_name_set')) { pinba_script_name_set($msg); } } } } class Samo_Exception extends Exception { public function __toString() { $response = Samo_Registry::get('response'); $view = Samo_Registry::get('view'); if ($response->respond_to_js()) { $view->popup_message($this->message, 'Internal error', 250, 100, false); return ''; } else { return $view->assign('error', $this->message)->module('')->fetch('error.tpl'); } } } class Redirect_Exception extends Samo_Exception { public function __toString() { $response = Samo_Registry::get('response'); $response->redirect_to($this->message); return ''; } } class Samo_Exceptionizer { public function __construct($mask = E_ALL, $ignoreOther = false) { $catcher = new Samo_Exceptionizer_Catcher(); $catcher->mask = $mask; $catcher->ignoreOther = $ignoreOther; $catcher->prevHdl = set_error_handler(array($catcher, "handler")); } public function __destruct() { restore_error_handler(); } } class Samo_Exceptionizer_Catcher { public $mask = E_ALL; public $ignoreOther = false; public $prevHdl = null; public function handler($errno, $errstr, $errfile, $errline) { if (strpos($errstr, 'mssql_query():') !== false) { $msg = explode(PHP_EOL, $errstr); if (count($msg) > 1) { array_shift($msg); $msg = implode(PHP_EOL, $msg); } else { $msg = trim(str_replace(['mssql_query():', 'message:', '(severity 16)'], '', $errstr)); } throw new E_WARNING($msg, $errno, $errfile, $errline); } if (!($errno & error_reporting())) { return false; } if (!($errno & $this->mask)) { if (!$this->ignoreOther) { if ($this->prevHdl) { $args = func_get_args(); call_user_func_array($this->prevHdl, $args); } else { return false; } } return true; } $types = array( "E_ERROR", "E_WARNING", "E_PARSE", "E_NOTICE", "E_CORE_ERROR", "E_CORE_WARNING", "E_COMPILE_ERROR", "E_COMPILE_WARNING", "E_USER_ERROR", "E_USER_WARNING", "E_USER_NOTICE", "E_STRICT", "E_RECOVERABLE_ERROR", "E_DEPRECATED", "E_USER_DEPRECATED", ); $className = "E_EXCEPTION"; foreach ($types as $t) { $e = @constant($t); if ($errno & $e) { $className = $t; break; } } throw new $className($errstr, $errno, $errfile, $errline); } } abstract class Samo_Exceptionizer_Exception extends Samo_Exception { public function __construct($str = null, $no = 0, $file = null, $line = 0) { $this->message = strval($str); if ($no = intval($no)) { $this->code = $no; } if ($file = strval($file)) { $this->file = $file; } if ($line = intval($line)) { $this->line = $line; } } } class E_EXCEPTION extends Samo_Exceptionizer_Exception { } class E_CORE_ERROR extends E_EXCEPTION { } class E_CORE_WARNING extends E_CORE_ERROR { } class E_COMPILE_ERROR extends E_CORE_ERROR { } class E_COMPILE_WARNING extends E_COMPILE_ERROR { } class E_ERROR extends E_CORE_ERROR { } class E_RECOVERABLE_ERROR extends E_ERROR { } class E_PARSE extends E_RECOVERABLE_ERROR { } class E_WARNING extends E_PARSE { } class E_NOTICE extends E_WARNING { } class E_STRICT extends E_NOTICE { } class E_DEPRECATED extends E_STRICT { } class E_USER_ERROR extends E_ERROR { } class E_USER_WARNING extends E_USER_ERROR { } class E_USER_NOTICE extends E_USER_WARNING { } class E_USER_DEPRECATED extends E_USER_NOTICE { } 