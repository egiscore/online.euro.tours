<?php
class Samo_CryptAes { private $key = null; private $method = 'AES-128-CBC'; private $opensslOptions = OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING; private $blockSize = 16; private $iv = null; public function __construct($key = null) { if (null !== $key) { $this->setKey($key); } } public function setIv($iv) { $this->iv = $iv; } public function setKey($key) { $length = strlen($key); switch (true) { case $length <= 16: $keyLength = 16; break; case $length <= 24: $keyLength = 24; break; default: $keyLength = 32; } $this->key = str_pad(substr($key, 0, $keyLength), $keyLength, "\0"); $this->iv = str_pad(substr($this->iv, 0, $this->blockSize), $this->blockSize, "\0"); $this->method = 'AES-' . ($keyLength << 3) . '-CBC'; } public function encrypt($data) { $plaintext = $this->pad($data); $encrypted = openssl_encrypt($plaintext, $this->method, $this->key, $this->opensslOptions, $this->iv); return $encrypted; } public function decrypt($data) { $result = openssl_decrypt($data, $this->method, $this->key, $this->opensslOptions, $this->iv); if ($result) { $result = $this->unpad($result); } return $result; } private function pad($text) { $length = strlen($text); $pad = $this->blockSize - ($length % $this->blockSize); return str_pad($text, $length + $pad, chr($pad)); } private function unpad($text) { $length = ord($text[strlen($text) - 1]); if (!$length || $length > $this->blockSize) { return false; } return substr($text, 0, -$length); } } 