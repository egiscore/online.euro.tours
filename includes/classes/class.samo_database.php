<?php
 interface Samo_Database_Adapter { public function connect($params); public function query($sql); public function fetch_assoc($rsql); public function disconnect(); public function num_rows($rsql); public function num_fields($rsql); public function next_result($rsql); public function last_message(); public function free_result($result); public function fetch_field($result, $offset = -1); public function is_connected(); public function is_resource($param); } class Samo_Database { private $fixRows = true; private $connect_params = null; private $errorField = null; private $errorCodeField = 'error_code'; private $debugField = 'debug'; private $result = null; private $query = null; private $encoding_source = 'cp1251'; private $encoding_result = 'cp1251'; private $error_handler = null; private $logger = null; private $lazy_querys = array(); private $adapter = null; private $retry_connect = 4; private $retry_query = 3; public function __construct() { if (defined('INTERNAL_DATABASE_DRIVER')) { $adapter = INTERNAL_DATABASE_DRIVER; } elseif (DIRECTORY_SEPARATOR == '\\') { $adapter = 'sqlsrv'; } elseif (version_compare(PHP_VERSION, '7.0') < 0) { $adapter = 'dblib'; } elseif (extension_loaded('sqlsrv') && !extension_loaded('pdo_dblib')) { $adapter = 'sqlsrv'; } else { $adapter = 'pdo_dblib'; } $class = 'Samo_Database_' . ucwords($adapter, '_'); try { $this->adapter = Samo_Loader::load_object($class); } catch (Samo_Exception $e) { throw new Exception('No suitable database driver found', 500, $e); } } public function __destruct() { $this->disconnect(); unset($this->adapter); } public function connect($params) { $this->disconnect(); if (!isset($params['hostname']) || empty($params['hostname'])) { $this->raiseError('Expecting parameter "hostname" not set'); } if (!isset($params['username']) || empty($params['username'])) { $this->raiseError('Expecting parameter "username" not set'); } if (!isset($params['password']) || empty($params['password'])) { $this->raiseError('Expecting parameter "password" not set'); } if (!isset($params['database']) || empty($params['database'])) { $this->raiseError('Expecting parameter "database" not set'); } if (!isset($params['charset'])) { $params['charset'] = $this->encoding_source; } else { $this->encoding_source = $params['charset']; } if (!isset($params['connect_timeout'])) { $params['connect_timeout'] = 5; } if (!isset($params['timeout'])) { $params['timeout'] = intval(ini_get('mssql.timeout') ?: ini_get('max_execution_time') * 0.95 ?: ini_get('default_socket_timeout')); } $this->connect_params = $params; return true; } protected function realConnect($params) { $alias = (isset($params['alias'])) ? $params['alias'] : $params['hostname']; $log_dsn = strtolower(str_replace(array(__CLASS__, '_'), '', get_class($this->adapter))) . '://' . $params['username'] . '@' . $alias . '/' . $params['database'] . '#' . $this->encoding_source . ($params['hostname'] != $alias ? ' (' . $params['hostname'] . ')' : ''); $conn = false; $retry_count = $this->retry_connect; if (APPMODE != 'production') { $startTime = microtime(true); } while (!$conn && --$retry_count) { $this->log(sprintf('Trying (%d/%d) connect to %s', $this->retry_connect - $retry_count, $this->retry_connect, $log_dsn)); $conn = $this->adapter->connect($params); if (!$conn) { time_nanosleep(0, 90000); } } if (!$conn) { $this->query = 'CONNECT (' . $this->retry_connect . ') TO ' . $log_dsn; $this->raiseError('Could not connect to server', 2000000); } else { if (APPMODE != 'production') { $msg = sprintf('/* %.4fs */ %s', microtime(true) - $startTime, ' -- connected'); $this->log($msg); } } $this->adapter->query('SET CONCAT_NULL_YIELDS_NULL ON; SET NOCOUNT ON; SET ANSI_NULLS ON; SET ARITHABORT ON; SET ANSI_WARNINGS ON; SET ANSI_PADDING ON; SET QUOTED_IDENTIFIER ON; SET IMPLICIT_TRANSACTIONS OFF; SET TEXTSIZE 2147483647; SET LANGUAGE ENGLISH'); if (count($this->lazy_querys)) { foreach ($this->lazy_querys as $sql => $callback) { $this->lazyQuery($sql, $callback); } $this->lazy_querys = []; } return true; } public function lazyFetch($sql, $callback = null) { if ($this->isConnected()) { $this->lazyQuery($sql, $callback); } else { $this->lazy_querys[$sql] = $callback; } } public function lazyQuery($sql, $callback) { $result = $this->fetchAll($sql); if (is_callable($callback)) { call_user_func_array($callback, array('result' => $result)); } } public function errorField($field = null) { if (!is_null($field)) { $this->errorField = $field; } return $this->errorField; } public function errorCodeField($field = null) { if (!is_null($field)) { $this->errorCodeField = $field; } return $this->errorCodeField; } public function debugField($field = null) { if (!is_null($field)) { $this->debugField = $field; } return $this->debugField; } public function lastError() { return $this->adapter->last_message(); } public function log($message, $type = 'info') { if (null === $this->logger) { $registry = Samo_Registry::instance(); $this->logger = (isset($registry['logger'])) ? $registry['logger'] : false; } if ($this->logger) { if (!method_exists($this->logger, $type)) { $type = 'info'; $message = var_export($message, true); } $size = (is_string($message)) ? strlen($message) : 1; $limit = 10240; if ($size > $limit) { $message = substr($message, 0, $limit) . ' -- truncated ' . ($size - $limit) . ' chars by logger'; } $message = (array)$message; call_user_func_array(array($this->logger, $type), $message); } } public function raiseError($message, $code = 0) { $error = ($err = $this->lastError()) ? $err : $message; if (APPMODE == 'dev' || APPMODE == 'test') { $message = '[' . $error . '] ' . PHP_EOL . "\t" . $message; } $this->log($message, 'err'); $throw = true; if ($this->error_handler) { $throw = call_user_func_array($this->error_handler, array($error)); } if ($throw) { if (strpos($error, 'Query timeout expired') !== false) { $code = 2000000; } elseif (strpos($error, 'Disconnect error') !== false) { $code = 2001000; } elseif (strpos($error, 'Communication link failure') !== false) { $code = 2001000; } elseif (strpos($error, 'dbresults() returned FAIL') !== false) { $code = 2001001; } elseif (strpos($error, '20003 Adaptive Server connection timed out') !== false) { $code = 2001001; } elseif (strpos($error, 'Rerun the transaction') !== false) { $code = 2001002; } elseif (strpos($error, '20047 DBPROCESS is dead or not enabled') !== false) { $code = 2001003; } elseif (strpos($error, 'TCP Provider:') !== false) { $code = 2000002; } elseif (strpos($error, 'Could not find stored procedure') !== false) { $code = 2000005; } elseif (strpos($error, 'Invalid column name') !== false) { $code = 2000006; } elseif (strpos($error, 'Invalid object name') !== false && strpos($error, 'tempdb.dbo.tmp_') === false) { $code = 2000007; } elseif (strpos($error, 'which was not supplied') !== false) { $code = 2000008; } elseif (strpos($error, 'is not a parameter for procedure') !== false) { $code = 2000009; } elseif (strpos($error, 'Make sure that the name is entered correctly') !== false) { $code = 2000010; } elseif (strpos($error, 'Incorrect syntax near') !== false) { $code = 2000011; } elseif (strpos($error, 'has too many arguments specified') !== false) { $code = 2000012; } elseif (strpos($error, 'DatabaseSetup_Exception') !== false) { $code = 2000013; } if ($code < 2000000) { $exception = 'Database_Exception'; } elseif ($code <= 2000002) { $exception = 'DatabaseServer_Exception'; } elseif ($code >= 20001000) { $exception = 'DatabaseRetry_Exception'; } else { $exception = 'DatabaseSetup_Exception'; } if (defined('DATABASE_ERROR_LOG') && DATABASE_ERROR_LOG) { $msg = sprintf("[%s]\t%s\t%s\t%s(%d)\t%s\t[%s]" . PHP_EOL . PHP_EOL, date('Y-m-d H:i:s', Samo_Request::time()), isset($this->connect_params['hostname']) ? $this->connect_params['hostname'] : '-', $this->getSql(), $exception, $code, ($err) ? $err : '-', date('H:i:s')); file_put_contents(DATABASE_ERROR_LOG, $msg, LOCK_EX | FILE_APPEND); } throw new $exception($error, $code, $this); } } public function isConnected() { return $this->adapter->is_connected(); } private function preprocessQuery($sql) { $replace_map = array( '<OFFICEDB>' => 'office', '<ONLINEDB>' => 'database', '<MASTER>' => 'office', '<SLAVE>' => 'database', '<BANKDB>' => 'bank', ); foreach ($replace_map as $what => $param) { if (isset($this->connect_params[$param])) { $sql = str_replace($what, $this->connect_params[$param], $sql); } } return $sql; } public function query($sql) { if (is_string($sql) && !empty($sql)) { $sql = $orig_sql = $this->preprocessQuery($sql); $this->convertQuery($sql); $this->query = $sql; $this->result = null; $retry_count = $this->retry_query; $e = null; while ($retry_count > 0) { try { if (!$this->isConnected()) { $this->realConnect($this->connect_params); } if (APPMODE != 'production') { $startTime = microtime(true); } if (false !== $this->result = $this->adapter->query($sql)) { $msg = $retry_count < $this->retry_query ? sprintf('(try %d) %s', $this->retry_query - $retry_count, $orig_sql) : $orig_sql; if (APPMODE != 'production') { $msg = sprintf('/* %.4fs */ %s', microtime(true) - $startTime, $msg); } $this->log($msg); $this->catchError($this->result); return $this->result; } else { $this->raiseError($orig_sql); } } catch (DatabaseRetry_Exception $e) { $this->disconnect(); } $retry_count--; } if ($e !== null) { throw new Database_Exception($e->getMessage(), $e->getCode(), $this); } } return false; } public function catchError($resultset) { if ($this->errorField && $this->adapter->is_resource($resultset)) { for ($i = 0; $i < $this->adapter->num_fields($resultset); ++$i) { $field = $this->adapter->fetch_field($resultset, $i); if ($this->errorField == $field->name) { $row = $this->adapter->fetch_assoc($resultset); $this->adapter->free_result($resultset); $msg = !empty($row[$this->errorField]) ? $row[$this->errorField] : 'Unknown error'; $code = isset($row[$this->errorCodeField]) ? $row[$this->errorCodeField] : 0; throw new Samo_Exception($msg, $code); } } } } public function fetchOne($param = null) { if (!$param) { $param = $this->result; } if (false !== ($param = $this->_param2resource($param)) && $this->numRows($param) && false !== ($result = $this->fetchRow($param))) { $result = reset($result); $this->freeResult($param); return $result; } return false; } public function fetchOneRow($param = null) { if (!$param) { $param = $this->result; } if (false !== ($param = $this->_param2resource($param)) && $this->numRows($param) && false !== ($result = $this->fetchRow($param))) { $this->freeResult($param); return $result; } return false; } public function fetchAll($param = null, $callback = null) { if (!$param) { $param = $this->result; } $result = array(); if (false !== ($param = $this->_param2resource($param))) { while (false !== ($row = $this->fetchRow($param))) { $result[] = $row; } if ($callback !== null) { $result = array_map($callback, $result); } } return (count($result)) ? $result : false; } private function fixRow($row) { if ($this->fixRows && !empty($row)) { foreach ($row as $key => $value) { if (is_string($value)) { $value = str_replace("\0", '', $value); $row[$key] = ($value != ' ') ? $value : ''; } } } $this->convertResult($row); return $row; } public function fetchRow($param = null) { if (!$param) { $param = $this->result; } if (!$this->adapter->is_resource($param)) { $param = $this->_param2resource($param); } if ($this->numRows($param)) { $row = $this->adapter->fetch_assoc($param); if (false === $row) { if (true !== $this->nextResult($param)) { $this->freeResult($param); } } else { $row = $this->fixRow($row); $debug = $this->debugField(); if (array_key_exists($debug, $row)) { $name = isset($row['name']) ? $row['name'] : null; if (0 === strpos($row[$debug], '<rows>')) { $xml = simplexml_load_string(mb_convert_encoding($row[$debug], 'utf-8', $this->encoding_source)); $rows = array(); foreach ($xml->row as $line) { $row = array(); foreach ($line->attributes() as $key => $value) { $row[(string)$key] = mb_convert_encoding($value, $this->encoding_result, 'utf-8'); } $rows[] = $row; } $row = $rows; } $this->log(array($row, $name), 'pretty_dump'); if (false == $this->nextResult($param)) { $this->freeResult(); return false; } else { return $this->fetchRow($param); } } return $row; } } else { if (false == $this->nextResult($param)) { $this->freeResult(); } } return false; } public function numRows($param = null) { if (!$param) { $param = $this->result; } return ($this->adapter->is_resource($param) && false !== ($numRows = $this->adapter->num_rows($param))) ? $numRows : 0; } public function _param2resource($param) { if (is_string($param)) { if (false === ($param = $this->query($param))) { return false; } } if (is_array($param)) { $proc = array_shift($param); return $this->exec($proc, $param, true); } return ($this->adapter->is_resource($param)) ? $param : false; } public function freeResult($param = null) { $return = false; if (!$param) { $param = $this->result; } if ($this->adapter->is_resource($param)) { if ($return = $this->adapter->free_result($param)) { $this->result = null; } } return $return; } public function nextResult($param = null) { if (!$param) { $param = $this->result; } if ($this->adapter->is_resource($param)) { return $this->adapter->next_result($param); } return false; } public function disconnect() { if ($this->isConnected()) { $this->adapter->disconnect(); return true; } return true; } public function formatQuery(...$args) { $format = array_shift($args); if (is_array($args[0])) { $args = $args[0]; } $args = array_map(array($this, 'quote'), $args); $return = vsprintf($format, $args); return $return; } public function quote($in = null) { if (is_array($in)) { $return = $this->quoteString(implode(',', $in)); } elseif ((is_null($in)) || ('NULL' == strtoupper((string)$in))) { $return = 'NULL'; } elseif (is_int($in)) { $return = $in; } elseif (is_float($in)) { $return = $this->quoteFloat($in); } elseif (is_bool($in)) { $return = $this->quoteBoolean($in); } elseif ($in instanceof Samo_Datetime) { $return = ($in->is_null()) ? 'NULL' : $this->quoteString($in->format('sql')); } elseif (strpos($in, '0x') === 0 && ctype_xdigit(substr($in, 2))) { $return = $in; } else { $return = $this->quoteString($in); } return $return; } public function quoteBoolean($boolean) { return $boolean ? '1' : '0'; } public function quoteFloat($float) { return $this->quoteString(str_replace(',', '.', strval(floatval($float)))); } public function quoteString($string) { return sprintf("'%s'", $this->escape($string)); } public function quoteNvarchar($string, $charset = null) { if (null === $string || 'NULL' == strtoupper((string)$string)) { $return = 'NULL'; } else { $charset = (null === $charset) ? $this->encoding_source : $charset; $native = mb_convert_encoding($string, 'UTF-16LE', $charset); $return = '0x' . bin2hex($native); } return $return; } public function escape($string) { return str_replace("'", "''", $string); } public function fetchAllWithKey($param, $fieldName, $callback = null) { if (!$param) { $param = $this->result; } $result = array(); if (false !== ($param = $this->_param2resource($param))) { while (false !== ($row = $this->fetchRow($param))) { if (isset($row[$fieldName])) { $result[$row[$fieldName]] = $row; } } if (null !== $callback) { $result = array_map($callback, $result); } } return (count($result)) ? $result : false; } public function fetchAllWithKeyGroup($param, $fieldName, $callback = null) { if (!$param) { $param = $this->result; } $result = array(); if (false !== ($param = $this->_param2resource($param))) { while (false !== ($row = $this->fetchRow($param))) { if (array_key_exists($fieldName, $row)) { if (is_callable($callback)) { $row = $callback($row); } $result[$row[$fieldName]][] = $row; } } } return (count($result)) ? $result : false; } public function rawMode($raw = false) { $this->fixRows = !(bool)$raw; } public function exec($proc, $params = array(), $return_result = false) { if ($sql = $this->formatExec($proc, $params)) { $this->query($sql); return ($return_result) ? $this->result : $this; } return false; } public function formatExec($proc, $params = array()) { if ($proc) { $query = array(); foreach ($params as $key => $value) { if (is_int($key)) { $query[] = '%s'; } else { $query[] = '@' . $key . ' = %s'; } } $query = 'EXEC ' . $proc . ' ' . implode(', ', $query); return $this->formatQuery($query, $params); } return false; } public function clientCharset($charset) { $old = $this->encoding_result; $this->connect_params['charset'] = $charset; $this->adapter->client_charset($charset); $this->setResultEncoding($charset); $this->setSourceEncoding($charset); return $old; } public function setResultEncoding($result) { $this->encoding_result = strtolower($result); } public function setSourceEncoding($result) { $this->encoding_source = strtolower($result); } private function convertResult(&$array) { if ($array) { if ($this->encoding_source != $this->encoding_result) { foreach ($array as $key => $value) { if (is_string($value)) { $array[$key] = mb_convert_encoding($value, $this->encoding_result, $this->encoding_source); } } } foreach ($array as $field => &$data) { if (!($data instanceof Samo_DateTime) && preg_match('~(date|checkin|checkout)~i', $field)) { $data = Samo_Loader::load_object('Samo_Datetime', $data); } } } } private function convertQuery(&$query) { if ($this->encoding_source != $this->encoding_result) { $query = mb_convert_encoding($query, $this->encoding_source, $this->encoding_result); } } public function setErrorHandling($handler) { $this->error_handler = $handler; } public function execQuery($sql, $params = array(), $return_result = false) { $sql = $this->formatQuery($sql, $params); $this->query($sql); return ($return_result) ? $this->result : $this; } public function getSql() { return $this->query; } public function getConnectParams() { return $this->connect_params; } public function web_log_table($data, $id = null) { $_data = array( 'priority' => 'info', 'message' => 'default', 'partpass' => 'null', 'sql' => '', 'result' => array(), 'claim' => 'null', 'claiminc' => -1, 'ip' => Samo_Request::remote_addr(), 'claimdocument' => null, ); $data = array_merge($_data, $data); if (!count($data['result'])) { $data['result']['operation'] = 'before execution'; } $data['result']['UA'] = Samo_Request::user_agent(); $data['result']['Server'] = Samo_Request::host(); if ($SOURCE = Samo_Request::get('SOURCE')) { $data['result']['SOURCE'] = $SOURCE; } $data['result'] = var_export($data['result'], true); if (null !== $id) { $data['id'] = $id; } $sql = $this->formatExec('<OFFICEDB>.[dbo].[up_WEB_3_log]', $data); return $this->fetchOne($sql); } public function setLogger($logger) { $this->logger = $logger; } } class Database_Exception extends Samo_Exception { private $sql = null; private $error = null; private $connect_params = null; public function __construct($error, $code, Samo_Database $db) { $this->sql = $db->getSql(); $this->error = $error; $this->connect_params = $db->getConnectParams(); $this->code = $code; $registry = Samo_Registry::instance(); if (!isset($registry['messages'])) { $msg = 'Database error'; } else { if (isset($registry['messages'][$this->code])) { $msg = $registry['messages'][$this->code]; } else { $msg = ($this->code == 2000002) ? $registry['messages']['DATABASE_OFFICE_INACCESSABLE'] : $registry['messages']['DATABASE_ERROR']; } } $this->message = $msg; } public function getSql() { return $this->sql; } public function getError() { return $this->error; } public function getServer() { return (isset($this->connect_params['hostname'])) ? $this->connect_params['hostname'] : null; } public function getUser() { return (isset($this->connect_params['username'])) ? $this->connect_params['username'] : null; } public function getPassword() { return (isset($this->connect_params['password'])) ? $this->connect_params['password'] : null; } public function getDatabase() { return (isset($this->connect_params['database'])) ? $this->connect_params['database'] : null; } } class DatabaseServer_Exception extends Database_Exception { } class DatabaseRetry_Exception extends Database_Exception { } class DatabaseSetup_Exception extends Database_Exception { private $logId = null; public function __construct($error, $code, Samo_Database $db) { parent:: __construct($error, $code, $db); if ($code >= 2000005) { $log = array( 'sql' => $db->getSql(), 'message' => 'ERROR', 'priority' => 'sql_error', 'result' => array( 'code' => $code, 'error' => $error, 'ConnectParams' => $db->getConnectParams(), ), ); try { $this->logId = $db->web_log_table($log); } catch (Exception $e) { $e; } } } public function getLogId() { return $this->logId; } } class Database_Stub extends Samo_Database { public function query($param) { return false; } public function realConnect($params) { return false; } } 