<?php
 class Samo_Database_Dblib implements Samo_Database_Adapter { private $socket = null; private $cache_date_fields = []; private $cache_float_fields = []; private $charset = null; private $last_error = null; public function __construct() { if (!extension_loaded('mssql')) { throw new Samo_Exception('Extension "mssql" not loaded.'); } ini_set('mssql.datetimeconvert', 0); ini_set('mssql.textsize', 2147483647); } public function __destruct() { if ($this->is_connected()) { $this->disconnect(); } } public function client_charset($charset = null) { if ($charset !== null) { if ($charset !== $this->charset && $this->is_connected()) { $this->disconnect(); } ini_set('mssql.charset', $charset); $this->charset = $charset; } return $this->charset; } public function connect($params) { $this->client_charset($params['charset']); if (isset($params['tdsversion']) && false === getenv('TDSVER')) { putenv('TDSVER=' . $params['tdsversion']); } $hostname = str_replace(',', ':', $params['hostname']); ini_set('mssql.connect_timeout', $params['connect_timeout']); ini_set('mssql.timeout', $params['timeout']); $this->socket = @\mssql_connect($hostname, $params['username'], $params['password']); if ($this->socket) { @\mssql_select_db($params['database'], $this->socket); } return $this->socket; } public function query($sql) { try { $qry = mssql_query($sql, $this->socket); return $qry; } catch (Exception $e) { $this->last_error = $e->getMessage(); return false; } } public function fetch_assoc($rsql) { if ($array = \mssql_fetch_assoc($rsql)) { $resource_id = intval($rsql); if (!isset($this->cache_date_fields[$resource_id])) { $this->cache_date_fields[$resource_id] = []; $this->cache_float_fields[$resource_id] = []; $dates = ['datetime', 'smalldatetime']; $floats = ['numeric', 'real']; for ($offset = 0; $offset < mssql_num_fields($rsql); $offset++) { $type = \mssql_field_type($rsql, $offset); if (in_array($type, $dates)) { $this->cache_date_fields[$resource_id][] = \mssql_field_name($rsql, $offset); } if (in_array($type, $floats)) { $this->cache_float_fields[$resource_id][] = \mssql_field_name($rsql, $offset); } } } $date_fields = $this->cache_date_fields[$resource_id]; if (count($date_fields)) { foreach ($date_fields as $field) { $array[$field] = Samo_Datetime::parse($array[$field]); } } $float_fields = $this->cache_float_fields[$resource_id]; if (count($float_fields)) { foreach ($float_fields as $field) { $array[$field] = null !== $array[$field] ? floatval($array[$field]) : null; } } } return $array; } public function disconnect() { $return = \mssql_close($this->socket); $this->socket = null; return $return; } public function num_rows($rsql) { return \mssql_num_rows($rsql); } public function num_fields($rsql) { return \mssql_num_fields($rsql); } private function free_field_cache($resource) { $resource_id = intval($resource); if (isset($this->cache_date_fields[$resource_id])) { unset($this->cache_date_fields[$resource_id]); } if (isset($this->cache_float_fields[$resource_id])) { unset($this->cache_float_fields[$resource_id]); } } public function next_result($rsql) { if (false !== ($next = \mssql_next_result($rsql))) { $this->free_field_cache($rsql); } return $next; } public function last_message() { if ($this->last_error) { $return = $this->last_error; $this->last_error = null; } else { $return = \mssql_get_last_message(); } return $return; } public function free_result($result) { $this->free_field_cache($result); return \mssql_free_result($result); } public function fetch_field($result, $offset = -1) { return \mssql_fetch_field($result, $offset); } public function is_connected() { return !is_null($this->socket) && is_resource($this->socket) && (($type = get_resource_type($this->socket)) && $type === 'mssql link'); } public function is_resource($param) { return \is_resource($param); } } 