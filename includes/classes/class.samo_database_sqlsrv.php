<?php
 class Samo_Database_Sqlsrv implements Samo_Database_Adapter { private $charset = null; private $fix_charset = false; private $php_charset = null; private $socket = null; private $timeout = null; public function __construct() { if (!extension_loaded('sqlsrv')) { throw new Samo_Exception('Extension "sqlsrv" not loaded.'); } \sqlsrv_configure("WarningsReturnAsErrors", 0); \sqlsrv_configure("ClientBufferMaxKBSize", 102400); if ('Linux' == PHP_OS) { $this->fix_charset = true; $this->php_charset = ini_get('default_charset'); } } public function __destruct() { if ($this->is_connected()) { $this->disconnect(); } } public function client_charset($charset) { if ($charset !== null) { $this->php_charset = $charset; $charset = ($this->fix_charset || in_array(strtolower($charset), ['utf-8', 'utf8'])) ? 'UTF-8' : SQLSRV_ENC_CHAR; if ($charset !== $this->charset && $this->is_connected()) { $this->disconnect(); } $this->charset = $charset; } return $this->charset; } public function connect($params) { $charset = $this->client_charset($params['charset']); $connectionInfo = [ 'UID' => $params['username'], 'PWD' => $params['password'], 'APP' => 'SamoTourOnline', 'CharacterSet' => $charset, 'MultipleActiveResultSets' => true, 'Database' => $params['database'], 'LoginTimeout' => $params['connect_timeout'], ]; $hostname = str_replace(':', ',', $params['hostname']); $conn = sqlsrv_connect($hostname, $connectionInfo); if ($conn === false) { $this->socket = null; } else { $this->socket = $conn; } $this->timeout = $params['timeout']; return $this->socket; } public function query($sql) { if ($this->fix_charset) { $sql = mb_convert_encoding($sql, 'utf8', $this->php_charset); } $return = \sqlsrv_query($this->socket, $sql, [], ['Scrollable' => 'buffered', 'QueryTimeout' => $this->timeout]); return $return; } public function fetch_assoc($rsql) { $meta = \sqlsrv_field_metadata($rsql); $return = \sqlsrv_fetch_array($rsql, SQLSRV_FETCH_ASSOC); if (is_array($return)) { foreach ($meta as $data) { switch ($data['Type']) { case 2: case 3: $return[$data['Name']] = (null !== $return[$data['Name']]) ? floatval($return[$data['Name']]) : null; break; case 93: $return[$data['Name']] = Samo_Datetime::parse($return[$data['Name']]); break; case 1: case -1: case -9: case 12: if ($this->fix_charset && null !== $return[$data['Name']]) { $return[$data['Name']] = mb_convert_encoding($return[$data['Name']], $this->php_charset, 'utf8'); } break; default: break; } } } return (null === $return) ? false : $return; } public function disconnect() { $return = \sqlsrv_close($this->socket); $this->socket = null; return $return; } public function num_rows($rsql) { $num = \sqlsrv_has_rows($rsql) ? \sqlsrv_num_rows($rsql) : 0; $num = intval($num); return $num; } public function num_fields($rsql) { return \sqlsrv_num_fields($rsql); } public function next_result($rsql) { return \sqlsrv_next_result($rsql); } public function last_message() { $errors = \sqlsrv_errors(); if (is_array($errors)) { $last = end($errors); return $last['message']; } return ""; } public function free_result($result) { return \sqlsrv_free_stmt($result); } public function fetch_field($result, $offset = -1) { $return = false; if (false !== ($meta = \sqlsrv_field_metadata($result))) { if ($offset == -1) { $offset = 0; } $data = $meta[$offset]; $return = new stdClass(); $return->name = $data['Name']; $return->column_source = $data['Name']; $return->max_length = $data['Size']; $return->numeric = in_array($data['Type'], [SQLSRV_SQLTYPE_TINYINT, SQLSRV_SQLTYPE_INT, SQLSRV_SQLTYPE_BIGINT, SQLSRV_PHPTYPE_FLOAT, SQLSRV_PHPTYPE_FLOAT]); $return->type = $data['Type']; } return $return; } public function is_connected() { return !is_null($this->socket) && is_resource($this->socket) && (($type = get_resource_type($this->socket)) && $type === 'SQL Server Connection'); } public function is_resource($param) { return \is_resource($param); } } 