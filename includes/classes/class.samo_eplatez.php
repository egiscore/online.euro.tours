<?php
 class Samo_EPlatez extends Samo_Claim { protected $messages = null; public $defaults; public $cash = 0; public function construct($claim = null, $people = null, $order = null) { parent::construct($claim, $people, $order); $this->defaults['als'] = 'rub'; $this->defaults['EDIT_AMOUNT_ENABLE'] = 1; $this->defaults['PAYER'] = array(); $this->defaults['CLAIM_INFO'] = array(); $this->defaults['TYPE_OWNER_CONFIG'] = array(); $this->defaults['CLAIM_COST'] = array(); $this->defaults['inumber'] = ''; $this->defaults['TEMPLATE'] = ''; $this->defaults['BANK'] = Samo_Utils::ifs(Samo_Request::intval('BANK'), 'null'); $this->messages = Samo_Registry::get('messages'); } public function is_enabled() { $this->defaults['CLAIM_INFO'] = parent::claimInfo(); if (!$this->defaults['CLAIM_INFO']) { throw new Samo_Exception($this->messages['CAN_NOT_LOAD_CLAIM_INFO']); } $this->checkAccessPay(); $this->Check_Print_By_Tour(); $this->fetchConfig(); return true; } public function checkAccessPay() { if (!$this->defaults['CLAIM_INFO']['AccessPay']) { throw new Samo_Exception($this->messages['CLAIM_NOT_ACCESSPAY'], 4); } } public function Check_Print_By_Tour() { return true; } public function fetchConfig() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_platez_getConfig', [ 'CLAIM' => $this->defaults['CLAIM'], 'UserCode' => $this->internet_user(), ] ); $this->_fetchConfig($sql); return true; } protected function _fetchConfig($sql) { if (false !== ($res = $this->db->fetchRow($sql))) { unset($res['document_currency_inc'], $res['document_currency_alias']); unset($res['claim_currency_inc'], $res['claim_currency_alias']); $this->defaults['TYPE_OWNER_CONFIG'] = array_merge($this->defaults['TYPE_OWNER_CONFIG'], $res); return true; } throw new Samo_Exception($this->messages['CL_PAY_CONFIG_ERROR'], 501); } public function fetchOwner() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEBST_getOwner', [ 'Claim' => $this->defaults['CLAIM'], 'Partner' => 0, 'Cash' => $this->cash, 'BankCode' => $this->defaults['BANK'], 'auth_type' => $_SESSION['samo_auth']['type'], ] ); return $this->_fetchOwner($sql); } protected function _fetchOwner($sql) { if (false !== ($result = $this->db->query($sql))) { if ($this->db->numRows($result) > 0) { $res_all = $this->db->fetchAll($result); $res = current($res_all); if ($res['owner'] == 0) { $message = (isset($res['error_text']) && !empty($res['error_text'])) ? $res['error_text'] : $this->messages['UNKNOWN_OWNER']; throw new Samo_Exception($message); } $this->defaults['TYPE_OWNER_CONFIG'] = array_merge($this->defaults['TYPE_OWNER_CONFIG'], $res); return $res_all; } } throw new Samo_Exception($this->messages['NO_CONTRACT'], 3); } public function getPaymentInfo() { $this->defaults['CLAIM_COST'] = $this->claimCost(); if (count($this->defaults['CLAIM_COST']) != 2) { throw new Samo_Exception($this->messages['CANNOT_CALCULATE']); } $debt_field = $_SESSION['samo_auth']['type'] == 'agency' ? 'Debt' : 'Debt_person'; $this->defaults['CLAIM_COST'][1]['Debt'] = $this->defaults['CLAIM_COST'][1][$debt_field]; if ($this->defaults['BANK'] > 0) { $min_payment = $this->getMinAmount($this->defaults['BANK']); $this->defaults['CLAIM_COST'][1]['MinAmount'] = $min_payment < $this->defaults['CLAIM_COST'][1]['Debt'] ? $min_payment : $this->defaults['CLAIM_COST'][1]['Debt']; } else { $this->defaults['CLAIM_COST'][1]['MinAmount'] = 0; } $this->defaults['TYPE_OWNER_CONFIG']['document_currency_inc'] = $this->defaults['CLAIM_COST'][1]['CurrencyInc']; $this->defaults['TYPE_OWNER_CONFIG']['document_currency_alias'] = $this->defaults['CLAIM_COST'][1]['CurrencyAlias']; $this->defaults['TYPE_OWNER_CONFIG']['claim_currency_inc'] = $this->defaults['CLAIM_COST'][0]['CurrencyInc']; $this->defaults['TYPE_OWNER_CONFIG']['claim_currency_alias'] = $this->defaults['CLAIM_COST'][0]['CurrencyAlias']; $this->defaults['als'] = strtolower($this->defaults['TYPE_OWNER_CONFIG']['document_currency_alias']); } public function fetch_eplatez_Number() { $result = false; $sql = $this->db->formatExec('<BANKDB>.dbo.up_GetBank', ['Inc' => $this->defaults['BANK']]); $bank = $this->db->fetchOneRow($sql); $sql = $this->db->formatExec( '<BANKDB>.dbo.up_GetNewInvoiceNumber', [ 'Firm' => $bank['Alias'], 'INumber' => '', 'retDataset' => 1, 'FirmId' => $this->defaults['TYPE_OWNER_CONFIG']['owner'], 'Partner' => $this->defaults['CLAIM_INFO']['PartnerInc'], ] ); if ($invoice = $this->db->fetchOneRow($sql)) { $result = $this->defaults['inumber'] = $invoice['inumber']; } return $result; } public function SaveToInvoicesForBank() { $rate = $this->defaults['CLAIM_COST'][1]['rateex']; $amount = $this->defaults['PAYER']['TOPAY'] / $rate; $sql = $this->db->formatExec( '<BANKDB>.dbo.up_AddInvoice', [ 'INumber' => $this->defaults['inumber'], 'IDate' => $this->defaults['TYPE_OWNER_CONFIG']['datenow'], 'Payer' => $this->defaults['PAYER']['PAYER_FIO'], 'DocType' => 1, 'PaspSer' => $this->defaults['PAYER']['PAYER_PSERIE'], 'PaspNumber' => $this->defaults['PAYER']['PAYER_PNUMBER'], 'PaspWhen' => $this->defaults['PAYER']['PAYER_PGIVENDATE'], 'PaspWhere' => $this->defaults['PAYER']['PAYER_PGIVENORG'], 'PaspCodeOrg' => $this->defaults['PAYER']['PAYER_PGIVENORG_MENT'], 'Address' => $this->defaults['PAYER']['PAYER_ADDRESS'], 'CurSum' => $this->defaults['PAYER']['TOPAY'], 'Currency' => strtoupper(isset($this->defaults['PAYER']['CURRENCY']) ? $this->defaults['PAYER']['CURRENCY'] : $this->defaults['TYPE_OWNER_CONFIG']['document_currency_alias']), 'RubSum' => $this->defaults['PAYER']['TOPAY'], 'InvDetail' => "{" . $this->defaults['CLAIM'] . "|" . $amount . "|" . $this->defaults['TYPE_OWNER_CONFIG']['claim_currency_alias'] . "|" . $this->defaults['PAYER']['TOPAY'] . "|" . $rate . "}", 'Firm' => (isset($this->defaults['FIRM']) && $this->defaults['FIRM'] ? $this->defaults['FIRM'] : 'PSBANK'), 'finished' => 0, 'FirmId' => $this->defaults['TYPE_OWNER_CONFIG']['owner'], 'TransactionId' => (isset($this->defaults['TRANSACTIONID']) ? $this->defaults['TRANSACTIONID'] : null), 'Bank' => $this->defaults['BANK'], 'Born' => $this->defaults['PAYER']['PAYER_BORN'], ] ); $this->_SaveToInvoicesForBank($sql); return $this->defaults['inumber']; } protected function _SaveToInvoicesForBank($sql) { if (false == $this->db->query($sql)) { throw new Samo_Exception($this->messages['ERROR_ON_SAVE']); } } public function fetchPartnerInfo($inc) { if (false !== ($partner = $this->getPartnerInfo($inc))) { return $partner; } throw new Samo_Exception($this->messages['CAN_NOT_LOAD_PARTNER_INFO']); } public function setOwner() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEBST_change_claim_owner', [ 'Claim' => $this->defaults['CLAIM'], 'New_Owner' => Samo_Request::intval('NEW_OWNER'), 'User' => $this->internet_user(), ] ); return $this->_setOwner($sql); } protected function _setOwner($sql) { if (false !== ($res = $this->db->fetchRow($sql))) { if (0 !== $res['result']) { throw new Samo_Exception($res['error_text'], $res['result']); } } return true; } public function pay_variant_check_owner($claim, $variant) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_pay_variant_check_owner', [ 'Claim' => $claim, 'Variant' => $variant, 'UserCode' => $this->internet_user(), ] ); $res = $this->db->fetchRow($sql); return (false !== $res) ? true : false; } public static function messages($key) { static $messages = null; if ($messages === null) { $registry = Samo_Registry::instance(); if (isset($registry['messages'])) { $messages = $registry['messages']; } else { include _ROOT . 'includes/messages/messages_' . Samo_Request::lang() . '.php'; } } return isset($messages[$key]) ? $messages[$key] : $key; } public function getMinAmount($inc) { if ($inc !== null) { $sql = $this->db->formatExec('<BANKDB>.dbo.up_GetBank', ['Inc' => $inc]); $bank = $this->db->fetchOneRow($sql); return $bank['MinAmount']; } return 0; } } 