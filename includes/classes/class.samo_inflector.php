<?php
 class Samo_Inflector { protected static $_plural = array( 'rules' => array( '/(s)tatus$/i' => '\1\2tatuses', '/(quiz)$/i' => '\1zes', '/^(ox)$/i' => '\1\2en', '/([m|l])ouse$/i' => '\1ice', '/(matr|vert|ind)(ix|ex)$/i' => '\1ices', '/(x|ch|ss|sh)$/i' => '\1es', '/([^aeiouy]|qu)y$/i' => '\1ies', '/(hive)$/i' => '\1s', '/(?:([^f])fe|([lre])f)$/i' => '\1\2ves', '/sis$/i' => 'ses', '/([ti])um$/i' => '\1a', '/(p)erson$/i' => '\1eople', '/(m)an$/i' => '\1en', '/(c)hild$/i' => '\1hildren', '/(buffal|tomat)o$/i' => '\1\2oes', '/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|vir)us$/i' => '\1i', '/us$/i' => 'uses', '/(alias)$/i' => '\1es', '/(ax|cris|test)is$/i' => '\1es', '/s$/' => 's', '/^$/' => '', '/$/' => 's', ), 'uninflected' => array( '.*[nrlm]ese', '.*deer', '.*fish', '.*measles', '.*ois', '.*pox', '.*sheep', 'people' ), 'irregular' => array( 'atlas' => 'atlases', 'beef' => 'beefs', 'brother' => 'brothers', 'cafe' => 'cafes', 'child' => 'children', 'cookie' => 'cookies', 'corpus' => 'corpuses', 'cow' => 'cows', 'ganglion' => 'ganglions', 'genie' => 'genies', 'genus' => 'genera', 'graffito' => 'graffiti', 'hoof' => 'hoofs', 'loaf' => 'loaves', 'man' => 'men', 'money' => 'monies', 'mongoose' => 'mongooses', 'move' => 'moves', 'mythos' => 'mythoi', 'niche' => 'niches', 'numen' => 'numina', 'occiput' => 'occiputs', 'octopus' => 'octopuses', 'opus' => 'opuses', 'ox' => 'oxen', 'penis' => 'penises', 'person' => 'people', 'sex' => 'sexes', 'soliloquy' => 'soliloquies', 'testis' => 'testes', 'trilby' => 'trilbys', 'turf' => 'turfs', 'potato' => 'potatoes', 'hero' => 'heroes', 'tooth' => 'teeth', 'goose' => 'geese', 'foot' => 'feet' ) ); protected static $_singular = array( 'rules' => array( '/(s)tatuses$/i' => '\1\2tatus', '/^(.*)(menu)s$/i' => '\1\2', '/(quiz)zes$/i' => '\\1', '/(matr)ices$/i' => '\1ix', '/(vert|ind)ices$/i' => '\1ex', '/^(ox)en/i' => '\1', '/(alias)(es)*$/i' => '\1', '/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|viri?)i$/i' => '\1us', '/([ftw]ax)es/i' => '\1', '/(cris|ax|test)es$/i' => '\1is', '/(shoe|slave)s$/i' => '\1', '/(o)es$/i' => '\1', '/ouses$/' => 'ouse', '/([^a])uses$/' => '\1us', '/([m|l])ice$/i' => '\1ouse', '/(x|ch|ss|sh)es$/i' => '\1', '/(m)ovies$/i' => '\1\2ovie', '/(s)eries$/i' => '\1\2eries', '/([^aeiouy]|qu)ies$/i' => '\1y', '/([lre])ves$/i' => '\1f', '/([^fo])ves$/i' => '\1fe', '/(tive)s$/i' => '\1', '/(hive)s$/i' => '\1', '/(drive)s$/i' => '\1', '/(^analy)ses$/i' => '\1sis', '/(analy|diagno|^ba|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i' => '\1\2sis', '/([ti])a$/i' => '\1um', '/(p)eople$/i' => '\1\2erson', '/(m)en$/i' => '\1an', '/(c)hildren$/i' => '\1\2hild', '/(n)ews$/i' => '\1\2ews', '/eaus$/' => 'eau', '/^(.*us)$/' => '\\1', '/s$/i' => '' ), 'uninflected' => array( '.*[nrlm]ese', '.*deer', '.*fish', '.*measles', '.*ois', '.*pox', '.*sheep', '.*ss' ), 'irregular' => array( 'foes' => 'foe', 'waves' => 'wave', 'curves' => 'curve' ) ); protected static $_uninflected = array( 'Amoyese', 'bison', 'Borghese', 'bream', 'breeches', 'britches', 'buffalo', 'cantus', 'carp', 'chassis', 'clippers', 'cod', 'coitus', 'Congoese', 'contretemps', 'corps', 'debris', 'diabetes', 'djinn', 'eland', 'elk', 'equipment', 'Faroese', 'flounder', 'Foochowese', 'gallows', 'Genevese', 'Genoese', 'Gilbertese', 'graffiti', 'headquarters', 'herpes', 'hijinks', 'Hottentotese', 'information', 'innings', 'jackanapes', 'Kiplingese', 'Kongoese', 'Lucchese', 'mackerel', 'Maltese', '.*?media', 'mews', 'moose', 'mumps', 'Nankingese', 'news', 'nexus', 'Niasese', 'Pekingese', 'Piedmontese', 'pincers', 'Pistoiese', 'pliers', 'Portuguese', 'proceedings', 'rabies', 'rice', 'rhinoceros', 'salmon', 'Sarawakese', 'scissors', 'sea[- ]bass', 'series', 'Shavese', 'shears', 'siemens', 'species', 'swine', 'testes', 'trousers', 'trout', 'tuna', 'Vermontese', 'Wenchowese', 'whiting', 'wildebeest', 'Yengeese' ); protected static $_transliteration = array( '/ä|æ|ǽ/' => 'ae', '/ö|œ/' => 'oe', '/ü/' => 'ue', '/Ä/' => 'Ae', '/Ü/' => 'Ue', '/Ö/' => 'Oe', '/À|Á|Â|Ã|Å|Ǻ|Ā|Ă|Ą|Ǎ/' => 'A', '/à|á|â|ã|å|ǻ|ā|ă|ą|ǎ|ª/' => 'a', '/Ç|Ć|Ĉ|Ċ|Č/' => 'C', '/ç|ć|ĉ|ċ|č/' => 'c', '/Ð|Ď|Đ/' => 'D', '/ð|ď|đ/' => 'd', '/È|É|Ê|Ë|Ē|Ĕ|Ė|Ę|Ě/' => 'E', '/è|é|ê|ë|ē|ĕ|ė|ę|ě/' => 'e', '/Ĝ|Ğ|Ġ|Ģ/' => 'G', '/ĝ|ğ|ġ|ģ/' => 'g', '/Ĥ|Ħ/' => 'H', '/ĥ|ħ/' => 'h', '/Ì|Í|Î|Ï|Ĩ|Ī|Ĭ|Ǐ|Į|İ/' => 'I', '/ì|í|î|ï|ĩ|ī|ĭ|ǐ|į|ı/' => 'i', '/Ĵ/' => 'J', '/ĵ/' => 'j', '/Ķ/' => 'K', '/ķ/' => 'k', '/Ĺ|Ļ|Ľ|Ŀ|Ł/' => 'L', '/ĺ|ļ|ľ|ŀ|ł/' => 'l', '/Ñ|Ń|Ņ|Ň/' => 'N', '/ñ|ń|ņ|ň|ŉ/' => 'n', '/Ò|Ó|Ô|Õ|Ō|Ŏ|Ǒ|Ő|Ơ|Ø|Ǿ/' => 'O', '/ò|ó|ô|õ|ō|ŏ|ǒ|ő|ơ|ø|ǿ|º/' => 'o', '/Ŕ|Ŗ|Ř/' => 'R', '/ŕ|ŗ|ř/' => 'r', '/Ś|Ŝ|Ş|Š/' => 'S', '/ś|ŝ|ş|š|ſ/' => 's', '/Ţ|Ť|Ŧ/' => 'T', '/ţ|ť|ŧ/' => 't', '/Ù|Ú|Û|Ũ|Ū|Ŭ|Ů|Ű|Ų|Ư|Ǔ|Ǖ|Ǘ|Ǚ|Ǜ/' => 'U', '/ù|ú|û|ũ|ū|ŭ|ů|ű|ų|ư|ǔ|ǖ|ǘ|ǚ|ǜ/' => 'u', '/Ý|Ÿ|Ŷ/' => 'Y', '/ý|ÿ|ŷ/' => 'y', '/Ŵ/' => 'W', '/ŵ/' => 'w', '/Ź|Ż|Ž/' => 'Z', '/ź|ż|ž/' => 'z', '/Æ|Ǽ/' => 'AE', '/ß/' => 'ss', '/Ĳ/' => 'IJ', '/ĳ/' => 'ij', '/Œ/' => 'OE', '/ƒ/' => 'f' ); protected static $_cache = array(); protected static $_initialState = array(); protected static function _cache($type, $key, $value = false) { $key = '_' . $key; $type = '_' . $type; if ($value !== false) { Samo_Inflector::$_cache[$type][$key] = $value; return $value; } if (!isset(Samo_Inflector::$_cache[$type][$key])) { return false; } return Samo_Inflector::$_cache[$type][$key]; } public static function reset() { if (empty(Samo_Inflector::$_initialState)) { Samo_Inflector::$_initialState = get_class_vars('Samo_Inflector'); return; } foreach (Samo_Inflector::$_initialState as $key => $val) { if ($key !== '_initialState') { Samo_Inflector::${$key} = $val; } } } public static function rules($type, $rules, $reset = false) { $var = '_' . $type; switch ($type) { case 'transliteration': if ($reset) { Samo_Inflector::$_transliteration = $rules; } else { Samo_Inflector::$_transliteration = $rules + Samo_Inflector::$_transliteration; } break; default: foreach ($rules as $rule => $pattern) { if (is_array($pattern)) { if ($reset) { Samo_Inflector::${$var}[$rule] = $pattern; } else { if ($rule === 'uninflected') { Samo_Inflector::${$var}[$rule] = array_merge($pattern, Samo_Inflector::${$var}[$rule]); } else { Samo_Inflector::${$var}[$rule] = $pattern + Samo_Inflector::${$var}[$rule]; } } unset($rules[$rule], Samo_Inflector::${$var}['cache' . ucfirst($rule)]); if (isset(Samo_Inflector::${$var}['merged'][$rule])) { unset(Samo_Inflector::${$var}['merged'][$rule]); } if ($type === 'plural') { Samo_Inflector::$_cache['pluralize'] = Samo_Inflector::$_cache['tableize'] = array(); } elseif ($type === 'singular') { Samo_Inflector::$_cache['singularize'] = array(); } } } Samo_Inflector::${$var}['rules'] = $rules + Samo_Inflector::${$var}['rules']; } } public static function pluralize($word) { if (isset(Samo_Inflector::$_cache['pluralize'][$word])) { return Samo_Inflector::$_cache['pluralize'][$word]; } if (!isset(Samo_Inflector::$_plural['merged']['irregular'])) { Samo_Inflector::$_plural['merged']['irregular'] = Samo_Inflector::$_plural['irregular']; } if (!isset(Samo_Inflector::$_plural['merged']['uninflected'])) { Samo_Inflector::$_plural['merged']['uninflected'] = array_merge(Samo_Inflector::$_plural['uninflected'], Samo_Inflector::$_uninflected); } if (!isset(Samo_Inflector::$_plural['cacheUninflected']) || !isset(Samo_Inflector::$_plural['cacheIrregular'])) { Samo_Inflector::$_plural['cacheUninflected'] = '(?:' . implode('|', Samo_Inflector::$_plural['merged']['uninflected']) . ')'; Samo_Inflector::$_plural['cacheIrregular'] = '(?:' . implode('|', array_keys(Samo_Inflector::$_plural['merged']['irregular'])) . ')'; } if (preg_match('/(.*)\\b(' . Samo_Inflector::$_plural['cacheIrregular'] . ')$/i', $word, $regs)) { Samo_Inflector::$_cache['pluralize'][$word] = $regs[1] . substr($word, 0, 1) . substr(Samo_Inflector::$_plural['merged']['irregular'][strtolower($regs[2])], 1); return Samo_Inflector::$_cache['pluralize'][$word]; } if (preg_match('/^(' . Samo_Inflector::$_plural['cacheUninflected'] . ')$/i', $word, $regs)) { Samo_Inflector::$_cache['pluralize'][$word] = $word; return $word; } foreach (Samo_Inflector::$_plural['rules'] as $rule => $replacement) { if (preg_match($rule, $word)) { Samo_Inflector::$_cache['pluralize'][$word] = preg_replace($rule, $replacement, $word); return Samo_Inflector::$_cache['pluralize'][$word]; } } } public static function singularize($word) { if (isset(Samo_Inflector::$_cache['singularize'][$word])) { return Samo_Inflector::$_cache['singularize'][$word]; } if (!isset(Samo_Inflector::$_singular['merged']['uninflected'])) { Samo_Inflector::$_singular['merged']['uninflected'] = array_merge( Samo_Inflector::$_singular['uninflected'], Samo_Inflector::$_uninflected ); } if (!isset(Samo_Inflector::$_singular['merged']['irregular'])) { Samo_Inflector::$_singular['merged']['irregular'] = array_merge( Samo_Inflector::$_singular['irregular'], array_flip(Samo_Inflector::$_plural['irregular']) ); } if (!isset(Samo_Inflector::$_singular['cacheUninflected']) || !isset(Samo_Inflector::$_singular['cacheIrregular'])) { Samo_Inflector::$_singular['cacheUninflected'] = '(?:' . implode('|', Samo_Inflector::$_singular['merged']['uninflected']) . ')'; Samo_Inflector::$_singular['cacheIrregular'] = '(?:' . implode('|', array_keys(Samo_Inflector::$_singular['merged']['irregular'])) . ')'; } if (preg_match('/(.*)\\b(' . Samo_Inflector::$_singular['cacheIrregular'] . ')$/i', $word, $regs)) { Samo_Inflector::$_cache['singularize'][$word] = $regs[1] . substr($word, 0, 1) . substr(Samo_Inflector::$_singular['merged']['irregular'][strtolower($regs[2])], 1); return Samo_Inflector::$_cache['singularize'][$word]; } if (preg_match('/^(' . Samo_Inflector::$_singular['cacheUninflected'] . ')$/i', $word, $regs)) { Samo_Inflector::$_cache['singularize'][$word] = $word; return $word; } foreach (Samo_Inflector::$_singular['rules'] as $rule => $replacement) { if (preg_match($rule, $word)) { Samo_Inflector::$_cache['singularize'][$word] = preg_replace($rule, $replacement, $word); return Samo_Inflector::$_cache['singularize'][$word]; } } Samo_Inflector::$_cache['singularize'][$word] = $word; return $word; } public static function camelize($lowerCaseAndUnderscoredWord) { if (!($result = Samo_Inflector::_cache(__FUNCTION__, $lowerCaseAndUnderscoredWord))) { $result = str_replace(' ', '', Samo_Inflector::humanize($lowerCaseAndUnderscoredWord)); Samo_Inflector::_cache(__FUNCTION__, $lowerCaseAndUnderscoredWord, $result); } return $result; } public static function underscore($camelCasedWord) { if (!($result = Samo_Inflector::_cache(__FUNCTION__, $camelCasedWord))) { $result = strtolower(preg_replace('/(?<=\\w)([A-Z])/', '_\\1', $camelCasedWord)); Samo_Inflector::_cache(__FUNCTION__, $camelCasedWord, $result); } return $result; } public static function humanize($lowerCaseAndUnderscoredWord) { if (!($result = Samo_Inflector::_cache(__FUNCTION__, $lowerCaseAndUnderscoredWord))) { $result = ucwords(str_replace('_', ' ', $lowerCaseAndUnderscoredWord)); Samo_Inflector::_cache(__FUNCTION__, $lowerCaseAndUnderscoredWord, $result); } return $result; } public static function tableize($className) { if (!($result = Samo_Inflector::_cache(__FUNCTION__, $className))) { $result = Samo_Inflector::pluralize(Samo_Inflector::underscore($className)); Samo_Inflector::_cache(__FUNCTION__, $className, $result); } return $result; } public static function classify($tableName) { if (!($result = Samo_Inflector::_cache(__FUNCTION__, $tableName))) { $result = Samo_Inflector::camelize(Samo_Inflector::singularize($tableName)); Samo_Inflector::_cache(__FUNCTION__, $tableName, $result); } return $result; } public static function variable($string) { if (!($result = Samo_Inflector::_cache(__FUNCTION__, $string))) { $camelized = Samo_Inflector::camelize(Samo_Inflector::underscore($string)); $replace = strtolower(substr($camelized, 0, 1)); $result = preg_replace('/\\w/', $replace, $camelized, 1); Samo_Inflector::_cache(__FUNCTION__, $string, $result); } return $result; } public static function slug($string, $replacement = '_') { $quotedReplacement = preg_quote($replacement, '/'); $merge = array( '/[^\s\p{Ll}\p{Lm}\p{Lo}\p{Lt}\p{Lu}\p{Nd}]/mu' => ' ', '/\\s+/' => $replacement, sprintf('/^[%s]+|[%s]+$/', $quotedReplacement, $quotedReplacement) => '', ); $map = Samo_Inflector::$_transliteration + $merge; return preg_replace(array_keys($map), array_values($map), $string); } } 