<?php
 class Samo_OAuth2 extends OAuth2 { protected $db = null; protected $partpass = null; protected $token = null; protected $cache = null; protected $ttl = 1400; public function __construct(Samo_Database $db, Samo_Cache $cache = null) { $params = array( 'access_token_lifetime' => null, 'auth_code_lifetime' => 300, 'display_error' => true ); parent::__construct($params); $this->db = $db; $this->cache = $cache; } public function getOrigin() { if (null !== $this->token && array_key_exists('redirect_uri', $this->token)) { $result = trim($this->token['redirect_uri']); if ($result) { $result = explode(",", $result); $result = array_map('Samo_Url::parse', $result); return $result; } } return null; } protected function cached_query($sql) { $return = false; $need_query = true; if ($this->cache) { $key = md5($sql); if ($return = $this->cache->get($key)) { $need_query = false; } } if ($need_query) { $return = $this->db->fetchRow($sql); if ($this->cache) { $this->cache->set($key, $return, $this->ttl); } } return $return; } protected function checkClientCredentials($client_id, $client_secret = null) { try { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_oauth_client', ['client_id' => $client_id]); $result = $this->cached_query($sql); if ($client_secret === null) { return $result !== false; } return isset($result['client_secret']) ? $result['client_secret'] == $client_secret : false; } catch (Exception $e) { $this->handleError($e); } } protected function getRedirectUri($client_id) { try { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_oauth_client', ['client_id' => $client_id]); $result = $this->cached_query($sql); if ($result === false) { return false; } return isset($result["redirect_uri"]) && $result["redirect_uri"] ? $result["redirect_uri"] : null; } catch (Exception $e) { $this->handleError($e); } } protected function getAccessToken($oauth_token) { try { $sql = $this->db->formatExec('<ONLINEDB>.dbo.up_WEB_4_oauth_token_check', ['oauth_token' => $oauth_token, 'ip' => Samo_Request::remote_addr()]); $result = $this->cached_query($sql); $this->token = $result; return $result !== false ? $result : null; } catch (Exception $e) { $this->handleError($e); } } protected function setAccessToken($oauth_token, $client_id, $expires, $scope = null) { try { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_oauth_token', [ 'oauth_token' => $oauth_token, 'client_id' => $client_id, 'expires' => (null === $expires) ? Samo_Datetime::null() : Samo_Datetime::parse('+' . $expires . ' SECOND'), 'scope' => $scope, 'partpass' => $this->partpass(), ] ); $this->db->query($sql); } catch (Exception $e) { $this->handleError($e); } } protected function createAccessToken($client_id, $scope = null) { $token = array( "access_token" => $this->genAccessToken(), "expires_in" => $this->getVariable('access_token_lifetime', OAUTH2_DEFAULT_ACCESS_TOKEN_LIFETIME), "scope" => $scope ); $this->setAccessToken($token["access_token"], $client_id, $this->getVariable('access_token_lifetime', OAUTH2_DEFAULT_ACCESS_TOKEN_LIFETIME), $scope); if (in_array(OAUTH2_GRANT_TYPE_REFRESH_TOKEN, $this->getSupportedGrantTypes())) { $token["refresh_token"] = $this->genAccessToken(); $this->setRefreshToken($token["refresh_token"], $client_id, time() + $this->getVariable('refresh_token_lifetime', OAUTH2_DEFAULT_REFRESH_TOKEN_LIFETIME), $scope); if ($this->getVariable('_old_refresh_token')) { $this->unsetRefreshToken($this->getVariable('_old_refresh_token')); } } return $token; } protected function getSupportedGrantTypes() { return array( OAUTH2_GRANT_TYPE_AUTH_CODE, OAUTH2_GRANT_TYPE_USER_CREDENTIALS, ); } protected function getAuthCode($code) { try { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_oauth_code_check', ['code' => $code]); $result = $this->db->fetchRow($sql); return $result !== false ? $result : null; } catch (Exception $e) { $this->handleError($e); } } protected function setAuthCode($code, $client_id, $redirect_uri, $expires, $scope = null) { try { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_oauth_code', [ 'code' => $code, 'client_id' => $client_id, 'redirect_uri' => $redirect_uri, 'expires' => $expires, 'scope' => $scope, 'partpass' => $this->partpass(), ] ); $this->db->query($sql); } catch (Exception $e) { $this->handleError($e); } return true; } protected function checkUserCredentials($client_id, $login, $password) { if (!empty($login) && !empty($password)) { $sql = $this->db->formatExec(OFFICE_SQLSERVER . '.' . OFFICEDB . '.dbo.up_WEB_3_partner_Code', array('alias' => $login, 'psw' => $password)); $result = $this->db->fetchRow($sql); if (!$result || (is_array($result) && isset($result['Partner']) && (string)$result['Partner'] === '-1')) { return false; } else { return array('partpass' => $result['PartPassInc']); } } return false; } protected function getSupportedScopes() { return array( 'online-api', 'search', 'read-claim', 'modify-claim', 'create-claim', 'export-visa', 'export-dictionary', 'parse-data', 'check-auth', ); } public function grantAccessToken() { $filters = array( "grant_type" => array("filter" => FILTER_VALIDATE_REGEXP, "options" => array("regexp" => OAUTH2_GRANT_TYPE_REGEXP), "flags" => FILTER_REQUIRE_SCALAR), "scope" => array("flags" => FILTER_REQUIRE_SCALAR), "code" => array("flags" => FILTER_REQUIRE_SCALAR), "redirect_uri" => array("filter" => FILTER_SANITIZE_URL), "username" => array("flags" => FILTER_REQUIRE_SCALAR), "password" => array("flags" => FILTER_REQUIRE_SCALAR), "assertion_type" => array("flags" => FILTER_REQUIRE_SCALAR), "assertion" => array("flags" => FILTER_REQUIRE_SCALAR), "refresh_token" => array("flags" => FILTER_REQUIRE_SCALAR), ); $input = filter_input_array(INPUT_POST, $filters); if (!$input["grant_type"]) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_INVALID_REQUEST, 'Invalid grant_type parameter or parameter missing'); } if (!in_array($input["grant_type"], $this->getSupportedGrantTypes())) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_UNSUPPORTED_GRANT_TYPE); } $client = $this->getClientCredentials(); if ($this->checkClientCredentials($client[0], $client[1]) === false) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_INVALID_CLIENT); } if (!$this->checkRestrictedGrantType($client[0], $input["grant_type"])) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_UNAUTHORIZED_CLIENT); } switch ($input["grant_type"]) { case OAUTH2_GRANT_TYPE_AUTH_CODE: if (!$input["code"] ) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_INVALID_REQUEST); } $stored = $this->getAuthCode($input["code"]); if ($stored === null || (isset($input['redirect_uri']) && strcasecmp(substr($input["redirect_uri"], 0, strlen($stored["redirect_uri"])), $stored["redirect_uri"]) !== 0) || $client[0] != $stored["client_id"]) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_INVALID_GRANT); } if ($stored["expires"] < time()) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_EXPIRED_TOKEN); } $this->partpass($stored['partpass']); break; case OAUTH2_GRANT_TYPE_USER_CREDENTIALS: if (!$input["username"] || !$input["password"]) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_INVALID_REQUEST, 'Missing parameters. "username" and "password" required'); } $stored = $this->checkUserCredentials($client[0], $input["username"], $input["password"]); if ($stored === false) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_INVALID_GRANT); } $this->partpass($stored['partpass']); break; case OAUTH2_GRANT_TYPE_REFRESH_TOKEN: if (!$input["refresh_token"]) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_INVALID_REQUEST, 'No "refresh_token" parameter found'); } $stored = $this->getRefreshToken($input["refresh_token"]); if ($stored === null || $client[0] != $stored["client_id"]) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_INVALID_GRANT); } if ($stored["expires"] < time()) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_EXPIRED_TOKEN); } $this->setVariable('_old_refresh_token', $stored["token"]); break; } if ($input["scope"] && (!is_array($stored) || !isset($stored["scope"]) || !$this->checkScope($input["scope"], $stored["scope"]))) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_INVALID_SCOPE); } if (!$input["scope"]) { $input["scope"] = null; } $token = $this->createAccessToken($client[0], $input["scope"]); $this->_sendJsonHeaders(); echo json_encode($token); } protected function handleError(Exception $e) { echo $e->getMessage(); exit; } public function partpass($partpass = null) { if (!is_null($partpass)) { if (!intval($partpass)) { $this->handleError(new Exception('User not found')); } $this->partpass = $partpass; } else { if (!intval($this->partpass)) { $this->handleError(new Exception('User not found')); } return $this->partpass; } } public function samo_auth() { if ($token = $this->_getAccessTokenParams()) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_web_3_partner_oauth', [ 'oauth_token' => $token, 'ip' => Samo_Request::remote_addr(), ] ); return $this->db->fetchRow($sql); } return false; } private function _errorJsonResponse($http_status_code, $error, $error_description = null, $error_uri = null) { $result['error'] = $error; if ($this->getVariable('display_error') && $error_description) { $result["error_description"] = $error_description; } if ($this->getVariable('display_error') && $error_uri) { $result["error_uri"] = $error_uri; } header("HTTP/1.1 " . $http_status_code); $this->_sendJsonHeaders(); echo json_encode($result); exit; } private function _sendJsonHeaders() { header("Content-Type: application/json"); header("Cache-Control: no-store"); } private function _errorWWWAuthenticateResponseHeader($http_status_code, $realm, $error, $error_description = null, $error_uri = null, $scope = null) { $realm = $realm === null ? $this->getDefaultAuthenticationRealm() : $realm; $result = "WWW-Authenticate: OAuth realm='" . $realm . "'"; if ($error) { $result .= ", error='" . $error . "'"; } if ($this->getVariable('display_error') && $error_description) { $result .= ", error_description='" . $error_description . "'"; } if ($this->getVariable('display_error') && $error_uri) { $result .= ", error_uri='" . $error_uri . "'"; } if ($scope) { $result .= ", scope='" . $scope . "'"; } header("HTTP/1.1 " . $http_status_code); header($result); exit; } public function verifyAccessToken($scope = null, $exit_not_present = true, $exit_invalid = true, $exit_expired = true, $exit_scope = true, $realm = null) { $token_param = $this->_getAccessTokenParams(); if ($token_param === false) { return $exit_not_present ? $this->_errorWWWAuthenticateResponseHeader(OAUTH2_HTTP_BAD_REQUEST, $realm, OAUTH2_ERROR_INVALID_REQUEST, 'The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.', null, $scope) : false; } $token = $this->getAccessToken($token_param); if ($token === null) { return $exit_invalid ? $this->_errorWWWAuthenticateResponseHeader(OAUTH2_HTTP_UNAUTHORIZED, $realm, OAUTH2_ERROR_INVALID_TOKEN, 'The access token provided is invalid.', null, $scope) : false; } if ($scope && (!isset($token["scope"]) || !$token["scope"] || !$this->checkScope($scope, $token["scope"]))) { return $exit_scope ? $this->_errorWWWAuthenticateResponseHeader(OAUTH2_HTTP_FORBIDDEN, $realm, OAUTH2_ERROR_INSUFFICIENT_SCOPE, 'The request requires higher privileges than provided by the access token.', null, $scope) : false; } return true; } private function _getAccessTokenParams() { $auth_header = $this->_getAuthorizationHeader(); if ($auth_header !== false) { if (isset($_GET[OAUTH2_TOKEN_PARAM_NAME]) || isset($_POST[OAUTH2_TOKEN_PARAM_NAME])) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_INVALID_REQUEST, 'Auth token found in GET or POST when token present in header'); } $auth_header = trim($auth_header); if (strcmp(substr($auth_header, 0, 6), "OAuth ") !== 0) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_INVALID_REQUEST, 'Auth header found that doesn\'t start with "OAuth"'); } if (preg_match('/\s*OAuth\s+(.+)/', $auth_header, $matches) == 0 || count($matches) < 2) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_INVALID_REQUEST, 'Malformed auth header'); } return $matches[1]; } if (isset($_GET[OAUTH2_TOKEN_PARAM_NAME])) { if (isset($_POST[OAUTH2_TOKEN_PARAM_NAME])) { $this->_errorJsonResponse(OAUTH2_HTTP_BAD_REQUEST, OAUTH2_ERROR_INVALID_REQUEST, 'Only send the token in GET or POST, not both'); } return $_GET[OAUTH2_TOKEN_PARAM_NAME]; } if (isset($_POST[OAUTH2_TOKEN_PARAM_NAME])) { return $_POST[OAUTH2_TOKEN_PARAM_NAME]; } return false; } private function _getAuthorizationHeader() { if (array_key_exists("HTTP_AUTHORIZATION", $_SERVER)) { return $_SERVER["HTTP_AUTHORIZATION"]; } if (function_exists("apache_request_headers")) { $headers = apache_request_headers(); if (array_key_exists("Authorization", $headers)) { return $headers["Authorization"]; } } return false; } private function checkScope($required_scope, $available_scope) { if (!is_array($required_scope)) { $required_scope = explode(" ", $required_scope); } if (!is_array($available_scope)) { $available_scope = explode(" ", $available_scope); } return (count(array_diff($required_scope, $available_scope)) == 0); } public function getVariable($name, $default = null) { return array_key_exists($name, $this->conf) ? $this->conf[$name] : $default; } } 