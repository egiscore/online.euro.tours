<?php
 class Samo_Partner extends Samo { const OWNERSHIP_SELF_EMPLOYED = 1; protected $min_length = 4; protected $max_length = 32; public $MAX_LOGINS_FOR_AGENCY = 0; public $enable_create_login_not_administrator = 0; public $first_login_administrator = 1; public $fields_partner = array(); public $fields_partpass = array(); public $default_partner_town = null; public $PARTNER_ACCOUNTEMAIL = null; public $PARTNER_ACCOUNTNAME = null; public $PARTNER_ACCOUNTPHONES = null; public $PARTNER_ADDRESS = null; public $PARTNER_ADDRESSCODE = null; public $PARTNER_BANK = null; public $PARTNER_BOSS = null; public $PARTNER_COMMENT = null; public $PARTNER_DIRECTION = null; public $PARTNER_EMAIL = null; public $PARTNER_EMAIL1 = null; public $PARTNER_FAXES = null; public $PARTNER_FAXES1 = null; public $PARTNER_ICQ = null; public $PARTNER_ICQ1 = null; public $PARTNER_INN = null; public $PARTNER_KPP = null; public $PARTNER_LICENCE = null; public $PARTNER_LNAME = null; public $PARTNER_METRO = null; public $PARTNER_METROSTATION = null; public $PARTNER_NAME = null; public $PARTNER_OFFICIALNAME = null; public $PARTNER_OGRN = null; public $PARTNER_OKONH = null; public $PARTNER_OKPO = null; public $PARTNER_OWNER = null; public $PARTNER_OWNERSHIP = null; public $PARTNER_ACTIVITY = null; public $PARTNER_PADDRESS = null; public $PARTNER_PHONES = null; public $PARTNER_PHONES_PREFIX = null; public $PARTNER_PHONES1 = null; public $PARTNER_PHONES2 = null; public $PARTNER_REGDATE = null; public $PARTNER_RS = null; public $PARTNER_RSV = null; public $PARTNER_TOWN = null; public $PARTNER_WORKERS = null; public $PARTNER_WWW = null; public $PARTNER_DIRECTORPOSITION = null; public $PARTNER_CATEGORY = null; const MAIL_NEW_PARTPASS_AGENT = 8; const MAIL_NEW_PARTPASS_ADMIN = 22; const MAIL_CHANGE_REQUEST = 23; const MAIL_NEW_PARTNER_TOUROPERATOR = 10; const MAIL_NEW_PARTNER_AGENCY = 9; public function construct() { $this->defaults['PARTNER'] = $this->inc = ($tmp = $this->getPartner()) ? $tmp : 0; $this->defaults['PARTPASS_INC'] = Samo_Utils::ifs(Samo_Request::intval('PARTPASS_INC'), -1); $this->defaults['AUTHORPARTPASSINC'] = $this->getPartPassInc(); $this->MAX_LOGINS_FOR_AGENCY = $this->getConfig('MAX_LOGINS_FOR_AGENCY'); $this->first_login_administrator = $this->getConfig('FIRST_LOGIN_ADMINISTRATOR'); } public function get_fields_partner() { if (false !== ($res = $this->getOnline_field($entity = 'partner', $group = 'Group', $entityInc = $this->defaults['PARTNER']))) { foreach ($res as &$fgroup) { foreach ($fgroup as &$field) { if ($this->defaults['PARTNER'] && !$this->has_permission('edit_partner', 'Edit')) { $field['Editable'] = 0; } if ($field['Field'] == 'PARTNER_PHONES_PREFIX') { $field['css_classes'] = array_merge($field['css_classes'], array('PARTNER_PHONES_PREFIX')); } elseif ($field['Field'] == 'PARTNER_METROSTATION') { $field['css_classes'] = array_merge($field['css_classes'], array('PARTNER_METROSTATION')); $field['Variants'] = $this->METROSTATION(); if (empty($field['Variants']) && $this->defaults['PARTNER'] > 0) { $field['Required'] = false; } } elseif ($field['Field'] == 'PARTNER_TOWN') { $field['css_classes'] = array_merge($field['css_classes'], array('PARTNER_TOWN')); if ($this->defaults['PARTNER'] > 0) { $this->defaults['Partner_towninc'] = $field['Value']; } $field['Variants'] = $this->PARTNER_TOWN(); } elseif ($field['Field'] == 'PARTNER_TAXATION') { $field['css_classes'] = array_merge($field['css_classes'], array('PARTNER_TAXATION')); if ($this->defaults['PARTNER'] > 0) { $this->defaults['Partner_taxationinc'] = $field['Value']; } $field['Variants'] = $this->PARTNER_TAXATION(); } elseif ($field['Field'] == 'PARTNER_OWNERSHIP') { $field['css_classes'] = array_merge($field['css_classes'], array('PARTNER_OWNERSHIP')); $field['Variants'] = $this->PARTNER_OWNERSHIP(); } elseif ($field['Field'] == 'PARTNER_ACTIVITY') { $field['css_classes'] = array_merge($field['css_classes'], array('PARTNER_ACTIVITY')); $field['Variants'] = $this->PARTNER_ACTIVITY(); } elseif ($field['Field'] == 'PARTNER_BANK') { $field['css_classes'] = array_merge($field['css_classes'], array('PARTNER_BANK')); $field['Variants'] = $this->PARTNER_BANK(); } elseif ($field['Field'] == 'PARTNER_BIK') { $field['css_classes'] = array_merge($field['css_classes'], array('PARTNER_BIK')); } elseif ($field['Field'] == 'PARTNER_OFFICIALNAME') { $field['css_classes'] = array_merge($field['css_classes'], array('PARTNER_OFFICIALNAME')); } elseif ($field['Field'] == 'PARTNER_RS') { $field['css_classes'] = array_merge($field['css_classes'], array('PARTNER_RS')); } elseif ($field['Field'] == 'PARTNER_DIRECTORPOSITION') { $field['css_classes'] = array_merge($field['css_classes'], array('PARTNER_DIRECTORPOSITION')); $field['Variants'] = $this->PARTNER_DIRECTORPOSITION(); } elseif ($field['Field'] == 'PARTNER_CATEGORY') { if ($field['Variants'] = $this->PARTNER_CATEGORY()) { $field['css_classes'] = array_merge($field['css_classes'], array('PARTNER_CATEGORY')); } else { $field['Visible'] = false; $field['Editable'] = false; $field['Required'] = false; } } } } unset($fgroup, $field); $this->fields_partner = $res; } return $this->fields_partner; } public function get_fields_partpass() { if (false !== ($res = $this->getOnline_field($entity = 'partpass', $group = 'Group', $entityInc = $this->defaults['PARTPASS_INC']))) { foreach ($res as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Field'] == 'PARTPASS_ONLINE_ACCESS') { if ($this->defaults['PARTPASS_INC'] > 0) { if ($this->defaults['PARTPASS_INC'] == $this->defaults['AUTHORPARTPASSINC']) { $field['Visible'] = 0; } else { if ($_SESSION['samo_auth']['Administrator']) { $field['Visible'] = 1; } } } else { $field['Visible'] = isset($_SESSION['samo_auth']) && isset($_SESSION['samo_auth']['Administrator']) ? $_SESSION['samo_auth']['Administrator'] : false; } $field['Checked'] = ($field['Visible'] && $field['Value'] > 0); } if ($field['Field'] == 'PARTPASS_ONLINE_DELETE') { $field['Visible'] = 0; } if ($field['Class'] !== '' && in_array('date', explode(' ', $field['Class']))) { $field['Value'] = Samo_Datetime::parse($field['Value']); } } } $this->fields_partpass = $res; } return $this->fields_partpass; } public function EnableSaveEditPartpass() { if (!$this->enable_create_login_not_administrator && ($_SESSION['samo_auth']['Administrator'] == 0 && $this->defaults['PARTPASS_INC'] != $this->getPartPassInc())) { $messages = Samo_Registry::get('messages'); throw new Samo_Exception($messages['ACCESS_DENIED_EDIT_PARTPASS'], 3); } return true; } public function PartpassList() { $sql = $this->createSql_PartpassList(); $return = array(); if (false !== ($res = $this->db->query($sql))) { while (false !== ($row = $this->db->fetchRow($res))) { if ($this->enable_create_login_not_administrator || $this->is_administrator() || $row['inc'] == $this->getPartPassInc()) { $row['enable_delete'] = true; if ($this->defaults['AUTHORPARTPASSINC'] == $row['inc']) { $row['enable_delete'] = false; } $row['born'] = Samo_Datetime::parse($row['born']); $return[] = $row; } } $this->db->freeResult($res); if ($this->defaults['PARTPASS_INC'] > 0) { $return = $return[0]; } } return $return; } public function DeletePartpass() { $this->defaults['PARTPASS_ONLINE_DELETE'] = 1; $this->defaults['PARTPASS_PSW'] = null; $this->get_fields_partpass(); foreach ($this->fields_partpass as &$fgroup) { foreach ($fgroup as &$field) { $field['new_value'] = $field['Value']; } } $sql = $this->createSql_SaveEditPartpass(); $partpass = Samo_Utils::ifs($this->getPartPassInc(), 'null'); $log_array = array( 'partpass' => $partpass, 'sql' => $sql, 'priority' => 'partpass', ); $id = $this->db->web_log_table($log_array); try { $res = $this->db->fetchOne($sql); $log_array['result']['resultset'] = array('inc' => $res); $log_array['message'] = 'DELETE_PARTPASS'; } catch (Database_Exception $e) { $res = false; $log_array['result']['error'] = $this->db->lastError(); $log_array['message'] = 'ERROR_PARTPASS'; } $this->db->web_log_table($log_array, $id); if (false == $res) { $messages = Samo_Registry::get('messages'); throw new Samo_Exception($messages['ERROR_ON_SAVE_PARTPASS']); } return true; } public function SaveEditPartpass() { $this->get_fields_partpass(); $this->CheckPartPassFields(); $this->CheckDoubleLogin(); $this->defaults['PARTPASS_PSW'] = ($this->defaults['PARTPASS_INC'] > 0) ? null : Samo_Utils::GeneratePassword(); $messages = Samo_Registry::get('messages'); $sql = $this->createSql_SaveEditPartpass(); $partpass = Samo_Utils::ifs($this->getPartPassInc(), 'null'); $log_array = array( 'partpass' => $this->db->quote($partpass), 'sql' => $sql, 'priority' => 'partpass', ); $id = $this->db->web_log_table($log_array); $res = false; try { $res = $this->db->fetchRow($sql); $log_array['result']['resultset'] = array('inc' => $res['PartPassInc']); $log_array['message'] = 'SAVE_PARTPASS'; } catch (Database_Exception $e) { $log_array['result']['error'] = $this->db->lastError(); $log_array['message'] = 'ERROR_PARTPASS'; } $this->db->web_log_table($log_array, $id); if (false == $res) { throw new Samo_Exception($messages['ERROR_ON_SAVE_PARTPASS']); } if ($this->defaults['PARTPASS_INC'] < 0) { $params = [ 'partpass' => $res['PartPassInc'], 'partner' => $this->defaults['PARTNER'], 'alias' => $this->defaults['PARTPASS_ALIAS'], 'password' => $this->defaults['PARTPASS_PSW'], 'online_access' => intval(isset($this->defaults['PARTPASS_ONLINE_ACCESS'])), 'HTTP_SITE' => Samo_Url::route('/'), ]; if ($mailInc = $this->samotourMail(self::MAIL_NEW_PARTPASS_AGENT, $params)) { $res['mailInc'] = $mailInc; } } return $res; } public function getPartnerMail() { if ($data = $this->getPartnerInfo($this->defaults['PARTNER'])) { $re = "/(?<![a-z0-9_\-.@])([a-z0-9_\-]+(?:\.[a-z0-9_\-]+)*@(?:[a-z0-9_\-]+\.)+[a-z0-9_\-]+)(?![a-z0-9_\-.@])/i"; $partner_inf_mail = trim($data['Partner_email']); $partner_inf_mail1 = trim($data['Partner_email1']); if ($partner_inf_mail != '' or $partner_inf_mail1 != '') { $email_list = array(); if (!preg_match_all($re, $partner_inf_mail, $email_list, PREG_PATTERN_ORDER)) { preg_match_all($re, $partner_inf_mail1, $email_list, PREG_PATTERN_ORDER); } if (isset($email_list[1]) && is_array($email_list[1]) && count($email_list[1])) { $emails = array(); foreach ($email_list[1] as $email) { if (!in_array($email, $emails)) { $emails[] = $email; } } return implode(', ', $emails); } } } return false; } public function CheckDoubleLogin() { if ($this->defaults['PARTPASS_INC'] > 0) { return true; } $messages = Samo_Registry::get('messages'); $sql = $this->createSql_CheckDoubleLogin(); if (false !== ($res = $this->db->query($sql))) { if ($this->db->numRows($res) > 0) { $msg = sprintf($messages['PARTPASS_ALIAS_WAS_USED'], $this->defaults['PARTPASS_ALIAS']); throw new Samo_Exception($msg, 2); } return true; } throw new Samo_Exception($messages['COMMON_EXCEPTION_MESSAGE'], 500); } public function CheckPartPassFields() { $collection = Samo_Request::post('frm'); foreach ($this->fields_partpass as &$fgroup) { foreach ($fgroup as &$field) { $post_value = ''; if (isset($collection[$field['Entity']])) { $objects = $collection[$field['Entity']]; if (isset($objects[$this->defaults['PARTPASS_INC']])) { $object = $objects[$this->defaults['PARTPASS_INC']]; if (isset($object[$field['Field']])) { $post_value = trim($object[$field['Field']]); } } } if ($field['Field'] == 'PARTPASS_ALIAS') { $this->defaults['PARTPASS_ALIAS'] = $post_value; } if ($field['Field'] == 'PARTPASS_ONLINE_ACCESS' && $post_value == '') { $post_value = $this->defaults['AUTHORPARTPASSINC'] === null || $this->defaults['PARTPASS_INC'] == $this->defaults['AUTHORPARTPASSINC'] ? 1 : 0; } if (!$field['Editable'] && $this->defaults['PARTPASS_INC'] > 0) { $post_value = $field['Value']; } if (!strlen($post_value) && $field['Required']) { $messages = Samo_Registry::get('messages'); throw new Samo_Exception( $messages['EMPTY_REQUIRED_FIELD'] . ' "' . $field['Title'] . '"', 1 ); } if ($field['Editable']) { if ($field['Type'] == 'date') { $post_value = Samo_Datetime::parse($post_value); } $this->check_field($post_value, $field); } $field['new_value'] = $post_value; } } return true; } public function Edit_Partpass() { $result = array(); if ($this->defaults['PARTPASS_INC'] > 0) { $result = $this->PartpassList(); } else { $result['inc'] = -1; } return $result; } public function checkPartnerFields() { $messages = Samo_Registry::get('messages'); $collection = Samo_Request::post('frm'); foreach ($this->fields_partner as &$fgroup) { foreach ($fgroup as &$field) { $this->{$field['Field']} = trim(@$collection[$field['Entity']][$this->defaults['PARTNER']][$field['Field']]); } } foreach ($this->fields_partner as &$fgroup) { foreach ($fgroup as &$field) { $value = $this->{$field['Field']}; if ('select' == $field['Type']) { $minCount = $field['Field'] == 'PARTNER_METROSTATION' ? 0 : 1; if ($field['Required'] && $minCount == count($field['Variants'])) { $field['Required'] = false; $value = null; } else { $found = array_filter( $field['Variants'], function ($variant) use ($value) { return $variant['Inc'] == $value; } ); $value = (1 == count($found)) ? $value : null; } if (empty($value) || $value == Samo::MAXLONGINT) { $value = in_array($field['Field'], ['PARTNER_DIRECTORPOSITION', 'PARTNER_METROSTATION', 'PARTNER_ACTIVITY', 'PARTNER_CATEGORY']) ? null : Samo::MAXLONGINT; } } if ('geo' == $field['Type'] && empty($value)) { $value = null; } if (in_array($field['Field'], ['PARTNER_KPP', 'PARTNER_REGISTRATION_ORGAN', 'PARTNER_REGISTRATION_SERIE', 'PARTNER_REGISTRATION_NUMBER']) && $field['Required'] && $this->PARTNER_OWNERSHIP == $this->ownership_self_employed()) { $field['Required'] = false; } if (!$field['Editable'] && $this->defaults['PARTNER'] > 0 && 'Version' != $field['Type']) { $value = $field['Value']; if ('string' == $field['Type']) { $value = htmlspecialchars_decode($value, ENT_QUOTES); } } if ('' == $value && $field['Required'] && $field['Editable']) { throw new Samo_Exception(sprintf('%s "%s"', $messages['EMPTY_REQUIRED_FIELD'], $field['Title']), 1); } $field['new_value'] = $value; if ($field['Class'] !== '' && in_array('date', explode(' ', $field['Class']))) { $field['new_value'] = Samo_Datetime::parse($value); } $this->{$field['Field']} = $field['new_value']; } } foreach ($this->fields_partner as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Editable']) { $this->check_field($field['new_value'], $field); } } } return true; } public function PARTNER_TOWN() { $list = array(); if (null === $this->default_partner_town) { $owner = $this->getConfig('FIRMCODE'); $owner_info = $this->getPartnerInfo($owner); $this->default_partner_town = $owner_info['Partner_towninc']; } $sql = $this->Partner_Town_sql(); $filterStatefrom = Samo_Request::get('STATEFROM'); if (false !== ($res = $this->db->fetchAll($sql))) { foreach ($res as $row) { $selected = ($row['id'] == ((isset($this->PARTNER_TOWN)) ? $this->PARTNER_TOWN : $this->default_partner_town)); if (!$filterStatefrom || $row['stateKey'] == $filterStatefrom) { $state_name = $row['state']; $row['selected'] = $selected; $row['attrs'] = ['data-phone-prefix' => $row['phonePrefix']]; if (isset($row['searchTerms'])) { $row['attrs']['data-search-string'] = $row['searchTerms']; } $list[$state_name][] = $row; } } } return $list; } protected function Partner_Town_sql() { $sql = $this->db->formatExec( "<OFFICEDB>.dbo.up_WEB_5_partner_TownList", [ 'PartnerTown' => $this->PARTNER_TOWN, 'UserCode' => $this->internet_user(), ] ); return $sql; } public function PARTNER_TAXATION() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_partner_TaxationList', [ 'ORDER_BY_NAME' => $this->getConfig('ORDER_BY_NAME'), ] ); $selected = isset($this->defaults['Partner_taxationinc']) ? $this->defaults['Partner_taxationinc'] : 0; $result = $this->db->fetchAll( $sql, function ($row) use ($selected) { $row['selected'] = ($row['Inc'] == $selected); return $row; } ); return $result; } public function METROSTATION() { $list = []; if ((!isset($this->defaults['PARTNER']) || 0 == $this->defaults['PARTNER']) && ($collection = Samo_Request::post('frm'))) { $this->PARTNER_TOWN = @trim($collection['Partner'][0]['PARTNER_TOWN']); } if (isset($this->PARTNER_TOWN) && $this->PARTNER_TOWN > 0) { $sql = $this->db->formatExec( "<OFFICEDB>.dbo.up_WEB_4_partner_MetrostationList", [ 'Town' => $this->PARTNER_TOWN, 'ORDER_BY_NAME' => $this->getConfig('ORDER_BY_NAME'), ] ); if (false !== $res = $this->db->fetchAll($sql)) { foreach ($res as &$metro) { $metro['selected'] = isset($this->PARTNER_METROSTATION) && $metro['Inc'] == $this->PARTNER_METROSTATION; $metro['attrs'] = ['data-search-string' => $metro['searchTerms']]; } $list = $res; } } return $list; } public function PARTNER_OWNERSHIP() { $list = array(); $order_by_name = $this->getConfig('ORDER_BY_NAME'); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_partner_OwnerShipList', [ 'ORDER_BY_NAME' => $order_by_name, 'PartnerOwnership' => $this->PARTNER_OWNERSHIP, ] ); if (false !== ($res = $this->db->query($sql))) { if ($this->db->numRows($res) > 0) { while (false !== ($row = $this->db->fetchRow($res))) { if (isset($this->PARTNER_OWNERSHIP) && $row['Inc'] == $this->PARTNER_OWNERSHIP) { $row['selected'] = true; } $list[] = $row; } } $this->db->freeResult($res); } return $list; } public function PARTNER_ACTIVITY() { $list = array(); $order_by_name = $this->getConfig('ORDER_BY_NAME'); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_partner_ActivityList', [ 'ORDER_BY_NAME' => $order_by_name, ] ); if (false !== ($res = $this->db->query($sql))) { if ($this->db->numRows($res) > 0) { while (false !== ($row = $this->db->fetchRow($res))) { if (isset($this->PARTNER_ACTIVITY) && $row['Inc'] == $this->PARTNER_ACTIVITY) { $row['selected'] = true; } $list[] = $row; } } $this->db->freeResult($res); } return $list; } public function PARTNER_CATEGORY() { $list = array(); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_4_get_partner_category', [ 'UserCode' => $this->internet_user(), 'PartnerCategory' => $this->PARTNER_CATEGORY ] ); $skip = false; if (false !== ($res = $this->db->query($sql))) { if ($this->db->numRows($res) > 0) { while (false !== ($row = $this->db->fetchRow($res))) { if (isset($this->PARTNER_CATEGORY) && $row['Inc'] == $this->PARTNER_CATEGORY) { $row['selected'] = true; if ($row['private'] == 1) { $skip = true; break; } $row['selected'] = true; } $list[] = $row; } } $this->db->freeResult($res); } if ($skip) { return []; } return $list; } public function PARTNER_BANK() { $list = array(); $order_by_name = $this->getConfig('ORDER_BY_NAME'); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_partner_PartnerBankList', [ 'PartnerBank' => $this->PARTNER_BANK, 'ORDER_BY_NAME' => $order_by_name, ] ); if (false !== ($res = $this->db->query($sql))) { if ($this->db->numRows($res) > 0) { while (false !== ($row = $this->db->fetchRow($res))) { $row['selected'] = false; if (isset($this->PARTNER_BANK) && $row['Inc'] == $this->PARTNER_BANK) { $row['selected'] = true; if ($row['deleted']) { $row['Inc'] = ""; $field['Value'] = ""; } } $row['attrs'] = array('data-bik' => $row['bik'], 'data-deleted' => $row['deleted']); $list[] = $row; } } $this->db->freeResult($res); } return $list; } public function PARTNER_DIRECTORPOSITION() { $list = array(); $order_by_name = $this->getConfig('ORDER_BY_NAME'); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_partner_DirectorPositionList', [ 'ORDER_BY_NAME' => $order_by_name, ] ); if (false !== ($res = $this->db->query($sql))) { if ($this->db->numRows($res) > 0) { while (false !== ($row = $this->db->fetchRow($res))) { if (isset($this->PARTNER_DIRECTORPOSITION) && $row['Inc'] == $this->PARTNER_DIRECTORPOSITION) { $row['selected'] = true; } $list[] = $row; } } $this->db->freeResult($res); } return $list; } public function SaveEditPartner($getFields = true) { if ($this->defaults['PARTNER'] && !$this->has_permission('edit_partner', 'Edit')) { $messages = Samo_Registry::get('messages'); throw new Samo_Exception($messages['NOT_ENOUGH_RIGHTS_TO_EDIT']); } if ($getFields) { $this->get_fields_partner(); } $this->checkPartnerFields(); $fields = array( 'partner' => $this->defaults['PARTNER'], 'FromUser' => $this->internet_user(), 'LangId' => $this->lng, ); $oldVersion = null; foreach ($this->fields_partner as $group => $fgroup) { foreach ($fgroup as $idx => $field) { if ($field['Type'] == 'Version') { $oldVersion = $field['new_value']; unset($this->fields_partner[$group][$idx]); } else { $fields[$field['EntityField']] = $field['new_value']; } } } $this->CheckPartner($fields); if ($oldVersion) { $fields['Version'] = $oldVersion; } if (defined('APPMODE') && 'dev' == APPMODE) { $fields['developer'] = 1; } $fields['UserCode'] = $this->internet_user(); $partpass = Samo_Utils::ifs($this->getPartPassInc(), 'null'); $fields['PartPass'] = $partpass; if (!$this->defaults['PARTNER']) { $fields['PartPass'] = null; } $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_partner_UpdateInfo', $fields); $log_array = array( 'partpass' => $this->db->quote($partpass), 'sql' => $sql, 'priority' => 'partner', ); $id = $this->db->web_log_table($log_array); $return = false; try { $return = $this->db->fetchRow($sql); if ($return) { $log_array['result']['resultset'] = array_map( function ($el) { if ($el instanceof Samo_Datetime) { $el = (string)$el; } return $el; }, $return ); } else { $log_array['result']['resultset'] = 'Empty result'; } $log_array['message'] = 'SAVE_PARTNER'; } catch (Database_Exception $e) { $log_array['result']['error'] = $this->db->lastError(); $log_array['message'] = 'ERROR_PARTNER'; } $this->db->web_log_table($log_array, $id); if (false !== $return) { $tmp = array_keys($return); if (!in_array('error', $tmp)) { return $return; } $errorMessage = (null !== $return['error'] && !empty($return['error'])) ? $return['error'] : 'Unknown error'; throw new Samo_Exception($errorMessage, 2); } else { throw new Samo_Exception('Unknown error'); } return false; } public function CheckPartner($fields) { if (!isset($fields['partner'])) { $fields['partner'] = $this->defaults['PARTNER']; } if (!isset($fields['FromUser'])) { $fields['FromUser'] = $this->internet_user(); } if (!isset($fields['LangId'])) { $fields['LangId'] = $this->lng; } $sql = $this->createSql_CheckPartner($fields); if (false !== ($return = $this->db->fetchRow($sql))) { $tmp = array_keys($return); if (!in_array('error', $tmp)) { return true; } $errorMessage = (null !== $return['error'] && !empty($return['error'])) ? $return['error'] : 'Unknown error'; throw new Samo_Exception($errorMessage, 4); } return false; } protected function createSql_CheckPartner($fields) { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WebST_partner_Check', $fields); return $sql; } public function can_create_login() { $routes = Samo_Registry::get('routes'); return (isset($routes['registration']) && $routes['registration']['public']); } protected function createSql_CheckDoubleLogin() { $sql = $this->db->formatExec( "<OFFICEDB>.dbo.up_WEB_3_reg_Checklogin", [ "Login" => $this->defaults['PARTPASS_ALIAS'], ] ); return $sql; } protected function createSql_PartpassList() { $partpass = ($this->defaults['PARTPASS_INC'] > 0) ? $this->defaults['PARTPASS_INC'] : null; $sql = $this->db->formatExec( "<OFFICEDB>.dbo.up_PartpassList", [ 'PartpassInc' => $partpass, 'Partner' => $this->defaults['PARTNER'], ] ); return $sql; } protected function createSql_SaveEditPartpass() { $this->defaults['PARTPASS_ADMINISTRATOR'] = (isset($this->defaults['PARTPASS_ADMINISTRATOR'])) ? $this->defaults['PARTPASS_ADMINISTRATOR'] : 0; $this->defaults['PARTPASS_ONLINE_DELETE'] = (isset($this->defaults['PARTPASS_ONLINE_DELETE'])) ? $this->defaults['PARTPASS_ONLINE_DELETE'] : 0; $this->defaults['PARTPASS_NOTE'] = Samo_Utils::ifs(Samo_Request::strval('PARTPASS_NOTE'), ''); $partpass = ($this->defaults['PARTPASS_INC'] > 0) ? $this->defaults['PARTPASS_INC'] : null; $fields = array( 'partner' => $this->defaults['PARTNER'], 'AuthorPartpassInc' => $this->defaults['AUTHORPARTPASSINC'], 'PartpassInc' => $partpass, 'Administrator' => $this->defaults['PARTPASS_ADMINISTRATOR'], 'Note' => $this->defaults['PARTPASS_NOTE'], 'Mode' => 0, 'Psw' => $this->defaults['PARTPASS_PSW'], 'Online_deleted' => $this->defaults['PARTPASS_ONLINE_DELETE'], 'UserCode' => $this->internet_user(), ); foreach ($this->fields_partpass as $fgroup) { foreach ($fgroup as $field) { $value = $field['new_value']; if ($field['Class'] !== '' && in_array('date', explode(' ', $field['Class']))) { $value = Samo_Datetime::parse($value); } $fields[$field['EntityField']] = $value; } } $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_SaveEditPartpass', $fields); return $sql; } public function enableCreatePartpass() { return ($this->enable_create_login_not_administrator || $this->is_administrator()) && $this->checkContract(); } public function discountTours() { $sql = $this->db->formatExec( '<ONLINEDB>.dbo.up_WEB_4_discount_Tour', [ 'ORDER_BY_NAME' => $this->getConfig('ORDER_BY_NAME'), 'StateFrom' => isset($_SESSION['samo_auth']['StateFrom']) ? $_SESSION['samo_auth']['StateFrom'] : null, 'UserCode' => $this->internet_user(), ] ); if ($return = $this->db->fetchAll($sql)) { array_unshift($return, ['id' => 0, 'name' => '----', 'stateFromKey' => 0]); $selected = isset($this->defaults['TOURINC']) ? $this->defaults['TOURINC'] : 0; array_walk( $return, function (&$item) use ($selected) { $item['selected'] = $item['id'] == $selected; } ); } return $return; } public function discountPercent($tour) { $result = array('Commission' => 0); if ($tour > 0) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_partner_Discount', [ 'Partner' => $this->defaults['PARTNER'], 'Tour' => $tour, 'UserCode' => $this->internet_user(), ] ); $result = $this->db->fetchRow($sql); } return isset($result['Commission']) ? $result['Commission'] . '%' : ''; } public function is_administrator() { return isset($_SESSION['samo_auth']) && isset($_SESSION['samo_auth']['Administrator']) && $_SESSION['samo_auth']['Administrator'] == 1; } public function ownership_self_employed() { return self::OWNERSHIP_SELF_EMPLOYED; } public function checkContract($partner = null) { if (null == $partner) { $partner = $this->defaults['PARTNER']; } $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_partner_ContractsInfo', [ 'Partner' => $partner, 'UserCode' => $this->internet_user(), ] ); $result = $this->db->fetchOneRow($sql); switch ($result['CheckContracts']) { case 1: $return = $result['HaveDogovor'] || $result['HaveCopy']; break; case 2: $return = $result['HaveDogovor']; break; default: $return = true; break; } return $return; } public function getCurator() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_partner_curator', [ 'Partner' => $this->defaults['PARTNER'], ] ); return $this->db->fetchAll($sql); } } 