<?php
 use Predis\Client as Redis; class Samo_Price_Cache { protected $instance; private $hash = null; private $enabled = true; private $dsn = false; private $logger = null; protected $data_ttl = 180; protected $lock_ttl = 30; private function log($message) { if ($this->logger) { $this->logger->log($message); } } private function warning($message) { if ($this->logger) { $this->logger->warning($message); } } public function __construct(Samo_Config $config, $logger = null) { $this->enabled = $config->price_cache(); $this->logger = $logger; if ($this->enabled && defined('PRICE_CACHE_REDIS')) { if (is_string(PRICE_CACHE_REDIS) && false !== ($dsn = parse_url(PRICE_CACHE_REDIS))) { $this->dsn = PRICE_CACHE_REDIS; } else { $this->warning('Unknown PRICE_CACHE_REDIS, expected: "tcp://host:port", actual: "' . PRICE_CACHE_REDIS . '"'); $this->enabled = false; } if (defined('PRICE_CACHE_TTL') && (0 !== ($ttl = intval(PRICE_CACHE_TTL)))) { $this->data_ttl = $ttl; } } } public function workhorse() { if (null === $this->instance) { if (DEBUG) { $startTimer = microtime(true); } $this->instance = new Redis($this->dsn); if (DEBUG) { $this->log(sprintf('/* %.4fs */ -- connected to redis cache', microtime(true) - $startTimer)); } } return $this->instance; } public function searchResult(array $params) { $return = false; if ($this->enabled) { try { $redis = $this->workhorse(); $this->hash = $this->initHash($params); if (!$result = $redis->get($this->hash)) { $lock = $redis->setnx('@lock' . $this->hash, 1); if (!$lock) { $pubsub = $redis->pubSubLoop(); $pubsub->subscribe('@lock' . $this->hash); foreach ($pubsub as $message) { if ($message->kind == 'message') { $return = $this->unpack($message->payload); $this->log('Result from cache (wait)'); break; } } $pubsub->unsubscribe(); } else { $redis->expire('@lock' . $this->hash, $this->lock_ttl); } } else { $return = $this->unpack($result); $this->log('Result from cache (no wait)'); } } catch (Exception $e) { $this->warning($e->getMessage()); } } return $return; } public function saveResult(array $result, $hash = null) { if ($this->enabled) { try { $hash = $hash ?: $this->hash; $redis = $this->workhorse(); $data = $this->pack($result); $redis->set($hash, $data); $redis->expire($hash, $this->data_ttl); $redis->publish('@lock' . $hash, $data); $redis->del(['@lock' . $hash]); $redis->multi(); $redis->exec(); } catch (Exception $e) { $this->warning($e->getMessage()); } } return $result; } public function pack($result) { return serialize($result); } public function unpack($result) { return unserialize($result); } public function initHash(array $params) { if (array_key_exists('CURRENCY', $params)) { unset($params['CURRENCY']); } $prefix = defined('INTERNAL_CACHE_PREFIX') ? INTERNAL_CACHE_PREFIX : ((defined('CUSTOM')) ? CUSTOM : _ROOT); return md5($prefix . serialize($params)); } public function getHash() { return $this->hash; } } 