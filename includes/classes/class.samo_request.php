<?php
 class Samo_Request { public static function is_options() { return isset($_SERVER['REQUEST_METHOD']) && ('OPTIONS' == $_SERVER['REQUEST_METHOD']); } public static function http_origin() { return isset($_SERVER['HTTP_ORIGIN']) ? $_SERVER['HTTP_ORIGIN'] : null; } public static function is_post() { return isset($_SERVER['REQUEST_METHOD']) && ('POST' == $_SERVER['REQUEST_METHOD']); } public static function post($var) { return (self::is_post() && isset($_POST[$var])) ? $_POST[$var] : null; } public static function get($var) { return (isset($_GET[$var])) ? $_GET[$var] : null; } public static function find($var) { $return = null; if (self::is_post() && isset($_POST[$var])) { $return = $_POST[$var]; } elseif (isset($_GET[$var])) { $return = $_GET[$var]; } elseif (isset($_COOKIE['p' . $var])) { $return = $_COOKIE['p' . $var]; } return $return; } public static function integers($var, $min = null, $max = null) { $var = self::find($var); $return = (null !== $var) ? (is_array($var) ? $var : explode(',', $var)) : array(); $options = array(); if (is_int($min)) { $options['min_range'] = $min; } if (is_int($max)) { $options['max_range'] = $max; } foreach ($return as $idx => $val) { if (false === filter_var($val, FILTER_VALIDATE_INT, ['options' => $options])) { unset($return[$idx]); } else { $return[$idx] = intval($val); } } return $return; } public static function date($var, $min = null, $max = null) { $var = self::find($var); if ($date = Samo_Loader::load_object('Samo_Datetime', $var)) { if ($min && $date->lt($min)) { return new NullDateTime(); } if ($max && $date->gt($max)) { return new NullDateTime(); } } return $date; } public static function intval($var, $min = null, $max = null) { $var = self::find($var); $options = array(); if (is_int($min)) { $options['min_range'] = $min; } if (is_int($max)) { $options['max_range'] = $max; } if (false !== ($result = filter_var($var, FILTER_VALIDATE_INT, ['options' => $options]))) { return $result; } return null; } public static function bitval($var) { $var = self::find($var); return (0 == intval($var)) ? 0 : 1; } public static function hexval($var, $min = null, $max = null) { $var = self::find($var); if (strpos($var, '0x') === 0 && ctype_xdigit(substr($var, 2))) { return $var; } return null; } public static function floatval($var, $min = null, $max = null) { $var = self::find($var); if ($result = filter_var($var, FILTER_VALIDATE_FLOAT)) { if (is_numeric($min) && $result < $min) { return null; } if (is_numeric($max) && $result > $max) { return null; } return $result; } return null; } public static function strval($var, $min = null, $max = null) { $var = trim(self::find($var)); if (is_int($min) && strlen($var) < $min) { return null; } if (is_int($max) && strlen($var) > $max) { return null; } return $var; } public static function strvals($var, $min = null, $max = null) { $var = trim(self::find($var)); $return = (null !== $var) ? (is_array($var) ? $var : explode(',', $var)) : []; foreach ($return as &$val) { $val = trim($val); $len = strlen($val); if (!$len) { unset($val); } else { if (is_int($min) && $len < $min) { unset($val); } else { if (is_int($max) && $len > $max) { unset($val); } } } } return $return; } public static function guid($var) { if ($var = self::strval($var, 36, 36)) { if (preg_match('~[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}~', $var)) { return $var; } } return null; } public static function email($var) { if ($var = self::strval($var)) { return ($var = filter_var($var, FILTER_VALIDATE_EMAIL)) ? $var : null; } return null; } public static function remote_addr() { return (isset($_SERVER['REMOTE_ADDR'])) ? long2ip(ip2long($_SERVER['REMOTE_ADDR'])) : '0.0.0.0'; } public static function if_match() { return (isset($_SERVER['HTTP_IF_NONE_MATCH']) && !empty($_SERVER['HTTP_IF_NONE_MATCH'])) ? str_replace('-gzip', '', $_SERVER['HTTP_IF_NONE_MATCH']) : false; } public static function requested_with() { return (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && !empty($_SERVER['HTTP_X_REQUESTED_WITH'])) ? $_SERVER['HTTP_X_REQUESTED_WITH'] : false; } public static function http_accept($template = null) { if (isset($_SERVER['HTTP_ACCEPT'])) { return (!is_null($template)) ? strpos($_SERVER['HTTP_ACCEPT'], $template) : $_SERVER['HTTP_ACCEPT']; } return false; } public static function sapi_status() { return ('cgi' == php_sapi_name()) ? 'Status:' : ((isset($_SERVER['SERVER_PROTOCOL'])) ? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.0'); } public static function uri() { return (isset($_SERVER['REQUEST_URI'])) ? $_SERVER['REQUEST_URI'] : $_SERVER['PHP_SELF']; } public static function user_agent() { return (isset($_SERVER['HTTP_USER_AGENT'])) ? $_SERVER['HTTP_USER_AGENT'] : false; } public static function referer() { return (isset($_SERVER['HTTP_REFERER'])) ? $_SERVER['HTTP_REFERER'] : false; } public static function host() { return Samo_Url::host((isset($_SERVER['HTTP_HOST'])) ? $_SERVER['HTTP_HOST'] : trim(COOKIE_DOMAIN, '.')); } public static function scheme() { if (isset($_SERVER['HTTP_X_FORWARDED_PROTO'])) { return $_SERVER['HTTP_X_FORWARDED_PROTO']; } if (isset($_SERVER['https']) && 'on' == $_SERVER['https']) { return 'https'; } if (isset($_SERVER['HTTPS']) && 'on' == $_SERVER['HTTPS']) { return 'https'; } if (isset($_SERVER['SERVER_PORT']) && 443 == $_SERVER['SERVER_PORT']) { return 'https'; } return 'http'; } public static function time() { return (isset($_SERVER['REQUEST_TIME'])) ? $_SERVER['REQUEST_TIME'] : time(); } public static function is_test() { return self::is_admin(); } public static function is_admin() { static $is_admin = null; if (null === $is_admin) { $is_admin = false; if (isset($_COOKIE[SESSION_NAME])) { if (!headers_sent() && !isset($_SESSION)) { $cookie_path = defined('COOKIE_PATH') ? COOKIE_PATH : WWWROOT; ini_set('session.cookie_path', $cookie_path); ini_set('session.cookie_domain', COOKIE_DOMAIN); session_name(SESSION_NAME); session_start(); session_write_close(); $is_admin = isset($_SESSION['samo_admin']); unset($_SESSION); } else { $is_admin = isset($_SESSION['samo_admin']); } } } return $is_admin; } public static function check_csrf_token() { $token = self::csrf_token(); if ( (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && (!isset($_SERVER['HTTP_X_CSRFTOKEN']) || $_SERVER['HTTP_X_CSRFTOKEN'] != $token) ) || (($request_token = self::get('csrf_token')) && $token != $request_token) ) { return false; } return true; } public static function csrf_token() { return md5(Samo_Request::remote_addr() . Samo_Request::user_agent()); } public static function is_uploaded_file($filepath) { if (file_exists($filepath)) { if (is_uploaded_file($filepath)) { return true; } if (dirname($filepath) == _ROOT . 'dnl') { if (isset($_FILES) && count($_FILES)) { foreach ($_FILES as $field => $data) { if ($data['tmp_name'] == $filepath) { if (isset($data['md5sum']) && !empty($data['md5sum']) && $data['md5sum'] == md5_file($filepath)) { return true; } } } } } } return false; } public static function lang() { if (defined('LANGS')) { $LANGS = array_map('trim', explode(',', LANGS)); } elseif (defined('LANG')) { $LANGS = [LANG]; } else { $LANGS = []; } $LANGS = array_merge($LANGS, ['rus', 'eng']); $LANG = null; if (!$LANG) { $LANG = self::find('LNG'); } if (!$LANG) { $LANG = self::find('LANG'); } if (2 == strlen($LANG)) { $langMap = [ 'ru' => 'rus', 'en' => 'eng', 'ua' => 'ukr', 'uz' => 'uzb', 'kk' => 'kaz', 'ky' => 'kir', 'tg' => 'tgk', 'tk' => 'tuk', 'tr' => 'tur', 'az' => 'aze', 'ro' => 'rum', ]; $LANG = array_key_exists($LANG, $langMap) ? $langMap[$LANG] : 'eng'; } if (!in_array($LANG, $LANGS)) { $LANG = null; } if (!$LANG) { $LANG = reset($LANGS); } return $LANG; } public static function langid() { $langIdMap = [ 'eng' => 0, 'rum' => 15, 'rus' => 21, 'tur' => 22, 'bul' => 20, 'ukr' => 1058, ]; $lang = self::lang(); return isset($langIdMap[$lang]) ? $langIdMap[$lang] : (defined('LANGID') ? LANGID : 0); } public static function is_developer() { return in_array(ip2long(self::remote_addr()), [-735955374, -735955372, 3559011922, 3559011924]); } public static function api_version() { return ($version = self::find('version')) ? $version : '1.0'; } public static function api_format() { return ($type = self::find('type')) ? $type : 'json'; } public static function is_api() { return ($samo_action = self::get('samo_action')) && $samo_action == 'api'; } } 