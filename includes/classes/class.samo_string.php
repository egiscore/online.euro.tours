<?php
 class Samo_String { private $stroke = null; private $charset = 'cp1251'; private $safehtml = false; public static function set($str, $charset = 'cp1251') { $stroke = new self($str, $charset); return $stroke; } public function __construct($str, $charset = 'cp1251') { $this->stroke = $str; $this->safehtml = ($str instanceof Samo_String) ? $str->is_safehtml() : false; $this->charset = $charset; } private function input($arg) { if (null !== $arg) { $this->stroke = $arg; } return $this->stroke; } private function output($arg) { return (null === $arg) ? $this : $this->stroke; } public function is_safehtml() { return $this->safehtml; } public function safehtml($double_encoding = false, $opts = ENT_QUOTES, $str = null) { if (!$this->is_safehtml()) { $this->safehtml = true; $this->stroke = htmlspecialchars($this->input($str), $opts, $this->charset, $double_encoding); } return $this->output($str); } public function utf8($str = null) { $arg = $this->input($str); $this->stroke = $this->is_utf8($arg) ? $arg : mb_convert_encoding($arg, 'utf-8', $this->charset); return $this->output($str); } public function ansi($str = null) { $arg = $this->input($str); $this->stroke = $this->is_utf8($arg) ? mb_convert_encoding($arg, $this->charset,'utf-8') : $arg; return $this->output($str); } public function upper($str = null) { $arg = $this->input($str); $this->stroke = mb_strtoupper($arg, $this->charset); return $this->output($str); } public function lower($str = null) { $arg = $this->input($str); $this->stroke = mb_strtolower($arg, $this->charset); return $this->output($str); } public function trim($str = null) { $this->stroke = trim($this->input($str)); return $this->output($str); } public function __toString() { return strval($this->stroke); } public static function getCurrencySign($sign = null) { $signs = [ 'RUB' => 'p.', 'USD' => '$', 'EUR' => 'ˆ', 'KZT' => '&#8376;', 'UAH' => '&#8372;', ]; if (!$sign) { return $signs; } else { if (key_exists($sign, $signs)) { return $signs[$sign]; } else { return $sign; } } } public function is_utf8($str) { $len = strlen($str); for ($i = 0; $i < $len; $i++) { $c = ord($str[$i]); if ($c > 128) { if (($c >= 254)) { return false; } elseif ($c >= 252) { $bits = 6; } elseif ($c >= 248) { $bits = 5; } elseif ($c >= 240) { $bits = 4; } elseif ($c >= 224) { $bits = 3; } elseif ($c >= 192) { $bits = 2; } else { return false; } if (($i + $bits) > $len) { return false; } while ($bits > 1) { $i++; $b = ord($str[$i]); if ($b < 128 || $b > 191) { return false; } $bits--; } } } return true; } } 