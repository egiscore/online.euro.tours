<?php
 class Samo_Tools { public $typeIconOptions = ['width' => 20, 'height' => 20]; public $programIconOptions = ['width' => 20, 'height' => 20]; public $ticketsLogoOptions = ['width' => 100, 'height' => 40]; public function create_classmap() { if (!defined('INCLUDE_PATH_CACHE') || INCLUDE_PATH_CACHE === '') { return false; } $masks = [ 'includes/classes/*.php', 'modules/*/*.php', 'vendor/*.php', 'vendor/*/*.php', 'vendor/*/*/*.php', 'vendor/*/*/*/*.php', 'vendor/*/*/*/*/*.php', ]; if (defined('CUSTOM')) { $masks[] = '.dev/custom/' . CUSTOM . '/*.php'; $masks[] = '.dev/custom/' . CUSTOM . '/*/*.php'; $masks[] = '.dev/custom/' . CUSTOM . '/*/*/*.php'; $masks[] = '.dev/custom/' . CUSTOM . '/*/*/*/*.php'; $masks[] = '.dev/custom/' . CUSTOM . '/*/*/*/*/*.php'; } $classmap = []; $pwd = getcwd(); chdir(_ROOT); foreach ($masks as $mask) { $files = ($found = glob($mask)) ? $found : []; foreach ($files as $file) { if (strpos($file, 'vendor/sabre/') === false && strpos($file, 'vendor/predis/') === false && strpos($file, 'vendor/swift/') === false && strpos($file, 'vendor/smarty/') === false && preg_match_all('~([^|\s])?(class|interface|trait)\s+([a-z0-9_]+)(\s+extends|\s+implements|\s+\{|\s+\n|\r\n|\n)~Um', strtolower($this->filesrc($file)), $matches)) { foreach ($matches[3] as $classname) { if (!isset($classmap[$classname]) || strpos($file, 'custom')) { $classmap[$classname] = $file; } } } } } chdir($pwd); if (!empty($classmap)) { return $this->saveConfig(INCLUDE_PATH_CACHE, '__classmap__', $classmap); } else { throw new Exception('Classmap not created!'); } } public function create_servers_cache() { if (!defined('TOWNSFROM_CACHE') || TOWNSFROM_CACHE === '') { return false; } $sql = 'exec <OFFICEDB>.dbo.up_WEB_3_servers_cache @Select = 1, @Update = 0'; $separator = extension_loaded('sqlsrv') ? ',' : ':'; $TOWNSFROM = array(); $db = $this->mssql_connect(); $stateFrom = (defined('STATEFROM')) ? STATEFROM : null; try { $res = $db->fetchAll( $sql, function ($town) use ($separator, &$TOWNSFROM, $stateFrom) { if ($town['townName'] != null && $town['stateName'] != null && ($stateFrom === null || ($stateFrom == $town['stateFrom']))) { $town['redirect'] = false; $town['officeCatalogAlias'] = (OFFICE_SQLSERVER == '' && $town['officeSamoAlias'] == $town['officeCatalogAlias']) ? '' : $town['officeCatalogAlias']; $town['officeSamoAlias'] = ($town['officeSamoAlias'] == $town['onlineAlias']) ? '' : $town['officeSamoAlias']; $town['onlineIP'] = str_replace(array(',', ':', '<hostname>'), array($separator, $separator, hostname), $town['onlineIP']); $town['default'] = false; $TOWNSFROM[] = $town; } } ); if ($res && empty($TOWNSFROM)) { throw new Exception("Check STATEFROM in properties.php"); } } catch (Database_Exception $e) { return false; } if (defined('INTERNET_USER')) { $userCode = INTERNET_USER; } else { $sql = 'exec <OFFICEDB>.dbo.up_WEB_3_default_usercode'; if (false === ($userCode = $db->fetchOne($sql))) { $userCode = 'NULL'; } } $sql = $db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_tour_config', [ 'Section' => 'online_config', 'What' => 'STATE_DEFAULT', 'UserCode' => $userCode, ] ); if (!empty($TOWNSFROM) && (false !== ($defaultState = $db->fetchOne($sql)))) { foreach ($TOWNSFROM as &$town) { if ($town['townFrom'] == TOWNFROMINC && $town['state'] == $defaultState) { $town['default'] = true; break; } } } if (empty($TOWNSFROM) && !file_exists(TOWNSFROM_CACHE)) { $TOWNSFROM = [ [ 'townFrom' => 100500, 'state' => 100500, 'townName' => 'Unknown town', 'stateName' => 'Unknown state', 'townLName' => 'Unknown town', 'stateLName' => 'Unknown state', 'officeSamoAlias' => OFFICE_SQLSERVER, 'officeSamoDB' => OFFICEDB, 'officeCatalogAlias' => OFFICE_SQLSERVER, 'officeCatalogDB' => 'WWWBRON', 'onlineIP' => hostname, 'onlineAlias' => OFFICE_SQLSERVER == '' ? OFFICE_SQLSERVER : 'WEBSQL', 'onlineSamoDB' => OFFICE_SQLSERVER == '' ? OFFICEDB : 'ONLINEWEB', 'onlineCatalogDB' => 'WWWBRON', 'stateFrom' => 100501, 'stateFromName' => 'Unknown state', 'stateFromLName' => 'Unknown state', 'redirect' => false, 'default' => true, ], ]; } if (count($TOWNSFROM)) { $this->saveConfig(TOWNSFROM_CACHE, 'TOWNSFROM', $TOWNSFROM); } else { throw new Exception('cannot find online servers'); } return array_map(array($this, '_utf8'), $TOWNSFROM); } public function clear_smarty_cache($module = null) { Samo_Utils::assets_revision($calculate = true); $mask = (null === $module) ? "*.php" : "*$module*.php"; if ($result = $this->remove_files(SMARTY_COMPILE_DIR, $mask, null)) { $this->reset_opcache(); } return $result; } public function reset_opcache($file = null) { if (null !== $file) { clearstatcache($file); } if (function_exists('apc_clear_cache') && !extension_loaded('apcu')) { if (null !== $file) { @apc_delete_file($file); } else { apc_clear_cache('opcode'); } } if (function_exists('opcache_reset')) { if (null !== $file) { opcache_invalidate($file, true); } else { opcache_reset(); } } if (function_exists('xcache_clear_cache')) { xcache_clear_cache(XC_TYPE_PHP); } if (function_exists('wincache_refresh_if_changed')) { if (null !== $file) { wincache_refresh_if_changed([$file]); } else { wincache_refresh_if_changed(); } } if (function_exists('eaccelerator_clear')) { eaccelerator_clear(); } if (function_exists('accelerator_reset')) { accelerator_reset(); } } public function session_gc() { return true; } public function get_routes() { if (!defined('ROUTES_PATH')) { define('ROUTES_PATH', _ROOT . 'routes.php'); } $routes = array(); include ROUTES_PATH; unset($routes['menu'], $routes['passport'], $routes['oauth']); if (isset($routes['anketa_samo'])) { unset($routes['anketa_samo']); if (!isset($routes['anketa'])) { $routes['anketa'] = array('title' => 'Anketa'); } } if (defined('OFFICE_SQLSERVER') && OFFICE_SQLSERVER != '') { $routes['replications'] = array('title' => 'up_online_repl'); } ksort($routes); return array_keys($routes); } protected function remove_files($dir, $mask, $filemtime = null) { $timeout = 25; $pwd = getcwd(); if (file_exists($dir) && chdir($dir)) { $start = $_SERVER['REQUEST_TIME']; $iterations = 0; $iterator = new GlobIterator($dir . '/' . $mask, FilesystemIterator::SKIP_DOTS | FilesystemIterator::UNIX_PATHS); foreach ($iterator as $fileinfo) { if ($fileinfo->isFile() && (null === $filemtime || $fileinfo->getMTime() < $filemtime)) { @unlink($fileinfo->getPathname()); } $iterations++; if ($iterations % 100 === 0 && $timeout <= time() - $start) { break; } } chdir($pwd); } return true; } public function clear_dnl() { return $this->remove_files(_ROOT . 'dnl/', '*', $_SERVER['REQUEST_TIME'] - 3600); } protected function remove_versioned_images($dir, $mask = '*') { $cwd = getcwd(); $pictures = array(); chdir($dir); $files = glob($mask); foreach ($files as $file) { $ext = pathinfo($file, PATHINFO_EXTENSION); $parts = explode('_', basename($file, '.' . $ext)); if (count($parts) > 1) { $version = array_pop($parts); if (is_numeric($version)) { $idx = implode('_', $parts); if (!isset($pictures[$idx])) { $pictures[$idx] = array($version => $dir . $file); } else { $pictures[$idx][$version] = $dir . $file; } } } } foreach ($pictures as $data) { if (count($data) > 1) { krsort($data); array_shift($data); foreach ($data as $file) { @unlink($file); } } } chdir($cwd); return true; } public function remove_ptype_images() { return $this->remove_versioned_images(_ROOT . 'data/search_tour/', '*_*_*.png'); } public function remove_hotel_images() { $photos = $this->remove_versioned_images(_ROOT . 'data/hotel/', '*_*_*_*.jpg'); $attrs = $this->remove_versioned_images(_ROOT . 'data/hotelparam/', 'hp_*_*.png'); return $photos && $attrs; } public function remove_partner_logos() { return $this->remove_versioned_images(_ROOT . 'data/partner/', 'logo_*_*.png'); } protected function saveConfig($path, $name, $struct) { $temp = $path . '.new'; if (file_put_contents($temp, '<' . '?php' . PHP_EOL . '$' . $name . ' = ' . var_export($struct, true) . ';' . PHP_EOL, LOCK_EX)) { if (!file_exists($path) || md5_file($path) != md5_file($temp)) { if (rename($temp, $path)) { $this->reset_opcache($path); umask(0); @chmod($path, 0666); Samo_Registry::set($name, $struct); return true; } } else { return unlink($temp); } } throw new Exception('File "' . $path . '" not saved!'); } protected function filesrc($file) { $res = @php_strip_whitespace($file); return ($res) ? $res : file_get_contents($file); } public function clear_apc_cache() { return $this->clear_cache(); } public function clear_cache() { $cache = new Samo_Cache(); $cache->purge(); return true; } public function backup($filelist) { $backupDir = dirname(SMARTY_COMPILE_DIR); $expireTime = strtotime('-7 day'); if ($oldBackups = glob($backupDir . '/backup.*.zip')) { foreach ($oldBackups as $bup) { if (filemtime($bup) < $expireTime && is_writable($bup)) { unlink($bup); } } } $memoryLimit = ceil((intval(ini_get('memory_limit')) * 1024 * 1024) * 0.7); $part = 1; $sysver = $this->version(); $version = $sysver['rev']; $fname = $backupDir . '/backup.' . $version . '.zip'; require_once dirname(__FILE__) . '/class.zip_folder.php'; $filelist = (is_array($filelist)) ? $filelist : ((!is_scalar($filelist) || empty($filelist)) ? array() : array($filelist)); if (count($filelist)) { $umask = umask(0); $zip = new Zip_Folder(); foreach ($filelist as $file) { if (file_exists($file) && is_file($file) && is_readable($file)) { $zip->packFile($file); } if (memory_get_usage(true) >= $memoryLimit) { $fname = $backupDir . '/backup.' . $version . '.part' . $part . '.zip'; $backup = $zip->get(); if (file_put_contents($fname, $backup, LOCK_EX)) { chmod($fname, 0666); $part++; unset($backup, $zip); $zip = new Zip_Folder(); } else { umask($umask); return false; } } } $backup = $zip->get(); if ($result = file_put_contents($fname, $backup, LOCK_EX)) { chmod($fname, 0666); } umask($umask); return $result; } return false; } public function get_file($filename) { if (($filepath = realpath(_ROOT . $filename)) && strpos($filepath, realpath(_ROOT)) === 0) { return base64_encode(file_get_contents($filepath)); } return false; } public function get_custom_class($classname) { $__classmap__ = []; include INCLUDE_PATH_CACHE; if (isset($__classmap__[$classname])) { return $this->get_file($__classmap__[$classname]); } return false; } public function crontasks() { return [ 'session_gc' => 300, 'clear_dnl' => 1800, 'vacuum_cache' => 1800, 'remove_hotel_images' => 86400, 'remove_partner_logos' => 86400, 'remove_ptype_images' => 86400, 'download_images' => 3600, ]; } public function crontab($taskid = null) { $spool = defined('MAIL_SPOOL') ? MAIL_SPOOL : _ROOT . 'data/spool/'; $lockFile = $spool . 'lock'; if (file_exists($spool) && is_dir($spool)) { if (!file_exists($lockFile) && @touch($lockFile)) { @chmod($lockFile, 0666); } if ($lock = fopen($lockFile, 'w+')) { if (flock($lock, LOCK_EX | LOCK_NB)) { $files = (null == $taskid) ? glob($spool . 'cron_*.php') : glob($spool . 'cron_*' . $taskid . '*.php'); if ($files && count($files)) { $task = array_shift($files); try { set_time_limit(0); $result = include $task; } catch (Exception $e) { $result = false; rename($task, $task . '.problem'); } if ($result) { unlink($task); } } else { $files = glob($spool . 'cron_*.php.problem'); if ($files && count($files)) { shuffle($files); $task = array_shift($files); rename($task, str_replace('.php.problem', '.php', $task)); } $tasks = $this->crontasks(); $stats_file = $spool . '__stats.php'; if (file_exists($stats_file)) { $stats = include $stats_file; } else { if (@touch($stats_file)) { @chmod($stats_file, 0666); } $stats = []; } $current = time(); foreach ($tasks as $task => $period) { if (!isset($stats[$task]) || $current - $stats[$task] > $period) { $stats[$task] = $current; if (file_put_contents($stats_file, '<' . '?php' . PHP_EOL . 'return ' . var_export($stats, true) . ';' . PHP_EOL, LOCK_EX)) { $this->reset_opcache($stats_file); } call_user_func(array($this, $task)); break; } } } flock($lock, LOCK_UN); } fclose($lock); } return true; } return false; } public function cron_problems() { $spool = defined('MAIL_SPOOL') ? MAIL_SPOOL : _ROOT . 'data/spool/'; $files = glob($spool . '*.problem'); return ($files) ? count($files) : 0; } protected function sqlservers() { $TOWNSFROM = array(); include TOWNSFROM_CACHE; $servers = array(); foreach ($TOWNSFROM as $data) { if (isset($data['onlineIP']) && !isset($servers[$data['onlineIP']])) { $servers[$data['onlineIP']] = $data; } } return $servers; } public function droptemptab() { $db = $this->mssql_connect(); $sql = "exec <OFFICEDB>.dbo.up_repl_execOnlineSamo @sql = 'EXEC [dbo].[up_online_droptemptab]', @Debug = 0"; $db->query($sql); return true; } protected function mssql_connect($TOWNFROM = null, $STATE = null) { if (null === $TOWNFROM && null === $STATE) { $registry = Samo_Registry::instance(); if (array_key_exists('db', $registry)) { $db = $registry['db']; } else { $db = new Samo_Database(); $dsn = array( 'hostname' => hostname, 'username' => username, 'password' => password, 'database' => 'master', 'alias' => hostname, 'office' => OFFICE_SQLSERVER . '.' . OFFICEDB, 'bank' => OFFICE_SQLSERVER . '.' . BANKDB, ); $db->connect($dsn); } return $db; } if (!function_exists('db_connect')) { include _ROOT . 'includes/db.php'; } $TOWNFROM = (null == $TOWNFROM) ? TOWNFROMINC : $TOWNFROM; $STATE = (null == $STATE) ? -1 : $STATE; return db_connect($TOWNFROM, $STATE); } public function repl_queue_length() { $db = $this->mssql_connect(); $sql = 'exec <OFFICEDB>.dbo.up_WEB_3_repl_queuelength'; if ($result = $db->fetchAllWithKey($sql, 'ProcName')) { $result = array_filter( $result, function ($row) { return ($row['Length'] > 0); } ); } return $result ? $result : 0; } public function repl_status($checktime) { $result = array(); if (is_numeric($checktime)) { $checktime = Samo_Datetime::parse($checktime); $db = $this->mssql_connect(); $sql = $db->formatExec('<OFFICEDB>.dbo.up_WEB_3_repl_status', array('CheckTime' => $checktime)); $result = $db->fetchAll($sql); } return $result; } public function vacuum_cache() { $cache = new Samo_Cache(); $cache->vacuum(); return true; } public function vacuum_apc() { return $this->vacuum_cache(); } public function check_ident($count = null) { $db = $this->mssql_connect(); $count = ($tmp = intval($count)) ? $tmp : 'null'; $sql = $db->formatExec('<OFFICEDB>.dbo.up_repl_checkIdent', ['Count' => $count]); $result = $db->fetchAll($sql); return count($result) ? $result : true; } protected function wwwbrons() { $TOWNSFROM = array(); include TOWNSFROM_CACHE; $wwwbrons = array(); foreach ($TOWNSFROM as $data) { if (isset($data['onlineIP'])) { $wwwbrons[$data['onlineIP'] . $data['onlineCatalogDB']] = $data; } } return $wwwbrons; } public function sysinfo() { if (!extension_loaded('soap')) { return false; } $result = array(); $ver = $this->version(); $result['ONLINE_VERSION'] = $ver['rev']; $result['ONLINE_BRANCH'] = $ver['path']; $result['ONLINE_ROOT'] = _ROOT; $result['SAMOTOUR'] = $ver['samotour']; $result['PHP_VERSION'] = PHP_VERSION; $result['PHP_SAPI'] = PHP_SAPI; $result['PHP_OS'] = PHP_OS; $result['PHP_ARCH'] = php_uname('m'); $ini = array(); if ($loaded = php_ini_loaded_file()) { $ini[] = $loaded; } if ($add = php_ini_scanned_files()) { $ini = array_merge($ini, explode(',' . PHP_EOL, $add)); } $result['PHP_INI_LOCATION'] = $ini; $result['PHP_EXTENSIONS'] = get_loaded_extensions(); $result['PHP_INI'] = ini_get_all(null, false); $result['PHP_LOCALE_CP1251'] = setlocale(LC_CTYPE, 'ru_RU.cp1251', 'ru_RU.CP1251', 'rus_RUS', 'ru_RU', 'rus_RUS.CP1251', 'Russian_Russia.1251') && (strtoupper(base64_decode('2Ojw7urg/yD96+Xq8vDo9Ojq4Pbo/yD+5u379SDj8+Hl8O3o6SDk4PHyIOzu+e376SDy7uv37uog7+7k+rjs8yDx5ev88eru4+4g9e7n/+nx8uLgLg==')) == base64_decode('2MjQzsrA3yDdy8XK0tDI1MjKwNbI3yDexs3b1SDD08HF0M3IySDEwNHSIMzO2c3bySDSzsvXzsogz87E2qjM0yDRxcvc0crOw84g1c7H38nR0sLALg==')); $bytes = disk_free_space(_ROOT); $types = array('B', 'KB', 'MB', 'GB', 'TB'); $loops = count($types) - 1; for ($i = 0; $bytes >= 1024 && $i < $loops; $i++) { $bytes /= 1024; } $result['DISK_FREE_SPACE'] = (round($bytes, 2) . " " . $types[$i]); $result['SESSION_WRITABLE'] = ('files' == ini_get('session.save_handler')) ? is_writable(ini_get('session.save_dir')) : sprintf('session.save_handler = %s; session.save_path = %s;', ini_get('session.save_handler'), ini_get('session.save_dir')); $result['SMARTYTMP_WRITABLE'] = is_writable(SMARTY_COMPILE_DIR); $result['DNL_WRITABLE'] = is_writable(_ROOT . 'dnl'); $result['SPOOL_WRITABLE'] = is_writable((defined('MAIL_SPOOL')) ? MAIL_SPOOL : _ROOT . 'data/spool/'); $result['HTPARAM_WRITABLE'] = is_writable(_ROOT . 'data/hotelparam/'); $tmpdir = ($temp = ini_get('upload_tmp_dir')) ? $temp : sys_get_temp_dir(); $result['UPLOAD_TMP_DIR_WRITABLE'] = (is_dir($tmpdir) && is_writable($tmpdir)); $linked = array(); $officeServerAlias = OFFICE_SQLSERVER; $servers = $this->sqlservers(); if (OFFICE_SQLSERVER == '') { $first = reset($servers); $officeServerAlias = $first['onlineAlias']; } foreach ($servers as $ip => $server) { $srv = array( 'fromIp' => $ip, 'to' => $server['officeSamoAlias'], ); if (OFFICE_SQLSERVER != '') { try { $db = $this->mssql_connect($server['townFrom'], $server['state'], $server['stateFrom']); $sql = $db->formatExec($server['onlineSamoDB'] . '.dbo.up_WEB_3_ping_linked', array('alias' => $server['officeSamoAlias'])); $srv['link'] = $db->fetchOne($sql); $db->disconnect(); } catch (Database_Exception $e) { $srv['link'] = 0; $srv['error'] = $e->getError(); } $linked[$server['onlineAlias']] = $srv; } } if (OFFICE_SQLSERVER != '') { $result['LINKED'] = $linked; } $result['REPLICATION'] = OFFICE_SQLSERVER != ''; $result['MULTIWWWSERVER'] = count($servers) > 1; $result['MULTIWWWBRON'] = count($this->wwwbrons()) > 1; $db = $this->mssql_connect(); try { $sysinfo = array(); $parseValue = function ($row) { if (in_array($row['Value'], array('0', '1')) && in_array($row['Option'], array('Agent XPs', 'clr enabled', 'Data Access', 'Database Mail XPs', 'Ole Automation Procedures', 'SQL Mail XPs', 'SQLAgent running', 'xp_cmdshell'))) { return (bool)$row['Value']; } return $row['Value']; }; $db->fetchAll( 'exec <OFFICEDB>.dbo.up_repl_sysinfo', function ($row) use (&$sysinfo, $parseValue) { if (!isset($sysinfo[$row['Server']])) { $sysinfo[$row['Server']] = array(); } $sysinfo[$row['Server']][$row['Option']] = $parseValue($row); } ); if (isset($sysinfo[$officeServerAlias]['Current datetime'])) { $now = Samo_Datetime::now(); $diff = $now->getDateTime()->diff(new \Datetime($sysinfo[$officeServerAlias]['Current datetime'])); $diff = (($diff->y * 365 * 86400) + ($diff->m * 30 * 86400) + ($diff->d * 86400) + ($diff->h * 3600) + ($diff->i * 60) + $diff->s); $result['DATETIME'] = array( 'SQLSERVER' => $sysinfo[$officeServerAlias]['Current datetime'], 'PHP' => $now->format('Y-m-d H:i:s'), 'Timediff' => $diff, ); } if (isset($sysinfo[$officeServerAlias]['Last Seen Fr4Render'])) { $result['Fr4Render'] = array( 'LastSeen' => $sysinfo[$officeServerAlias]['Last Seen Fr4Render'], ); if (isset($sysinfo[$officeServerAlias]['Last Job Fr4Render'])) { $result['Fr4Render']['LastJob'] = $sysinfo[$officeServerAlias]['Last Job Fr4Render']; } if (isset($sysinfo[$officeServerAlias]['Last Result Fr4Render'])) { $result['Fr4Render']['LastResult'] = $sysinfo[$officeServerAlias]['Last Result Fr4Render']; } } } catch (Database_Exception $e) { $sysinfo = array('Error' => $e->getError()); } if (!isset($result['DATETIME']) && OFFICE_SQLSERVER == '') { $now = Samo_Datetime::now(); $result['DATETIME'] = array( 'SQLSERVER' => $now->format('Y-m-d H:i:s'), 'PHP' => $now->format('Y-m-d H:i:s'), 'Timediff' => 0 ); } $result['SQL'] = $sysinfo; $socket_timeout = ini_get('default_socket_timeout'); ini_set('default_socket_timeout', 3); $result['ANDROMEDA_ACCESS'] = strlen(@file_get_contents('http://st.samo.travel/public/pict/1x1.gif')) > 0; $result['REDMINE_ACCESS'] = strlen(@file_get_contents('http://redmine.samo.ru/404.html')) == 457; ini_set('default_socket_timeout', $socket_timeout); if (function_exists('apache_get_modules')) { $result['APACHE_MODULES'] = apache_get_modules(); } return $this->_utf8($result); } public function oauth_client(array $params) { if (!isset($params['action'])) { throw new Samo_Exception('Invalid argument'); } chdir(_ROOT); include _ROOT . 'includes/db.php'; $TOWNFROMINC = TOWNFROMINC; $STATEINC = null; $routes = array(); include _ROOT . 'includes/common.php'; db_connect($TOWNFROMINC, $STATEINC); $oauth = Samo_Loader::load_object('Oauth_Model'); switch ($params['action']) { case 'create': $required_params = array( 'client_id', 'client_secret', 'redirect_uri', 'developer', 'title', 'description', 'ip' ); foreach ($required_params as $param) { if (!isset($params[$param]) || empty($params[$param])) { throw new Samo_Exception('Invalid argument'); } else { $params[$param] = __recover_cp($params[$param]); } } if (!isset($params['expires']) || empty($params['expires'])) { $params['expires'] = null; } $result = $oauth->add_client($params['client_id'], $params['client_secret'], $params['redirect_uri'], $params['developer'], $params['title'], $params['description'], $params['ip'], $params['expires']); break; case 'enable': case 'disable': $required_params = array( 'client_id', 'client_secret' ); foreach ($required_params as $param) { if (!isset($params[$param]) || empty($params[$param])) { throw new Samo_Exception('Invalid argument'); } } $enable = ('enable' == $params['action']) ? 1 : 0; $result = $oauth->enable_client($params['client_id'], $params['client_secret'], $enable); break; case 'enable_token': case 'disable_token': $required_params = array( 'client_id', 'oauth_token' ); foreach ($required_params as $param) { if (!isset($params[$param]) || empty($params[$param])) { throw new Samo_Exception('Invalid argument'); } } $enable = ('enable_token' == $params['action']) ? 1 : 0; $result = $oauth->token_enable($params['client_id'], $params['oauth_token'], $enable); break; case 'list': $result = $oauth->client_list(); $result = $this->_utf8($result); break; case 'tokens': $required_params = array( 'client_id' ); foreach ($required_params as $param) { if (!isset($params[$param]) || empty($params[$param])) { throw new Samo_Exception('Invalid argument'); } } $tokens = $oauth->token_list($params['client_id']); $tokens = $this->_utf8($tokens); $result = $tokens; break; case 'create_token': $required_params = array( 'oauth_token', 'client_id', 'partpass_alias' ); foreach ($required_params as $param) { if (!isset($params[$param]) || empty($params[$param])) { throw new Samo_Exception('Invalid argument'); } else { $params[$param] = __recover_cp($params[$param]); } } if (!isset($params['scope'])) { $params['scope'] = null; } $result = $oauth->token_add($params['oauth_token'], $params['client_id'], $params['partpass_alias'], $params['scope']); break; default: throw new Samo_Exception('Unknown action'); } return $result; } public function version() { $info = include _ROOT . 'includes/version.php'; $db = $this->mssql_connect(); if ($samotour = $db->fetchOne("exec <OFFICEDB>.dbo.[up_WEB_3_online_config] @section  = 'samotour_version'")) { $info['samotour'] = Samo_Datetime::parse($samotour)->format('datetime'); } return $info; } public function check_classmap() { if (!defined('INCLUDE_PATH_CACHE') || INCLUDE_PATH_CACHE === '') { return false; } chdir(_ROOT); $__classmap__ = array(); include INCLUDE_PATH_CACHE; $problem = array(); foreach ($__classmap__ as $class => $file) { if (!file_exists($file)) { $problem[$class] = $file; } } return count($problem) ? $problem : true; } public function web_report($method, $values = array()) { if ($values instanceof stdClass) { $values = get_object_vars($values); foreach ($values as $key => $value) { if (strpos($key, 'date')) { $values[$key] = Samo_Loader::load_object('Samo_Datetime', $value); } } } $db = $this->mssql_connect(); $proc = 'up_WebReport_' . preg_replace('[^a-z0-9\_]i', '', $method); $sql = $db->formatExec('<OFFICEDB>.[dbo].[' . $proc . ']', $values); return $db->fetchAll($sql); } public function claimLink($username, $passwordHash, $claim, $samosoft_user) { $claim = intval($claim); if ($claim > 0) { $db = $this->mssql_connect(); $sql = $db->formatExec( '<OFFICEDB>.[dbo].[up_WEB_3_claim_partpass]', [ 'Claim' => $claim, ] ); if ($partpass = $db->fetchOne($sql)) { return $this->onlineLink($username, $passwordHash, 'CLAIM', $claim, $partpass, $samosoft_user); } } return false; } private function saveImageFile($row) { static $thumbnail = null; $return = false; try { switch ($row['Type']) { case 'HP': $dir = _ROOT . 'data/hotel/'; if ($row['Logo']) { $image = $dir . $row['TypeInc'] . '_0_logo_' . $row['Version'] . '.png'; } else { $image = $dir . $row['TypeInc'] . '_' . $row['PhotoInc'] . '_photo_' . $row['Version'] . '.jpg'; } break; case 'PT': $dir = _ROOT . 'data/search_tour/'; $image = $dir . 'prt_' . $row['PhotoInc'] . '_' . $row['Version'] . $this->getImageExtension($row['Photo']); break; case 'AT': $dir = _ROOT . 'data/hotelparam/'; $image = $dir . 'hp_' . $row['PhotoInc'] . '_' . $row['Version'] . $this->getImageExtension($row['Photo']); break; case 'PD': $dir = _ROOT . 'data/partner/'; $image = $dir . 'logo_' . $row['PhotoInc'] . '_' . $row['Version'] . '.png'; break; case 'LG': $dir = _ROOT . 'data/partner/'; $image = $dir . 'logo.png'; break; case 'UF': $dir = _ROOT . 'data/search_tour/'; $image = $dir . 'uf_' . $row['PhotoInc'] . '_' . $row['Version'] . $this->getImageExtension($row['Photo']); break; default: throw new Samo_Exception('Unknown image type: ' . $row['Type']); } $fileExists = file_exists($image); $isTouroperatorLogo = $row['Type'] == 'LG'; if ($fileExists && !$isTouroperatorLogo) { $return = true; } elseif (!$fileExists || $isTouroperatorLogo) { if (!file_exists($dir)) { throw new Samo_Exception('Directory ' . $dir . ' is not exists'); } if (!is_writable($dir)) { throw new Samo_Exception('Directory ' . $dir . ' is not writable'); } if ($row['Type'] == 'HP') { if (strlen($row['Photo']) > 1048576) { Samo_Utils::writeFile($image, $row['Photo']); } elseif (($img = @imagecreatefromstring($row['Photo'])) !== false) { imagejpeg($img, $image); } } elseif (in_array($row['Type'], ['AT', 'PT', 'PD', 'LG', 'UF'])) { if ($thumbnail === null) { $thumbnail = Samo_Loader::load_object('Thumbnail'); } switch ($row['Type']) { case 'PT': case 'AT': case 'UF': $options = ['percent' => 1]; break; case 'PD': $options = $this->ticketsLogoOptions; break; case 'LG': $options = []; break; } $options = array_merge(['method' => Thumbnail::METHOD_BOX], $options); if ($thumbnail->output($row['Photo'], $image, $options) === false) { if (Samo_Utils::writeFile($image, $row['Photo'])) { $return = true; } } } } } catch (Exception $e) { $e; } return $return; } public function download_images($ignoreCheckpoint = false) { static $thumbnail = null; $buildCssWorker = false; $isDownloaded = false; $checkpoint = _TMP . '_checkpoint_download_images.txt'; if (!$ignoreCheckpoint && file_exists($checkpoint)) { $lastStamp = file_get_contents($checkpoint); } else { $lastStamp = null; } $db = $this->mssql_connect(); $params = ['LastStamp' => $lastStamp]; if ('cli' == php_sapi_name()) { $params['Limit'] = 1; } $sql = $db->formatExec('<OFFICEDB>.[dbo].[up_WEB_3_pictures]', $params); $db->rawMode(true); if ($res = $db->query($sql)) { $isDownloaded = $db->numRows($res) == 0; while ($row = $db->fetchRow($res)) { if ($this->saveImageFile($row)) { if (!$buildCssWorker) { $buildCssWorker = in_array($row['Type'], ['PT', 'AT', 'UF']); } Samo_Utils::writeFile($checkpoint, $row['stamp']); } } if ($buildCssWorker && $this->buildCssIcons()) { $this->clear_smarty_cache(); } $db->rawMode(false); } return $isDownloaded; } public function onlineLink($username, $passwordHash, $entity, $identity, $partpass, $samosoft_user) { $badPasswd = [ 'd827cfb4bc3b30f2116cac43fd360c5715e03543', '5cee68d5847dff97099c4b1c295bb858a6bcd169', '7110eda4d09e062aa5e4a390b0a572ac0d2c0220', '8cb2237d0679ca88db6464eac60da96345513964', '8c997ee9947e634ebeea9de74018078120674171', ]; if (!in_array($passwordHash, $badPasswd)) { $db = $this->mssql_connect(); $sql = $db->formatExec( '<OFFICEDB>.[dbo].[up_WEB_3_ADMIN_LoginManager]', [ 'Login' => $username, 'Crc_psw' => '0x' . $passwordHash, ] ); $user = $db->fetchRow($sql); if (1 == $user['user_is_admin']) { if (null !== $partpass && !is_int($partpass)) { $sql = $db->formatExec( '<OFFICEDB>.[dbo].[up_WEB_3_search_partpass]', [ 'Alias' => $partpass, ] ); $query = $db->query($sql); if (1 == $db->numRows($query)) { $partpass = $db->fetchOne($query); $db->freeResult($query); } else { return false; } } $sql = $db->formatExec( '<OFFICEDB>.[dbo].[up_WEB_3_online_link]', [ 'Entity' => $entity, 'Inc' => $identity, 'PartPass' => $partpass, 'User' => $user['Code'], 'SamosoftUser' => $samosoft_user, ] ); return $db->fetchOne($sql); } } return false; } protected function multiply_methods() { return array( 'create_classmap', 'create_servers_cache', 'clear_smarty_cache', 'session_gc', 'clear_dnl', 'remove_hotel_images', 'remove_partner_logos', 'remove_ptype_images', 'clear_cache', 'droptemptab', 'vacuum_cache', ); } public function multiply($method, $args = array()) { $servers = function_exists('samo_backend_servers') ? samo_backend_servers() : array(); if (!$servers || isset($_COOKIE['dont-follow']) || !in_array($method, $this->multiply_methods())) { return call_user_func_array(array($this, $method), $args); } $nonce = uniqid(); $datetime = new DateTime('now', new DateTimeZone('UTC')); $created = $datetime->format('Y-m-d\TH:i:s\Z'); $authheader = sprintf( '
    	<wsse:Security  xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
    	    <wsse:UsernameToken>
    	    <wsse:Username>samo</wsse:Username>
    	    <wsse:Password Type="wsse:PasswordDigest">%s</wsse:Password>
    	    <wsse:Nonce>%s</wsse:Nonce>
    	    <wsu:Created>%s</wsu:Created>
    	    </wsse:UsernameToken>
    	</wsse:Security>', base64_encode(sha1($nonce . $created . TOOLSPROTECT, true)), base64_encode($nonce), $created ); $authvars = new SoapVar($authheader, XSD_ANYXML); $wss_header = new SoapHeader("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "Security", $authvars); foreach ($servers as $location) { $params = array( 'location' => $location . WWWROOT . "tools.php", 'uri' => "http://samo-soft/", 'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP, ); $client = new SoapClient(null, $params); $client->__setCookie('dont-follow', 1); $try_count = 3; while ($try_count > 0) { try { if (false !== $client->__soapCall($method, $args, null, $wss_header)) { $try_count = 0; } } catch (SoapFault $e) { if ('HTTP' == $e->faultcode) { $try_count--; } else { throw $e; } } } } return call_user_func_array(array($this, $method), $args); } protected function _utf8($ele) { if (is_string($ele)) { $ele = trim($ele); return mb_convert_encoding($ele, 'utf-8', 'cp1251'); } if (is_array($ele)) { return array_map(array($this, '_utf8'), $ele); } return $ele; } protected function getImageExtension($imageString) { $supportedExtensions = [ IMAGETYPE_GIF => '.gif', IMAGETYPE_JPEG => '.jpg', IMAGETYPE_PNG => '.png', ]; $image = getimagesizefromstring($imageString); return isset($supportedExtensions[$image[2]]) ? $supportedExtensions[$image[2]] : '.png'; } public function buildCssIcons() { $path = _ROOT . 'data/search_tour/'; if (!file_exists($path) || !is_writable($path)) { return false; } $fullPath = $path . 'icons.css'; $db = $this->mssql_connect(); $db->rawMode(true); $lastStamp = null; $downloadFinished = false; while (!$downloadFinished) { $sql = $db->formatExec('<OFFICEDB>.[dbo].[up_WEB_3_pictures]', ['Limit' => 100, 'OnlyIcons' => 1, 'LastStamp' => $lastStamp]); $res = $db->query($sql); if ($res && $db->numRows($res) > 0) { while ($row = $db->fetchRow($res)) { if (in_array($row['Type'], ['PT', 'AT', 'UF'])) { $ext = $this->getImageExtension($row['Photo']); $imageName = null; switch ($row['Type']) { case 'PT': $imageName = "prt_{$row['PhotoInc']}_{$row['Version']}{$ext}"; $cssrules["pt.prt_{$row['PhotoInc']}"] = $imageName; break; case 'AT': $imageName = "../hotelparam/hp_{$row['PhotoInc']}_{$row['Version']}{$ext}"; $cssrules["hp.hp_{$row['PhotoInc']}"] = $imageName; break; case 'UF': $imageName = "uf_{$row['PhotoInc']}_{$row['Version']}{$ext}"; $cssrules["uf.uf_{$row['PhotoInc']}"] = $imageName; break; } if ($imageName && !file_exists($path . $imageName)) { $this->saveImageFile($row); } } $lastStamp = $row['stamp']; } } else { $downloadFinished = true; } } $prefix = ".samo_container span.icon"; $str = "{$prefix}.pt, {$prefix}.hp, {$prefix}.uf {background-size:contain;}\r\n"; if (!empty($cssrules)) { foreach ($cssrules as $rule => $val) { $str .= "{$prefix}.{$rule} {background-image: url('{$val}');}\r\n"; } } $db->rawMode(false); $fileExists = file_exists($fullPath); if (!$fileExists || ($fileExists && md5($str) != md5_file($fullPath))) { if (Samo_Utils::writeFile($fullPath, $str)) { return true; } } elseif ($fileExists) { return true; } return false; } } 