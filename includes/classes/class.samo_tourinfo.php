<?php
 class Samo_Tourinfo extends Samo { protected $price_cache = 300; protected $_cacheDates = null; protected $_cacheHotelsurl = null; protected $today = null; public function __construct(Samo_Config $config = null) { parent::__construct($config); $this->defaults['STATEINC'] = Samo_Request::intval('STATEINC'); $this->defaults['TOWNFROMINC'] = Samo_Request::intval('TOWNFROMINC'); if ($this->defaults['STATEINC'] === null) { $default_state = $this->getConfig('STATE_DEFAULT'); if ($this->STATEINC != $default_state) { $this->db = db_connect($this->townFrom(), $default_state); } $this->db_init(); $this->defaults['STATEINC'] = $this->STATEINC; } $this->state($this->defaults['STATEINC']); $this->defaults['TOURINC'] = Samo_Utils::ifs(Samo_Request::intval('TOURINC'), null); $this->defaults['PTYPEINC'] = Samo_Utils::ifs(Samo_Request::intval('PTYPEINC'), null); $this->defaults['CHECKIN'] = Samo_Request::date('CHECKIN', null, Samo_Datetime::parse('2 year')); $this->today = Samo_Datetime::today(); } protected function stateinc($sql) { $return = array(); $messages = Samo_Registry::get('messages'); $return[] = array('Inc' => 0, 'LName' => $messages['STATE_ANY_LNAME'], 'Name' => $messages['STATE_ANY_NAME'], 'selected' => false); $default = $this->defaults['STATEINC']; $order_by = ($this->getConfig('STATE_ORDER_BY_NAME')) ? 'Name' : 'LName'; $selected_exists = false; if ($res = $this->db->query($sql)) { while ($row = $this->db->fetchRow($res)) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['StateInc'] == $default); } else { $row['selected'] = false; } $row['Inc'] = $row['StateInc']; $row['Name'] = $row['StateName']; $row['LName'] = $row['State' . $order_by]; $return[] = $row; } if (!$selected_exists && count($return) >= 2) { $return[1]['selected'] = true; $this->state($return[1]['Inc']); } } return $return; } protected function tourinc($sql) { $return = array(); $messages = Samo_Registry::get('messages'); $return[] = array('Inc' => 0, 'LName' => $messages['TOUR_ANY_LNAME'], 'Name' => $messages['TOUR_ANY_NAME'], 'selected' => false); $default = $this->defaults['TOURINC']; if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['TourInc'] == $default || $numRows == 1); } else { $row['selected'] = false; } $row['Inc'] = $row['TourInc']; $row['Name'] = $row['TourName']; $row['LName'] = $row['TourLName']; $return[] = $row; } if (!$selected_exists && $default !== null) { $this->defaults['TOURINC'] = null; } else { if ($numRows == 1) { $this->defaults['TOURINC'] = $return[1]['Inc']; } } } } return $return; } public function getTOWNFROMINC() { $return = array(); if (false !== ($towns = parent::getTOWNFROMINC())) { foreach ($towns as $town) { $item = array( 'Name' => $town['TownName'], 'LName' => $town['TownLName'], 'Inc' => $town['TownInc'], 'selected' => $town['selected'] ); $return[] = $item; } } return (count($return)) ? $return : false; } protected function _setStopNote(& $value) { $messages = Samo_Registry::get('messages'); $stopNote = array(); if (isset($value['StopSaleDateBeg']) && isset($value['StopSaleDateEnd'])) { $stopNote[] = sprintf($messages['PRICE_STOPSALE_PERIOD'], $value['StopSaleDateBeg']->format('date'), $value['StopSaleDateEnd']->format('date')); if ($value['StopSaleRoom'] > 0) { $stopNote[] = sprintf($messages['PRICE_STOPSALE_ROOM'], $value['RoomLName']); } if ($value['StopSaleHtPlace'] > 0) { $stopNote[] = sprintf($messages['PRICE_STOPSALE_HTPLACE'], $value['HtPlaceLName']); } } else { $stopNote[] = $value['StopNote']; } $value['StopNote'] = implode("\n", $stopNote); } protected function _getValidDates() { if (is_null($this->_cacheDates)) { $cache_key = __METHOD__ . $this->defaults['STATEINC'] . '_' . $this->townFrom() . '_' . $this->today->format('sql') . '_' . $this->defaults['TOURINC'] . '_' . $this->defaults['SPOINC']; if (!$this->_cacheDates = $this->cache->get($cache_key)) { $sql = $this->sql_ValidDates(); $return = array('sdays' => ''); if (false !== ($row = $this->db->fetchRow($sql))) { $return['sdays'] = rtrim($row['sdays'], '0'); } $this->_cacheDates = $this->cache->set($cache_key, $return, 300); } } return $this->_cacheDates; } protected function sql_ValidDates() { $tourist_count = $this->defaults['ADULT'] + $this->defaults['CHILD']; $sql = $this->db->formatExec( '<ONLINEDB>.dbo.up_WEB_5_search_CheckinString', [ 'TownFrom' => $this->TOWNFROMINC, 'State' => $this->defaults['STATEINC'], 'DateBeg' => $this->today, 'PType' => $this->defaults['PTYPEINC'], 'Tour' => $this->defaults['TOURINC'], 'Tourist_Count' => $tourist_count, 'CATALOGDB' => $this->CATALOGDB, ] ); return $sql; } protected function _getCHECKIN($var) { $tmp = $this->_getValidDates(); $value = $this->defaults[$var]; if ($value->is_null()) { $value = Samo_Datetime::today(); } $return = array('validDates' => $tmp['sdays'], 'startDate' => $this->today, 'value' => $value); return $return; } } 