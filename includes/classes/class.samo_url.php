<?php
 class Samo_Url { static public function parse($url) { $url = trim($url); if ($url) { $parts = parse_url($url); if (isset($parts['path']) && 1 == count($parts)) { $paths = explode('/', trim($parts['path'], '/')); if (!empty($paths) && strpos($paths[0], '.') > 0 && Samo_Validate::domain($paths[0])) { $parts = parse_url('http://' . $url); } } if (!isset($parts['scheme'])) { if (!isset($parts['host'])) { if (isset($parts['path']) && !empty($parts['path'])) { if (substr($parts['path'], 0, 1) != '/') { $_parts = explode('/', $parts['path']); $possible_domain = array_shift($_parts); if (Samo_Validate::domain($possible_domain)) { $parts['host'] = $possible_domain; if (isset($parts['query']) || isset($parts['fragment'])) { if (empty($_parts)) { $parts['path'] = '/'; } else { $parts['path'] = '/' . implode('/', $_parts); } } else { unset($parts['path']); } } else { $parts['host'] = Samo_Request::host(); $parts['path'] = '/' . $parts['path']; } } else { $paths = explode('/', $parts['path']); if (count($paths) > 2 && Samo_Validate::domain($paths[1])) { $parts['host'] = $paths[1]; unset($paths[1]); $parts['path'] = implode('/', $paths); } else { $parts['host'] = Samo_Request::host(); $parts['scheme'] = Samo_Request::scheme(); } } } else { $parts['host'] = Samo_Request::host(); $parts['scheme'] = Samo_Request::scheme(); if (!isset($parts['path'])) { $parts['path'] = '/'; } } } else { if (Samo_Validate::domain($parts['host'])) { $parts['scheme'] = isset($parts['host']) && substr($url, 0, 2) == '//' ? Samo_Request::scheme() : 'http'; } else { $parts['path'] = '/' . trim($parts['host'], '/') . '/' . ltrim($parts['path'], '/'); $parts['host'] = Samo_Request::host(); $parts['scheme'] = Samo_Request::scheme(); } } if (!isset($parts['scheme'])) { $parts['scheme'] = 'http'; } } if (!isset($parts['path'])) { $parts['path'] = '/'; } if ('samo' != $parts['scheme']) { $url = self::build_url($parts); } else { $params = []; if (isset($parts['query'])) { parse_str($parts['query'], $params); } $entityInc = false; if (isset($parts['path'])) { $entityInc = intval(ltrim($parts['path'], '/')); } $entity = $parts['host']; switch ($entity) { case 'hotels': if ($entityInc) { $params += ['samo_action' => 'hotel', 'HOTELINC' => $entityInc]; } break; case 'external_document': case 'andr_document': $samo_actions = ['andr_document' => 'andr_document', 'external_document' => 'document']; if ($entityInc) { $params += ['samo_action' => $samo_actions[$entity], 'DOC' => $entityInc]; $entity = 'cl_refer'; break; } default: if (isset($params['page'])) { $entity = $params['page']; unset($params['page']); } break; } $url = self::route($entity, $params); } return $url; } return ''; } static public function routes($module = null) { $registry = Samo_Registry::instance(); if (!isset($registry['routes'])) { if (!defined('ROUTES_PATH')) { define('ROUTES_PATH', _ROOT . 'routes.php'); } include ROUTES_PATH; } else { $routes = $registry['routes']; } if (isset($routes[$module]) && !isset($routes[$module]['fix_person'])) { if (isset($routes[$module]['url'])) { $routes[$module]['url'] = self::parse($routes[$module]['url']); } else { $path = Samo_Request::scheme() . '://' . Samo_Request::host() . WWWROOT; $params = []; $stickyParams = Samo_Request::is_api() ? ['SOURCE', 'LANG'] : ['SOURCE', 'KEY', 'oauth_token', 'LANG']; foreach ($stickyParams as $param) { if ($value = Samo_Request::get($param)) { $params[$param] = $value; } } if (!FRIENDLY_URLS) { $params['page'] = $module; } $params = ($params) ? http_build_query($params) . '&' : ''; $routes[$module]['url'] = (FRIENDLY_URLS) ? $path . $module . '?' . $params : $path . 'default.php?' . $params; } } return $routes; } static public function route($module, $params = array(), $anchor = false) { $routes = self::routes($module); if (isset($routes[$module])) { if (array_key_exists('page', $params)) { unset($params['page']); } $result = $routes[$module]['url']; if (!empty($params)) { if (!in_array(substr($result, -1, 1), ['&', '?'])) { $result .= (strpos($result, '?') === false) ? '?' : '&'; } $result .= http_build_query($params); } } else { switch ($module) { case 'admin': $result = Samo_Request::scheme() . '://' . Samo_Request::host() . WWWROOT . 'admin/' . ($params ? '?' . http_build_query($params) : ''); break; case 'api': $result = Samo_Request::scheme() . '://' . Samo_Request::host() . WWWROOT . 'export/default.php' . ($params ? '?' . http_build_query($params, null, '&amp;') : ''); break; case 'root': case '/': $result = Samo_Request::scheme() . '://' . Samo_Request::host() . WWWROOT . ($params ? '?' . http_build_query($params) : ''); break; case 'self': $result = Samo_Request::scheme() . '://' . Samo_Request::host() . Samo_Request::uri() . ($params ? (false !== strpos(Samo_Request::uri(), '?') ? '&' : '?' ) . http_build_query($params) : ''); break; case 'acquiring_client': $result = Samo_Request::scheme() . '://' . Samo_Request::host() . WWWROOT . 'modules/wspay_4/acquiring_client.php' . ($params ? (false !== strpos(Samo_Request::uri(), '?') ? '&' : '?' ) . http_build_query($params) : ''); break; default: $result = false; } } if ($anchor) { $result .= '#' . $anchor; } return $result; } static public function host($url) { $parts = parse_url($url); if (!isset($parts['host']) && isset($parts['path']) && 1 == count($parts)) { $parts['host'] = $parts['path']; unset($parts['path']); } if (!isset($parts['host'])) { $parts = parse_url($_SERVER['HTTP_HOST']); if (!isset($parts['host'])) { return trim(COOKIE_DOMAIN, '.'); } } return $parts['host'] . ((!isset($parts['port']) || $parts['port'] == 80) ? '' : ':' . $parts['port']); } static public function build_url($parts) { $scheme = isset($parts['scheme']) ? $parts['scheme'] . '://' : ''; $host = isset($parts['host']) ? $parts['host'] : ''; $port = isset($parts['port']) ? ':' . $parts['port'] : ''; $port = (('80' == $port && 'http' == $scheme) || ('443' == $port && 'https' == $scheme)) ? '' : $port; $user = isset($parts['user']) ? $parts['user'] : ''; $pass = isset($parts['pass']) ? ':' . $parts['pass'] : ''; $pass = ($user || $pass) ? "$pass@" : ''; $path = isset($parts['path']) ? $parts['path'] : ''; $query = isset($parts['query']) ? '?' . $parts['query'] : ''; $fragment = isset($parts['fragment']) ? '#' . $parts['fragment'] : ''; return "$scheme$user$pass$host$port$path$query$fragment"; } } 