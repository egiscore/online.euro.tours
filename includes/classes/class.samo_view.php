<?php
 class Samo_View { private $smarty = null; private $vars = array(); private $props = array(); private $moduleName = null; private $moduleVersion = null; private $jQuery_object = "samo.jQuery"; private $page_container = "samo.jQuery(document)"; private $document_write = false; private $full_paths = false; private $template_dir = null; private $response = null; public function full_paths($value = null) { if (null === $value) { return $this->full_paths; } $this->full_paths = (bool)$value; return $this; } public function __construct($jQuery_object = 'samo.jQuery', Samo_Response $response = null) { $this->jquery_object($jQuery_object) ->template_dir(_ROOT . '/templates/'); $this->response = ($response == null) ? Samo_Registry::get('response') : $response; } public function template_dir($value = null) { if (null === $value) { return $this->template_dir; } $this->template_dir = realpath($value) . DIRECTORY_SEPARATOR; $this->configure_paths(); return $this; } public function jquery_object($jQuery_object = null) { if (null === $jQuery_object) { return $this->jQuery_object; } $this->jQuery_object = $jQuery_object; $this->page_container = $jQuery_object . '(document)'; return $this; } public function clear_assign($var) { if (null !== $this->smarty) { $this->smarty->clearAssign($var); } else { if (is_array($var)) { foreach ($var as $val) { unset($this->vars[$val]); } } elseif (is_scalar($var)) { unset($this->vars[$var]); } } return $this; } public function bulk_assign($var) { if (null === $this->smarty) { $this->load_engine(); } $this->smarty->assign($var); return $this; } public function assignif($var, $val, $conditional) { if ($conditional) { return $this->assign($var, $val); } return $this; } public function assign($var, $val) { if (null === $this->smarty) { $this->vars[$var] = $val; } else { $this->smarty->assign($var, $val); } return $this; } public function get_template_vars($var = null) { $return = null; if (null === $this->smarty) { if (null === $var) { $return = $this->vars; } else { $return = (isset($this->vars[$var])) ? $this->vars[$var] : null; } } else { $return = $this->smarty->getTemplateVars($var); } return $return; } public function json_encode($val, $quote = "'") { if (null === $val) { return 'null'; } if ($val === false) { return 'false'; } if ($val === true) { return 'true'; } if ($val instanceof Samo_Datetime) { return $quote . strval($val) . $quote; } if (is_scalar($val)) { if (is_int($val)) { return (string)$val; } if (is_float($val)) { return str_replace(',', '.', (string)$val); } if (is_numeric($val) && strlen($val) < 9 && strval(intval($val)) === strval($val) && strlen(intval($val)) === strlen($val)) { return (string)$val; } $val = addslashes($val); $val = str_replace("\r\n", '\n\\ ', $val); $val = str_replace("\n", '\n\\ ', $val); $val = str_replace("\r", '\n\\ ', $val); return $quote . $val . $quote; } $isList = true; for ($i = 0, reset($val), $length = count($val); $i < $length; $i++, next($val)) { if (key($val) !== $i) { $isList = false; break; } } $result = array(); if ($isList) { foreach ($val as $v) { $result[] = $this->json_encode($v, $quote); } return '[' . implode(',', $result) . ']'; } else { foreach ($val as $k => $v) { $result[] = $this->json_encode($k, $quote) . ':' . $this->json_encode($v, $quote); } return '{' . implode(',', $result) . '}'; } } public function json_output($var, $callback = null) { if ($callback) { return $this->js_call($callback, $var); } else { return $this->as_js($this->json_encode($var, '"')); } } public function jsencode($val, $escape = true) { $return = str_replace(array("\r\n", "\n", "\r", "\t", "  "), array('\n\\ ', '\n\\ ', '\n\\ ', ' ', ' '), $val); $return = ($escape) ? str_replace("'", "&#39;", $return) : str_replace("'", "\\'", $return); $return = ($escape) ? $return : str_replace('</script>', "</sc' + 'ript>", $return); return $return; } public function clear_unload() { return $this->as_js('window.onbeforeunload=null'); } public function popup_message($message, $title, $width = 512, $height = 380, $closeButton = true) { return $this->_popup($message, $title, $width, $height, $closeButton); } public function popup_template( $template, $title, $width = 512, $height = 380, $closeButton = true, $containerPrefix = 'modal' ) { $message = $this->fetch($template); return $this->_popup($message, $title, $width, $height, $closeButton, $containerPrefix); } private function _popup($message, $title, $width, $height, $closeButton = true, $containerPrefix = 'modal') { $attrs = array( 'title' => $title, 'width' => $width, 'height' => $height, 'close' => $closeButton, 'containerPrefix' => $containerPrefix ); $result = $this->jQuery_object . ".modal(" . $this->json_encode('<div id="basicModalContent" class="samo_container">' . $message . '</div>') . "," . $this->json_encode($attrs) . ")"; return $this->as_js($result); } public function js_var($js_var, $php_var, $overwrite = true) { if ($overwrite === true) { return $this->as_js($js_var . ' = ' . $this->json_encode($php_var)); } else { if ($overwrite === false) { return $this->as_js('if (typeof ' . $js_var . ' == "undefined") {' . $js_var . ' = ' . $this->json_encode($php_var) . ';}'); } if ($overwrite === 2) { return $this->as_js('var __TEMP__ = ' . $this->json_encode($php_var) . '; ' . $js_var . ' = (typeof ' . $js_var . ' == "undefined") ? __TEMP__ : ' . $this->jQuery_object . '.extend(true,' . $js_var . ',__TEMP__)'); } } } public function js_call(...$args) { $function = array_shift($args); $result = $function . '(' . implode(',', array_map(array($this, 'json_encode'), $args)) . ')'; return $this->as_js($result); } public function js_call_onready(...$args) { if ($this->response->respond_to_js() && !$this->document_write()) { return call_user_func_array([$this, 'js_call'], $args); } else { $function = array_shift($args); $this->as_js('if (typeof samo.onready == "undefined") { samo.onready = [] ;}'); $this->as_js('samo.onready.push(' . $this->json_encode(['func' => $function, 'args' => $args]) . ')'); return $this; } } public function js_call_if_exists(...$args) { $function = $args[0]; $objects = explode('.', $function); $return = array(); $tmp = array_shift($objects); $return[] = 'typeof ' . $tmp . ' != "undefined"'; foreach ($objects as $object) { $tmp .= '.' . $object; $return[] = 'typeof ' . $tmp . ' != "undefined"'; } return $this->as_js( ' if (' . implode(' && ', $return) . ') {' . array_shift($args) . '(' . implode(',', array_map(array($this, 'json_encode'), $args)) . ');}' ); } private function normalize_selector($selector) { $embed = Samo_Request::find('embed'); $first = strtolower(substr($selector, 0, 1)); if ($first === '#' && !$embed) { return sprintf('"%s"', $selector); } if (ctype_alpha($first) && !preg_match('~^(\..+|body|html|div|span|table|p|tr|td|th|tbody|thead|a|b|i|)(\s|$)~', $selector)) { return 'samo.controls.' . (($embed = Samo_Request::find('embed')) ? ('embed_' . $embed . '.') : '') . $selector; } if ($embed) { return sprintf("'%s').find('%s'", '[embed=' . $embed . ']', $selector); } else { return sprintf("%s).find('%s'", $this->page_container, $selector); } } private function _element_update($selector, $template) { $html = $this->fetch($template); return $this->lookup_selector($selector) . ".ehtml(" . $this->json_encode($html) . ")"; } public function element_text($selector, $text) { $result = $this->lookup_selector($selector) . ".ehtml(" . $this->json_encode($text) . ")"; return $this->as_js($result); } public function element_append($selector, $text) { $result = $this->lookup_selector($selector) . ".append(" . $this->json_encode($text) . ")"; return $this->as_js($result); } public function element_update($selector, $template) { $result = $this->_element_update($selector, $template); return $this->as_js($result); } public function element_replace($selector, $template, $html = null) { $html = (null === $template) ? $html : $this->fetch($template); if (null === $html) { return $this->element_remove($selector); } $result = $this->lookup_selector($selector) . ".replaceWith(" . $this->json_encode($html) . ")"; return $this->as_js($result); } public function element_after($selector, $template) { $result = $this->lookup_selector($selector) . ".after(" . $this->json_encode($this->fetch($template)) . ")"; return $this->as_js($result); } public function popup_window($url) { $result = 'window.open("' . $url . '")'; $this->response->as_js($result); return $this; } public function exec_js($param) { $this->response->as_js($param); Samo_Registry::get('logger')->warning('Never, never use this function (' . __METHOD__ . ')!'); return $this; } public function element_remove($selector) { $result = $this->lookup_selector($selector) . ".remove()"; $this->response->as_js($result); return $this; } public function element_trigger($selector, $event) { $result = $this->lookup_selector($selector) . ".triggerHandler('" . $event . "')"; return $this->as_js($result); } public function popup_close($containerPrefix = 'modal') { $result = "if (" . $this->jQuery_object . "('#" . $containerPrefix . "Container').length) { " . $this->jQuery_object . ".modal.close('" . $containerPrefix . "');}"; return $this->as_js($result); } public function window_close($message = '') { if ($message) { $result = '(function() { var win = (window.opener) ? window.opener : window; win.alert(' . $this->json_encode($message) . '); })()'; return $this->as_js($result); } $this->response->as_js("window.close()"); return $this; } public function element_attr($selector, $name, $value) { $result = $this->lookup_selector($selector) . ".attr('" . $name . "'," . $this->json_encode($value) . ")"; return $this->as_js($result); } public function element_prop($selector, $name, $value) { $result = $this->lookup_selector($selector) . ".prop('" . $name . "'," . $this->json_encode($value) . ")"; return $this->as_js($result); } public function element_data($selector, $name, $value) { $result = $this->lookup_selector($selector) . ".data('" . $name . "'," . $this->json_encode($value) . ")"; return $this->as_js($result); } public function element_value($selector, $value) { if ($value != 'null') { $result = $this->lookup_selector($selector) . ".val(" . $this->json_encode($value) . ")"; return $this->as_js($result); } return $this; } public function set_selected($selector, $value) { $result = $this->lookup_selector($selector) . ".find('option[value=\"" . $value . "\"]').prop('selected',true)"; return $this->as_js($result); } public function radio_value($name, $value) { $result = $this->jQuery_object . "('[name=" . $name . "][value=" . $value . "]').prop('checked',true)"; return $this->as_js($result); } public function parent_show($selector) { return $this->_element_display($this->lookup_selector($selector) . '.parent()', 1); } public function parent_hide($selector) { return $this->_element_display($this->lookup_selector($selector) . '.parent()', 0); } public function element_show($selector) { return $this->_element_display($this->lookup_selector($selector), 1); } public function element_hide($selector) { return $this->_element_display($this->lookup_selector($selector), 0); } public function element_error($selector, $text) { $result = $this->lookup_selector($selector) . ".errorField(" . $this->json_encode($text) . ")"; return $this->as_js($result); } public function modifier(...$args) { $modifier = array_shift($args); $funcname = 'smarty_modifier_' . $modifier; if (!function_exists($funcname)) { $this->load_engine()->loadPlugin($funcname); } return call_user_func_array($funcname, $args); } private function _element_display($element, $display) { $display = ($display) ? 'block' : 'none'; $result = $element . ".css('display','" . $display . "')"; return $this->as_js($result); } public function add_class($selector, $class) { $result = $this->lookup_selector($selector) . ".addClass('" . $class . "')"; return $this->as_js($result); } public function remove_class($selector, $class) { $result = $this->lookup_selector($selector) . ".removeClass('" . $class . "')"; return $this->as_js($result); } protected function as_js($result, $prepend = false) { $this->response->as_js($result, $prepend); return $this; } public function document_write($template = null) { if (null === $template) { return $this->document_write; } if (is_bool($template)) { $this->document_write = $template; } else { $result = $this->json_encode($this->fetch($template)); $this->as_js("document.write(" . $result . ")"); } return $this; } public function add_options($selector, $elements, $template = '../controls.tpl') { $elements = (false !== $elements) ? $elements : array(); $this->assign('control', 'options')->assign('elements', $elements); $html = $this->fetch($template); $result = $this->lookup_selector($selector) . ".addOptions(" . $html . ")"; return $this->as_js($result); } public function calendar_attrs($selector, $date, $start_date, $valid_dates) { $params = []; if ($date->not_null()) { $params['value'] = $date->format(); } if ($start_date->not_null()) { $params['start'] = $start_date->format(); } if ($valid_dates) { $params['valid'] = $valid_dates; } $result = sprintf( "%s.datePicker(%s)", $this->lookup_selector($selector), $this->json_encode($params) ); return $this->as_js($result); } public function checklistbox_update($selector, $elements, $template = '../controls.tpl') { $elements = (false !== $elements) ? $elements : array(); $this->assign('control', 'checklistbox')->assign('elements', $elements); $html = $this->fetch($template); $result = $this->lookup_selector($selector) . ".html(" . $this->json_encode($html) . ")"; return $this->as_js($result); } public function hotel_category($selector, $elements, $template = '../controls.tpl') { $elements = (false !== $elements) ? $elements : array(); $this->assign('control', 'hotel_category')->bulk_assign($elements); $html = $this->fetch($template); $result = $this->lookup_selector($selector) . ".html(" . $this->json_encode($html) . ")"; return $this->as_js($result); } public function redirect_to($url) { return $this->as_js(sprintf('top.location.href="%s"', $url)); } public function add_hotels($selector, $elements) { $elements = (false !== $elements) ? $elements : array(); $result = $this->lookup_selector($selector) . ".add_hotels(" . $this->json_encode($elements) . ")"; return $this->as_js($result); } private function lookup_selector($selector) { return $this->jQuery_object . "(" . $this->normalize_selector($selector) . ")"; } public function page_container($container = null) { if (null === $container) { return $this->page_container; } $this->page_container = $this->lookup_selector($container); return $this; } public function module($module = null, $version = 3) { if (null === $module) { return $this->moduleName; } $this->moduleName = $module; $this->moduleVersion = $version; $this->configure_paths(); $this->page_container = "'#$module'"; $this->assign('CURRENT_MODULE', $module); return $this; } public function __isset($var) { return array_key_exists($var, $this->props); } public function __set($var, $val) { $this->props[$var] = $val; } public function __get($var) { return (isset($this->props[$var])) ? $this->props[$var] : null; } public function __call($method, $params) { $return = call_user_func_array(array($this->load_engine(), $method), $params); return (is_string($return) || is_array($return)) ? $return : $this; } final public function display() { debug_print_backtrace(); throw new Samo_Exception("don't use \$view->display() directly"); } public function fetch($fileName) { $tplName = basename($fileName); if ($tplName == $fileName && !file_exists($fileName)) { if (!file_exists($fileName)) { if (intval($tplName) != $this->moduleVersion) { if (file_exists($this->template_dir . $this->moduleName . '/' . $this->moduleVersion . '_' . $fileName)) { $fileName = $this->moduleVersion . '_' . $fileName; } } } } $erl = error_reporting(E_USER_ERROR); $result = $this->load_engine()->fetch($fileName); error_reporting($erl); return $result; } public function syntax_check($content, &$error) { $tpl = tempnam(SMARTY_COMPILE_DIR, 'chk'); if (file_put_contents($tpl, $content)) { try { $_tpl = $this->load_engine()->createTemplate($tpl); $_tpl->compileTemplateSource(); unlink($_tpl->compiled->filepath); unlink($tpl); return true; } catch (Exception $e) { $error = $e->getMessage(); $error = preg_replace('~in template (".*")~U', '', $error); } unlink($tpl); } return false; } public function error($message) { $response = $this->response; $output = null; $this->module('')->assign('error', nl2br($message)); if ($this->document_write) { $this->document_write('error.tpl'); } else { if ($response->respond_to_js()) { $this->message(nl2br($message), 'error'); } else { $output = $this->fetch('error.tpl'); } } $response->output($output); $response->finish(); } public function message($text, $type = 'info', $permanent = false) { $response = $this->response; if ($response->respond_to_js()) { $this->as_js( sprintf( "%s.notify({type: %s, text: %s, permanent: %d})", $this->jQuery_object, $this->json_encode($type), $this->json_encode($text), (bool)$permanent ) ); } else { $this->js_call_onready($this->jquery_object() . '.notify', ['type' => $type, 'text' => $text, 'permanent' => $permanent]); } return $this; } public function render($template) { $fileName = $template . '.tpl'; if ($this->document_write) { $this->document_write($fileName); } else { $this->response->as_html($this->fetch($fileName)); } return $this; } public function render_fpdf($template, $output) { $lookup = array(); if (defined('CUSTOM')) { $lookup[] = _ROOT . '/.dev/custom/' . CUSTOM . '/data/' . $this->moduleName . '/' . $template; } $lookup[] = $template; $lookup[] = _ROOT . 'data/' . $this->moduleName . '/' . $template; $lookup[] = $this->template_dir . $this->moduleName . '/' . $template; $lookup[] = _ROOT . $template; $tpl = false; foreach ($lookup as $file) { if (file_exists($file) && is_file($file)) { $tpl = $file; break; } } if ($tpl) { $pdf = new Samo_Pdf(); $tpl = $pdf->precompile_fpdf($tpl); extract($this->get_template_vars()); include $tpl; $pdf->Output(_ROOT . $output, 'F'); return $this; } throw new Samo_Exception($template . ' not found'); } private function load_engine() { if (null === $this->smarty) { $smarty = new Samo_Smarty; foreach ($this->props as $prop => $value) { $smarty->{$prop} = $value; } $plugins = [_ROOT . 'includes/helpers/', SMARTY_PLUGINS_DIR]; if (defined('CUSTOM')) { $plugins = array_merge([_ROOT . '.dev/custom/' . CUSTOM . '/includes/helpers/'], $plugins); } $smarty->setPluginsDir($plugins); if (null !== $this->moduleVersion) { $smarty->moduleVersion = $this->moduleVersion; } $smarty->assign('INTERNAL_FULL_PATHS', $this->full_paths); $smarty->loadFilter('pre', 'version_include'); $smarty->loadFilter('pre', 'i18n'); if (APPMODE != 'dev') { $smarty->loadFilter('pre', 'static_loader'); } $smarty->setCompileDir(SMARTY_COMPILE_DIR); $smarty->compile_check = (APPMODE == 'dev' || (defined('SMARTY_TEMPLATE_CHECK') && true === SMARTY_TEMPLATE_CHECK)); $smarty->assign($this->vars); $this->smarty = $smarty; $this->configure_paths(); } return $this->smarty; } private function configure_paths() { if (null !== $this->smarty) { $template_dirs = array(); if ($this->moduleName !== null) { $template_dirs[] = $this->template_dir . $this->moduleName; } $template_dirs[] = $this->template_dir; $this->smarty->setTemplateDir($template_dirs); $canonical_hostname = preg_replace('~^(www\.).+~', '', Samo_Request::host()); $this->smarty->compile_id = Samo_Request::lang() . '_' . Samo_Request::scheme() . '_' . $canonical_hostname . '_' . ($this->full_paths ? '1' : '0') . '_' . ((null !== $this->moduleName) ? $this->moduleName . '_' . $this->moduleVersion : implode(PATH_SEPARATOR, $template_dirs)); } return $this; } public function register_resource($name, $args) { if ($resource = Samo_Loader::load_object(ucwords($name . '_template', '_'), $args)) { if (null === $this->smarty) { $this->load_engine(); } $this->smarty->registerResource( $name, [ $resource, "get_template", "get_timestamp", "get_secure", "get_trusted" ] ); return true; } return false; } } class Samo_Smarty extends Smarty { public $moduleVersion = 3; public $fullPaths = false; public $allow_ambiguous_resources = true; public $_file_perms = 0666; public function __construct() { parent::__construct(); $this->registerPlugin('block', 'php', [$this, 'smarty_php_tag']); } public function smarty_php_tag($params, $content, $template, &$repeat) { return '{php} tag deprecated, create plugin'; } } 