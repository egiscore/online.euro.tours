<?php
 class VISATUR { private $debug = false; private $browser = null; private $session = null; private $data = array(); private $log = array(); private $login = 'https://extvis.maec.gob.es/acceda/restricted'; private $form = 'https://extvis.maec.gob.es/acceda/form/index/idp/25/ida/879/language/en'; private $success = 'https://extvis.maec.gob.es/acceda/restricted/show-file/ide/'; private $pdf = 'https://extvis.maec.gob.es/acceda/restricted/download/ide/%id%'; private $login_user = null; private $login_pass = null; private $get_only_field_list = false; private $get_only_javascript = false; private $formPathField = array( 'form' => array( 'element' => 'form[name=formulario]', 'action' => 'action' ), 'field' => array( 'element' => 'input, select', 'name' => array( 'element' => 'li', 'attr' => 'fname' ) ) ); private $formPhoto = array( 'field' => 'archivo_foto', 'url' => 'https://extvis.maec.gob.es/acceda/form/upload/idp/25/language/en', 'name' => array( 'uploadcustom_%id%', '~^[a-z]+_([\d]+)$~', '$1' ) ); private $formBoxAlert = array( 'class' => '.box', 'title' => '.box_title', 'container' => 'li' ); public function __construct($session = false, $data = false, $get = false, $sandbox = false) { $init = array(); $this->data = $this->getData($data); foreach (array('VISATUR_USERNAME', 'VISATUR_PASSWORD', 'VISATUR_URL_FORM', 'VISATUR_URL_PHOTO') as $row) { if (isset($this->data[$row])) { $init[$row] = $this->data[$row]; unset($this->data[$row]); } else { $init[$row] = null; } } $this->session = md5('visatour' . '_' . md5($init['VISATUR_USERNAME'] . ($session ? $session : ''))); $this->browser = new WebBrowser(); $this->browser->setCookies($this->session()); if ($sandbox) { $this->login = 'http://127.0.0.1/visatur/data/form.html'; $this->form = 'http://127.0.0.1/visatur/data/form.html'; $this->formPhoto['url'] = 'http://127.0.0.1/visatur/data/upload.html'; } else { if ($init['VISATUR_USERNAME']) { $this->login_user = $init['VISATUR_USERNAME']; $this->login_pass = $init['VISATUR_PASSWORD']; if ($init['VISATUR_URL_FORM']) { $this->form = $init['VISATUR_URL_FORM']; } if ($init['VISATUR_URL_PHOTO']) { $this->formPhoto['url'] = $init['VISATUR_URL_PHOTO']; } } else { $this->error('login not found'); } } if (defined('DEBUG')) { $this->debug = DEBUG; } if ($get === 1) { $this->get_only_field_list = true; } elseif ($get === 2) { $this->get_only_javascript = true; } } private function session($data = null) { $session = array(); session_id($this->session); if (PHP_SESSION_NONE == session_status()) { session_start(); } if ($data == null) { $session = $_SESSION; } else { $session = $data; $_SESSION = $session; } return $session; } private function send($method, $url, $data = array()) { $return = $this->browser->$method($url, $data); if ($this->debug) { $this->log[] = array($method, $url, $data, $this->browser->response); } if ($this->login($this->browser->response['header'])) { $return = $this->browser->$method($url, $data); if ($this->debug) { $this->log[] = $this->browser->response; } if ($this->login($this->browser->response['header'], false)) { $this->error('can not login'); } } $this->session($this->browser->getCookies()); return $return; } private function error($message) { throw new Exception($message); } private function getData($data) { $return = array(); if (is_array($data)) { $return = $data; } else { if ($xml = simplexml_load_string($data)) { foreach ($xml as $row) { $return[$row->getName()] = (string)$row; } } } return $return; } private function login($header = null, $send = true) { $login = $this->browser->parseUri($this->login); if ( (isset($header['Access-Redirect']) && $header['Access-Redirect'] == 'login') || (isset($header['Location']) && $header['Location'] == $login['path']) ) { if ($send) { $this->browser->post( $this->login, array( 'user_name' => $this->login_user, 'user_password' => $this->login_pass, 'submit' => '' ) ); if ($this->debug) { $this->log[] = $this->browser->response; } $this->session($this->browser->getCookies()); } return true; } return false; } public function form($info = array()) { if (empty($info)) { $info = $this->data; } $return = array('status' => 'error'); if ($_html = $this->send('get', $this->form)) { $dom = $this->browser->DomFindFirst($this->formPathField['form']['element']); if (!$dom || !($action = $dom->{$this->formPathField['form']['action']})) { $action = $this->form; } else { $action = $this->browser->buildUri(array_merge($this->browser->parseUri($this->form), $this->browser->parseUri($action))); } $data = $map = array(); $class = uniqid('my_'); $this->browser->DomAddClass($class, $this->formPathField['field']['element'], $dom); foreach ($this->browser->DomFind('.' . $class, $dom) as $obj) { $id = $obj->id; $name = $this->browser->parseQuery($obj->name); if ($label = $obj->parentNode($this->formPathField['field']['name']['element'])) { $label = $label->{$this->formPathField['field']['name']['attr']}; } if (!empty($name)) { if (!empty($label) && !isset($map[$label])) { $map[$label] = array('id' => $id, 'type' => 'text'); } if ($obj->tag == 'select') { $map[$label]['type'] = 'select'; foreach ($obj->find('option') as $row) { $map[$label]['values'][$this->buildValue($row->text())] = $row->value; } } elseif ($obj->tag == 'input' && ($obj->type == 'radio' || $obj->type == 'checkbox')) { $map[$label]['type'] = $obj->type; $map[$label]['values'][$this->buildValue($obj->value)] = $obj->value; if ($l = $obj->parentNode()->find('label')) { $map[$label]['labels'][$obj->value] = $l[0]->text(); } } $_data = &$data; while ($key = key($name)) { $name = $name[$key]; if (!is_array($name)) { $_data[$key] = $obj->value; if (!empty($label)) { $map[$label]['value'] = &$_data[$key]; } break; } elseif (!isset($_data[$key])) { $_data[$key] = array(); } $_data = &$_data[$key]; } } elseif (!empty($label)) { $map[$label]['id'] = $id; } if (!empty($label)) { $l = $obj->parentNode($this->formPathField['field']['name']['element'])->find('label'); $map[$label]['label'] = $l[0]->text(); } } if (!empty($map)) { if ($this->get_only_field_list) { $this->showFields($map); } $missing = array(); foreach ($this->getData($info) as $key => $row) { if (isset($map[$key])) { if (isset($map[$key]['values'])) { $value = $this->buildValue($row); if (isset($map[$key]['values'][$value])) { $map[$key]['value'] = $map[$key]['values'][$value]; } else { $map[$key]['value'] = ''; $missing[] = $key; } } else { $map[$key]['value'] = $row; } } } if ($this->get_only_javascript) { $map[$this->formPhoto['field']]['value'] = ''; $this->getJsCode($data); } if (isset($map[$this->formPhoto['field']]) && !empty($map[$this->formPhoto['field']]['value'])) { list($map[$this->formPhoto['field']]['value'], $image) = array('', @pack('H*', $map[$this->formPhoto['field']]['value'])); if ($img = @imagecreatefromstring($image)) { $file = _ROOT . 'dnl/vt_' . md5($image) . '.jpg'; if (@imagejpeg($img, $file)) { $id = preg_replace($this->formPhoto['name'][1], $this->formPhoto['name'][2], $map[$this->formPhoto['field']]['id']); $name = str_replace('%id%', $id, $this->formPhoto['name'][0]); $image = $this->send('post', $this->formPhoto['url'], array($name => '@' . $file)); unlink($file); if ($image = json_decode($image)) { if (!isset($image->error)) { $map[$this->formPhoto['field']]['value'] = $id; } else { $return['message'][] = 'upload photo: ' . $image->error; } } else { $return['message'][] = 'upload photo: unknown reply'; } } else { $return['message'][] = "upload photo: don't create image file"; } } else { $return['message'][] = 'upload photo: this is not image file'; } } if ($result = $this->send('post', $action, $data)) { if ($dom = $this->browser->DomFindFirst($this->formBoxAlert['class'])) { $return['status'] = strtolower(trim($this->browser->DomFindFirst($this->formBoxAlert['title'], $dom)->text())); foreach ($this->browser->DomFind($this->formBoxAlert['container'], $dom) as $row) { $return['message'][] = $row->text(); } } } else { if (300 <= $this->browser->response['status'] && $this->browser->response['status'] < 400) { if (strpos($this->browser->response['header']['Location'], $this->success) === 0) { $return['status'] = 'success'; $return['number'] = str_replace($this->success, '', $this->browser->response['header']['Location']); } else { $return['message'][] = 'Unexpected redirect'; } } } if (!empty($missing) && empty($return['message'])) { $return['message'][] = 'missed field: ' . implode(', ', $missing); } } else { $return['message'][] = 'i do not know this page'; } } else { $return['message'][] = 'i can not load the page'; } return $return; } public function download($number, $save = false) { $return = array('status' => 'error', 'message' => '404'); if ($number !== null) { if (( $document = $this->send('get', str_replace('%id%', $number, $this->pdf))) && $this->browser->response['status'] == 200 && $this->browser->response['header']['Content-Type'] == 'application/download' ) { if ($save) { return $document; } else { header('Content-type: application/pdf'); header('Content-Disposition: attachment; filename=' . $number . '.pdf'); die($document); } } } return $return; } private function showFields($map) { $xml = new DomDocument('1.0', 'utf-8'); $output = $xml->appendChild($xml->createElement('root')); foreach ($map as $key => $row) { $element = $output->appendChild($xml->createElement($key)); $label = $element->appendChild($xml->createElement('label')); $label->appendChild($xml->createTextNode(isset($row['label']) ? $row['label'] : '')); $type = $element->appendChild($xml->createElement('type')); $type->appendChild($xml->createTextNode($row['type'])); if (!empty($row['values'])) { $values = $element->appendChild($xml->createElement('values')); foreach ($row['values'] as $v => $k) { $option = $values->appendChild($xml->createElement('value')); if (isset($row['labels'][$v])) { $option->setAttribute('label', $row['labels'][$v]); } $option->appendChild($xml->createTextNode($v)); } } } $xml->formatOutput = true; die($xml->saveXML()); } private function getJsCode($data) { $js = "javascript:function sv(n,v){var o=document.getElementsByName(n);if(o[0].tagName=='INPUT'&&o[0].type=='radio'){for(var i=0,c=o.length;i<c;i++){if(o[i].value==v){o[i].checked=true;}}}else o[0].value=v;}"; $fields = $this->browser->buildPostFields(array('data' => $data['data'])); foreach ($fields as $key => $row) { $js .= "sv('" . $key . "','" . $row . "');"; } $xml = new DomDocument('1.0', 'utf-8'); $output = $xml->appendChild($xml->createElement('root')); $output->appendChild($xml->createTextNode($js)); $xml->formatOutput = true; die($xml->saveXML()); } private function entityDecode($text) { $text = htmlentities(html_entity_decode($text, null, "UTF-8"), null, "UTF-8"); $text = preg_replace('~\&([\w\d]{1})tilde\;~', '$1', $text); $text = preg_replace('~\&([\w\d]{1})acute\;~', '$1', $text); return $text; } private function buildValue($text) { $text = $this->entityDecode($text); if ($this->get_only_field_list) { return $text; } $text = strtolower(trim($text)); $text = preg_replace('~[-\s]~', '_', $text); $text = preg_replace('~[^\d\w_]~', '', $text); $text = preg_replace('~[_]+~', '_', $text); return $text; } public function getLog() { return $this->log; } } 