<?php
 class Zip_Folder { private $compressedData = array(); private $centralDirectory = array(); private $endOfCentralDirectory = "\x50\x4b\x05\x06\x00\x00\x00\x00"; private $oldOffset = 0; public function packDir($dir) { $cwd = getcwd(); chdir($dir); $files = array_merge(glob('*'), glob('*/*')); foreach ($files as $file) { if (is_file($dir . $file)) { $this->addFile(file_get_contents($dir . $file), $file, filemtime($dir . $file)); } } chdir($cwd); } public function packFile($filePath) { return $this->addFile(file_get_contents($filePath), $filePath); } private function zipfilemtime($unixtime = 0) { $timearray = ($unixtime == 0) ? getdate() : getdate($unixtime); if ($timearray['year'] < 1980) { $timearray['year'] = 1980; $timearray['mon'] = 1; $timearray['mday'] = 1; $timearray['hours'] = 0; $timearray['minutes'] = 0; $timearray['seconds'] = 0; } $dtime = dechex( (($timearray['year'] - 1980) << 25) | ($timearray['mon'] << 21) | ($timearray['mday'] << 16) | ($timearray['hours'] << 11) | ($timearray['minutes'] << 5) | ($timearray['seconds'] >> 1) ); $hexdtime = '\x' . $dtime[6] . $dtime[7] . '\x' . $dtime[4] . $dtime[5] . '\x' . $dtime[2] . $dtime[3] . '\x' . $dtime[0] . $dtime[1]; eval('$hexdtime = "' . $hexdtime . '";'); return $hexdtime; } public function addFile($data, $directoryName, $filemtime = 0) { $directoryName = str_replace("\\", "/", $directoryName); $filemtime = $this->zipfilemtime($filemtime); $feedArrayRow = "\x50\x4b\x03\x04"; $feedArrayRow .= "\x14\x00"; $feedArrayRow .= "\x00\x00"; $feedArrayRow .= "\x08\x00"; $feedArrayRow .= $filemtime; $uncompressedLength = strlen($data); $compression = crc32($data); $gzCompressedData = gzcompress($data); $gzCompressedData = substr(substr($gzCompressedData, 0, strlen($gzCompressedData) - 4), 2); $compressedLength = strlen($gzCompressedData); $feedArrayRow .= pack("V", $compression); $feedArrayRow .= pack("V", $compressedLength); $feedArrayRow .= pack("V", $uncompressedLength); $feedArrayRow .= pack("v", strlen($directoryName)); $feedArrayRow .= pack("v", 0); $feedArrayRow .= $directoryName; $feedArrayRow .= $gzCompressedData; $feedArrayRow .= pack("V", $compression); $feedArrayRow .= pack("V", $compressedLength); $feedArrayRow .= pack("V", $uncompressedLength); $this->compressedData[] = $feedArrayRow; $newOffset = strlen(implode("", $this->compressedData)); $addCentralRecord = "\x50\x4b\x01\x02"; $addCentralRecord .= "\x00\x00"; $addCentralRecord .= "\x14\x00"; $addCentralRecord .= "\x00\x00"; $addCentralRecord .= "\x08\x00"; $addCentralRecord .= $filemtime; $addCentralRecord .= pack("V", $compression); $addCentralRecord .= pack("V", $compressedLength); $addCentralRecord .= pack("V", $uncompressedLength); $addCentralRecord .= pack("v", strlen($directoryName)); $addCentralRecord .= pack("v", 0); $addCentralRecord .= pack("v", 0); $addCentralRecord .= pack("v", 0); $addCentralRecord .= pack("v", 0); $addCentralRecord .= pack("V", 32); $addCentralRecord .= pack("V", $this->oldOffset); $this->oldOffset = $newOffset; $addCentralRecord .= $directoryName; $this->centralDirectory[] = $addCentralRecord; } public function get() { $data = implode("", $this->compressedData); $controlDirectory = implode("", $this->centralDirectory); return $data . $controlDirectory . $this->endOfCentralDirectory . pack("v", count($this->centralDirectory)) . pack("v", count($this->centralDirectory)) . pack("V", strlen($controlDirectory)) . pack("V", strlen($data)) . "\x00\x00"; } } 