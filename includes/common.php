<?php
setlocale(LC_CTYPE, 'ru_RU.cp1251', 'ru_RU.CP1251', 'rus_RUS', 'ru_RU', 'rus_RUS.CP1251', 'Russian_Russia.1251'); setlocale(LC_NUMERIC, 'en_US', 'en_US.utf-8'); include_once _ROOT . 'includes/classes/class.samo_config.php'; Samo_Loader::register_autoload(); Samo_Datetime::lang(Samo_Request::lang()); set_include_path('.' . PATH_SEPARATOR . _ROOT . 'vendor/pear/'); include _ROOT . 'includes/messages/messages_' . Samo_Request::lang() . '.php'; $messages['LANG'] = Samo_Request::lang(); Samo_Registry::set('messages', $messages); if (DEBUG === true) { ini_set('display_errors', 1); $level = APPMODE == 'dev' ? -1 : E_ALL & ~E_DEPRECATED; error_reporting($level); $__GLOBAL_ERROR_CATCHER = new Samo_Exceptionizer($level); if ('dev' == APPMODE && extension_loaded('xdebug')) { ini_set('xdebug.collect_vars', 'on'); ini_set('xdebug.collect_params', 4); ini_set('xdebug.dump_globals', 'on'); ini_set('xdebug.show_local_vars', 'on'); ini_set('xdebug.max_nesting_level', 100); ini_set('xdebug.var_display_max_depth', 4); } } else { error_reporting(0); ini_set('display_errors', 0); $__GLOBAL_ERROR_CATCHER = new Samo_Exceptionizer(E_USER_ERROR); } if (!defined('FRIENDLY_URLS')) { define('FRIENDLY_URLS', isset($_SERVER['FRIENDLY_URLS']) && $_SERVER['FRIENDLY_URLS'] == 1); } if (!function_exists('ifs')) { function ifs(...$args) { foreach ($args as $arg) { if ($ret = $arg) { break; } } return $ret; } } if (!function_exists('notnull')) { function notnull(...$args) { foreach ($args as $arg) { if (null !== ($ret = $arg)) { break; } } return $ret; } } Samo_Registry::load('request', 'Samo_Request'); Samo_Registry::load('response', 'Samo_Response'); Samo_Registry::load('view', 'Samo_View'); $force_driver = Samo_Request::is_admin() ? 'internal' : null; $cache = Samo_Loader::load_object('Samo_Cache', $force_driver); $cache = Samo_Registry::set('cache', $cache); Samo_Registry::set('logger', Log::singleton(LOG_TYPE)); function prepare_routes($routes) { $path = (isset($_GET['is_js']) || (isset($_GET['samo_action']) && $_GET['samo_action'] == 'embed')) ? Samo_Request::scheme() . '://' . Samo_Request::host() . WWWROOT : WWWROOT; if (!FRIENDLY_URLS) { $path .= 'default.php'; } $is_test = Samo_Request::is_test(); $params = array(); foreach (array('SOURCE', 'KEY', 'oauth_token', 'LANG') as $param) { if (isset($_GET[$param])) { $params[$param] = $_GET[$param]; } } $messages = Samo_Registry::get('messages'); foreach ($routes as $module => $info) { if (isset($info['test']) && $info['test'] == true && !$is_test) { unset($routes[$module]); } else { if (!isset($info['url'])) { if (!FRIENDLY_URLS) { $params['page'] = $module; } $info['url'] = $path . (FRIENDLY_URLS ? $module : '') . ($params ? '?' . http_build_query($params) . '&' : '?'); } if (!isset($info['public'])) { $info['public'] = true; } $tmp = explode('_', $module); $temp = array(); foreach ($tmp as $part) { $temp[] = ucfirst($part); } $class = implode('_', $temp); $info['controller'] = $class . '_controller'; $info['model'] = $class . '_model'; $info['module'] = $module; $info['path'] = isset($info['path']) ? _ROOT . $info['path'] : _ROOT . 'includes/messages/'; if (!isset($info['title'])) { $info['title'] = isset($messages['MODULE_TITLE'][$module]) ? $messages['MODULE_TITLE'][$module] : strtoupper($module); } unset($tmp, $temp, $class); $routes[$module] = $info; } } return $routes; } $routes = prepare_routes($routes); $routes['menu'] = array('controller' => 'Samo_Menu', 'model' => 'Samo_Menu', 'exception' => 'Samo_Exception', 'module' => 'menu', 'path' => _ROOT, 'public' => false); Samo_Registry::get('view')->assign('routes', $routes)->assign('WWWROOT', WWWROOT); Samo_Registry::set('routes', $routes); $LANG = Samo_Request::lang(); $LANGS = call_user_func( function ($langs) { $params = $_GET; if (defined('FRIENDLY_URLS') && FRIENDLY_URLS) { unset($params['page']); } $return = array(); $langs = array_map('trim', explode(',', $langs)); foreach ($langs as $lang) { $params['LANG'] = $lang; $return[$lang] = '?' . http_build_query($params); } return $return; }, defined('LANGS') ? LANGS : $LANG ); Samo_Registry::get('view')->assign('LANG', $LANG)->assign('LANGS', $LANGS); unset($LANG, $LANGS); $TOWNFROMINC = ('search_hotel' == Samo_Request::get('page')) ? Samo::TOWNFROMHOTELINC : ifs(Samo_Request::intval('TOWNFROMINC'), TOWNFROMINC); $STATEINC = Samo_Request::intval('STATEINC'); function __recover_cp($ele) { return mb_convert_encoding($ele, 'cp1251', 'utf-8'); } function ___recover_cp($ele) { if (is_array($ele)) { return array_map('___recover_cp', $ele); } return __recover_cp($ele); } Samo_Registry::set('_GET', $_GET); $_GET = array_map('___recover_cp', $_GET); if (Samo_Request::is_post()) { Samo_Registry::set('_POST', $_POST); $_POST = array_map('___recover_cp', $_POST); } if ( (version_compare(PHP_VERSION, '5.6') < 0) || (extension_loaded('mssql') === false && extension_loaded('sqlsrv') === false && extension_loaded('pdo_dblib') === false) || (extension_loaded('ctype') === false) || (extension_loaded('simplexml') === false) || (extension_loaded('filter') === false) || ((extension_loaded('mbstring') && extension_loaded('iconv')) === false) || (extension_loaded('zlib') === false) || (extension_loaded('openssl') === false) || (extension_loaded('bcmath') === false) || (extension_loaded('dom') === false) || (extension_loaded('xml') === false) ) { throw new Samo_Exception($messages['BROKEN_SERVER_CONFIG']); } return; 