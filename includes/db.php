<?php
 function getServers() { if (!class_exists('Samo_Loader', false)) { include_once _ROOT . 'includes/classes/class.samo_config.php'; Samo_Loader::register_autoload(); } $registry = Samo_Registry::instance(); if (!isset($registry['TOWNSFROM']) || !is_array($registry['TOWNSFROM']) || !count($registry['TOWNSFROM'])) { $TOWNSFROM = array(); if (!file_exists(TOWNSFROM_CACHE)) { $tools = Samo_Loader::load_object('Samo_Tools'); $tools->create_servers_cache(); } include TOWNSFROM_CACHE; $registry['TOWNSFROM'] = $TOWNSFROM; } return $registry['TOWNSFROM']; } function db_connect($TOWNFROMINC, $STATEINC, $options = []) { $storage = Samo_Registry::instance(); if (isset($storage['ServerSettings']) && isset($storage['db'])) { $srv = $storage['ServerSettings']; if ($srv['townFrom'] == $TOWNFROMINC && $srv['state'] == $STATEINC) { if (!isset($options['stateFrom']) || $srv['stateFrom'] == $options['stateFrom']) { return $storage['db']; } } } $servers = getServers(); $stateFrom = isset($options['stateFrom']) ? $options['stateFrom'] : null; $_servers = array_filter( $servers, function($srv) use ($TOWNFROMINC, $STATEINC, $stateFrom) { return $srv['townFrom'] == $TOWNFROMINC && $srv['state'] == $STATEINC && ($stateFrom == null || $srv['stateFrom'] == $stateFrom); } ); if (!$_servers) { $_servers = array_filter( $servers, function($srv) use ($TOWNFROMINC, $STATEINC) { return isset($srv['default']) && $srv['default']; } ); } if ($_servers) { $srv = reset($_servers); if ($srv['redirect']) { $module = Samo_Registry::get('module'); $url = $srv['webURL'] . 'default.php?page=' . $module['module'] . '&TOWNFROMINC=' . $TOWNFROMINC . '&STATEINC=' . $STATEINC; Samo_Registry::get('response')->redirect_to($url); } if (!isset($storage['db']) || !isset($storage['ServerSettings']) || ($storage['ServerSettings']['onlineIP'] != $srv['onlineIP'])) { $db = new Samo_Database(); $params = [ 'hostname' => $srv['onlineIP'], 'username' => username, 'password' => password, 'database' => $srv['onlineSamoDB'], 'alias' => $srv['onlineAlias'], 'office' => $srv['officeSamoAlias'] . '.' . $srv['officeSamoDB'], 'bank' => $srv['officeSamoAlias'] . '.' . BANKDB, ]; if (isset($options['stateFrom'])) { unset($options['stateFrom']); } $params = array_merge($options, $params); $db->connect($params); $storage['db'] = $db; } $storage['ServerSettings'] = $srv; return $storage['db']; } else { foreach ($servers as $server) { if ($server['townFrom'] == $TOWNFROMINC) { return db_connect($TOWNFROMINC, $server['state'], $options); } } foreach ($servers as $server) { if ($server['townFrom'] == TOWNFROMINC) { return db_connect(TOWNFROMINC, $server['state'], $options); } } $server = reset($servers); return db_connect($server['townFrom'], $server['state'], $options); } } function find_available_server() { $db = false; $current = Samo_Registry::get('ServerSettings'); $available = array(); $servers = getServers(); foreach ($servers as $server) { if ($server['onlineIP'] != $current['onlineIP']) { $available[] = $server; } } if (count($available)) { uasort( $available, function ($a, $b) use ($current) { if ($a['townFrom'] == $b['townFrom'] && $b['townFrom'] == $current['townFrom']) { return 0; } if ($a['townFrom'] == $current['townFrom']) { return -1; } if ($b['townFrom'] == $current['townFrom']) { return 1; } if ($a['state'] == $current['state']) { return -1; } if ($b['state'] == $current['state']) { return 1; } } ); foreach ($available as $srv) { $db = db_connect($srv['townFrom'], $srv['state']); try { if (1 == $db->fetchOne("SELECT 1 AS connected")) { break; } } catch (DatabaseServer_Exception $e) { $e; } } } return ($db) ? $db : false; } 