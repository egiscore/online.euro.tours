<?php
 class Smarty_Resource_Samodb extends Smarty_Resource_Custom { private $cache_ttl = 600; protected function get_name($tpl_name) { $result = explode('/', $tpl_name); if (count($result) < 5) { $result = array_pad($result, 5, null); } $config = array_slice($result, -3); $result = array_slice($result, 0, -3); if (count($result) == 1) { $result = array('notes', $result[0]); } if (count($result) < 2) { return false; } return array_merge(array($result[0], implode('_', array_slice($result, 1))), $config); } public function tpl_meta($tpl_name) { $registry = Samo_Registry::instance(); if (isset($registry['logger'])) { $logger = $registry['logger']; $logger->err('Deprecated resource "samodb:'. $tpl_name.'" call detected. Use function {note}.'); } $cache = isset($registry['cache']) ? $registry['cache'] : new Samo_Cache(); $is_admin = Samo_Request::is_admin(); if ($is_admin || false === ($data = $cache->get($tpl_name))) { $data = array( 'Value' => '', 'EDate' => 1000, ); if (!isset($registry['db']) || $registry['db'] instanceof Database_Stub) { return $data; } $name = $this->get_name($tpl_name); if (false !== $name && isset($registry['db'])) { $db = $registry['db']; $dbname = ($is_admin) ? '<OFFICEDB>' : '<ONLINEDB>'; $INTERNET_USER = (defined('INTERNET_USER')) ? INTERNET_USER : ((array_key_exists('INTERNET_USER', $registry) ? $registry['INTERNET_USER'] : $db->fetchOne('<ONLINEDB>.dbo.up_WEB_3_default_usercode'))); $res = $db->exec( $dbname . '.dbo.up_WEB_3_tour_config', array( 'Section' => $name[0], 'What' => $name[1], 'TownFrom' => empty($name[2]) ? null : $name[2], 'State' => empty($name[3]) ? null : $name[3], 'Tour' => empty($name[4]) ? null : $name[4], 'UserCode' => $INTERNET_USER, ) ); if (false !== ($row = $res->fetchRow())) { $data['Value'] = $row['Value']; $data['EDate'] = $row['EDate']->format('U'); } } $cache->set($tpl_name, $data, $this->cache_ttl); } return $data; } protected function fetch($name, &$source, &$mtime) { $meta = $this->tpl_meta($name); $source = (null !== $meta['Value']) ? $meta['Value'] : ''; $mtime = $meta['EDate']; } protected function fetchTimestamp($name) { $meta = $this->tpl_meta($name); return $meta['EDate']; } } 