<?php
 class Agreement_Controller extends Samo_Controller { public $model = null; protected $partner_form_height = 415; protected $partner_form_width = 700; protected function index() { try { if ($this->check_partner()) { $model = $this->model; $this->view->assign('agreements', $model->agreements()); } } catch (Samo_Exception $e) { $this->view->assign('messages', $this->messages) ->assign('partnerErrors', $e->getMessage()); return false; } return true; } public function default_action() { $this->view->assign('PERSONAL_AREA', Profile_Model::links()); if ($this->index()) { parent::default_action(); if (null !== Samo_Request::intval('INC')) { $this->SHOW(); } } else { parent::default_action(); } } public function get_fields_agreement() { $res = $this->model->getOnline_field('agreement'); $this->model->defaults['fields'] = $res; return $res; } public function SHOW() { try { if ($this->check_partner()) { return $this->_SHOW(); } } catch (Samo_Exception $e) { $this->view->js_call('samo.download_result', array('guid' => Samo_Request::find('guid'), 'error' => nl2br($e->getMessage()))); } } protected function _SHOW() { try { $fields = array(); if ($this->model->is_enabled($fields)) { try { $this->model->get_template_agreement(); if ($this->model->external) { $this->PDF_SAMOTOUR(); if (isset($this->model->defaults['AGREEMENT_NDOG'])) { $this->view->js_call('samo.display_ndog', array('ndog' => $this->model->defaults['AGREEMENT_NDOG'])); $this->view->remove_class('.samo-delayed-download', 'dog'); } } else { $result = $this->model->agreement(); $tpl = $this->model->defaults['template']; $pdf_file = sprintf('dnl/agreement_%s.pdf', uniqid()); $this->view->assign('agreement', $result) ->render_fpdf($tpl, $pdf_file) ->js_call('samo.download_result', array('guid' => Samo_Request::find('guid'), 'label' => '', 'url' => WWWROOT . $pdf_file)) ->remove_class('.samo-delayed-download', 'dog') ->element_attr('.samo-delayed-download', 'target', '_blank'); } } catch (Warrant_Exception $e) { $this->view->js_call('samo.download_result', array('guid' => Samo_Request::find('guid'), 'error' => '')); $this->index(); $this->default_app_env(); $this->view->element_update('resultset', 'resultset.tpl'); $this->add_warrant(); } } else { $this->view->error(implode(', ', $fields)); } } catch (Samo_Exception $e) { $this->view->js_call('samo.download_result', array('guid' => Samo_Request::find('guid'), 'error' => $e->getMessage())); } return null; } public function add_warrant() { $routes = Samo_Registry::get('routes'); Samo_Registry::set('module', $routes['warrant']); $routes['warrant']['url'] .= $this->callback_params(); $this->view->assign('routes', $routes); $warrant = Samo_Loader::load_object('Warrant_Controller'); $warrant->construct(); $_GET['samo_action'] = $warrant->model->action = 'ADD_WARRANT'; $_GET['BOSS'] = $this->model->boss_in_warrant; $warrant->load_messages('warrant'); $this->view->popup_close(); $warrant->ADD_WARANT(); $_GET['INC'] = $this->model->defaults['AGREEMENT_INC']; $this->view->element_attr('#WARRANT_FORM', 'action', $routes['agreement']['url'] .= $this->agreement_vars() . '&samo_action=save_warrant&'); return false; } public function save_warrant() { try { $this->load_messages('warrant'); $warrant = Samo_Loader::load_object('Warrant_Model'); $warrant->construct(); $warrant->Save_Warrant(); $this->view->popup_close(); $this->_SHOW(); } catch (Samo_Exception $e) { $this->view->error($e->getMessage()); } } public function check_partner() { if (0 !== Samo_Request::intval('INC')) { return $this->model->check_partner_info(); } elseif (Samo_Request::intval('PARTNERAGREE')) { $this->model->check_partner_info(); $fields = $this->get_fields_agreement(); if ($this->model->check_visibility_fields($fields)) { $data = Samo_Request::post('frm'); $data = @$data['agreement'][-1]; if ($data) { if ($this->model->check_field_array($fields, $data)) { $this->view->js_call('samo.download_last', Samo_Request::find('guid')); } } elseif (!Samo_Request::find('SAVEFORM') || Samo_Request::find('SAVEFORM') != Samo_Request::find('guid')) { $fields = $this->model->makeEditableVisibleFields($fields); $this->view->assign('MAXLONGINT', Samo::MAXLONGINT) ->assign('fields_agreement', $fields) ->assign('links', $this->modules_links()) ->popup_close() ->popup_template('form.tpl', $this->messages['AGREEMENT_CHECK_PARTNER_INFO'], 700, 415, true) ->js_call('samo.download_result', array('guid' => Samo_Request::find('guid'), 'error' => false)) ->js_call('samo.reason_form_load'); return false; } } return true; } else { $partner = Samo_Loader::load_object('Edit_Agency_Model'); $partner->construct(); $this->view->assign('fields', $partner->get_fields_partner()) ->assign('links', $this->modules_links()) ->popup_template('check_partner.tpl', $this->messages['AGREEMENT_CHECK_PARTNER_INFO'], $this->partner_form_width, $this->partner_form_height, true) ->js_call('samo.download_result', array('guid' => Samo_Request::find('guid'), 'error' => false)); } return false; } protected function modules_links() { $routes = Samo_Registry::get('routes'); $agree_link = $routes['agreement']['url'] . 'samo_action=SHOW&PARTNERAGREE=1&'; $save_link = $agree_link; $edit_agency = $routes['edit_agency']['url']; $vars = $this->agreement_vars(); return array('agree' => $agree_link . $vars, 'edit_agency' => $edit_agency . $this->callback_params($vars), 'save_form' => $save_link . $vars,); } private function agreement_vars() { $vars = array(); foreach (array('DATEBEG', 'DATEEND', 'INC', 'CONTRACTTYPE', 'OWNER') as $part) { $vars[$part] = Samo_Request::get($part); } return http_build_query($vars); } protected function callback_params($vars = null) { if (null === $vars) { $vars = $this->agreement_vars(); } return http_build_query(array('SOURCE' => 'samo://agreement?' . $vars)); } public function E_DOC() { $CONTRACTS_DOCUMENT_INC = Samo_Utils::ifs(Samo_Request::intval('CONTRACTS_DOCUMENT_INC'), null); $DOCTYPE = Samo_Utils::ifs(Samo_Request::intval('EDOC_UPLOAD_DOCTYPE'), null); if (null !== $DOCTYPE && null !== $CONTRACTS_DOCUMENT_INC) { $samo_document = Samo_Loader::load_object('Samo_Document'); $samo_document->construct(); $edoc_types = $samo_document->EDOC_Types(); $edoc_type = $edoc_types[$DOCTYPE]; $this->view ->assign('CONTRACTS_DOCUMENT_INC', $CONTRACTS_DOCUMENT_INC) ->assign('DOCTYPEINC', $DOCTYPE) ->assign('edoc_types', $edoc_type) ->popup_template('e_doc_form.tpl', $this->messages['E_DOC_BTN_UPLOAD'] . ' ' . strtolower($this->messages['AGREEMENT_E_DOC']), $width = 600, $height = 300); } else { $this->view->error($this->messages['AGREEMENT_CONTRACTS_DOCUMENT_INC']); } } public function E_DOC_DETACH() { try { $CONTRACTS_DOCUMENT_INC = Samo_Utils::ifs(Samo_Request::intval('CONTRACTS_DOCUMENT_INC'), null); $DOCTYPE = Samo_Utils::ifs(Samo_Request::intval('EDOC_UPLOAD_DOCTYPE'), null); if (null !== $DOCTYPE && null !== $CONTRACTS_DOCUMENT_INC) { $samo_document = Samo_Loader::load_object('Samo_Document'); $samo_document->construct(); $res = $samo_document->E_DOC_DETACH(); $routes = Samo_Registry::get('routes'); $url = $routes['agreement']['url']; $this->view->redirect_to($url); return true; } else { $this->view->error($this->messages['AGREEMENT_CONTRACTS_DOCUMENT_INC']); } } catch (Samo_Exception $e) { $this->view->error($e->getMessage()); } } public function UPLOAD_EDOC() { try { $response = Samo_Registry::get('response'); $response->respond_to('iframe-js'); $response->headers('Vary', 'Accept'); $samo_document = Samo_Loader::load_object('Samo_Document'); $samo_document->construct(); $last_upload = $samo_document->E_DOC_UPLOAD(); $this->view->message(sprintf($this->messages['E_DOC_UPLOAD_SUCCESS'], $last_upload['FileName'])); $routes = Samo_Registry::get('routes'); $url = $routes['agreement']['url']; $this->view->redirect_to($url); return true; } catch (Samo_Exception $e) { $this->view->error($e->getMessage()); } } public function document() { $response = Samo_Registry::get('response'); $doc = Samo_Request::intval('DOC'); $samo_document = Samo_Loader::load_object('Samo_Document'); $samo_document->construct(); $doc_file = $samo_document->E_DOC_GET_DOCUMENT($doc); if ($doc && false !== $doc_file) { $response->redirect_to($doc_file); } else { $response->not_found(); } } } 