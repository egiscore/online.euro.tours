<?php
 class Agreement_Model extends Samo { protected $auth_required = array('agency'); protected $date_change = '20090601'; protected $delta_date = 30; protected $contract_type = 1; protected $proc_dog = null; protected $check_warrant = false; public $boss_in_warrant = false; public function construct() { $this->messages = Samo_Registry::get('messages'); $this->defaults['AGREEMENT_INC'] = Samo_Utils::ifs(Samo_Request::intval('INC'), 'null'); $this->defaults['OWNER'] = Samo_Utils::ifs(Samo_Request::intval('OWNER'), $this->getConfig('FIRMCODE')); $this->defaults['DATEBEG'] = Samo_Request::date('DATEBEG', null); $this->defaults['DATEEND'] = Samo_Request::date('DATEEND', null); $frm = Samo_Request::find('frm'); if ($frm && isset($frm['agreement'])) { $this->defaults['frm'] = $frm['agreement'][-1]; } else { $this->defaults['frm'] = array(); } } public function get_template_agreement($agreement_year = null, $contract_type = null) { $agreement_year = Samo_Utils::ifs($agreement_year, (int)Samo_Request::date('DATEEND')->format('Y')); $contract_type = Samo_Utils::ifs($contract_type, Samo_Request::intval('CONTRACTTYPE'), $this->contract_type); if (false !== $this->get_settings_printform($doccategory = 5, $partner = $this->defaults['OWNER'], $tour = null, $state = null, $inszone = null, $contract_type, $agreement_year)) { return true; } $owner = $this->getPartnerInfo($this->defaults['OWNER']); $text = sprintf($this->messages['AGREEMENT_TEMPLATE_NOT_FOUND'], Samo_Request::date('DATEBEG')->format('Y'), $agreement_year, $owner['Partner_partnerlname']); throw new Samo_Exception($text, 1); } public function getPartner($partner = null) { if (!is_null($partner)) { return $partner; } else { return parent::getPartner(); } } public function agreements($partner = null) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WebST_PrintContracts', [ 'Partner' => $this->getPartner($partner), ] ); return $this->_agreements($sql); } public function _agreements($sql) { $result = array(); if ($query = $this->db->query($sql)) { while ($res = $this->db->fetchRow($query)) { $res['exists'] = $this->exists($res['inc'], $res['InDelta']); $res['Partner'] = $this->_getPartnerInfo($this->getPartner(), false); $res['Owner'] = $this->getPartnerInfo($res['Owner']); if ($res['inc'] > 0) { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WebST_Contracts_Document_List', ['ContractInc' => $res['inc']]); if ($res2 = $this->db->fetchAll($sql)) { $res['contracts_document'] = array(); foreach ($res2 as $row) { if ($row['is_loaded']) { $row['a'] = Samo_Url::route('agreement', ['samo_action' => 'document', 'DOC' => $row['ContractsDocumentInc']]); } $res['contracts_document'][] = $row; } } } $result[] = $res; } } return $result; } private function exists($inc, $delta) { if (is_null($inc)) { $return = (1 == $delta) ? 1 : 0; } else { $return = 2; } return $return; } public function agreement() { $first_date = Samo_Datetime::parse('-10 year'); $last_date = Samo_Datetime::parse('+10 year'); $dbeg = Samo_Request::date('DATEBEG'); $datebeg = (!$dbeg->is_null()) ? (($dbeg->lt($last_date)) ? (($dbeg->gt($first_date)) ? $dbeg : $first_date) : $last_date) : Samo_Datetime::null(); $dend = Samo_Request::date('DATEEND'); $dateend = (!$dend->is_null()) ? (($dend->lt($last_date)) ? (($dend->gt($first_date)) ? $dend : $first_date) : $last_date) : Samo_Datetime::null(); $contracttype = Samo_Utils::ifs(Samo_Request::intval('CONTRACTTYPE'), $this->contract_type); $params = array( 'PInc' => $this->defaults['AGREEMENT_INC'], 'Partner' => $this->getPartner(), 'DateBeg' => $datebeg, 'DateEnd' => $dateend, 'ContractType' => $contracttype, 'Owner' => $this->defaults['OWNER'], 'NameProcDog' => $this->proc_dog, 'User' => $this->internet_user(), ); if ($p = $this->defaults['frm']) { $fields = $this->defaults['fields']; foreach ($fields as $k0 => $v0) { foreach ($v0 as $k => $v) { $params[$v['EntityField']] = ($v['Type'] == 'date') ? Samo_Datetime::parse($p[$v['Field']]) : $p[$v['Field']]; } } } $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WebST_AddContracts', $params); $partpass = Samo_Utils::ifs($this->getPartPassInc(), 'null'); $log_array = array( 'partpass' => $this->db->quote($partpass), 'sql' => $sql, 'priority' => 'agreement', 'message' => 'SAVE_AGREEMENT', ); $id = $this->db->web_log_table($log_array); $e = null; try { $res = $this->db->fetchRow($sql); } catch (Database_Exception $e) { $log_array['result']['error'] = $this->db->lastError(); $this->db->web_log_table($log_array, $id); throw $e; } if ($res) { if ($res['Partner'] != $this->getPartner()) { if ($res['Result']) { $msg = $res['Result']; } else { $msg = $this->messages['ACCESS_DENIED']; } $log_array['result']['error'] = $msg; $this->db->web_log_table($log_array, $id); throw new Samo_Exception($msg, 403); } $log_array['result']['resultset'] = $res; $this->db->web_log_table($log_array, $id); $res['partner'] = $this->_getPartnerInfo($res['Partner']); $this->defaults['AGREEMENT_INC'] = $res['inc']; if (is_null($res['NDog'])) { throw new Samo_Exception($res['Result'], 503); } $this->defaults['AGREEMENT_NDOG'] = $res['NDog']; if (false !== ($warrant = $this->check_warrant($res))) { $res['warrants'] = $warrant; } return $res; } } public function is_enabled(&$fields) { if (!$this->has_permission('agreement', 'X-Hack')) { throw new Samo_Exception($this->messages['NO_PRINT_PERMISSIONS'], 403); } $fields = array(); $partner = Samo_Loader::load_object('Edit_Agency_Model', $this->config); $partner->construct(); $partner->get_fields_partner(); foreach ($partner->fields_partner as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Required']) { $value = html_entity_decode($field['Value'], ENT_COMPAT, 'cp1251'); if ($value == '') { if (!(in_array($field['Field'], ['PARTNER_KPP', 'PARTNER_REGISTRATION_ORGAN', 'PARTNER_REGISTRATION_SERIE', 'PARTNER_REGISTRATION_NUMBER']) && $partner->PARTNER_OWNERSHIP == $partner->ownership_self_employed())) { $fields[] = $this->messages['EMPTY_REQUIRED_FIELD'] . ' "' . $field['Title'] . '"'; continue; } } if (isset($field['Variants'])) { $variant_exists = false; if (count($field['Variants']) > 0) { if ($field['Field'] == 'PARTNER_TOWN') { foreach ($field['Variants'] as $state) { foreach ($state as $variant) { if ($value == $variant['id']) { $variant_exists = true; break; } } } } else { foreach ($field['Variants'] as $variant) { if ($value == $variant['Inc']) { $variant_exists = true; break; } } } } if (!$variant_exists) { $fields[] = $this->messages['EMPTY_REQUIRED_FIELD'] . ' "' . $field['Title'] . '"'; continue; } } $field['new_value'] = $field['Value']; try { $partner->check_field($value, $field); } catch (Samo_Exception $e) { $fields[] = $e->getMessage(); } } } } return !count($fields); } public function check_warrant($agreement) { if ($this->check_warrant && $this->is_module_installed('warrant')) { $firmcode = $this->getConfig('FIRMCODE'); $is_warrant = $agreement['Owner'] != $firmcode; $documents = array(); if (!$is_warrant) { $search = $this->search($agreement['DateEnd'], $firmcode); if ($search) { $warrant = Samo_Loader::load_object('Warrant_Model', $this->config); $warrant->construct(); if ($warrants = $warrant->people_warrants()) { foreach ($warrants as $war) { if ($war['DateBeg']->gte($agreement['DateBeg']) && $war['DateEnd']->lte($agreement['DateEnd'])) { $is_warrant = true; if (!$war['haveoriginal']) { $documents[] = $war; } } } } } else { $is_warrant = true; } } if (!$is_warrant) { throw new Warrant_Exception('No warranties', 404); } return $documents; } return array(); } public function search($dateend = null, $owner = null) { if (null === $dateend) { $dateend = Samo_Datetime::parse($this->date_change); $dateend->modify('-1 day'); } if (null === $owner) { $owner = $this->defaults['OWNER']; } $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_agreement_search', [ 'Partner' => $this->getPartner(), 'Owner' => $owner, 'DateEnd' => $dateend, ] ); return $this->db->fetchRow($sql); } public function check_partner_info() { if (!$this->is_enabled($fields)) { throw new Samo_Exception(implode(PHP_EOL, $fields)); } return true; } public function getKeyForAgreement() { return sprintf('agreement_%d_%d_%s_%s', $this->defaults['AGREEMENT_INC'], $this->defaults['OWNER'], $this->defaults['DATEBEG'], $this->defaults['DATEEND']); } public function getExternalDocument() { $result = array('guid' => Samo_Request::strval('guid')); try { return array_merge($result, $this->getExternalDocumentInit()); } catch (Warrant_Exception $e) { throw $e; } catch (Samo_Exception $e) { return array_merge($result, array('error' => $e->getMessage())); } } protected function getExternalDocumentInit() { if ($this->defaults['AGREEMENT_INC'] && $this->defaults['OWNER'] && $this->defaults['DATEBEG']->not_null() && $this->defaults['DATEEND']->not_null()) { return $this->getExternalDocumentJob($this->getKeyForAgreement(), sprintf('agreement_%s_%%s_%%s.pdf', $this->defaults['DATEEND']->format('Y'))); } throw new Samo_Exception($this->messages['CANNOT_PRINT']); } protected function getExternalDocumentParams() { if (!$this->is_enabled($fields)) { throw new Samo_Exception(implode(', ', $fields)); } $result = $this->agreement(); $info = pathinfo($this->defaults['template']); if ($this->external !== true) { throw new Samo_Exception($this->messages['CANNOT_PRINT']); } $params = array( 'inc' => $result['inc'], 'partner' => $result['partner']['Partner_partnerinc'], 'template' => $info['filename'] ); return $params; } public function check_field_array($fields, $post_data) { foreach ($fields as $k0 => $v0) { foreach ($v0 as $k => $field) { if ($field['Visible']) { $this->check_field($post_data[$field["Field"]], $field); } } } return true; } public function check_visibility_fields($array) { if (is_array($array)) { foreach ($array as &$fields) { if (is_array($fields)) { foreach ($fields as &$field) { if ($field['Visible']) { return true; } } } } } return false; } public function makeEditableVisibleFields($array) { foreach ($array as &$fields) { foreach ($fields as &$field) { if ($field['Visible']) { $field['Editable'] = true; } } } return $array; } public function check_field($value, $field) { parent::check_field($value, $field); $messages = Samo_Registry::get('messages'); if ($field['Required'] and empty($value)) { throw new Samo_Exception($messages['EMPTY_REQUIRED_FIELD'] . ' "' . $field['Title'] . '"', 1); } } } 