<?php
 class Alfabank_Model extends Samo_Acquiring { protected $moduleName = 'alfabank'; protected static $wspay_alfabank_ip = '217.12.103.126'; public function __construct() { if (defined('ALFABANK_SAMO_INC') && defined('ALFABANK_SAMO_LOGIN')) { parent::__construct(); $this->bankInc = ALFABANK_SAMO_INC; $this->bankAlias = ALFABANK_SAMO_LOGIN; } else { if ($this->is_module_installed('alfabank')) { throw new Samo_Exception(get_called_class() . ' was not configured', 501); } } } public function makeFormData() { $invoice = $this->getInvoice(); $inumber = $invoice['inumber']; $amount = Samo_Request::floatval('amount'); $login = self::acquiringConfig('ALFABANK_API_LOGIN'); $password = self::acquiringConfig('ALFABANK_API_PASSWORD'); $merchantLogin = self::acquiringConfig('ALFABANK_API_MERCHANT_LOGIN'); $ab = Samo_Loader::load_object('AlfaBank', $login, $password, $merchantLogin); if ($curr = self::acquiringConfig('ALFABANK_API_CURRENCY')) { $ab->setCurrencyCode($curr); } $subject = sprintf(Samo_EPlatez::messages('ACQUIRING_PAYMENT_PURPOSE'), $this->defaults['CLAIM']); list($url, $transaction) = $ab->getPayURLAndTransaction($inumber, $amount, $this->getModuleCallbackURL('OK', $inumber), $this->getModuleCallbackURL('FAIL', $inumber), $subject); $login = str_replace('\'', '\\\'', $login); $password = str_replace('\'', '\\\'', $password); $this->createCheckOrderStatusJob('return Alfabank_Model::processOrderStatus(\'' . $inumber . '\', \'' . $transaction . '\', \''.$login.'\', \''.$password.'\');'); return $url; } public static function processOrderStatus($inumber, $transaction, $login = null, $password = null) { if ($login === null) { $login = self::acquiringConfig('ALFABANK_API_LOGIN'); } if ($password === null) { $password = self::acquiringConfig('ALFABANK_API_PASSWORD'); } $ab = Samo_Loader::load_object('AlfaBank', $login, $password); $res = $ab->getOrderInfo($transaction); if (isset($res['OrderStatus'])) { if (in_array($res['OrderStatus'], [0, 5])) { throw new Samo_Exception(Samo_EPlatez::messages('ACQUIRING_PAYMENT_NOT_CONFIRMED')); } if (in_array($res['OrderStatus'], [1, 2])) { self::confirmOrder(ALFABANK_SAMO_LOGIN, $inumber); } } return true; } public static function parseCallbackNotify($data) { $amount = ''; $act = isset($data['command']) ? $data['command'] : ''; $tr = isset($data['txn_id']) ? $data['txn_id'] : null; if (($act == 'check' || $act == 'pay') && !empty($tr)) { $ba = static::acquiringConfig('ALFABANK_T_SAMO_ALIAS'); $model = static::_getModel($ba); $claim = isset($data['account']) ? $data['account'] : ''; if ($claim) { try { $info = $model->getClaim($claim); $summa = (float)$info['PayDebt']; $summa = sprintf('%.2f', $summa); if ($act == 'check') { $status = 0; $amount = '<amount>' . $summa . '</amount>'; } else if ($act == 'pay') { $sum = isset($data['sum']) ? (float)$data['sum'] : 0; if ($sum > 0 && $sum <= $summa) { $model->payClaim($claim, null, $sum, $tr, null, null); $status = 0; } else { $status = 242; } } } catch (WSPAY_exception $e) { if ($e->getCode() == WSPAY_model::CLAIM_CANNOT_PAY) { $status = 7; } else { $status = 300; } } } else { $status = 4; } } else { $status = 300; } $xml = '<?xml version="1.0" encoding="UTF-8"?><response><osmp_txn_id>' . $tr . '</osmp_txn_id><result>' . $status . '</result>' . $amount . '</response>'; $xml = Samo_String::set($xml)->utf8()->__toString(); return $xml; } } 