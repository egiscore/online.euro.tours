<?php
 class model_bron extends model_andr { public $packetInfo = null; public $packetHotel = null; public $freightsInfo = null; public $packetServices = null; public $onlineServices = null; public $allServices = null; protected $_serviceMustBron = null; protected $_serviceTypeMustBron = null; protected function _checkNewPrice($old, $new) { if ($old != $new) { $this->_newPrice = true; } } public function checkNewPrice() { if (isset($this->_newPrice) && ($this->_newPrice === true)) { return true; } else { return false; } } public function checkHotel() { $packetHotel = $this->getHotel(); if (count($packetHotel) > 0) { foreach ($this->packetHotel as $key => $hotel) { if (!isset($stop_hotel) && $hotel['StopSale']) { $stop_hotel = $hotel; } $this->packetHotel[$key]['Stop'] = $hotel['StopSale']; } if (isset($stop_hotel)) { return $this->raiseError(1118, array($stop_hotel['HotelName'])); } } return $this->packetHotel; } public function getAllFreights() { $return = array(); $routes = $this->getFreightsInfo(); if (count($routes)) { $return = $this->_getAllFreights(); if (!count($return)) { return $this->raiseError(1110); } if (isset($this->_freightIn)) { unset($this->_freightIn); } } return $return; } public function getFreight($routeIndex, $freightIn = false) { if ($freightIn) { $this->_freightIn = $freightIn; } $return = $this->_getFreight($routeIndex); if (!count($return)) { return $this->raiseError(1110); } return $return; } public function getServices() { return $this->getAllServices(); } public function getAllServices() { if (!isset($this->allServices) || is_null($this->allServices)) { $services = $this->getOnlineServices(); if (defined(ANDR_SERV_MUST_BRON) && (ANDR_SERV_MUST_BRON == 1) && (count($this->getServiceMustBron(false)) != 0)) { return $this->raiseError(1204); } if (defined(ANDR_SERV_TYPE_MUST_BRON) && (ANDR_SERV_TYPE_MUST_BRON == 1) && (count($this->getServiceTypeMustBron(false)) != 0)) { return $this->raiseError(1205); } $this->allServices = $services; } return $this->allServices; } public function getServiceMustBron($used = null) { $this->_getServiceMustBron(); if (!is_null($used)) { $return = array(); foreach ($this->_serviceMustBron as $key => $val) { if (($used == false && !isset($val['used'])) || (isset($val['used']) && $val['used'] == $used)) { $return[$key] = $val; } } return $return; } return $this->_serviceMustBron; } protected function _isServiceRequired($serviceInc) { $smb = $this->getServiceMustBron(); if (array_key_exists($serviceInc, $smb)) { $this->_serviceMustBron[$serviceInc]['used'] = true; return true; } else { return false; } } public function getServiceTypeMustBron($used = null) { $this->_getServiceTypeMustBron(); if (!is_null($used)) { $return = array(); foreach ($this->_serviceTypeMustBron as $key => $val) { if (($used == false && !isset($val['used']) && !$val['Conditional']) || (isset($val['used']) && $val['used'] == $used)) { $return[$key] = $val; } } return $return; } return $this->_serviceTypeMustBron; } protected function _isServiceTypeRequired($serviceTypeInc) { $stmb = $this->getServiceTypeMustBron(); if (array_key_exists($serviceTypeInc, $stmb)) { $this->_serviceTypeMustBron[$serviceTypeInc]['used'] = true; return true; } else { return false; } } public function getInsure() { return $this->getAllInsures(); } public function getReservation() { if (!$res = $this->bron()) { return $res; } if (is_null($res['Claim'])) { return $this->raiseError(3000, array($res['Price'], $res['CurrencyAlias'])); } else { return $res; } } public function calcReservation() { $this->setVar('save', 0); return $this->bron(); } public function checkReservation() { $this->setVar('save', 0); $this->setVar('strict_check', true); return $this->bron(); } public function bron() { $calcWithPromo = !$this->getVar('save') && $this->getVar('promoCode'); if (($guid = $this->getVar('guid')) && !$calcWithPromo) { if ($reservation = $this->checkClaimGuid($guid)) { $return = $this->_bron_result($reservation); $return = $this->_money($return); return $return; } } try { $this->getPacketInfo(); if (!$res = $this->_checkPeopleForBron()) { return $res; } if (!$res = $this->_checkHotelForBron()) { return $res; } if (!$res = $this->_checkFreightForBron()) { return $res; } if (!$res = $this->_checkServiceForBron()) { return $res; } if (!$res = $this->_checkInsureForBron()) { return $res; } if (!$res = $this->_checkVisaForBron()) { return $res; } if (!$res = $this->_checkInfantForBron()) { return $res; } $return = $this->_bron(); } catch (Exception $e) { switch (get_class($e)) { case 'Samo_People_Exception': case 'Samo_Buyer_Exception': $errors = $e->getErrors(); $msg = array(); foreach ($errors as $error => $fields) { $msg[] = $error; } $errorMessage = implode(", ", $msg); return $this->raiseError(1400, array($errorMessage)); case 'Bron_Exception': return $this->raiseError(1400, array($e->getMessage())); case 'Samo_Exception': return $this->raiseError(1113); default: throw $e; } } return $return; } protected function _sortFreightsByDirection($varName = 'freights') { $return = $this->getVar($varName); usort( $return, function ($a, $b) { if ($a['RouteIndex'] == $b['RouteIndex']) { return 0; } return ($a['RouteIndex'] < $b['RouteIndex']) ? -1 : 1; } ); $this->setVar(array($varName => $return)); return $return; } protected function _procTestClaimInternal() { $INTERNAL_TEST_CLAIM = defined('PROC_TESTCLAIM_INTERNEL') ? PROC_TESTCLAIM_INTERNEL : ''; return $INTERNAL_TEST_CLAIM; } protected function _checkPeopleForBron($varName = 'peoples') { if ($this->_checkPeopleIsSet($varName)) { $peoples = $this->getVar($varName); $_packetinfo = array( 'PeopleCount' => 0, 'Adult' => 0, 'Child' => 0, 'Infant' => 0, ); $_additional = 0; foreach ($peoples as $people) { switch ($people['HUMAN']) { case 'INF': $_packetinfo['Infant']++; break; case 'CHD': $_packetinfo['Child']++; break; default: $_packetinfo['Adult']++; break; } $_packetinfo['PeopleCount']++; if ($people['ADDITIONAL'] == 1) { $_additional++; } } $packetinfo = $this->getPacketInfo(); if (($_additional > 1) || ($packetinfo['PeopleCount'] > $_packetinfo['PeopleCount']) || ($_packetinfo['PeopleCount'] > $packetinfo['PeopleCount'] + 1)) { return $this->raiseError(1309); } if ($_packetinfo['PeopleCount'] > $packetinfo['PeopleCount']) { if ($_packetinfo['Infant'] == $packetinfo['Infant']) { return $this->raiseError(1309); } if (!$_additional) { foreach (array_reverse($peoples, true) as $key => $people) { if ($people['HUMAN'] == 'INF') { $peoples[$key]['ADDITIONAL'] = 1; $_additional++; break; } } } } $this->setVar($varName, $peoples); } return true; } protected function _checkPeopleIsSet($varName = 'peoples') { if (false === ($res = $this->issetVar($varName))) { $peoples = array(); $packetinfo = $this->getPacketInfo(); for ($i = 0; $i < $packetinfo['PeopleCount']; $i++) { $peoples[$i] = array('ID' => $i, 'ADDITIONAL' => 0, 'INFANT_PLACE' => 0); } $this->setVar($varName, $peoples); } return $res; } protected function _checkHotelForBron($varName = 'hotels') { if ($this->_checkHotelIsSet($varName)) { $return = array(); $_hotels = $this->getHotel(); foreach ($this->getVar($varName) as $key => $val) { $check = false; foreach ($_hotels as $_hotel) { if (($_hotel['inc'] == $val['inc']) && ($_hotel['DateBeg']->eq($val['DateBeg'])) && ($_hotel['DateEnd']->eq($val['DateEnd'])) ) { $check = true; break; } } if ($check) { $val = array_merge($val, $_hotel); $return[] = $val; } else { return $this->raiseError(1304, array($val['inc'])); } } $return = $this->_appendPeoplesMulti($return); $this->setVar($varName, $return); } return true; } protected function _checkHotelIsSet($varName = 'hotels') { if (false === ($res = $this->issetVar($varName))) { $return = $this->getHotel(); $return = $this->_appendPeoplesMulti($return); $this->setVar($varName, $return); } return $res; } protected function _checkFreightForBron($varName = 'freights') { if ($this->_checkFreightIsSet($varName)) { $return = array(); $this->_sortFreightsByDirection($varName); foreach ($this->getVar($varName) as $key => $val) { if (isset($val['External']) && $val['External']) { $return[] = $val; continue; } $_freights = $this->_getFreight($val['RouteIndex']); $check = false; foreach ($_freights as $_freight) { if (($_freight['inc'] == $val['inc']) && ($_freight['OnlineClass'] == $val['OnlineClass']) && ($_freight['DateBeg']->eq($val['DateBeg'])) && ($_freight['DateEnd']->eq($val['DateEnd'])) ) { $check = true; break; } } if ($check) { $val = array_merge($val, $_freight); if ($val['RouteIndex'] == 0) { $this->_freightIn = $val; } $return[] = $val; } else { return $this->raiseError(1305, array($val['inc'])); } } $return = $this->_appendPeoplesMulti($return); $this->setVar($varName, $return); } return true; } protected function _checkFreightIsSet($varName = 'freights') { if (false === ($res = $this->issetVar($varName))) { $return = $this->getAllFreights(); if ($return) { $return = $return[0]; $return = $this->_appendPeoplesMulti($return); } $this->setVar($varName, $return); } return $res; } protected function _checkServiceForBron($varName = 'services') { if ($this->_checkServiceIsSet($varName)) { $return = array(); $_services = $this->getServices(); foreach ($this->getVar($varName) as $key => $val) { $check = false; if (isset($val['uid'])) { foreach ($_services as $_service) { if ($_service['uid'] == $val['uid']) { $val['error'] = $_service['error']; if ($_service['error'] == 0) { $check = true; break; } } } } if (!$check) { foreach ($_services as $_service) { if (($_service['inc'] == $val['inc']) && ($_service['DateBeg']->eq($val['DateBeg'])) && ($_service['DateEnd']->eq($val['DateEnd'])) ) { $val['error'] = $_service['error']; if ($_service['error'] == 0) { $check = true; break; } } } } if (!$check) { $_buffer = (isset($val['Name']) ? $val['Name'] : 'unknown') . ' ' . getDateXml($val['DateBeg']) . ' - ' . getDateXml($val['DateEnd']) . ' [' . $val['uid'] . ']'; return $this->raiseError(1306, array($_buffer)); } $return[] = array_merge($val, $_service); } $return = $this->_appendPeoplesMulti($return); $this->setVar($varName, $return); } return true; } protected function _checkServiceIsSet($varName = 'services') { if (false === ($res = $this->issetVar($varName))) { $return = $this->getPacketServices(); $return = $this->_appendPeoplesMulti($return); $this->setVar($varName, $return); } return $res; } protected function _checkInsureForBron($varName = 'insures') { $return = array(); if ($this->issetVar($varName)) { $_insures = $this->getAllInsures(); foreach ($this->getVar($varName) as $key => $val) { $check = false; foreach ($_insures as $_insure) { if ($_insure['inc'] == $val['inc']) { $check = true; break; } } if ($check) { $return[$key] = array_merge($val, $_insure); } else { return $this->raiseError(1307, array($val['inc'])); } } } else { foreach ($this->getAllInsures() as $_insure) { if ($_insure['Packet'] || $_insure['Required']) { $return[] = $_insure; } } } foreach ($return as $key => $val) { $return[$key] = $this->_appendPeoples($val); } $this->setVar($varName, $return); return true; } protected function _checkVisaForBron($varName = 'visas') { $return = array(); if ($this->issetVar($varName)) { $_visas = $this->getVisa(); foreach ($this->getVar($varName) as $key => $val) { if ($val['inc'] == 0) { return $this->raiseError(1207); } $check = false; foreach ($_visas as $_visa) { if ($_visa['inc'] == $val['inc']) { $check = true; break; } } if ($check) { $return[$key] = array_merge($val, $_visa); } else { return $this->raiseError(1308, array($val['inc'])); } } } else { foreach ($this->getVisa() as $_visa) { if (($_visa['Packet'] || $_visa['Required']) && ($_visa['inc'])) { $return[] = $_visa; } } } foreach ($return as $key => $val) { $return[$key] = $this->_appendPeoples($val); } $this->setVar($varName, $return); return true; } protected function _appendPeoplesMulti($rows, $varName = 'peoples') { foreach ($rows as $key => $row) { $row = $this->_appendPeoples($row, $varName); $rows[$key] = $row; } return $rows; } protected function _appendPeoples(&$row, $varName = 'peoples') { if (!array_key_exists($varName, $row)) { $peoples = array(); $this->_checkPeopleIsSet($varName); foreach ($this->getVar($varName) as $people) { $peoples[] = $people['ID']; } $row[$varName] = $peoples; } return $row; } protected function setClaimGuid($guid, $new_guid) { if ($guid != $new_guid) { $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_andr_claim_SetGuid', [ 'Guid' => $guid, 'New_Guid' => $new_guid, ], true ); } return true; } protected function _money($row) { if (!isset($row['Cost'])) { $row['Cost'] = $row['Price'] * (100 - $row['TotalCommission']) / 100; } $row['money'][] = array( 'CurrencyInc' => $row['Currency'], 'CurrencyAlias' => $row['CurrencyAlias'], 'Catalog' => $row['Price'], 'Price' => $row['Price'], 'Amount' => $row['Cost'], 'CostForCommiss' => $row['Price'], 'rateex' => 1, ); $rates = $this->currencyRates(); if (isset($rates[$row['Currency']]) && isset($rates[$row['Currency']][CURRENCYINC]) && ($rate = $rates[$row['Currency']][CURRENCYINC])) { $row['money'][] = array( 'CurrencyInc' => CURRENCYINC, 'CurrencyAlias' => $rates[CURRENCYINC]['Name'], 'Catalog' => ($row['Price'] != floor($row['Price'])) ? round($row['Price'] * $rate, 2) : round($row['Price'] * $rate, 0), 'Price' => ($row['Price'] != floor($row['Price'])) ? round($row['Price'] * $rate, 2) : round($row['Price'] * $rate, 0), 'Amount' => ($row['Cost'] != floor($row['Cost'])) ? round($row['Cost'] * $rate, 2) : round($row['Cost'] * $rate, 0), 'CostForCommiss' => ($row['Price'] != floor($row['Price'])) ? round($row['Price'] * $rate, 2) : round($row['Price'] * $rate, 0), 'rateex' => $rate, ); } else { $row['money'][] = reset($row['money']); } return $row; } protected function _reservationGUID($reservation) { if (isset($reservation['guid'])) { return $reservation['guid']; } elseif (isset($reservation['Guid'])) { return $reservation['Guid']; } else { $sql = $this->_db->formatExec('<OFFICEDB>.dbo.up_andr_claim_GetGuid', ['Inc' => $reservation['Claim']]); return $this->_db->fetchOne($sql); } } protected function checkClaimGuid($guid) { $qres = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_andr_claim_InfoByGuid', [ 'Guid' => $guid, ], true ); if ($this->_db->numRows($qres) != 0) { return $this->_db->fetchRow($qres); } return false; } protected function _ext_tour_note($tour) { return $this->_config->find('tour_note', 'bron_info', null, null, $tour); } protected function _claim_document() { $return = array(); $ADDITIONAL_INFANT = false; $ADDITIONAL_INFANT_ID = null; $SEPARATE_INFANT_PLACE = false; if ($this->issetVar('peoples')) { foreach ($this->getVar('peoples') as $id => $people) { $id = $people['ID']; if ($people['ADDITIONAL'] == 1) { $ADDITIONAL_INFANT = true; $ADDITIONAL_INFANT_ID = $id; if ($people['INFANT_PLACE'] == 1) { $SEPARATE_INFANT_PLACE = true; } } } } $return['hotels'] = array(); if ($this->issetVar('hotels')) { foreach ($this->getVar('hotels') as $key => $row) { if (count($row['peoples']) != 0) { $incOP = 1; $clients = array(); $add_infant = 0; foreach ($row['peoples'] as $peopleID) { $clients[$peopleID] = array('peopleKey' => $peopleID, 'common' => $incOP); if ($ADDITIONAL_INFANT && ($ADDITIONAL_INFANT_ID == $peopleID)) { $add_infant = 1; } } $order = array( 'key' => $row['inc'], 'roomKey' => $row['RoomInc'], 'htplaceKey' => $row['HtPlaceInc'], 'datebeg' => $row['DateBeg'], 'dateend' => $row['DateEnd'], 'count' => 1, 'mealKey' => $row['MealInc'], 'addinfant' => $add_infant, 'routeIndex' => $row['RouteIndex'], 'clients' => $clients, ); $return['hotels'][] = $order; } } } $return['transports'] = array(); if ($this->issetVar('freights')) { foreach ($this->getVar('freights') as $key => $row) { $incOP = 1; if (($ADDITIONAL_INFANT) && (!$SEPARATE_INFANT_PLACE)) { $peopleIDInfant = null; $peopleIDParent = null; foreach ($row['peoples'] as $peopleID) { if ($peopleID == $ADDITIONAL_INFANT_ID) { $peopleIDInfant = $ADDITIONAL_INFANT_ID; } else { if (is_null($peopleIDParent)) { $peopleIDParent = $peopleID; } } } if (!is_null($peopleIDInfant) && !is_null($peopleIDParent)) { $clients = array( $peopleIDParent => array('peopleKey' => $peopleIDParent, 'common' => 1), $peopleIDInfant => array('peopleKey' => $peopleIDInfant, 'common' => 1), ); $order = array( 'key' => $row['inc'], 'classKey' => $row['ClassInc'], 'frplaceKey' => $row['FrPlaceInc'], 'datebeg' => $row['DateBeg'], 'dateend' => $row['DateEnd'], 'count' => 1, 'addinfant' => 1, 'external' => $row['External'], 'partner' => $row['Partner'], 'clients' => $clients, ); $return['transports'][] = $order; $row['peoples'] = array_diff($row['peoples'], array($peopleIDInfant, $peopleIDParent)); } } if (count($row['peoples']) != 0) { $clients = array(); foreach ($row['peoples'] as $peopleID) { $clients[$peopleID] = array('peopleKey' => $peopleID, 'common' => $incOP); $incOP++; } $order = array( 'key' => $row['inc'], 'classKey' => $row['ClassInc'], 'frplaceKey' => $row['FrPlaceInc'], 'datebeg' => $row['DateBeg'], 'dateend' => $row['DateEnd'], 'count' => count($clients), 'addinfant' => 0, 'clients' => $clients, 'external' => $row['External'], 'partner' => $row['Partner'] ); $return['transports'][] = $order; } } } $return['services'] = array(); if ($this->issetVar('services')) { foreach ($this->getVar('services') as $key => $row) { if (count($row['peoples']) != 0) { $incOP = 1; $clients_all = array(); $clients_infant = array(); $add_infant = 0; foreach ($row['peoples'] as $peopleID) { $clients_all[$peopleID] = array('peopleKey' => $peopleID, 'common' => $incOP); $incOP++; if ($ADDITIONAL_INFANT && ($ADDITIONAL_INFANT_ID == $peopleID)) { $add_infant = 1; $clients_infant[$peopleID] = array('peopleKey' => $peopleID, 'common' => $incOP); } } $order = array( 'type' => 'stOther', 'key' => $row['inc'], 'datebeg' => $row['DateBeg'], 'dateend' => $row['DateEnd'], 'count' => ($row['ServiceCategoryInc'] == 6) ? 1 : count($clients_all) - $add_infant, 'addinfant' => ($row['ServiceCategoryInc'] == 6) ? 0 : $add_infant, 'hotelKey' => $row['HotelInc'], 'mealKey' => $row['MealInc'], 'roomKey' => $row['RoomInc'], 'departureTownKey' => $row['SrcTownInc'], 'arrivalTownKey' => $row['TrgTownInc'], 'transportCompanyKey' => $row['AirlineInc'], 'transportKey' => $row['FreightInc'], 'classKey' => $row['ClassInc'], 'routeIndex' => $row['RouteIndex'], 'serviceTypeKey' => $row['ServiceTypeInc'], 'packet' => ($row['Packet']) ? 1 : 0, 'clients' => $row['Packet'] ? $clients_all : (($row['ServiceCategoryInc'] == 6) ? $clients_infant : $clients_all), ); $return['services'][] = $order; } } } if ($this->issetVar('insures')) { foreach ($this->getVar('insures') as $key => $row) { if (count($row['peoples']) != 0) { $incOP = 1; $clients = array(); $add_infant = 0; foreach ($row['peoples'] as $peopleID) { $clients[$peopleID] = array('peopleKey' => $peopleID, 'common' => $incOP); $incOP++; if ($ADDITIONAL_INFANT && ($ADDITIONAL_INFANT_ID == $peopleID)) { $add_infant = 1; } } $order = array( 'type' => 'stInsurance', 'key' => $row['inc'], 'datebeg' => $row['DateBeg'], 'dateend' => $row['DateEnd'], 'count' => count($clients), 'addinfant' => $add_infant, 'clients' => $clients, ); $return['services'][] = $order; } } } if ($this->issetVar('visas')) { foreach ($this->getVar('visas') as $key => $row) { if (count($row['peoples']) != 0) { $incOP = 1; $clients = array(); $add_infant = 0; foreach ($row['peoples'] as $peopleID) { $clients[$peopleID] = array('peopleKey' => $peopleID, 'common' => $incOP); $incOP++; if ($ADDITIONAL_INFANT && ($ADDITIONAL_INFANT_ID == $peopleID)) { $add_infant = 1; } } $order = array( 'type' => 'stVisa', 'key' => $row['inc'], 'datebeg' => $row['DateBeg'], 'dateend' => $row['DateEnd'], 'count' => count($clients), 'addinfant' => $add_infant, 'clients' => $clients, ); $return['services'][] = $order; } } } $return['peoples'] = array(); foreach ($this->getVar('peoples') as $key => $row) { $people = array( 'key' => $row['ID'], 'human' => isset($row['HUMAN']) ? $row['HUMAN'] : null, 'sex' => isset($row['MALE']) ? $row['MALE'] : null, 'name' => isset($row['NAME']) ? $row['NAME'] : null, 'lname' => isset($row['LNAME']) ? $row['LNAME'] : null, 'born' => isset($row['BORN']) ? $row['BORN'] : null, 'bornplaceKey' => isset($row['PLACEBORN']) ? $row['PLACEBORN'] : null, 'pserie' => isset($row['PSERIE']) ? $row['PSERIE'] : null, 'pnumber' => isset($row['PNUMBER']) ? $row['PNUMBER'] : null, 'pexpire' => isset($row['PVALID']) ? $row['PVALID'] : null, 'nationalityKey' => isset($row['NATIONALITY']) ? $row['NATIONALITY'] : null, 'pgiven' => isset($row['PGIVEN']) ? $row['PGIVEN'] : null, 'pgivenorg' => isset($row['PGIVENORG']) ? $row['PGIVENORG'] : null, 'address' => isset($row['ADDRESS']) ? $row['ADDRESS'] : null, 'phone' => isset($row['PHONE']) ? $row['PHONE'] : null, 'email' => isset($row['EMAIL']) ? $row['EMAIL'] : null, 'mobile' => isset($row['MOBILE']) ? $row['MOBILE'] : null, 'vexpire' => isset($row['VEXPIRE']) ? $row['VEXPIRE'] : null, 'bornplaceDetail' => isset($row['PLACEBORNDETAIL']) ? $row['PLACEBORNDETAIL'] : null, 'inn' => isset($row['INN']) ? $row['INN'] : null, ); if ($row['ID'] === $ADDITIONAL_INFANT_ID) { $people['additional'] = true; } $return['peoples'][] = $people; } if ($this->issetVar('buyer')) { $buyer = $this->getVar('buyer'); $return['buyer'] = $buyer; } return $return; } protected function _loadBronClaim($strict_check) { $packet_info = $this->getPacketInfo(); $offer = Samo_Loader::load_object('Bron_Claim', $this->_config, Samo_Loader::load_object('Packet_Info', $this->_config)->load_from_array($packet_info), $strict_check); $offer->cat_claim = $this->getVar('catClaim'); $offer->log_priority = $this->log_priority; $offer->partpass = $this->partner['PartPassInc']; $offer->mediator = $this->_mediator(); $claim_document = $this->_claim_document(); $offer->load_from_array($claim_document); return $offer; } protected function _loadBronClaimByPacket() { if (isset($this->_offer)) { return $this->_offer; } $this->_checkPeopleIsSet(); $this->_checkHotelIsSet(); $this->_checkFreightIsSet(); if ($this->issetVar('services')) { $input_services = $this->unsetVar('services'); } else { $input_services = false; } $this->_checkServiceIsSet(); $offer = $this->_loadBronClaim(0); if (false !== $input_services) { $this->setVar('services', $input_services); } else { $this->unsetVar('services'); } return $this->_offer = $offer; } protected function _checkInfantForBron($varName = 'peoples') { $_additional = 0; if ($peoples = $this->getVar($varName)) { foreach ($peoples as $people) { if ($people['ADDITIONAL'] == 1) { $_additional++; break; } } } if ($_additional) { if (!$this->packetInfo['freeinfant']) { return $this->raiseError(1202); } } return true; } public function getPacketInfo() { if (!isset($this->packetInfo) || is_null($this->packetInfo)) { $packetInfo = Samo_Loader::load_object('Packet_Info', $this->_config); try { $result = $packetInfo->find_by_cat_claim( $this->getVar('catClaim'), $this->partner['Partner'], $this->_internetPartner(), $this->_mediator() ); $packetInfo->checkBronIsPossible(); } catch (Bron_Exception $e) { return $this->raiseError(1401, array($e->getMessage())); } if (!$result) { return $this->raiseError(1108); } else { if (array_key_exists('error', $packetInfo)) { return $this->raiseError(1401, array($packetInfo['error'])); } $this->_checkNewPrice($this->getVar('catClaim'), $packetInfo['Cat_Claim']); $this->setVar('catClaim', $packetInfo['Cat_Claim']); $packetInfo['DateBeg'] = $packetInfo['CheckIn']->copy(); $packetInfo['DateEnd'] = $packetInfo['CheckOut']->copy(); $packetInfo['SpogNote'] = $packetInfo['Note']; $packetInfo['TourNote'] = $this->_ext_tour_note($packetInfo['TourInc']); $packetInfo = $packetInfo->instance(); $packetInfo = $this->_money($packetInfo); $this->packetInfo = $packetInfo; } } return $this->packetInfo; } public function getHotel() { if (!isset($this->packetHotel) || is_null($this->packetHotel)) { $this->packetHotel = array(); $packetInfo = $this->getPacketInfo(); $qres = $this->_exec_getHotel(); if ($this->_db->numRows($qres) != 0) { while (false != ($row = $this->_db->fetchRow($qres))) { $row['inc'] = $row['HotelInc']; if ((isset($row['Commission']) && ($row['Commission'] == 0)) || (isset($row['commission']) && ($row['commission'] == 0))) { $row['Cost'] = $row['Price']; } else { $row['Cost'] = $row['Price'] * (100 - $packetInfo['TotalCommission']) * 0.01; } $this->uid('H', $row); $this->packetHotel[] = $row; } if (false === ($res = $this->checkHotel())) { return $res; } } } return $this->packetHotel; } protected function _exec_getHotel() { return $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_WEB_5_bron_PacketHotel', [ 'Cat_Claim' => $this->getVar('catClaim'), 'UserCode' => $this->internetUser(), ], true ); } protected function _exec_getFreightsInfo() { return $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_WEB_4_bron_PacketFreight', [ 'Cat_Claim' => $this->getVar('catClaim'), 'UserCode' => $this->internetUser(), ], true ); } protected function _sortFreightByPacket($routeIndex, &$freights) { $packetinfo = $this->getPacketInfo(); $_fc = $packetinfo['business']; $routes = $this->getFreightsInfo(); $_fr = array_key_exists('Freight', $routes[$routeIndex]) ? $routes[$routeIndex]['Freight'] : null; $key1 = $key2 = $key3 = $key4 = $key5 = null; foreach ($freights as $key => $val) { if (is_null($key1) && ($_fr == $val['FreightInc']) && ($_fc == $val['OnlineClass']) && (!$val['Request'])) { $key1 = $key; } if (is_null($key2) && ($_fc == $val['OnlineClass']) && (!$val['Request'])) { $key2 = $key; } if (is_null($key3) && (!$val['Request'])) { $key3 = $key; } if (is_null($key4) && ($_fr == $val['FreightInc']) && ($_fc == $val['OnlineClass'])) { $key4 = $key; } if (is_null($key5) && ($_fc == $val['OnlineClass'])) { $key5 = $key; } $freights[$key]['Selected'] = false; } foreach (array($key1, $key2, $key3, $key4, $key5) as $key) { if (!is_null($key)) { break; } } if (is_null($key)) { $freights_incs = array_keys($freights); $key = reset($freights_incs); } $freights[$key]['Selected'] = true; $val = $freights[$key]; unset($freights[$key]); array_unshift($freights, $val); return true; } public function getPacketServices() { if (!isset($this->packetServices) || is_null($this->packetServices)) { $this->packetServices = array(); $qres = $this->_exec_getPacketServices(); if ($this->_db->numRows($qres) != 0) { $services = array(); while ($row = $this->_db->fetchRow($qres)) { $row['inc'] = $row['ServiceInc']; $row['type'] = $this->_fixServiceType($row['ServiceTypeInc']); $row['Packet'] = true; $row['Required'] = ($this->_isServiceRequired($row['ServiceInc']) || $row['Required']); $row['TypeRequired'] = $this->_isServiceTypeRequired($row['ServiceTypeInc']); $this->uid('S', $row); $services[] = $row; } $this->packetServices = $services; } } return $this->packetServices; } protected function _exec_getPacketServices() { return $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_WEB_4_bron_PacketService', [ 'Cat_Claim' => $this->getVar('catClaim'), 'UserCode' => $this->internetUser(), ], true ); } public function getOnlineServices() { if (!isset($this->onlineServices) || is_null($this->onlineServices)) { $this->onlineServices = array(); $offer = $this->_loadBronClaimByPacket(); $services = $offer->available_services(); $save = $this->getVar('save'); $save = ($save) ? 1 : 0; foreach ($services as $key => $row) { if ($row['Input']) { continue; } $row['inc'] = $row['ServiceInc']; $row['type'] = $this->_fixServiceType($row['ServiceTypeInc']); $row['Required'] = ($this->_isServiceRequired($row['ServiceInc']) || ($row['Required'] && !$row['Remove']) || (!$save && $row['Required'] && $row['Remove']) || ($row['Packet'] && !$row['Remove'])); $row['TypeRequired'] = $this->_isServiceTypeRequired($row['ServiceTypeInc']); $this->uid('S', $row); $this->onlineServices[] = $row; } } return $this->onlineServices; } protected function _getServiceMustBron() { if (!isset($this->_serviceMustBron) || is_null($this->_serviceMustBron)) { $this->_serviceMustBron = array(); $qres = $this->_db->exec( ANDR_DB_ONLINE . '.dbo.up_WEB_3_bron_ServMustBron', [ 'Tour' => $this->packetInfo['TourInc'] ], true ); if ($this->_db->numRows($qres) != 0) { while ($row = $this->_db->fetchRow($qres)) { $this->_serviceMustBron[$row['ServiceInc']] = $row; } } } return $this->_serviceMustBron; } protected function _getServiceTypeMustBron() { if (!isset($this->_serviceTypeMustBron) || is_null($this->_serviceTypeMustBron)) { $this->_serviceTypeMustBron = array(); $qres = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_WEB_4_bron_ServTypeMustBron', [ 'Tour' => $this->packetInfo['TourInc'], ], true ); if ($this->_db->numRows($qres) != 0) { while ($row = $this->_db->fetchRow($qres)) { $this->_serviceTypeMustBron[$row['ServiceTypeInc']] = $row; } } } return $this->_serviceTypeMustBron; } public function getTypesInsures() { $types = array(); $insures = $this->getAllInsures(); foreach ($insures as $insure) { $insure_type = $insure['InsureType']; $type = (isset($types[$insure_type])) ? $types[$insure_type] : array( 'InsureTypeName' => $insure['InsureTypeName'], 'InsureTypeLName' => $insure['InsureTypeLName'], 'Required' => 0, 'insures' => array(), ); if ($insure['Required'] && !$insure['Remove']) { $type['Required']++; } $type['insures'][] = $insure; $types[$insure_type] = $type; } foreach ($types as & $type) { if ($type['Required']) { foreach ($type['insures'] as $_insure => $insure) { if (!$insure['Required']) { unset($type['insures'][$_insure]); } } } } return $types; } public function getAllInsures() { if (!isset($this->allInsures) || is_null($this->allInsures)) { $this->allInsures = array(); $save = $this->getVar('save'); $save = ($save) ? 1 : 0; $offer = $this->_loadBronClaimByPacket(); $insures = $offer->available_insures(); if ($insures) { foreach ($insures as $row) { $row['inc'] = $row['InsureInc']; $row['Remove'] = (boolean)$row['Remove']; $row['type'] = 1; $row['Required'] = (($row['Required'] && !$row['Remove']) || (!$save && $row['Required'] && $row['Remove']) || ($row['Packet'] && !$row['Remove'])); $this->uid('I', $row); $this->allInsures[] = $row; } } } return $this->allInsures; } public function getVisa() { $this->packetVisa = array(); $packet_info = $this->getPacketInfo(); $qres = $this->_exec_getVisa(); if ($this->_db->numRows($qres) != 0) { while ($row = $this->_db->fetchRow($qres)) { $row['inc'] = $row['VisaprInc']; $row['type'] = 2; $row['DateBeg'] = clone $packet_info['DateBeg']; $row['DateEnd'] = clone $packet_info['DateEnd']; if ($row['Selected'] == 1) { $row['Packet'] = true; } else { $row['Packet'] = false; } $row['Required'] = false; $this->uid('V', $row); $this->packetVisa[] = $row; } } return $this->packetVisa; } protected function _exec_getVisa() { return $this->_db->exec( '<OFFICEDB>.dbo.up_WEB_5_bron_PacketVisa', [ 'Cat_Claim' => $this->getVar('catClaim'), 'UserCode' => $this->internetUser(), 'Developer' => 0, 'LangId' => Samo_Request::langid(), 'auth_type' => 'person', ], true ); } protected function _bron() { $save = $this->getVar('save'); $save = ($save) ? 1 : 0; $strict_check = $this->getVar('strict_check'); $strict_check = ($strict_check || $save) ? 1 : 0; $offer = $this->_loadBronClaim($strict_check); $offer->guid = $this->getVar('guid'); $offer->note = $this->getVar('note'); $offer->noteclaim = $this->getVar('note'); $errorMessage = ''; $row = array(); $calc_result = $offer->calc_save($save, $row, $errorMessage); if ($calc_result && !$errorMessage) { if ($save) { $return = $this->_bron_result($row); } else { $return = array( 'Claim' => null, 'GUID' => null, 'Status' => null, ); $return['Price'] = round($row['PriceStr'], 2); if (isset($row['SumCommission'])) { $return['Cost'] = round($row['PriceStr'] - $row['SumCommission'], 2); } else { $return['Cost'] = round($row['PriceStr'] * ((100 - $this->packetInfo['TotalCommission']) / 100), 2); } $return['CurrencyAlias'] = $row['Currency_Alias']; $return['Currency'] = $row['Currency']; } $return = $this->_money($return); $this->setVar('claim', $return['Claim']); return $return; } elseif ($errorMessage) { return $this->raiseError(1400, array($errorMessage)); } else { return $this->raiseError(1113); } } public function reloadServices() { $this->_checkFreightForBron(); $services = $this->getTypesServices(); return $services; } public function getFreightsInfo() { if (!isset($this->freightsInfo) || is_null($this->freightsInfo)) { $this->freightsInfo = array(); $qres = $this->_exec_getFreightsInfo(); if ($this->_db->numRows($qres) != 0) { while ($row = $this->_db->fetchRow($qres)) { $row['inc'] = $row['Freight']; $row['ClassInc'] = $row['Class']; $row['FrPlaceInc'] = $row['FrPlace']; $row['FreightInc'] = $row['Freight']; $uid = $this->uid('F', $row); unset($row['inc'], $row['ClassInc'], $row['FrPlaceInc'], $row['FreightInc']); $this->freightsInfo[$row['RouteIndex']] = $row; } $_routes = array_keys($this->freightsInfo); $_first = array_shift($_routes); $_last = array_pop($_routes); unset($_routes); foreach ($this->freightsInfo as $_route => $route) { $this->freightsInfo[$_route]['IsFirst'] = ($_route == $_first); $this->freightsInfo[$_route]['IsLast'] = ($_route == $_last); } } } return $this->freightsInfo; } protected function _getFreight($routeIndex = 0) { if (false == ($packetInfo = $this->getPacketInfo())) { return $packetInfo; } if (false == ($routes = $this->getFreightsInfo())) { return $routes; } $return = array(); if (isset($routes[$routeIndex])) { $freightInInc = null; $freightInOnlineClass = null; if ($routes[$routeIndex]['IsLast']) { if (isset($this->_freightIn)) { $freightInInc = $this->_freightIn['FreightInc']; if (is_array($freightInInc)) { $freightInInc = implode(',', $freightInInc); } } } if (!$routes[$routeIndex]['IsFirst']) { $freightInOnlineClass = isset($this->_freightIn['OnlineClass']) ? $this->_freightIn['OnlineClass'] : null; } $_return = array(); $stoptime = $this->getConfig('FREIGHT_STOPTIME', 'online_config'); $qres = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_WEB_5_bron_FreightOnline', [ 'Cat_Claim' => $this->getVar('catClaim'), 'Tour' => $packetInfo['TourInc'], 'DateBeg' => $routes[$routeIndex]['DateBeg'], 'DateEnd' => $routes[$routeIndex]['DateEnd'], 'Source' => $routes[$routeIndex]['Source'], 'Target' => $routes[$routeIndex]['Target'], 'Spog' => $packetInfo['Spog'], 'RouteIndex' => $routeIndex, 'FreightIn' => $freightInInc, 'Nights' => $packetInfo['Nights'], 'PeopleCount' => $packetInfo['PeopleCount'], 'CrossTour' => $packetInfo['crosstour'], 'Business' => $freightInOnlineClass, 'StopTime' => (null !== $stoptime) ? intval($stoptime) : null, 'UserCode' => $this->internetUser(), 'PacketClass' => $routes[$routeIndex]['Class'], ], true ); while ($row = $this->_db->fetchRow($qres)) { $_return[] = $row; } $__return = array(); foreach ($_return as $row) { if (is_null($freightInOnlineClass) || ($freightInOnlineClass == $row['OnlineClass'])) { $row['FreightInc'] = $row['Inc']; $row['FreightName'] = $row['Name']; $row['FreightLName'] = $row['LName']; $row['Request'] = (isset($row['place_status']) && ($row['place_status'] == 1)) ? 0 : 1; $row['inc'] = $row['FreightInc']; $row['Type'] = $row['TransportCodeInc']; $row['RouteIndex'] = $routeIndex; if (!array_key_exists('DateBeg', $row)) { $row['DateBeg'] = clone $routes[$routeIndex]['DateBeg']; } if (!array_key_exists('DateEnd', $row)) { $row['DateEnd'] = clone $routes[$routeIndex]['DateEnd']; } $row['SrcTimeDelta'] = $row['delay']; $calc_delta = ((intval(str_replace(':', '', $row['TrgTime'])) - intval(str_replace(':', '', $row['SrcTime']))) < 0) ? 1 : 0; $delta = (int)$row['delay'] + (int)$row['days']; $row['TrgTimeDelta'] = ($delta) ? $delta : $calc_delta; $uid = $this->uid('F', $row) . '_' . $row['FreightIn']; if (!in_array($uid, $__return)) { $__return[] = $uid; $return[] = $row; } } } if (count($return)) { $this->_sortFreightByPacket($routeIndex, $return); } } return $return; } protected function _getAllFreights($routeIndex = 0) { if (isset($this->allFreights)) { return $this->allFreights; } if (false == ($routes = $this->getFreightsInfo())) { return $routes; } $return = array(); if (count($routes)) { $_routes = array_keys($routes); $_first = array_shift($_routes); $_last = array_pop($_routes); unset($_routes); foreach ($routes as $_route => $route) { $route['freights'] = $freights = $this->_getFreight($_route); $allRoutesFreights[$_route] = $route; if (!count($freights)) { return array(); } if ($_first == $_route) { $freights_in = array(); foreach ($freights as $_freight => $freight) { if (!in_array($freight['FreightInc'], $freights_in)) { $freights_in[] = $freight['FreightInc']; } } $this->_freightIn = array('FreightInc' => implode(',', $freights_in)); } if (count($return)) { $tmp = $return; $return = array(); foreach ($tmp as $f) { foreach ($freights as $freight) { if (($_route != $_last) || (($f[$_first]['FreightInc'] == $freight['FreightIn']) && ($f[$_first]['OnlineClass'] == $freight['OnlineClass'])) ) { $f[$_route] = $freight; $return[] = $f; } } } } else { foreach ($freights as $freight) { $return[] = array($_route => $freight); } } } if (count($return)) { $this->allFreights = $return; foreach ($allRoutesFreights as $_route => $route) { $freights = $route['freights']; foreach ($freights as $_freight => $freight) { if ($_route == $_last) { if (($freight['FreightIn'] != $allRoutesFreights[$_first]['freights'][0]['FreightInc']) || ($freight['OnlineClass'] != $allRoutesFreights[$_first]['freights'][0]['OnlineClass']) ) { unset($freights[$_freight]); continue; } } } $freights = array_values($freights); foreach ($freights as $_freight => $freight) { if ($freight['uid'] == $allRoutesFreights[$_route]['uid']) { unset($freights[$_freight]); array_unshift($freights, $freight); break; } } $allRoutesFreights[$_route]['freights'] = array_values($freights); } $this->allRoutesFreights = $allRoutesFreights; } } return $return; } public function getAllRoutesFreights() { if (isset($this->allRoutesFreights)) { return $this->allRoutesFreights; } if (false == ($routes = $this->getFreightsInfo())) { return $routes; } if (!count($routes)) { return array(); } if (count($this->_getAllFreights())) { return $this->allRoutesFreights; } return $this->raiseError(1110); } public function getTypesServices() { if (false == ($services = $this->getServices())) { return $services; } $return = array(); foreach ($services as $service) { if (!isset($return[$service['ServiceTypeInc']])) { $return[$service['ServiceTypeInc']] = array( 'ServiceTypeInc' => $service['ServiceTypeInc'], 'ServiceTypeName' => $service['ServiceTypeName'], 'ServiceTypeLName' => $service['ServiceTypeLName'], 'Required' => false, 'services' => array(), ); } $return[$service['ServiceTypeInc']]['services'][] = $service; } if (false === ($required_types = $this->getServiceTypeMustBron(true))) { return $required_types; } foreach ($required_types as $required_type) { if (isset($return[$required_type['ServiceTypeInc']])) { $return[$required_type['ServiceTypeInc']]['Required'] = true; } } return $return; } protected function _bron_result($row) { if ($guid = $this->getVar('guid')) { $this->setClaimGuid($this->_reservationGUID($row), $guid); } else { $guid = $this->_reservationGUID($row); } $return = array( 'Claim' => $row['Claim'], 'GUID' => $guid, 'Status' => (isset($row['Confirmed']) && $row['Confirmed'] == 1) ? 4 : 1, ); $cost = $this->getClaimPrice($row['Claim']); if (count($cost)) { $cost = reset($cost); $return['Price'] = round($cost['Catalog'], 2); $return['Cost'] = round($cost['Amount'], 2); $return['CurrencyAlias'] = $cost['CurrencyAlias']; $return['Currency'] = $cost['CurrencyInc']; } return $return; } } 