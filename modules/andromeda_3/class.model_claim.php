<?php
 class model_claim extends model_andr { public function claimCancel() { if (false !== ($claim = $this->cancelClaim())) { return $this->raiseError(2001, array($claim['Inc'])); } else { return $claim; } } public function cancelClaim() { if ($this->_enableCancelClaim()) { $qres = $this->_execGetClaimByGuid(); if ($this->_db->numRows($qres) != 0) { $claim = $this->_db->fetchRow($qres); if (!in_array($claim['Status'], [Samo_Claim::STATUS_CANCELED, Samo_Claim::STATUS_PENALTY, Samo_Claim::STATUS_PAID_PENALTY, Samo_Claim::STATUS_CALCULATED])) { if ($claim['RequestCancelDate']->is_null()) { if (false != ($cancel_days = $this->getConfig('CANCEL_DAYS', 'cancel_claim'))) { $cancel_days = (int)$cancel_days; } else { $cancel_days = 3; } if ($claim['DateBeg']->diff() > $cancel_days) { $this->_execCancelClaim(); return $this->getClaimByGuid(); } else { return $this->raiseError(1115, array($cancel_days)); } } else { return $this->raiseError(1117, array($claim['RequestCancelDate'])); } } else { return $this->raiseError(1116, array($claim['Inc'])); } } else { return $this->raiseError(1111); } } else { return $this->raiseError(1114); } } protected function _enableCancelClaim() { return $this->isModuleInstall('cancel_claim'); } public function getClaimInfo() { return $this->getClaimByGuid(); } public function getClaimPayment() { if ($info = $this->getClaimInfo()) { $res = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_andr_claim_Payments', [ 'Claim' => $this->getVar('claim'), ], true ); return $this->_db->fetchAll($res); } return $this->raiseError(1111); } public function getClaims() { if (!is_null($this->getVar('PAGE')) && is_null($this->getVar('RPP'))) { $this->setVar('RPP', (defined('CL_REFER_REC_ON_PAGE') ? CL_REFER_REC_ON_PAGE : 10)); } $mediator = $this->_mediator(); if ($this->getVar('SELF')) { $this->setVar('MEDIATOR', ($mediator) ? $mediator : 0); } $qres = $this->_execGetClaims(); if ($this->_db->numRows($qres) == 0) { return $this->raiseError(1111); } $claims = array(); while ($row = $this->_db->fetchRow($qres)) { $_status = false; $_pstatus = false; $this->_claim_status($row, $_status, $_pstatus); if (!isset($row['TotalCommission'])) { $row['TotalCommission'] = $row['Commission'] + $row['EarlyComission']; } if (!isset($row['SpogFullNumber'])) { $row['SpogFullNumber'] = $row['SpoFullNumber']; } $row['status'] = $_status; $row['paystatus'] = $_pstatus; $row['CanCancel'] = $this->_canCancel($row); $row['self'] = ($mediator && ($row['MediatorInc'] == $mediator)); $claims[] = $row; if (isset($row['pages']) && !isset($this->claimsPageInfo)) { $this->claimsPageInfo = array( 'Page' => $this->getVar('PAGE'), 'PerPage' => $this->getVar('RPP'), 'NextPage' => (($this->getVar('PAGE') < $row['pages']) ? 1 : 0), 'Pages' => $row['pages'], ); } } return $claims; } public function getClaimsPageInfo() { if (isset($this->claimsPageInfo)) { return $this->claimsPageInfo; } else { return null; } } protected function _canCancel($claim) { if ( !in_array($claim['Status'], [Samo_Claim::STATUS_CANCELED, Samo_Claim::STATUS_PENALTY, Samo_Claim::STATUS_PAID_PENALTY, Samo_Claim::STATUS_CALCULATED]) && ($claim['RequestCancelDate']->is_null()) && ($claim['DateBeg']->gt()) ) { return 1; } else { return 0; } } public function getPeoples() { $poples = array(); $qres = $this->_execGetPeoples(); if ($this->_db->numRows($qres) != 0) { while ($row = $this->_db->fetchRow($qres)) { if (!isset($row['PlaceOfBornName'])) { $row['PlaceOfBornName'] = $row['PlaceOfBorn']; } if (!isset($row['Faxes'])) { $row['Faxes'] = $row['Phones']; } $row['Index'] = $id = $row['index']; unset($row['index']); $poples[$id] = $row; } } return $poples; } public function getHotels() { $return = array(); $qres = $this->_execGetHotels(); if ($this->_db->numRows($qres) != 0) { while ($row = $this->_db->fetchRow($qres)) { $row['inc'] = $row['HotelInc']; $row['peoples'] = $this->_getPeoplesByOrder($row['OrderInc']); $this->uid('H', $row); $return = $this->_merge_order($return, $row); } } return $return; } public function getFreights() { $return = array(); $qres = $this->_execGetFreights(); if ($this->_db->numRows($qres) != 0) { while ($row = $this->_db->fetchRow($qres)) { $row['inc'] = $row['FreightInc']; $row['Type'] = $row['TransportCodeInc']; $row['peoples'] = $this->_getPeoplesByOrder($row['OrderInc']); if (!array_key_exists('RouteIndex', $row)) { $row['RouteIndex'] = count($return); } $this->uid('F', $row); $return = $this->_merge_order($return, $row); } } return $return; } public function getExternalFreights($class, $inf, $onlyStart = false, $guid = false) { $class = $class ? $class : 'Econom'; $inf = (int)$inf; $packetInfo = Samo_Loader::load_object('Packet_Info', $this->_config); $packetInfo->find_by_cat_claim( $this->getVar('catClaim'), $this->partner['Partner'], $this->_internetPartner(), $this->_mediator() ); $gds = Samo_Loader::load_object('Bron_GDS_Freight', $this->_config, $packetInfo, 0); $params = [ 'args' => [ 'query' => [ 'class' => $class, 'inf' => $inf ] ] ]; $spf = isset($packetInfo['FreightExternal']) ? $packetInfo['FreightExternal'] == Bron_Model::FREIGHT_REGULAR_ONLY : false; $freights = null; try { if ($guid || $gds->doSearch($params)) { if ($guid) { $gds->guid($guid); } if ($onlyStart) { return $gds->guid(); } $filter = $filterData = []; $currency = false; if ($spf) { $freights = $gds->getFreightsList($filter, $filterData, $currency); } else { $freights = $gds->getFreightsByRoute(Bron_Model::FREIGHT_ROUTE_DIRECT); } } } catch (GDS_Exception $e) { throw new Samo_Exception($e->getMessage(), 1700); } $rows = []; if ($freights) { $oId = false; foreach ($freights as $offer => $ff) { if (!$oId && $spf) { $oId = $offer; } foreach ($ff as $f) { $first = $f[0]; $last = $f[count($f) - 1]; $tuda = !$first['route_index']; $row = [ 'DateBeg' => !$tuda ? $first['DateEnd'] : $first['DateBeg'], 'DateEnd' => !$tuda ? $first['DateEnd'] : $first['DateBeg'], 'FreightInc' => $first['Inc'], 'FreightName' => $first['Name'], 'FreightLName' => $first['Name'], 'ClassInc' => $first['ClassInc'], 'FrPlaceInc' => $first['FrPlaceInc'], 'ClassName' => $first['class'], 'ClassLName' => $first['class'], 'Type' => 1, 'External' => 1, 'Selected' => $oId && ($oId == $offer), 'OfferId' => $offer, 'Partner' => $first['Partner'], 'RouteIndex' => $first['route_index'], 'OnlineClass' => $first['OnlineClass'], 'SrcPortName' => $first['DepartureAirportName'], 'SrcPortLName' => $first['DepartureAirportName'], 'TrgPortName' => $last['ArrivalAirportName'], 'TrgPortLName' => $last['ArrivalAirportName'], 'SrcTime' => $first['depart_time'], 'TrgTime' => $last['arrival_time'], 'Details' => $f ]; $row['uid'] = $this->uid('F', $row); $rows = $this->_merge_order($rows, $row); } } } return $rows; } public function getServices() { $return = array(); $qres = $this->_execGetServices(); if ($this->_db->numRows($qres) != 0) { while ($row = $this->_db->fetchRow($qres)) { $row['inc'] = $row['ServiceInc']; $row['type'] = $this->_fixServiceType($row['ServiceTypeInc']); $row['peoples'] = $this->_getPeoplesByOrder($row['OrderInc']); $this->uid('S', $row); $return = $this->_merge_order($return, $row); } } return $return; } public function getInsures() { $return = array(); $qres = $this->_execGetInsures(); if ($this->_db->numRows($qres) != 0) { while ($row = $this->_db->fetchRow($qres)) { $row['inc'] = $row['InsureInc']; if ($row['DateBeg']->is_null()) { if ($claimInfo = $this->getClaimInfo()) { $row['DateBeg'] = clone $claimInfo['DateBeg']; } else { $row['DateBeg'] = Samo_Datetime::null(); } } $row['type'] = 1; $row['peoples'] = $this->_getPeoplesByOrder($row['OrderInc']); $this->uid('I', $row); $return = $this->_merge_order($return, $row); } } return $return; } public function getVisas() { $return = array(); $qres = $this->_execGetVisas(); if ($this->_db->numRows($qres) != 0) { while ($row = $this->_db->fetchRow($qres)) { $row['inc'] = isset($row['VisaprInc']) ? $row['VisaprInc'] : $row['VisaInc']; $row['type'] = 2; $row['peoples'] = $this->_getPeoplesByOrder($row['OrderInc']); $this->uid('V', $row); $return = $this->_merge_order($return, $row); } } return $return; } protected function _claim_status(&$row, &$status = null, &$pstatus = null) { $status = 1; $pstatus = 1; if ($row['Confirmed'] == 1) { $status = 4; } else { if (isset($row['ConfirmedDate']) && (!$row['ConfirmedDate']->is_null())) { $status = 3; } else { $status = 2; } } switch ($row['Status']) { case 1: $pstatus = 3; break; case 2: if (isset($row['Partpayment']) && $row['Partpayment'] == 1) { $pstatus = 2; } else { $pstatus = 1; } break; case 3: $pstatus = 1; $status = 5; break; case 4: if (isset($row['Partpayment']) && $row['Partpayment'] == 1) { $pstatus = 5; } else { $pstatus = 4; } $status = 5; break; case 5: $pstatus = 6; $status = 5; break; case 6: $pstatus = 2; break; default: break; } if (($status == 2) && (@$row['Unread'] == 1)) { $status = 1; } if (($status != 5) && (!$row['RequestCancelDate']->is_null())) { $status = 6; } $row['status'] = $status; $row['paystatus'] = $pstatus; } public function getPhysBuyer() { return $this->getBuyer(); } public function getBuyer() { $return = null; $qres = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_andr_claim_PhysBuyer', [ 'Claim' => $this->getVar('claim'), ], true ); if ($this->_db->numRows($qres) != 0) { $return = $this->_db->fetchRow($qres); } return $return; } public function getAllClaims() { if ($mediator = $this->_mediator()) { $qres = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_andr_claim_All', [ 'Mediator' => $mediator, 'CDateBeg' => $this->getVar('cdatebeg'), 'CDateEnd' => $this->getVar('cdateend'), ], true ); if ($this->_db->numRows($qres) != 0) { $return = array(); while ($row = $this->_db->fetchRow($qres)) { $return[] = $row; } return $return; } } return $this->raiseError(1111); } protected function _merge_order($orders, $new_order) { $exists = false; foreach ($orders as $key => $order) { if ($order['uid'] == $new_order['uid']) { $exists = true; break; } } if ($exists) { $order = $orders[$key]; if (isset($order['peoples']) && isset($new_order['peoples'])) { $common = 0; foreach ($order['peoples'] as $_p => $p) { if ($p['Common'] > $common) { $common = $p['Common']; } } foreach ($new_order['peoples'] as $_p => $p) { $new_order['peoples'][$_p]['Common'] += $common; } $orders[$key]['PCount'] = $order['PCount'] + $new_order['PCount']; $orders[$key]['peoples'] = array_merge($order['peoples'], $new_order['peoples']); } } else { $orders[] = $new_order; } return $orders; } protected function _tourist_edit_enabled() { $enabled = parent::_tourist_edit_enabled(); if ($enabled && isset($this->claimInfo)) { $enabled = !in_array(intval($this->claimInfo['Status']), [Samo_Claim::STATUS_CANCELED, Samo_Claim::STATUS_PENALTY, Samo_Claim::STATUS_PAID_PENALTY, Samo_Claim::STATUS_CALCULATED]); } return $enabled; } protected function _execCancelClaim() { return $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_WEB_3_claim_Cancel', [ 'Claim' => $this->getVar('claim'), 'UserCode' => $this->internetUser(), 'Ip' => $_SERVER['REMOTE_ADDR'], 'Partpass' => $this->partner['PartPassInc'], ], true ); } protected function _execGetClaimByGuid() { return $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_andr_claim_ListByGuid', [ 'Guid' => $this->getVar('guid'), 'Claim' => $this->getVar('claim'), 'Partner' => (($this->partner) ? $this->partner['Partner'] : null), 'PartPass' => (($this->partner) ? $this->partner['PartPassInc'] : null), 'UserCode' => $this->internetUser(), ], true ); } protected function _execGetClaims() { $claimtype = $this->getVar('CLAIMTYPE'); $paytype = ($claimtype == 4) ? 4 : null; $claimtype = ($claimtype == 4) ? 1 : $claimtype; return $qres = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_WEB_5_Claim_List', [ 'Partner' => $this->partner['Partner'], 'PartnerGroup' => $this->partner['PARTNERGROUP'], 'ClaimType' => $claimtype, 'PayType' => $paytype, 'PartnerClaim' => null, 'ClaimBeg' => $this->getVar('CLAIMBEG'), 'ClaimEnd' => $this->getVar('CLAIMEND'), 'DateBeg' => $this->getVar('DATEBEG'), 'DateEnd' => $this->getVar('DATEEND'), 'FIO' => $this->getVar('FIO'), 'Partpass' => $this->partner['PartPassInc'], 'Rec_On_Page' => $this->getVar('RPP'), 'Page' => $this->getVar('PAGE'), 'ClaimList' => $this->getVar('CLAIMLIST'), 'Mediator' => $this->getVar('MEDIATOR'), 'UserCode' => $this->internetUser(), ], true ); } protected function _execGetPeoples() { return $qres = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_WEB_4_claim_People', [ 'Claim' => $this->getVar('claim'), 'UserCode' => $this->internetUser(), ], true ); } protected function _execGetHotels() { return $qres = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_WEB_3_claim_Hotel', [ 'Claim' => $this->getVar('claim'), ], true ); } protected function _execGetFreights() { return $qres = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_WEB_3_claim_Freight', [ 'Claim' => $this->getVar('claim'), ], true ); } protected function _execGetServices() { return $qres = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_WEB_3_claim_Service', [ 'Claim' => $this->getVar('claim') ], true ); } protected function _execGetInsures() { return $qres = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_WEB_4_claim_Insure', [ 'Claim' => $this->getVar('claim') ], true ); } protected function _execGetVisas() { return $qres = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_WEB_3_claim_Visa', [ 'Claim' => $this->getVar('claim') ], true ); } protected function _getPeoplesByOrder($order) { $peoples = array(); $qres = $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.dbo.up_andr_claim_PeopleByOrder', [ 'order' => $order, ], true ); if ($this->_db->numRows($qres) != 0) { while ($row = $this->_db->fetchRow($qres)) { $id = $row['Index']; $peoples[$id] = $row; } } return $peoples; } public function getClaimByGuid() { if (!isset($this->claimInfo)) { $qres = $this->_execGetClaimByGuid(); if ($this->_db->numRows($qres) != 0) { $row = $this->_db->fetchRow($qres); if (isset($row['ErStatus'])) { if ($row['ErStatus'] == 1) { return $this->raiseError(1000); } elseif ($row['ErStatus'] == 2) { return $this->raiseError(1111); } } $this->_authPartner($row['PartnerInc']); if (!isset($row['TotalCommission'])) { $row['TotalCommission'] = $row['Commission'] + $row['EarlyComission']; } if (!isset($row['SpogFullNumber'])) { $row['SpogFullNumber'] = $row['SpoFullNumber']; } $this->_claim_status($row, $_status, $_pstatus); $row['status'] = $_status; $row['paystatus'] = $_pstatus; } else { return $this->raiseError(1111); } $money = $this->getClaimPrice(); if (!$money || !count($money)) { return $this->raiseError(1112); } $row['money'] = $money; $row = array_merge($row, reset($money)); if (!is_null($buyer = $this->getBuyer())) { $row['PhysBuyer'] = $buyer; } $this->claimInfo = $row; } return $this->claimInfo; } protected function _execGetClaimStatus() { return $this->_db->exec( ANDR_SQLSERVER . '.' . ANDR_DB_OFFICE . '.[dbo].[up_andr_claim_Status]', [ 'Reservations' => $this->getVar('RESERVATIONS') ], true ); } public function getClaimStatus() { $return = array(); $qres = $this->_execGetClaimStatus(); if (0 != $this->_db->numRows($qres)) { while ($row = $this->_db->fetchRow($qres)) { $this->_claim_status($row); $return[] = $row; } } return $return; } public function claimEdit() { $max_matrix = function ($matrix) { $max_set = function ($value, $i, $j) { return array('value' => $value, 'i' => $i, 'j' => $j); }; $max_val = function ($max) { return $max['value']; }; $max_i = function ($max) { return $max['i']; }; $max_j = function ($max) { return $max['j']; }; $search_max = function ($matrix) use ($max_set, $max_val) { $max = $max_set(-1, null, null); foreach ($matrix as $i => $array) { foreach ($array as $j => $value) { if ($value > $max_val($max)) { $max = $max_set($value, $i, $j); } } } return $max; }; $crop_matrix = function (& $matrix, $i, $j) { unset($matrix[$i]); if (!count($matrix)) { return false; } foreach ($matrix as & $array) { unset($array[$j]); if (!count($array)) { return false; } } return true; }; $return = array(); do { $max = $search_max($matrix); $return[] = array($max_i($max), $max_j($max)); } while ($crop_matrix($matrix, $max_i($max), $max_j($max))); return $return; }; $claim = $this->getVar('claim'); $claimInfo = $this->getClaimInfo(); $packetInfo = Samo_Loader::load_object('Packet_Info', $this->_config); $packetInfo->load_from_claim($claimInfo, array()); $_peoples = $this->getPeoples(); $__peoples = array(); foreach ($_peoples as $_people) { $__people = Samo_Loader::load_object('Samo_People', $this->_config, $packetInfo); $__peoples[] = $__people->init($_people['Inc']); foreach (array('BORN', 'PVALID', 'PGIVEN', 'VEXPIRE') as $field) { $value = $__people->{$field}; $__people->{$field} = $value->not_null() ? $value->format('sql') : null; } } $peoples = $this->getVar('peoples'); $matrix = array(); foreach ($peoples as $p => $people) { foreach ($__peoples as $__p => $__people) { $w = 0; foreach ($people as $field => $value) { $__value = isset($__people->{$field}) ? $__people->{$field} : null; if ($value && (Samo_People::BLANK !== $value) && ($__value == $value)) { $w++; } } $matrix[$p][$__p] = $w; } } $relations = $max_matrix($matrix); foreach ($relations as $rel) { $p = $rel[0]; $__p = $rel[1]; $__people = $__peoples[$__p]; $peoples[$p]['Inc'] = $__people->inc; } $error = array(); $samo = Samo_Loader::load_object('Samo_Environment'); $_GET['CLAIM'] = $claim; try { foreach ($peoples as $people) { try { try { $samo->invoke_method('edit_tourist', 'save', array($people['Inc'], $people)); } catch (Samo_People_Exception $e) { throw new Andr_Exception(1123, array(isset($people['LNAME']) ? $people['LNAME'] : '???', implode(', ', array_keys($e->getErrors())))); } } catch (Andr_Exception $e) { $error[] = $e->getMessage(); } } } catch (Database_Exception $e) { throw $e; } catch (Samo_Exception $e) { $error[] = $e->getMessage(); } unset($samo); if ($error) { throw new Andr_Exception(1122, array(implode(PHP_EOL, $error))); } return true; } } 