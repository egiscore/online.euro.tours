<?php
 class model_search extends model_andr { private $methods = array( 'getState' => array('getSTATES', 1100), 'getTownFrom' => array('getTOWNFROMS', 1101), 'getTour' => array('getTOURS', null), 'getTown' => array('getTOWNS', 1102), 'getGroupStar' => array('getSTARS', 1103), 'getGroupMeal' => array('getMEALS', 1104), 'getHotel' => array('getHOTELS', 1105), 'getCheckIn' => array('getCHECKIN', 1106), 'getHotelType' => array('getHOTEL_TYPES', null), 'getPacketType' => array('getPACKET_TYPES', null), 'getCurrency' => array('getCURRENCIES', null), 'getPrograms' => array('getPROGRAMS', null), 'getPrice' => array('getPRICES', 1107), 'getNights' => array('getNIGHTS', null), 'getPriceDynamics' => array('getPRICE_DYNAMICS', null), ); public function __call($name, $arguments) { $return = false; if (isset($this->methods[$name])) { list($method, $error) = $this->methods[$name]; $return = $this->_api('Search_Api')->$method( isset($arguments[0]) ? $arguments[0] : array(), isset($arguments[1]) ? $arguments[1] : null ); if (!$return) { if (!is_null($error)) { return $this->raiseError($error); } $return = array(); } } return $return; } public function getSTATS($params = array()) { $price_dynamics = $this->getPriceDynamics($params, false); $params['CHECKIN'] = $price_dynamics['datebeg']; $params['CHECKOUT'] = $price_dynamics['dateout']; $params['SPOINC'] = $price_dynamics['spog']; $params['TOURINC'] = $price_dynamics['tourKey']; $params['NIGHTS'] = $price_dynamics['nights']; $freight_monitor = $this->_api('Freight_Monitor_Api')->getFreightsRoundTrip($params); return [ 'info' => array_diff_key($price_dynamics, array_fill_keys(['prices', 'hotel_monitor'], true)), 'priceDynamics' => $this->_convertPriceCurrency($price_dynamics['prices']), 'hotelAvailability' => $price_dynamics['hotel_monitor'], 'transportAvailability' => $freight_monitor, ]; } public function getPrices($params = array()) { $params['FORM'] = $this->_form; if ($return = $this->getPrice($params, false)) { if (isset($return['error'])) { if ($return['error'] == 2) { return $this->raiseError(1121); } } elseif (!empty($return['prices'])) { $this->_convertPriceCurrency($return['prices']); return $return; } } return $this->raiseError(1107); } protected function _convertPriceCurrency(& $prices) { foreach ($prices as & $price) { foreach ($prices as & $price) { if ($price['currencyKey'] != $price['convertedCurrencyKey']) { if (isset($price['priceOld']) && $price['priceOld'] > $price['price']) { $value = $price['convertedPriceOld']; $value = explode(' ', $value); $price['priceOld'] = reset($value); } $value = $price['convertedPrice']; $value = explode(' ', $value); $price['price'] = reset($value); $price['currency'] = end($value); $price['currencyKey'] = $price['convertedCurrencyKey']; } }; } return $prices; } protected function _mealList($townFrom, $state, $mealGroupList, $mealList) { if (is_null($mealList)) { if (is_null($mealGroupList)) { $mealList = null; } else { if (!is_array($mealGroupList)) { $_mealGroupList = explode(',', $mealGroupList); } $mealGroupList = array(); foreach ($_mealGroupList as $idx => $val) { if (intval($val)) { $mealGroupList[$val] = $val; } } if (!count($mealGroupList)) { $mealList = -1; } elseif (count($mealGroupList) == 1) { $mealGroupList = implode(',', $mealGroupList); if (false === ($mealList = $this->_getMealByGroupMeal($mealGroupList))) { return $mealList; } } else { if (false === ($_mealGroupList = $this->getGroupMeal($state, $townFrom))) { return $_mealGroupList; } if (!array_diff_key($_mealGroupList, $mealGroupList)) { $mealList = null; } else { $mealGroupList = implode(',', $mealGroupList); if (false === ($mealList = $this->_getMealByGroupMeal($mealGroupList))) { return $mealList; } } } } } else { if (!is_array($mealList)) { $mealList = explode(',', $mealList); } foreach ($mealList as $idx => $val) { if (!intval($val)) { unset($mealList[$idx]); } } if (count($mealList)) { $mealList = implode(',', $mealList); } else { $mealList = -1; } } return $mealList; } } 