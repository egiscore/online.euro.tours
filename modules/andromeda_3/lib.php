<?php
 function editName($name) { $name = trim($name); if (defined('CONFIG_FIO_SLASH')) { $fio_delimeter = CONFIG_FIO_SLASH; } elseif (defined('FIO_DELIMETER')) { $fio_delimeter = FIO_DELIMETER; } if (isset($fio_delimeter)) { if (strpos($name, $fio_delimeter) === false) { if (strpos($name, ' ') !== false) { $name = implode($fio_delimeter, explode(' ', $name, 2)); } } } return strtoupper($name); } function __loadPort($version) { $ports = __portMap(); if (isset($ports[$version])) { $wp = $ports[$version]; } else { $wp = array_pop($ports); } return Samo_Loader::load_object($wp); } function __loadModel($name) { $model = 'model_' . $name; return $model; } function __loadMessages() { $messages = array(); $LANG = Samo_Request::lang(); include ANDR_ROOT . 'lang/messages_' . $LANG . '.php'; return $messages[$LANG]; } function dbErrorHandler($error_obj) { throw new SoapFault(strConvert($error_obj->getMessage()), 'Server', 'SQL', strConvert($error_obj->getDebugInfo())); } function strConvert($str) { return mb_convert_encoding($str, 'utf-8', 'cp1251'); } function strDeConvert($str) { return mb_convert_encoding($str, 'cp1251', 'utf-8'); } function getDate112($date) { if ($date) { return Samo_Datetime::parse($date)->format('sql'); } else { return null; } } function getDateXml($date) { if ($date) { return Samo_Datetime::parse($date)->format('xml'); } else { return null; } } function getDateTimeXml($date) { if ($date) { return Samo_Datetime::parse($date)->format('xmldatetime'); } else { return null; } } function parseDate($str) { if (trim($str) == '') { return null; } if (false !== ($_tmp = explode(' ', $str, 2))) { $_date = array_shift($_tmp); $_time = (count($_tmp)) ? array_shift($_tmp) : false; if (false !== (preg_match('~(\d{2})[/\.](\d{2})[/\.](\d{4})~', $_date, $matches)) && count($matches) == 4) { $dateTime = array( 'year' => $matches[3], 'month' => $matches[2], 'day' => $matches[1], ); } elseif (false !== (preg_match('~(\d{4})[-]?(\d{2})[-]?(\d{2})~', $_date, $matches)) && count($matches) == 4) { $dateTime = array( 'year' => $matches[1], 'month' => $matches[2], 'day' => $matches[3], ); } else { $dateTime = array( 'year' => null, 'month' => null, 'day' => null, ); $_time = $_date; $_date = false; } if ((false !== $_time) && (false !== preg_match('~(\d{2})[:](\d{2})[:]?(\d{2})?~', $_time, $matches)) && count($matches) > 2) { $dateTime['hour'] = $matches[1]; $dateTime['minute'] = $matches[2]; $dateTime['second'] = isset($matches[3]) ? $matches[3] : null; } else { $dateTime['hour'] = null; $dateTime['minute'] = null; $dateTime['second'] = null; $_time = false; } } if ($_date || $_time) { return mktime($dateTime['hour'], $dateTime['minute'], $dateTime['second'], $dateTime['month'], $dateTime['day'], $dateTime['year']); } else { return null; } } function connect_db($TOWNFROM = null, $STATE = null, $temporary = false) { if (!function_exists('db_connect')) { include_once ANDR_FOLDER_SITE . 'includes/db.php'; } $db = db_connect($TOWNFROM, $STATE); if (!$temporary) { $SERVER = Samo_Registry::get('ServerSettings'); if (!defined('ANDR_DB_ONLINE')) { define('ANDR_DB_ONLINE', $SERVER['onlineSamoDB']); define('ANDR_DB_CATALOG', $SERVER['onlineCatalogDB']); define('ANDR_DB_OFFICE', $SERVER['officeSamoDB']); define('ANDR_SQLSERVER', $SERVER['officeSamoAlias']); } } return $db; } function andrVSprintF($format, $args) { $matches = array(); $c = preg_match_all('~%~', preg_replace('~%{2,}~', '_', $format), $matches) - count($args); if ($c > 0) { $args = array_merge($args, array_fill(count($args), $c, '????')); } return vsprintf($format, $args); } function nameorlname($str) { return $str . 'Name'; } if (!function_exists('ifs')) { function ifs(...$args) { foreach ($args as $arg) { if ($ret = $arg) { break; } } return $ret; } } 