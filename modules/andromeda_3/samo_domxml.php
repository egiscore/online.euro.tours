<?php
 class Samo_DomDocument extends DOMDocument { private $xpath_worker = null; private $id = ''; public function __construct($version = null, $encoding = null) { $this->id = uniqid(); return parent::__construct($version, $encoding); } public function EvalXPath($expression, $contextNode = null) { if (!$this->xpath_worker) { $this->xpath_worker = new DOMXPath($this); } if (is_null($contextNode)) { $elements_list = $this->xpath_worker->evaluate($expression); } else { $elements_list = $this->xpath_worker->evaluate($expression, $contextNode); } if (is_object($elements_list)) { $count = $elements_list->length; $return = array(); if ($count > 0) { for ($i = 0; $i < $count; $i++) { $return[$i] = $elements_list->item($i); } } } else { $return = $elements_list; } return $return; } } function NewDomDocument($version = '1.0', $encoding = 'utf-8') { return new Samo_DomDocument($version, $encoding); } function LoadXMLFile($file) { $doc1 = NewDomDocument(); $doc1->load($file); return $doc1; } function LoadXML($xml_source, $doc = 'null') { $doc1 = NewDomDocument(); $doc1->loadXML($xml_source); return $doc1; } function SaveXML($doc) { return $doc->saveXML(); } function documentElement($doc) { return $doc->documentElement; } function getElementsByTagName($element, $name) { $elements_list = $element->getElementsByTagName($name); $count = $elements_list->length; $arr = array(); if ($count > 0) { for ($i = 0; $i < $count; $i++) { $arr[$i] = $elements_list->item($i); } } return $arr; } function nodeType($element) { return $element->nodeType; } function nodeName($element) { return $element->nodeName; } function nodeLocalName($element) { return $element->localName; } function nodeValue($element) { return $element->nodeValue; } function hasChildNodes($element) { return $element->hasChildNodes(); } function countChildNodes($element) { if (hasChildNodes($element)) { $childs = childNodes($element); return $childs->length; } else { return 0; } } function childNodes($element) { return $element->childNodes; } function firstChild($element) { return $element->firstChild; } function hasAttributes($element) { return $element->hasAttributes(); } function attributes($element) { $attributes_list = $element->attributes; $count = $attributes_list->length; $arr = array(); if ($count > 0) { for ($i = 0; $i < $count; $i++) { $attribute = $attributes_list->item($i); $arr[$attribute->name] = $attribute->value; } } return $arr; } function getAttribute($element, $name) { return $element->getAttribute($name); } function setAttribute($element, $name, $value) { return $element->setAttribute($name, $value); } function removeAttribute($element, $name) { return $element->removeAttribute($name); } function nextSibling($element) { return $element->nextSibling; } function createElementNs($doc, $name, $ns = false, $nsp = false) { return (!$ns) ? $doc->createElement($name) : (($nsp) ? $doc->createElementNS($ns, $nsp . ':' . $name) : $doc->createElementNS($ns, $name)); } function createElement($doc, $name) { return createElementNs($doc, $name); } function createTextNode($doc, $value) { return $doc->createTextNode($value); } function appendChild($parent, $child) { return $parent->appendChild($child); } function getContent($element) { $content = ''; if (hasChildNodes($element)) { $el_child = firstChild($element); if (nodeType($el_child) == XML_TEXT_NODE) { $content = nodeValue($el_child); } else { $content = $el_child; } } return $content; } function attrName($attr) { if (nodeType($attr) != XML_ATTRIBUTE_NODE) { return false; } return $attr->name; } function attrValue($attr) { if (nodeType($attr) != XML_ATTRIBUTE_NODE) { return false; } return $attr->value; } 