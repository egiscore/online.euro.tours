<?php
 include_once 'lib.php'; include_once 'include.php'; class ANDR_service { public $nameSpace = 'http://www.samo.ru/xml'; public $securityNS = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'; public $__dispatch_map = array(); private $user = null; private $agentInfo = false; public $data = false; public $portVersion = false; public $port = null; protected $_security_error = '"Security" header not found'; public function __construct() { $this->__dispatch_map['WORK'] = array( 'in' => array('data' => 'hexBinary'), 'out' => array('return' => 'hexBinary'), ); } public function security($data) { $UsernameToken = @$data->UsernameToken; if (!$UsernameToken) { return $this->_security_error = "Incorrect format (UsernameToken not found)."; } $Username = @$UsernameToken->Username; if (!$Username) { return $this->_security_error = "Incorrect format (Username not found)."; } $PasswordDigest = @$UsernameToken->Password; if (!$PasswordDigest) { return $this->_security_error = "Incorrect format (PasswordDigest not found)."; } $Nonce = @$UsernameToken->Nonce; if (!$Nonce) { return $this->_security_error = "Incorrect format (Nonce not found)."; } $Nonce = base64_decode($Nonce); $Created = @$UsernameToken->Created; if (!$Created) { return $this->_security_error = "Incorrect format (Created not found)."; } if (!preg_match("/([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z)/i", $Created, $matches)) { return $this->_security_error = "Incorrect format (Created not valid UTC-date)."; } $createdClear = str_replace(array('T', 'Z'), array(' ', ''), $Created); $db = connect_db(null, null, true); $qres = $db->exec( OFFICE_SQLSERVER . '.' . OFFICEDB . '.[dbo].[up_WEB_3_oauth_ws]', [ 'Client_id' => $Username, 'Nonce' => base64_encode($Nonce), 'Created' => $createdClear, ], true ); if ($db->numRows($qres) > 0) { $row = $db->fetchRow($qres); if ($row['Status'] == 1) { $return = $this->_security_error = "Client Authorization Error 5"; } elseif ($row['Status'] == 2) { $return = $this->_security_error = "Client Authorization Error 6"; } else { $PasswordDigest = base64_decode($PasswordDigest); if (strlen($PasswordDigest) != 40) { $PasswordDigest = bin2hex($PasswordDigest); } $Sample_PasswordDigest = sha1($Nonce . $Created . $row['ClientSecret']); if ($PasswordDigest != $Sample_PasswordDigest) { $return = $this->_security_error = "Client Authorization Error 3"; } else { $return = $this->_security_error = false; $this->user = $row; } } } else { $return = $this->_security_error = "Client Authorization Error 2"; } $db->disconnect(); return $return; } public function agentinfo($data) { $this->agentInfo = $data; $session_id = false; if (defined('ANDR_SESSION_NAME')) { session_name(ANDR_SESSION_NAME); $session_id = @$data->session; if (!$session_id) { @session_start(); $session_id = @session_id(); } else { @session_id($session_id); @session_start(); } } $this->portVersion = $this->parseVersion($data->version); return $session_id; } private function parseVersion($version) { $v = explode('.', $version); if (count($v) == 1) { return array_shift($v) . '.0'; } else { return array_shift($v) . '.' . array_shift($v); } } public function WORK($data) { if ($this->_security_error) { throw new SoapFault(0, $this->_security_error); } $this->data = $data; if (DEBUG) { ini_set('display_errors', 1); error_reporting(E_ALL); } if ('3.0' !== $this->portVersion) { throw new Andr_Exception(1298); } $this->port = __loadPort($this->portVersion); $res = $this->port->handle($this->data, $this->agentInfo, $this->user); return $res; } } define('ANDR_WSDL_URL', 'andromeda.wsdl'); if (isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] == 'POST') { ini_set("soap.wsdl_cache_dir", SMARTY_COMPILE_DIR); ini_set("soap.wsdl_cache_enabled", APPMODE == 'dev' ? 0 : 1); $server = new SoapServer(ANDR_WSDL_URL); try { $service = new ANDR_service(); $server->setObject($service); $server->handle(); } catch (Exception $e) { $code = $e->getCode(); $message = $e->getMessage(); $trace = (DEBUG) ? PHP_EOL . $e->getTraceAsString() . PHP_EOL : null; switch (get_class($e)) { case 'Andr_Exception': break; case 'DatabaseServer_Exception': $code = 1; $message = (DEBUG) ? '[Database_Exception] ' . $e->getMessage() . ': ' . $e->getError() . ' [' . $e->getSql() . ']' : $e->getMessage(); break; default: $code = 0; $message = 'Unknown error'; break; } $message = strConvert($message); $trace = strConvert($trace); header('SoapFault: ' . $message); $server->fault($code, $message, 'PHP', $trace); } } else { $location = Samo_Request::scheme() . '://' . Samo_Request::host() . WWWROOT . 'modules/andromeda_3/service.php?' . $_SERVER['QUERY_STRING']; $wsdl = file_get_contents(ANDR_WSDL_URL); $wsdl = preg_replace('~(<soap:address location=")([^"]*)("\/>)~', '$1' . htmlspecialchars($location) . '$3', $wsdl); header('Content-Type: text/xml'); echo $wsdl; } 