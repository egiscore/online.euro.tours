<?php
 class Anketa_Model extends Samo_Claim { private $_states = array(); private $_cache_properties = array(); protected $messages = null; public $fields_anketa = array( 'system_fields' => array( 'X1' => array('Field' => 'X1', 'Value' => '', 'Editable' => 0), 'X2' => array('Field' => 'X2', 'Value' => '', 'Editable' => 0), 'X3' => array('Field' => 'X3', 'Value' => '', 'Editable' => 0), 'X4' => array('Field' => 'X4', 'Value' => '', 'Editable' => 0), 'X5' => array('Field' => 'X5', 'Value' => '', 'Editable' => 0), 'X6' => array('Field' => 'X6', 'Value' => '', 'Editable' => 0), 'X7' => array('Field' => 'X7', 'Value' => '', 'Editable' => 0), 'X8' => array('Field' => 'X8', 'Value' => '', 'Editable' => 0), 'X9' => array('Field' => 'X9', 'Value' => '', 'Editable' => 0), 'X10' => array('Field' => 'X10', 'Value' => '', 'Editable' => 0), 'X11' => array('Field' => 'X11', 'Value' => '', 'Editable' => 0), 'X12' => array('Field' => 'X12', 'Value' => '', 'Editable' => 0), 'X13' => array('Field' => 'X13', 'Value' => '', 'Editable' => 0), 'X14' => array('Field' => 'X14', 'Value' => '', 'Editable' => 0), 'X15' => array('Field' => 'X15', 'Value' => '', 'Editable' => 0), 'X16' => array('Field' => 'X16', 'Value' => '', 'Editable' => 0), 'X17' => array('Field' => 'X17', 'Value' => '', 'Editable' => 0), 'X18' => array('Field' => 'X18', 'Value' => '', 'Editable' => 0), 'X19' => array('Field' => 'X19', 'Value' => '', 'Editable' => 0), 'X20' => array('Field' => 'X20', 'Value' => '', 'Editable' => 0), ) ); public $print_anketa = false; public $print_anketa_spain_mow_v1 = true; public $print_anketa_greece_mow = true; public $print_anketa_uae_mow = true; public $width_max = 400; public $height_max = 355; public $print_anketa_samo = true; public $print_anketa_india_mow_v1 = false; public $print_anketa_spain_ua_v1 = true; public $print_anketa_cyprus_ua_v1 = true; public $print_anketa_andorra_ua_v1 = true; public $print_anketa_uae_ua_v1 = true; public $print_anketa_italy_mow_v1 = true; public $print_anketa_cyprus_mow_v1 = true; public $print_anketa_greece_mow_v1 = true; public $print_anketa_uae_mow_v1 = false; public $print_anketa_india_ua_v1 = true; public $print_anketa_bulgaria_mow_v1 = true; public $print_anketa_greece_ua_v1 = true; public $print_anketa_morocco_ua_v1 = true; public $print_anketa_czech_mow_v1 = true; public $print_anketa_france_mow_v1 = true; public $print_anketa_malta_mow_v1 = true; public $print_anketa_china_mow_v1 = true; public $print_anketa_austria_mow_v1 = true; public $print_anketa_croatia_mow_v1 = true; protected $no_photo = 'public/pict/no_photo.jpg'; public $OccupationIndex_mow_v1 = null; public $country_mow_v1 = null; public $MaritalStatus_mow_v1 = null; public $Entries_mow_v1 = null; public $WhoIsPaying_mow_v1 = null; public $shengen_countries_mow_v1 = null; public $Visa_center_mow_v1 = null; public $shengen_year_france_mow_v1 = null; public $ResidencePermit = null; public function construct($claim = null, $people = null, $order = null) { parent::construct($claim, $people, $order); $this->messages = Samo_Registry::get('messages'); $routes = Samo_Registry::get('routes'); $this->defaults['fields'] = array(); $this->defaults['anketa'] = ''; $this->defaults['people_info'] = array(); $this->defaults['VISA_INPUTED'] = Samo_Utils::ifs(Samo_Request::intval('VISA_INPUTED'), 0); $this->defaults['EXTERNAL'] = Samo_Utils::ifs(Samo_Request::intval('EXTERNAL'), 0); $this->defaults['form_anketa_action'] = $routes['anketa']['url'] . ((strpos($routes['anketa']['url'], '?')) ? '&' : '?') . 'CLAIM=' . $this->defaults['CLAIM'] . '&PEOPLE=' . $this->defaults['PEOPLE']; $this->defaults['enable_save'] = false; if (!isset($_SESSION['anketa'][$this->defaults['PEOPLE']])) { $_SESSION['anketa'][$this->defaults['PEOPLE']] = array(); } } public function is_enabled() { $this->claimInfo(); $this->get_template_anketa(); $this->get_anketa_enable(); $this->peopleInfo(); $edit_anketa_before_fulltakendoc = intval($this->getConfig('EDIT_ANKETA_BEFORE_FULLTAKENDOC')); $this->defaults['warn_about_visaforminputed'] = !$edit_anketa_before_fulltakendoc; $visaforminputed = $this->defaults['people_info']['visaforminputed']['value']->not_null(); $fulltakendoc = $this->defaults['people_info']['fulltakendoc']['value']; $this->defaults['enable_save'] = (($edit_anketa_before_fulltakendoc && !$fulltakendoc) || (!$edit_anketa_before_fulltakendoc && !$visaforminputed && !$fulltakendoc)); } public function SetValue_samo() { $this->get_anketa_fields(); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Field'] == 'BirthCountry') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } } } unset($fgroup, $field); return true; } public function GetValue_samo() { $this->SetValue_samo(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], ['LastLName', 'FirstLName', 'BornDate', 'sex', 'Passport', 'PGivenDate', 'PValid',] ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if (in_array($field['Field'], array('BirthCountry'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->country_samo, $value); } elseif ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->MaritalStatus_samo, $value); } } } } $fields['DatePlace'] = 'Moscow ' . Samo_Datetime::today(); $this->Refield($fields); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function get_name_by_inc($arr, $inc) { $tmp_inc = 'inc'; $tmp_name = 'name'; if (!in_array($this->defaults['anketa'], ['greece_mow', 'uae_mow', 'greece_pegas_com_ua'])) { $tmp_inc = 'Inc'; $tmp_name = 'Name'; } foreach ($arr as $val) { if ($val[$tmp_inc] == $inc) { return $val[$tmp_name]; } } return '???'; } public function get_local_field_value_by_inc($arr, $inc) { foreach ($arr as $val) { if ($val['Inc'] == $inc) { return $val['local_field_value']; } } return '???'; } public function putAnketa() { if ($this->defaults['people_info']['visaforminputed']['value']->not_null() && !$this->defaults['enable_save']) { throw new Samo_Exception('Анкета уже сохранена.'); } if (empty($this->_cache_properties)) { $this->get_Picture_Properties(); } if ($this->defaults['VISA_INPUTED'] == 1) { foreach ($this->defaults['photo'] as $type => $row) { $file_path = $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['url_small']; if ($file_path == $this->no_photo || !file_exists(_ROOT . $file_path) || !is_file(_ROOT . $file_path)) { throw new Samo_Exception(sprintf($this->messages['NO_PHOTO'], $row['Name'])); } } } $method = 'GetValue_' . $this->defaults['anketa']; $form_str = $this->$method(); $form_str = 'anketa_version=anketa_' . $this->defaults['anketa'] . (($form_str == '') ? '' : chr(13) . chr(10) . $form_str); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_4_anketa_UpdateInfo', [ 'people' => $this->defaults['PEOPLE'], 'form_str' => $form_str, 'UserCode' => $this->internet_user(), ] ); $anketa_edited = $this->db->fetchOne($sql); $anketa_picture_edited = false; foreach ($this->defaults['photo'] as $type => $row) { $file_path = _ROOT . $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['url_small']; if ($file_path == _ROOT . $this->no_photo) { continue; } if (!file_exists($file_path) || !is_file($file_path)) { throw new Samo_Exception(sprintf($this->messages['NO_PHOTO'], $row['Name'])); } $orig_path = _ROOT . $this->file_path($type, 'orig', false); if (!file_exists($orig_path)) { $this->getPicture($type, false); } if (!file_exists($orig_path) || (md5_file($orig_path) !== md5_file($file_path))) { $file_content = file_get_contents($file_path); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_anketa_set_photo_content', array( 'Claim' => $this->defaults['CLAIM'], 'People' => $this->defaults['PEOPLE'], 'Name' => $row['Name'], 'Type' => $row['Name'], 'Doctype' => $row['Inc'], 'MimeType' => $this->content_type(_ROOT . $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['url_small']), 'FileName' => basename($_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['url_small']), 'Content' => '0x' . bin2hex($file_content), 'IP' => Samo_Request::remote_addr(), 'partpass' => $this->getPartPassInc(), 'UserCode' => $this->internet_user(), ) ); $this->db->query($sql); if (file_exists($orig_path)) { unlink($orig_path); } rename($file_path, $orig_path); $anketa_picture_edited = true; } } if ($this->defaults['VISA_INPUTED'] == 1 && ($this->defaults['people_info']['visaforminputed']['value']->is_null() || $anketa_edited || $anketa_picture_edited)) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_4_anketa_UpdatePeople', [ 'people' => $this->defaults['PEOPLE'], 'claim' => $this->defaults['CLAIM'], 'visa_inputed' => $this->defaults['VISA_INPUTED'], 'UserCode' => $this->internet_user(), ] ); $this->db->query($sql); } return true; } public function getAnketa($save = false) { $method = 'SetValue_' . $this->defaults['anketa']; $this->$method(); foreach ($this->fields_anketa as & $fgroup) { foreach ($fgroup as & $field) { if (isset($field['Variants']) && count($field['Variants']) > 5) { usort($field['Variants'], array($this, 'strcmp')); } } } $return = array(); $this->get_Picture_Properties(); foreach ($this->defaults['photo'] as $type => $row) { $this->getPicture($type, $save); } return $return; } public function getPicture($type, $save) { chdir(_ROOT); $result = $doctype = null; if (empty($this->_cache_properties)) { $this->get_Picture_Properties(); } if (isset($this->defaults['photo'][$type])) { $file_path = $this->file_path($type, 'orig', false); if (file_exists(_ROOT . $file_path)) { $result = $file_path; } else { $file_content = null; $this->db->rawMode(true); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_anketa_get_photo_content', [ 'People' => $this->defaults['PEOPLE'], 'Doctype' => $this->defaults['photo'][$type]['Inc'], ] ); if ($row = $this->db->fetchRow($sql)) { $file_content = $row['Content']; } $this->db->rawMode(false); if (!empty($file_content)) { if (Samo_Utils::writeFile(_ROOT . $file_path, $file_content)) { $result = $file_path; } } } } if ($files = glob($this->file_path($type, 'new', '*'))) { $time = 0; foreach ($files as $file_path) { $filemtime = filemtime($file_path); if ($filemtime > $time) { $time = $filemtime; $result = $file_path; } } } if (is_null($result)) { if ($save) { if ($this->defaults['people_info']['visaforminputed']['value'] != '') { throw new Samo_Exception(sprintf($this->messages['NO_PHOTO'], isset($this->_cache_properties[$type]) ? $this->_cache_properties[$type]['Name'] : '???'), 5); } return false; } else { $result = $this->no_photo; } } $size = getimagesize(_ROOT . $result); $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['url_small'] = $result; $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['width'] = $size[0]; $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['height'] = $size[1]; $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['maxwidth'] = $size[0]; $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['maxheight'] = $size[1]; $this->defaults['photo'][$type]['url_small'] = $result; $this->Calc_small_size($type, _ROOT . $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['url_small']); return true; } public function Calc_small_size($type, $file_path) { if (!file_exists($file_path)) { throw new Samo_Exception(sprintf($this->messages['NO_PHOTO'], isset($this->_cache_properties[$type]) ? $this->_cache_properties[$type]['Name'] : '???'), 6); } list($orig_width, $orig_height) = @getimagesize($file_path); if ($this->width_max / $this->height_max < $orig_width / $orig_height) { $mashtab = $this->width_max / $orig_width; } else { $mashtab = $this->height_max / $orig_height; } $this->defaults['photo'][$type]['tpl_width'] = ceil($orig_width * $mashtab); $this->defaults['photo'][$type]['tpl_height'] = ceil($orig_height * $mashtab); if (isset($_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['width'])) { $this->defaults['photo'][$type]['width'] = $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['width']; $this->defaults['photo'][$type]['height'] = $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['height']; } return true; } public function get_Picture_Properties($type = null) { if (empty($this->_cache_properties)) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_anketa_get_photo_properties', [ 'People' => $this->defaults['PEOPLE'] ] ); if (false !== ($res = $this->db->query($sql))) { while (false !== ($row = $this->db->fetchRow($res))) { foreach (array('Width', 'Height', 'MinSize', 'MaxSize') as $prop) { if ($row[$prop] == false || $row[$prop] < 0) { throw new Samo_Exception(sprintf($this->messages['ANKETA_PHOTO_NOT_PROPERTIES'], $row['Name']), 3); } } $this->_cache_properties[$row['Alias']] = $row; } } } if (!is_null($type)) { if (isset($this->_cache_properties[$type])) { $this->defaults['photo'][$type] = $this->_cache_properties[$type]; $this->defaults['photo'][$type]['minwidth'] = $this->_cache_properties[$type]['Width']; $this->defaults['photo'][$type]['minheight'] = $this->_cache_properties[$type]['Height']; $this->defaults['photo'][$type]['minsize'] = $this->_cache_properties[$type]['MinSize']; $this->defaults['photo'][$type]['maxsize'] = $this->_cache_properties[$type]['MaxSize']; if (!isset($_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['minwidth'])) { $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['minwidth'] = $this->defaults['photo'][$type]['minwidth']; $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['minheight'] = $this->defaults['photo'][$type]['minheight']; $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['minsize'] = $this->defaults['photo'][$type]['minsize']; $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['maxsize'] = $this->defaults['photo'][$type]['maxsize']; } } else { throw new Samo_Exception(sprintf($this->messages['ANKETA_PHOTO_NOT_PROPERTIES'], '???'), 3); } } else { $this->defaults['photo'] = $this->_cache_properties; } return true; } private function getStates_value($defaultState) { if (!$this->_states) { $sql = $this->db->formatExec( '<ONLINEDB>.dbo.up_WEB_3_people_StateBorn', [ 'UserCode' => $this->internet_user(), ] ); $this->_states = ($states = $this->db->fetchAll($sql)) ? $states : array(); } foreach ($this->_states as $state) { if ($state['StateInc'] == $defaultState) { return $state['StateLName']; } } return ''; } public function peopleInfo($people = null) { $people = Samo_Utils::ifs($people, $this->defaults['PEOPLE']); if ($people) { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_people_GetInfo', ['People' => $people]); if (false !== ($row = $this->db->fetchRow($sql))) { if (strpos($row['Name'], FIO_DELIMETER)) { $row['LastName'] = substr($row['Name'], 0, strpos($row['Name'], FIO_DELIMETER)); $row['FirstName'] = substr($row['Name'], strpos($row['Name'], FIO_DELIMETER) + strlen(FIO_DELIMETER)); $row['LastLName'] = substr($row['LName'], 0, strpos($row['LName'], FIO_DELIMETER)); $row['FirstLName'] = substr($row['LName'], strpos($row['LName'], FIO_DELIMETER) + strlen(FIO_DELIMETER)); } else { $row['FirstName'] = $row['FirstLName'] = ''; $row['LastName'] = $row['Name']; $row['LastLName'] = $row['LName']; } $age = $this->defaults['claim_info']['DateBeg']->datetime()->diff(Samo_Datetime::parse($row['Born'])->datetime())->y; $this->defaults['people_info'] = array( 'Human' => array('value' => $row['Human']), 'FirstName' => array('value' => $row['FirstName']), 'FirstLName' => array('value' => $row['FirstLName']), 'LastName' => array('value' => $row['LastName']), 'LastLName' => array('value' => $row['LastLName']), 'sex' => array('value' => $row['sex']), 'BornDate' => array('value' => Samo_Datetime::parse($row['Born'])), 'BornState' => array('value' => $this->getStates_value($row['BornState'])), 'PSerie' => array('value' => $row['PSerie']), 'PNumber' => array('value' => $row['PNumber']), 'PValid' => array('value' => Samo_Datetime::parse($row['PValid'])), 'PGivenDate' => array('value' => Samo_Datetime::parse($row['pissue'])), 'PGivenOrg' => array('value' => $row['pgiven']), 'Citizenship' => array('value' => $this->getStates_value($row['Citizenship'])), 'Address' => array('value' => $row['Address']), 'Phones' => array('value' => $row['Phones']), 'Email' => array('value' => $row['Email']), 'visaforminputed' => array('value' => Samo_Datetime::parse($row['visaforminputed'])), 'fulltakendoc' => array('value' => $row['fulltakendoc']), 'prepareddoc' => array('value' => $row['prepareddoc']), 'givendoc' => array('value' => $row['givendoc']), 'receiveddoc' => array('value' => $row['receiveddoc']), 'age' => array('value' => $age), 'born_state' => array('value' => $row['BornState']) ); return true; } } throw new Samo_Exception($this->messages['ANKETA_TOURIST_NOT_INFO'], 4); } public function get_template_anketa() { $this->defaults['anketa'] = null; if ($res = $this->get_settings_printform($doccategory = 9, $partner = null, $tour = $this->defaults['claim_info']['TourInc'], $state = $this->defaults['claim_info']['StateInc'], $inszone = null, $contracttype = null, $agreement_year = null, $email_type = null, $online_bank = null, $owner = $this->defaults['claim_info']['OwnerInc'])) { if ($this->external) { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_printform_online', ['Template' => $this->defaults['template']]); if (false !== ($row = $this->db->fetchRow($sql))) { $tpl_data = $row['Online_name']; $this->defaults['anketa'] = substr($tpl_data, 7); } } else { $this->defaults['anketa'] = substr(pathinfo($this->defaults['template'], PATHINFO_FILENAME), 7); } if (file_exists(_ROOT . 'data/anketa/anketa_' . $this->defaults['anketa'] . '.tpl')) { return true; } } throw new Samo_Exception($this->messages['TEMPLATE_NOT_INSTALL'], 1); } public function get_anketa_enable() { $module = 'anketa_' . $this->defaults['anketa']; $routes = Samo_Registry::get('routes'); if (!isset($routes[$module])) { throw new Samo_Exception($this->messages['ANKETA_NOT_INSTALL'], 6); } return true; } public function get_print_anketa() { $property = 'print_anketa_' . $this->defaults['anketa']; if (isset($this->$property)) { $this->print_anketa = $this->$property; } } public function LoadChildren() { $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                SELECT
                    name,
                    lname,
                    born
                FROM dbo.people
                WHERE
                    human = ''CHD''
                    AND claim = %d
            '", $this->defaults['CLAIM'] ); $res = $this->db->query($sql); if ($this->db->numRows($res) > 0) { $i = 1; while (false !== ($row = $this->db->fetchRow($res))) { if (strpos($row['lname'], FIO_DELIMETER)) { $row['ChildSurname'] = substr($row['lname'], 0, strpos($row['lname'], FIO_DELIMETER)); $row['ChildName'] = substr($row['lname'], strpos($row['lname'], FIO_DELIMETER) + strlen(FIO_DELIMETER)); } else { $row['ChildSurname'] = ''; $row['ChildName'] = $row['lname']; } $row['ChildBorn'] = (!empty($row['born'])) ? Samo_Datetime::parse($row['born'])->format('date') : ''; unset($row['lname'], $row['name'], $row['born']); $return[$i] = $row; $i++; } return $return; } return false; } protected function adjust_size($etalon_width, $etalon_height, & $width, & $height) { $i = 0; do { if (($width <= $etalon_width) && ($height <= $etalon_height)) { $width = $etalon_width; $height = $etalon_height; break; } $delta = $width / $etalon_width - $height / $etalon_height; if (floor(abs($delta * 1000)) == 0) { break; } if ($delta < 0) { $height = $height - 1; } else { $width = $width - 1; } $i++; } while ($i < 1000000); } public function CropPicture($type) { $tmp_file_path = _ROOT . $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['url_tmp']; if (file_exists($tmp_file_path) && is_file($tmp_file_path)) { $min_width = $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['minwidth']; $min_height = $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['minheight']; $mashtab = $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['mashtab']; $file_path = $this->file_path($type, 'new'); $zoom = Samo_Request::floatval('zoom'); if ($zoom) { $mashtab = $mashtab * $zoom; } $x1 = round(Samo_Request::intval('x1') / $mashtab); $y1 = round(Samo_Request::intval('y1') / $mashtab); $x2 = round(Samo_Request::intval('x2') / $mashtab); $y2 = round(Samo_Request::intval('y2') / $mashtab); $rotate = Samo_Request::intval('rotate'); $thumbnail = Samo_Loader::load_object('Thumbnail'); $width = abs($x2 - $x1); $height = abs($y2 - $y1); if ($min_height > $min_width) { $width = round($height / $min_height * $min_width); } else { $height = round($width / $min_width * $min_height); } $thumbnail->output($tmp_file_path, _ROOT . $file_path, array('method' => Thumbnail::METHOD_CROP, 'width' => $width + 5, 'height' => $height + 5, 'rotate' => $rotate, 'align' => true, 'valign' => $y1, 'halign' => $x1)); $thumbnail->output(_ROOT . $file_path, _ROOT . $file_path, array('method' => Thumbnail::METHOD_BOX, 'width' => round(($width + 5) * $min_width / $width), 'height' => round(($height + 5) * $min_height / $height))); $thumbnail->output(_ROOT . $file_path, _ROOT . $file_path, array('method' => Thumbnail::METHOD_CROP, 'width' => $min_width, 'height' => $min_height, 'align' => true, 'valign' => 0, 'halign' => 0)); $min_size = $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['minsize'] * 1024; $max_size = $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['maxsize'] * 1024; clearstatcache(true, _ROOT . $file_path); $size = filesize(_ROOT . $file_path); if ($min_size < $max_size && !($min_size < $size && $size < $max_size)) { if ($min_size > $size) { $p = $size; for ($i = 0; $i < 10; $i++) { list($image) = $thumbnail->imageCreate(_ROOT . $file_path); imagejpeg($image, _ROOT . $file_path, 100); clearstatcache(true, _ROOT . $file_path); $size = filesize(_ROOT . $file_path); if ($min_size < $size || $size - $p < 1000) { break; } $p = $size; } if ($min_size > $size) { unlink(_ROOT . $file_path); throw new Samo_Exception($this->messages['ANKETA_ERROR_ON_COMPRESS_FILE']); } } if ($max_size < $size) { list($image) = $thumbnail->imageCreate(_ROOT . $file_path); $d = $i = 100; do { imagejpeg($image, _ROOT . $file_path, $i); clearstatcache(true, _ROOT . $file_path); $size = filesize(_ROOT . $file_path); $p = $d; $d = ceil($d / 2); if ($max_size < $size) { $i = $i - $d; } else { $i = $i + $d; } } while ($d != $p); if ($max_size < $size) { imagejpeg($image, _ROOT . $file_path, $i); clearstatcache(true, _ROOT . $file_path); $size = filesize(_ROOT . $file_path); } } if (!($min_size < $size && $size < $max_size)) { unlink(_ROOT . $file_path); throw new Samo_Exception($this->messages['ANKETA_ERROR_ON_COMPRESS_FILE']); } } $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['url_small'] = $file_path; $this->defaults['photo'][$type]['url_small'] = $file_path; unlink($tmp_file_path); $this->Calc_small_size($type, _ROOT . $file_path); return true; } throw new Samo_Exception($this->messages['ERROR_ON_SEND_FILE']); } public function PutFile($type) { $this->defaults[$type . '_url_tmp'] = ''; $this->get_Picture_Properties($type); if (!empty($_FILES)) { $min_width = $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['minwidth']; $min_height = $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['minheight']; $tmp = $_FILES["anketa_file"]["tmp_name"]; if (Samo_Request::is_uploaded_file($tmp)) { list($orig_width, $orig_height, $otype) = @getimagesize($tmp); $max_width = $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['maxwidth'] = $orig_width; $max_height = $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['maxheight'] = $orig_height; $this->check_memory($orig_width, $orig_height); if ($orig_width < $min_width || $orig_height < $min_height) { throw new Samo_Exception(sprintf($this->messages['ANKETA_IMAGE_WIDTH_HEIGHT'], $min_width, $min_height)); } switch ($otype) { case 1: $newimg = imagecreatefromgif($tmp); break; case 2: $newimg = imagecreatefromjpeg($tmp); break; case 3: $newimg = imagecreatefrompng($tmp); break; default: throw new Samo_Exception(sprintf($this->messages['ANKETA_IMAGE_NOT_VALID_TYPE'], $otype)); } if ($newimg) { $file_path = $this->file_path($type, 'tmp'); $ratio_min = $min_width / $min_height; if ($orig_width > $max_width && $orig_height > $max_height) { $ratio_orig = $orig_width / $orig_height; if ($ratio_min < $ratio_orig) { $new_width = ceil($max_height * $ratio_orig); $new_height = $max_height; } else { $new_width = $max_width; $new_height = ceil($max_width / $ratio_orig); } if ($new_width < $min_width || $new_height < $min_height) { throw new Samo_Exception(sprintf($this->messages['ANKETA_IMAGE_SCOPE'], $min_width, $min_height)); } } else { $new_width = $orig_width; $new_height = $orig_height; } $this->check_memory($new_width, $new_height); $image_p = imagecreatetruecolor($new_width, $new_height); imagecopyresampled($image_p, $newimg, 0, 0, 0, 0, $new_width, $new_height, $orig_width, $orig_height); imagejpeg($image_p, _ROOT . $file_path); $this->defaults[$type . '_url_tmp'] = WWWROOT . $file_path; $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['url_tmp'] = $file_path; $view_width = $min_width; $view_height = $min_height; if ($new_width < $max_width || $new_height < $max_height) { if ($new_width / $min_width > $new_height / $min_height) { $max_view_height = $new_height; $max_view_width = ceil($max_view_height * $min_width / $min_height); } else { $max_view_width = $new_width; $max_view_height = ceil($max_view_width * $min_height / $min_width); } } else { if ($max_width / $min_width > $max_height / $min_height) { $max_view_height = $max_height; $max_view_width = ceil($max_view_height * $min_width / $min_height); } else { $max_view_width = $max_width; $max_view_height = ceil($max_view_width * $min_height / $min_width); } } if ($this->width_max / $this->height_max < $new_width / $new_height) { $mashtab = $this->width_max / $new_width; } else { $mashtab = $this->height_max / $new_height; } $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['width'] = $orig_width; $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['height'] = $orig_height; $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['newwidth'] = ceil($new_width * $mashtab); $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['newheight'] = ceil($new_height * $mashtab); $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['view_width'] = ceil($view_width * $mashtab); $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['view_height'] = ceil($view_height * $mashtab); $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['max_view_width'] = ceil($max_view_width * $mashtab); $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['max_view_height'] = ceil($max_view_height * $mashtab); $_SESSION['anketa'][$this->defaults['PEOPLE']][$type]['mashtab'] = $mashtab; return true; } } } throw new Samo_Exception($this->messages['ERROR_ON_SEND_FILE']); } public function check_memory($width, $height) { $mem = Samo_Utils::convert_bytes(ini_get('memory_limit')); if ($width * $height * 8 > $mem - memory_get_usage()) { throw new Samo_Exception($this->messages['ANKETA_IMAGE_VERY_LARGE']); } } protected function sql_getOnline_field($entity, $entityInc = null) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_get_online_field_anketa', [ 'Entity' => $entity, 'EntityInc' => $entityInc, 'LangId' => Samo_Request::langid(), ] ); return $sql; } public function get_anketa_fields() { $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                SELECT TOP 1
                    o.datebeg as datebeg,
                    o.dateend as dateend,
                    ABS(DATEDIFF(day, o.dateend, o.datebeg)) as nights
                FROM
                    dbo.[order] o INNER JOIN dbo.opeople op ON (op.[order] = o.inc AND op.claim = o.claim)
                WHERE
                    op.people = %d
                    AND o.visapr > 0
            '", $this->defaults['PEOPLE'] ); $visa_order_info = $this->db->fetchRow($sql); if (false === $visa_order_info || $visa_order_info['datebeg']->is_null()) { throw new Samo_Exception($this->messages['ANKETA_TOURIST_NOT_VISA'], 2); } if (false !== ($res = $this->getOnline_field($entity = 'anketa_' . $this->defaults['anketa'], $group = 'Group', $entityInc = $this->defaults['PEOPLE']))) { $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                    SELECT
                        t.partner
                    FROM
                        dbo.people p, dbo.claim c, dbo.tour t
                    WHERE
                        p.inc = %d
                        and c.inc = p.claim
                        and t.inc = c.tour
                '", $this->defaults['PEOPLE'] ); $pr_partner = $this->db->fetchOne($sql); $pr_partner = $this->getPartnerInfo($pr_partner); $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                    SELECT top 1
                        o.partner
                    FROM
                        dbo.[order] o
                        INNER JOIN dbo.opeople op ON (op.[order] = o.inc AND op.people = %d)
                        INNER JOIN dbo.hotel h ON (o.hotel = h.inc)
                    WHERE
                        o.claim = %d
                        AND o.hotel > 0
                '", $this->defaults['PEOPLE'], $this->defaults['CLAIM'] ); if ($order_partner = $this->db->fetchOne($sql)) { $order_partner = $this->getPartnerInfo($order_partner); } $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                    SELECT top 1
                        h.lname as Hotel_lname
                        , h.address as Hotel_address
                        , h.phprefix as Hotel_phprefix
                        , h.phones as Hotel_phones
                        , h.faxes as Hotel_faxes
                        , h.email as Hotel_email
                    FROM
                        dbo.opeople op, dbo.[order] o, dbo.hotel h
                    WHERE
                        op.people = %d
                        and op.[order] = o.inc
                        and o.hotel > 0
                        and o.hotel = h.inc
                '", $this->defaults['PEOPLE'] ); $hotel_info = $this->db->fetchRow($sql); $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                    SELECT top 1
                        h.partner
                    FROM
                        dbo.[order] o
                        INNER JOIN dbo.opeople op ON (op.[order] = o.inc AND op.people = %d)
                        INNER JOIN dbo.hotel h ON (o.hotel = h.inc)
                    WHERE
                        o.claim = %d
                        AND o.hotel > 0
                '", $this->defaults['PEOPLE'], $this->defaults['CLAIM'] ); if ($hotel_partner = $this->db->fetchOne($sql)) { $hotel_partner = $this->getPartnerInfo($hotel_partner); } $fields = array(); foreach ($res as $group => $fgroup) { $fields[$group] = array(); foreach ($fgroup as $key => $field) { $fields[$group][$field['Field']] = $field; } } foreach ($fields as & $fgroup) { foreach ($fgroup as & $field) { $field['Orig_Value'] = $field['Value']; if (!$this->defaults['enable_save']) { $field['Editable'] = 0; } if ($field['Field'] == 'LastLName') { $field['Value'] = $this->defaults['people_info']['LastLName']['value']; } elseif ($field['Field'] == 'FirstLName') { $field['Value'] = $this->defaults['people_info']['FirstLName']['value']; } elseif ($field['Field'] == 'BornDate') { $field['Value'] = $this->defaults['people_info']['BornDate']['value']; } elseif ($field['Field'] == 'sex') { $field['Value'] = $this->defaults['people_info']['sex']['value']; } elseif ($field['Field'] == 'HostPartnerLName') { $field['Value'] = $order_partner ? $order_partner['Partner_partnerlname'] : ''; } elseif ($field['Field'] == 'HostPartnerAddress') { $field['Value'] = $order_partner ? $order_partner['Partner_partneraddress'] : ''; } elseif ($field['Field'] == 'HostPartnerPhones') { $field['Value'] = $order_partner ? ((trim($order_partner['Partner_phonesprefix']) != '') ? '(' . trim($order_partner['Partner_phonesprefix']) . ') ' : '') . $order_partner['Partner_phones'] : ''; } elseif ($field['Field'] == 'HostPartnerFaxes') { $field['Value'] = $order_partner ? ((trim($order_partner['Partner_phonesprefix']) != '') ? '(' . trim($order_partner['Partner_phonesprefix']) . ') ' : '') . $order_partner['Partner_faxes'] : ''; } elseif ($field['Field'] == 'HostPartnerEmail') { $field['Value'] = $order_partner ? $order_partner['Partner_email'] : ''; } elseif ($field['Field'] == 'Partner_partnerofficialname') { $field['Value'] = $pr_partner['Partner_partnerofficialname']; } elseif ($field['Field'] == 'Partner_partneraddress') { $field['Value'] = $pr_partner['Partner_partneraddress']; } elseif ($field['Field'] == 'Partner_phones') { $field['Value'] = ((trim($pr_partner['Partner_phonesprefix']) != '') ? '(' . trim($pr_partner['Partner_phonesprefix']) . ') ' : '') . $pr_partner['Partner_phones']; } elseif ($field['Field'] == 'Partner_faxes') { $field['Value'] = ((trim($pr_partner['Partner_phonesprefix']) != '') ? '(' . trim($pr_partner['Partner_phonesprefix']) . ') ' : '') . $pr_partner['Partner_faxes']; } elseif ($field['Field'] == 'Partner_email') { $field['Value'] = $pr_partner['Partner_email']; } elseif ($field['Field'] == 'Hotel_lname') { $field['Value'] = $hotel_info ? $hotel_info['Hotel_lname'] : ''; } elseif ($field['Field'] == 'Hotel_address') { $field['Value'] = $hotel_info ? $hotel_info['Hotel_address'] : ''; } elseif ($field['Field'] == 'Hotel_phones') { $field['Value'] = $hotel_info ? ((trim($hotel_info['Hotel_phprefix']) != '') ? '(' . trim($hotel_info['Hotel_phprefix']) . ') ' : '') . $hotel_info['Hotel_phones'] : ''; } elseif ($field['Field'] == 'Hotel_faxes') { $field['Value'] = $hotel_info ? ((trim($hotel_info['Hotel_phprefix']) != '') ? '(' . trim($hotel_info['Hotel_phprefix']) . ') ' : '') . $hotel_info['Hotel_faxes'] : ''; } elseif ($field['Field'] == 'Hotel_email') { $field['Value'] = $hotel_info ? $hotel_info['Hotel_email'] : ''; } if ($this->defaults['anketa'] === 'india_mow_v1') { if ($field['Field'] == 'HUMAN') { $field['Variants'] = array(array('Inc' => 1, 'Name' => 'Mr'), array('Inc' => 2, 'Name' => 'Mrs'), array('Inc' => 3, 'Name' => 'Ms')); } elseif (in_array($field['Field'], array('BIRTHCOUNTRY', 'ADDRESSPERMAMENTCOUNTRY', 'ADDRESSCOUNTRY', 'PASSPORTCOUNTRY', 'NATIONALITY'))) { $field['Variants'] = $this->country_india_mow_v1; $field['Value'] = (!$field['Value']) ? 139 : $field['Value']; } elseif ($field['Field'] == 'NATIONALITYTYPE') { $field['Variants'] = array(array('Inc' => 'BY BIRTH', 'Name' => 'По рождению'), array('Inc' => 'NATURALIZATION', 'Name' => 'Натурализация')); } elseif ($field['Field'] == 'NATIONALITYOTHERPRESENT') { $field['Variants'] = array(array('Inc' => 0, 'Name' => 'No')); $field['Variants'] = array_merge($field['Variants'], $this->country_india_mow_v1); } elseif ($field['Field'] == 'NATIONALITYOTHERPREVIOUS') { $field['Variants'] = array(array('Inc' => 0, 'Name' => 'Nil')); $field['Variants'] = array_merge($field['Variants'], $this->country_india_mow_v1); } elseif ($field['Field'] == 'ENTRIES') { $field['Variants'] = $this->entries_india_mow_v1; } elseif ($field['Field'] == 'DURATIONPERIOD') { $field['Variants'] = $this->duration_period_india_mow_v1; } elseif ($field['Field'] == 'PARENTSHADPAKISTAN') { $field['Variants'] = array(array('Inc' => 0, 'Name' => 'Нет'), array('Inc' => 1, 'Name' => 'Отец'), array('Inc' => 2, 'Name' => 'Мать')); } elseif ($field['Field'] == 'ENTRYPURPOSE') { $field['Variants'] = $this->purpose_india_mow_v1; } elseif ($field['Field'] == 'FREIGHTTYPE') { $field['Variants'] = array(array('Inc' => 'C', 'Name' => 'Charter'), array('Inc' => 'R', 'Name' => 'Regular')); } elseif ($field['Field'] == 'OTHERVISA') { $field['Value'] = 'False'; $field['Variants'] = array(array('Inc' => 'False', 'Name' => 'No'), array('Inc' => 'True', 'Name' => 'Yes')); } } elseif ($this->defaults['anketa'] === 'spain_ua_v1') { if ($field['Field'] == 'PlaceBornIndex') { $field['Variants'] = $this->StateIndex_spain_ua_v1; } elseif ($field['Field'] == 'CitizenBornIndex') { $field['Variants'] = $this->StateIndex_spain_ua_v1; } elseif ($field['Field'] == 'CitizenNowIndex') { $field['Variants'] = $this->StateIndex_spain_ua_v1; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_spain_ua_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_spain_ua_v1; } } elseif ($this->defaults['anketa'] === 'andorra_ua_v1') { if ($field['Field'] == 'PlaceBornIndex') { $field['Variants'] = $this->StateIndex_andorra_ua_v1; } elseif ($field['Field'] == 'CitizenBornIndex') { $field['Variants'] = $this->StateIndex_andorra_ua_v1; } elseif ($field['Field'] == 'CitizenNowIndex') { $field['Variants'] = $this->StateIndex_andorra_ua_v1; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_andorra_ua_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_andorra_ua_v1; } } elseif ($this->defaults['anketa'] === 'cyprus_ua_v1') { if ($field['Field'] == 'VisaType') { $field['Variants'] = $this->VisaType_cyprus_ua_v1; } elseif ($field['Field'] == 'EntriesNumber') { $field['Variants'] = $this->EntriesNumber_cyprus_ua_v1; } } elseif ($this->defaults['anketa'] === 'india_ua_v1') { if ($field['Field'] == 'PlaceBornIndex') { $field['Variants'] = $this->StateIndex_india_ua_v1; } elseif ($field['Field'] == 'CitizenBornIndex') { $field['Variants'] = $this->StateIndex_india_ua_v1; } elseif ($field['Field'] == 'CitizenNowIndex') { $field['Variants'] = $this->StateIndex_india_ua_v1; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_india_ua_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_india_ua_v1; } elseif ($field['Field'] == 'Relationship_1') { $field['Variants'] = $this->relation_india_ua_v1; } elseif ($field['Field'] == 'Relationship_2') { $field['Variants'] = $this->relation_india_ua_v1; } elseif ($field['Field'] == 'PurposeOfJourney') { $field['Variants'] = $this->tours_india_ua_v1; } } elseif ($this->defaults['anketa'] === 'greece_ua_v1') { if ($field['Field'] == 'BirthCountry') { $field['Variants'] = $this->country_greece_ua_v1; } elseif ($field['Field'] == 'CitizenBornIndex') { $field['Variants'] = $this->country_greece_ua_v1; } elseif ($field['Field'] == 'NationalityOriginal') { $field['Variants'] = $this->country_greece_ua_v1; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_greece_ua_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_greece_ua_v1; } elseif ($field['Field'] == 'Nationality') { $field['Variants'] = $this->country_greece_ua_v1; } elseif ($field['Field'] == 'CitizenNow') { $field['Variants'] = $this->country_greece_ua_v1; } } elseif ($this->defaults['anketa'] === 'morocco_ua_v1') { if ($field['Field'] == 'PlaceBornIndex') { $field['Variants'] = $this->StateIndex_morocco_ua_v1; } elseif ($field['Field'] == 'CitizenBornIndex') { $field['Variants'] = $this->StateIndex_morocco_ua_v1; } elseif ($field['Field'] == 'CitizenNowIndex') { $field['Variants'] = $this->StateIndex_morocco_ua_v1; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_morocco_ua_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_morocco_ua_v1; } } elseif ($this->defaults['anketa'] === 'samo') { if (in_array($field['Field'], array('BirthCountry'))) { $field['Variants'] = $this->country_samo; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_samo; } } elseif ($this->defaults['anketa'] === 'uae_mow_v1') { if ($field['Field'] == 'DegreeInfo') { $field['Variants'] = $this->DegreeInfo_uae_mow_v1; } } } } $fields['Hotel']['HotelPartnerLName'] = array( 'Field' => 'HotelPartnerLName', 'EntityField' => 'HotelPartnerLName', 'Value' => $hotel_partner ? $hotel_partner['Partner_partnerlname'] : '', 'Editable' => 0 ); $fields['Hotel']['HotelPartnerAddress'] = array( 'Field' => 'HotelPartnerAddress', 'EntityField' => 'HotelPartnerAddress', 'Value' => $hotel_partner ? $hotel_partner['Partner_partneraddress'] : '', 'Editable' => 0 ); $fields['Hotel']['HotelPartnerPhones'] = array( 'Field' => 'HotelPartnerPhones', 'EntityField' => 'HotelPartnerPhones', 'Value' => $hotel_partner ? (((trim($hotel_partner['Partner_phonesprefix']) != '') ? '(' . trim($hotel_partner['Partner_phonesprefix']) . ') ' : '') . $hotel_partner['Partner_phones']) : '', 'Editable' => 0 ); $fields['Hotel']['HotelPartnerFaxes'] = array( 'Field' => 'HotelPartnerFaxes', 'EntityField' => 'HotelPartnerFaxes', 'Value' => $hotel_partner ? (((trim($hotel_partner['Partner_phonesprefix']) != '') ? '(' . trim($hotel_partner['Partner_phonesprefix']) . ') ' : '') . $hotel_partner['Partner_faxes']) : '', 'Editable' => 0 ); $fields['Hotel']['HotelPartnerEmail'] = array( 'Field' => 'HotelPartnerEmail', 'EntityField' => 'HotelPartnerEmail', 'Value' => $hotel_partner ? $hotel_partner['Partner_email'] : '', 'Editable' => 0 ); $fields['VisaOrder']['ArrivalDate'] = array( 'Field' => 'ArrivalDate', 'EntityField' => 'ArrivalDate', 'Value' => $visa_order_info['datebeg'], 'Editable' => 0 ); $fields['VisaOrder']['DepartureDate'] = array( 'Field' => 'DepartureDate', 'EntityField' => 'DepartureDate', 'Value' => $visa_order_info['dateend'], 'Editable' => 0 ); $fields['VisaOrder']['Nights'] = array( 'Field' => 'Nights', 'EntityField' => 'Nights', 'Value' => $visa_order_info['nights'], 'Editable' => 0 ); $fields['VisaOrder']['StayDuration'] = array( 'Field' => 'StayDuration', 'EntityField' => 'StayDuration', 'Value' => $visa_order_info['nights'] + 1, 'Editable' => 0 ); $this->fields_anketa = array_merge_recursive($this->fields_anketa, $fields); return true; } return false; } public function MoveFields() { foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $field) { $this->fields_anketa[$field['Field']] = $field; } unset($this->fields_anketa[$group]); } if ($this->defaults['anketa'] == 'uae_mow_v1') { $this->fields_anketa['NATIONALITY']['Value'] = 'RUSSIAN'; } return true; } public function SetValue_india_mow_v1() { $this->get_anketa_fields(); $childs = array(); $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                SELECT
                    name,
                    lname,
                    male as sex,
                    born
                FROM dbo.people
                WHERE
                    claim = %d
                    and ltrim(rtrim(pserie)) + ltrim(rtrim(pnumber)) = '%s'
                    and inc != %d
                ORDER BY inc
            '", $this->defaults['CLAIM'], $this->db->quote(trim($this->defaults['people_info']['PSerie']['value']) . trim($this->defaults['people_info']['PNumber']['value'])), $this->defaults['PEOPLE'] ); $res = $this->db->query($sql); if ($this->db->numRows($res) > 0) { $i = 1; while (false !== ($row = $this->db->fetchRow($res))) { $row['ChildName'] = $row['lname']; $row['ChildBorn'] = Samo_Datetime::parse($row['born']); unset($row['lname'], $row['name'], $row['born']); $childs[$i++] = $row; } } $o_info = array(); $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                SELECT TOP 1
                    o.datebeg as FreightDateBeg,
                    CASE fr.ftype WHEN 1 THEN ''C'' ELSE ''R'' END as FreightType,
                    fr.lname as FreightName,
                    ABS(DATEDIFF(day, c.dateend, c.datebeg)) as Nights
                FROM
                    dbo.[order] o
                    INNER JOIN dbo.opeople op ON op.claim = o.claim
                    INNER JOIN dbo.freight fr ON o.freight = fr.inc
                    INNER JOIN dbo.claim c ON op.claim = c.inc
                WHERE
                    op.people = %d
                    and op.[order] = o.inc
                    and o.freight > 0
                ORDER BY o.datebeg
            '", $this->defaults['PEOPLE'] ); $res = $this->db->fetchRow($sql); if (false === $res || $res['FreightDateBeg']->is_null()) { $o_info['DepartureRussiaDate'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; $departdate = clone $o_info['DepartureRussiaDate']; $departdate->add_days(1); $o_info['ArrivalIndiaDate'] = $departdate; $o_info['DurationDays'] = $res['Nights'] + 1; $o_info['FreightType'] = 'N/A'; $o_info['FreightName'] = 'N/A'; } else { $o_info['DepartureRussiaDate'] = $res['FreightDateBeg']; $departdate = clone $res['FreightDateBeg']; $departdate->add_days(1); $o_info['ArrivalIndiaDate'] = $departdate; $o_info['DurationDays'] = $res['Nights'] + 1; $o_info['FreightType'] = $res['FreightType']; $o_info['FreightName'] = $res['FreightName']; } $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                SELECT TOP 1
                    o.datebeg as FreightDateBegOut,
                    fr.lname as FreightNameOut
                FROM
                    dbo.[order] o
                    INNER JOIN dbo.opeople op ON op.claim = o.claim
                    INNER JOIN dbo.freight fr ON o.freight = fr.inc
                WHERE
                    op.people = %d
                    and op.[order] = o.inc
                    and o.freight > 0
                ORDER BY o.datebeg DESC
            '", $this->defaults['PEOPLE'] ); $res = $this->db->fetchRow($sql); $o_info['DepartureIndiaDate'] = $res['FreightDateBegOut']; $o_info['FreightNameOut'] = $res['FreightNameOut']; unset($res); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Field'] == 'HUMAN') { $age = $this->defaults['people_info']['BornDate']['value']->format('age'); $sex = $this->defaults['people_info']['sex']['value']; $husbandname = false; $_fgroup = $fgroup; foreach ($_fgroup as $_field) { if ('HUSBANDNAME' == $_field['Field']) { $husbandname = $_field['Value']; } } unset($_fgroup, $_field); $field['Value'] = (0 == $sex) ? ((($age < 18) || !$husbandname) ? 3 : 2) : 1; } elseif ($field['Field'] == 'LASTLNAME') { $field['Value'] = $this->defaults['people_info']['LastLName']['value']; } elseif ($field['Field'] == 'FIRSTLNAME') { $field['Value'] = $this->defaults['people_info']['FirstLName']['value']; } elseif ($field['Field'] == 'BORN') { $field['Value'] = $this->defaults['people_info']['BornDate']['value']; } elseif ($field['Field'] == 'SEX') { $field['Value'] = $this->defaults['people_info']['sex']['value']; } elseif ($field['Field'] == 'PASSPORT') { $delimeter = (in_array((int)$this->defaults['people_info']['PSerie']['value'], array(70, 71))) ? '' : 'N'; $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . $delimeter . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PASSPORTPGIVEN') { $field['Value'] = $this->defaults['people_info']['PGivenOrg']['value']; $field['Editable'] = 0; } elseif ($field['Field'] == 'PASSPORTISSUE') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PASSPORTPVALID') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'PREVIOUSNAME' && $field['Value'] == '') { $field['Value'] = 'NO'; } elseif ($field['Field'] == 'PARENTSHADPAKISTAN' && $field['Value'] == '') { $field['Value'] = 'NO'; } elseif ($field['Field'] == 'HUSBANDNAME' && $field['Value'] == '') { $field['Value'] = 'NO'; } elseif ($field['Field'] == 'PREVIOUSINDIA' && $field['Value'] == '') { $field['Value'] = 'NO'; } elseif ($field['Field'] == 'PREVIOUSINDIAPLACE' && $field['Value'] == '') { $field['Value'] = 'NO'; } elseif ($field['Field'] == 'PREVIOUSINDIAGIVEN' && $field['Value'] == '') { $field['Value'] = 'NO'; } elseif ($field['Field'] == 'DURATIONDAYS') { $field['Value'] = $o_info['DurationDays']; $field['Editable'] = 0; } elseif ($field['Field'] == 'DEPARTUREDATE') { $field['Value'] = $o_info['DepartureRussiaDate']; $field['Editable'] = 0; } elseif ($field['Field'] == 'ARRIVALDATE') { $field['Value'] = $o_info['ArrivalIndiaDate']; $field['Editable'] = 0; } elseif ($field['Field'] == 'ENTRYPURPOSE') { $field['Value'] = 3; $field['Editable'] = 0; } elseif (in_array($field['Field'], array('PORTOFFIRSTENTRY', 'PORTOFFINALDEPARTURE', 'ENTRYTARGET'))) { $field['Value'] = 'GOA'; $field['Editable'] = 0; } elseif ('FREIGHTTYPE' == $field['Field']) { $field['Value'] = $o_info['FreightType']; $field['Editable'] = 0; } elseif ('FREIGHTNAME' == $field['Field']) { $field['Value'] = $o_info['FreightName']; $field['Editable'] = 0; } elseif ('FREIGHTNAMEOUT' == $field['Field']) { $field['Value'] = $o_info['FreightNameOut']; $field['Editable'] = 0; } elseif ('DEPARTUREINDIADATE' == $field['Field']) { $field['Value'] = $o_info['DepartureIndiaDate']; $field['Editable'] = 0; } elseif (in_array($field['Field'], array('REFERENCESINDIA1', 'REFERENCESINDIA2'))) { $field['Value'] = 'SITA CHARTERS SITA HOUSE PRESIDENTAL BUSINESS PARK C9 VASANT KUNJ NEW DELHI 110070 TEL 918322458132'; $field['Editable'] = 0; } elseif ($field['Field'] == 'STATEFROM') { $field['Value'] = 'RUSSIA'; } elseif ($field['Field'] == 'DATEPLACE') { $field['Value'] = 'MOSCOW'; } else { for ($i = 1; $i <= 5; $i++) { if ($field['Field'] == 'CHILDNAME' . $i) { if (isset($childs[$i])) { $field['Value'] = $childs[$i]['ChildName']; } else { $field['Visible'] = 0; } } elseif ($field['Field'] == 'CHILDSEX' . $i) { if (isset($childs[$i])) { $field['Variants'] = array(array('Inc' => 1, 'Name' => 'Male'), array('Inc' => 2, 'Name' => 'Female')); $field['Value'] = $childs[$i]['sex'] == 0 ? 2 : 1; } else { $field['Visible'] = 0; } } elseif ($field['Field'] == 'CHILDBIRTHPLACE' . $i) { if (isset($childs[$i])) { $field['Required'] = 1; } else { $field['Visible'] = 0; } } elseif ($field['Field'] == 'CHILDBORN' . $i) { if (isset($childs[$i])) { $field['Value'] = $childs[$i]['ChildBorn']; } else { $field['Visible'] = 0; } } } } } } unset($fgroup, $field); return true; } public function SetValue_uae_mow_v1() { $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                set datefirst 1
                SELECT TOP 1
                    o.datebeg as datebeg,
                    o.dateend as dateend,
                    f.name as FreightName,
                    f.lname as FreightLName,
                    twnsrc.name as TownSrcName,
                    twnsrc.lname as TownSrcLName,
                    twntrg.name as TownTrgName,
                    twntrg.lname as TownTrgLName
                FROM
                    dbo.[order] o
                    INNER JOIN dbo.opeople op ON (op.[order] = o.inc AND op.claim = o.claim)
                    INNER JOIN dbo.freight f ON f.[inc] = o.freight
                    left outer join dbo.freighttime frt on
                        frt.freight = f.inc and
                        o.datebeg between frt.DateBeg and frt.DateEnd and
                        substring(frt.flydays, DatePart(weekday, o.datebeg), 1) > ''0''
                    left join dbo.town twnsrc on isnull(frt.source,f.source) = twnsrc.inc
                    left join dbo.town twntrg on isnull(frt.target,f.target) = twntrg.inc
                WHERE
                    op.people = %d
                    AND o.freight > 0
                ORDER BY
                    o.datebeg, f.isback, f.islocal
            '", $this->defaults['PEOPLE'] ); if (false === ($arrival_info = $this->db->fetchRow($sql))) { $arrival_info['datebeg'] = Samo_Datetime::null(); $arrival_info['dateend'] = Samo_Datetime::null(); $arrival_info['FreightName'] = ''; $arrival_info['FreightLName'] = ''; $arrival_info['TownSrcName'] = ''; $arrival_info['TownSrcLName'] = ''; $arrival_info['TownTrgName'] = ''; $arrival_info['TownTrgLName'] = ''; } $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                set datefirst 1
                SELECT TOP 1
                    o.datebeg as datebeg,
                    o.dateend as dateend,
                    f.name as FreightName,
                    f.lname as FreightLName,
                    twnsrc.name as TownSrcName,
                    twnsrc.lname as TownSrcLName,
                    twntrg.name as TownTrgName,
                    twntrg.lname as TownTrgLName
                FROM
                    dbo.[order] o
                    INNER JOIN dbo.opeople op ON (op.[order] = o.inc AND op.claim = o.claim)
                    INNER JOIN dbo.freight f ON f.[inc] = o.freight
                    left outer join dbo.freighttime frt on
                        frt.freight = f.inc and
                        o.datebeg between frt.DateBeg and frt.DateEnd and
                        substring(frt.flydays, DatePart(weekday, o.datebeg), 1) > ''0''
                    left join dbo.town twnsrc on isnull(frt.source,f.source) = twnsrc.inc
                    left join dbo.town twntrg on isnull(frt.target,f.target) = twntrg.inc
                WHERE
                    op.people = %d
                    AND o.freight > 0
                ORDER BY
                    o.datebeg desc, f.isback desc, f.islocal
            '", $this->defaults['PEOPLE'] ); if (false === ($departure_info = $this->db->fetchRow($sql))) { $departure_info['datebeg'] = Samo_Datetime::null(); $departure_info['dateend'] = Samo_Datetime::null(); $departure_info['FreightName'] = ''; $departure_info['FreightLName'] = ''; $departure_info['TownSrcName'] = ''; $departure_info['TownSrcLName'] = ''; $departure_info['TownTrgName'] = ''; $departure_info['TownTrgLName'] = ''; } $departure_info = $this->db->fetchRow($sql); $this->get_anketa_fields(); foreach ($this->fields_anketa as $group => &$fgroup) { foreach ($fgroup as $key => &$field) { if ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'ArrivalInfo') { $field['Value'] = $arrival_info; } elseif ($field['Field'] == 'DepartureInfo') { $field['Value'] = $departure_info; } elseif ($field['Field'] == 'DegreeInfo') { if ($this->defaults['people_info']['age']['value'] >= 18) { unset($this->fields_anketa[$group][$key]); } } elseif (in_array($field['Field'], array('ChildMale1', 'ChildMale2', 'ChildMale3'))) { $field['Variants'] = array(array('Inc' => 'FEMALE', 'Name' => 'ЖЕНСКИЙ'), array('Inc' => 'MALE', 'Name' => 'МУЖСКОЙ')); if ($field['Value'] == '') { $field['Value'] = 'FEMALE'; } } } } unset($fgroup, $field); return true; } public function SetValue_spain_mow_v1() { $this->get_anketa_fields(); $this->OccupationIndex_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'occupation'); $this->Visa_center_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'visa_center'); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'PIssuedBy', 'GuardianNationality'))) { $field['Variants'] = $this->country_spain_mow_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_spain_mow_v1; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_mow_v1; } elseif ($field['Field'] == 'WhoIsPaying') { $field['Variants'] = $this->WhoIsPaying_spain_mow_v1; } elseif ($field['Field'] == 'ResidencePermit') { $field['Variants'] = $this->residence_permit_spain_mow_v1; } elseif ($field['Field'] == 'BirthSurName_change') { $field['Value'] = 'False'; $field['Variants'] = array(array('Inc' => 'False', 'Name' => 'Нет'), array('Inc' => 'True', 'Name' => 'Да')); } elseif ($field['Field'] == 'Fingers') { if ($field['Value'] == '') { $field['Value'] = 'False'; } else { $field['Value'] = ucfirst(strtolower($field['Value'])); } $field['Variants'] = array(array('Inc' => 'False', 'Name' => 'Нет'), array('Inc' => 'True', 'Name' => 'Да')); } if ($field['Field'] == 'BirthCountry') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'Nationality') { if ($field['Value'] == '') { $field['Value'] = 70; } } elseif ($field['Field'] == 'NationalityOriginal') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'OccupationIndex') { if ($field['Value'] == '') { $field['Value'] = 35; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'ArrivalDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; } elseif ($field['Field'] == 'DepartureDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['DepartureDate']['Value']; } elseif ($field['Field'] == 'StayDuration') { $field['Value'] = $this->fields_anketa['VisaOrder']['StayDuration']['Value']; } elseif ($field['Field'] == 'PIssuedBy') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'ResidencePermit') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif (in_array($field['Field'], array('GuardianName', 'GuardianSurName', 'GuardianNationality', 'GuardianAddress'))) { if ($this->defaults['people_info']['age']['value'] >= 18) { $field['Required'] = false; $field['Visible'] = false; $field['Editable'] = false; } else { $field['Required'] = true; $field['Visible'] = true; $field['Editable'] = true; $field['css_classes'] = array_merge($field['css_classes'], array('required')); } } elseif ($field['Field'] == 'GuardianNationality') { if ($field['Value'] == '') { $field['Value'] = 70; } } elseif ($field['Field'] == 'BirthSurName_change') { if ($this->fields_anketa[$field['Group']]['BirthSurName']['Value'] != '') { $field['Value'] = 'True'; } } elseif ($field['Field'] == 'Visa_center') { $field['Variants'] = $this->Visa_center_mow_v1; } elseif ($field['Field'] == 'PGivenOrg') { if ($field['Value'] == '') { $field['Value'] = $this->defaults['people_info']['PGivenOrg']['value']; } } } } unset($fgroup, $field); return true; } public function SetValue_malta_mow_v1() { $this->get_anketa_fields(); $this->country_malta_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'countries'); $this->MaritalStatus_malta_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'marital_status'); $this->OccupationIndex_malta_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'occupation'); $this->WhoIsPaying_malta_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'payer'); $this->Visa_center_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'visa_center'); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'PIssuedBy', 'GuardianNationality'))) { $field['Variants'] = $this->country_malta_mow_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_malta_mow_v1; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_malta_mow_v1; } elseif ($field['Field'] == 'WhoIsPaying') { $field['Variants'] = $this->WhoIsPaying_malta_mow_v1; } elseif ($field['Field'] == 'ResidencePermit') { $field['Variants'] = $this->residence_permit_malta_mow_v1; } elseif ($field['Field'] == 'BirthSurName_change') { $field['Value'] = 'False'; $field['Variants'] = array(array('Inc' => 'False', 'Name' => 'Нет'), array('Inc' => 'True', 'Name' => 'Да')); } if ($field['Field'] == 'BirthCountry') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'Nationality') { if ($field['Value'] == '') { $field['Value'] = 70; } } elseif ($field['Field'] == 'NationalityOriginal') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'OccupationIndex') { if ($field['Value'] == '') { $field['Value'] = 35; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'ArrivalDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; } elseif ($field['Field'] == 'DepartureDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['DepartureDate']['Value']; } elseif ($field['Field'] == 'StayDuration') { $field['Value'] = $this->fields_anketa['VisaOrder']['StayDuration']['Value']; } elseif ($field['Field'] == 'PIssuedBy') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'ResidencePermit') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($this->defaults['people_info']['age']['value'] >= 18 && in_array($field['Field'], array('GuardianName', 'GuardianSurName', 'GuardianNationality', 'GuardianAddress'))) { $field['Required'] = false; $field['Visible'] = false; $field['Editable'] = false; } elseif ($field['Field'] == 'GuardianNationality') { if ($field['Value'] == '') { $field['Value'] = 70; } } elseif ($field['Field'] == 'BirthSurName_change') { if ($this->fields_anketa[$field['Group']]['BirthSurName']['Value'] != '') { $field['Value'] = 'True'; } } elseif ($field['Field'] == 'Visa_center') { $field['Variants'] = $this->Visa_center_mow_v1; } } } unset($fgroup, $field); return true; } public function GetValue_malta_mow_v1() { $this->SetValue_malta_mow_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array($field['Field'], ['LastLName', 'FirstLName', 'BornDate', 'sex', 'Passport', 'PGivenDate', 'PValid',])) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'GuardianNationality', 'PIssuedBy'))) { if ($field['Field'] == 'BirthCountry') { $this->check_USSR_RF($ussr = 204, $rf = 70, $field, $value); } $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->country_malta_mow_v1, $value); } elseif ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->MaritalStatus_malta_mow_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_local_field_value_by_inc($this->OccupationIndex_malta_mow_v1, $value); } elseif ($field['Field'] == 'WhoIsPaying') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->WhoIsPaying_malta_mow_v1, $value); } elseif ($field['Field'] == 'ResidencePermit') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->residence_permit_malta_mow_v1, $value); } elseif ($field['Field'] == 'Visa_center') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->Visa_center_mow_v1, $value); } } } } $fields['PassportType'] = '0'; $fields['PassportType_Text'] = 'Ordinary passport'; $fields['SupportMeans'] = '0'; $fields['SupportMeans_Text'] = 'Наличные (CASH) '; $fields['VisaEntries'] = '2'; $fields['VisaEntries_Text'] = 'Многократно '; $fields['TravelPurpose'] = '0'; $fields['TravelPurpose_Text'] = 'Tourism'; $fields['FirstBorderEntry'] = 66; $fields['FirstBorderEntry_Text'] = 'MALTA'; $fields['FirstDestination'] = 66; $fields['FirstDestination_Text'] = 'MALTA'; $fields['DatePlace'] = $this->DatePlace(); $this->Refield($fields); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_china_mow_v1() { $this->get_anketa_fields(); $this->rf = 136; $this->ussr = 156; $this->country_china_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'countries'); $this->OccupationIndex_china_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'occupation'); $this->MaritalStatus_china_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'marital_status'); $this->EmergencyRelationship_china_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'emergency_relationship'); $this->FamilyMemberRelationship_china_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'relationship'); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'PIssuedBy', 'FamilyMember1Nationality', 'FamilyMember2Nationality'))) { $field['Variants'] = $this->country_china_mow_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_china_mow_v1; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $field['Required'] ? array(array('Inc' => '', 'Name' => '----', 'local_field_value' => '----')) : array(); $field['Variants'] = array_merge($field['Variants'], $this->OccupationIndex_china_mow_v1); } elseif ($field['Field'] == 'EmergencyRelationship') { $field['Variants'] = $field['Required'] ? array(array('Inc' => '', 'Name' => '----', 'local_field_value' => '----')) : array(); $field['Variants'] = array_merge($field['Variants'], $this->EmergencyRelationship_china_mow_v1); } elseif (in_array($field['Field'], array('FamilyMember1Relationship', 'FamilyMember2Relationship'))) { $field['Variants'] = $this->FamilyMemberRelationship_china_mow_v1; } if ($field['Field'] == 'BirthCountry') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = $this->ussr; } else { $field['Value'] = $this->rf; } } } elseif ($field['Field'] == 'Nationality') { if ($field['Value'] == '') { $field['Value'] = $this->rf; } } elseif ($field['Field'] == 'PIssuedBy') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = $this->ussr; } else { $field['Value'] = $this->rf; } } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 3; } } elseif ($field['Field'] == 'OccupationIndex') { if ($field['Value'] == '') { $field['Value'] = 35; } } elseif ($field['Field'] == 'EmergencyRelationship') { if ($field['Value'] == '') { $field['Value'] = 35; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } } } unset($fgroup, $field); return true; } public function GetValue_china_mow_v1() { $this->SetValue_china_mow_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', 'sex', 'Passport', 'PGivenDate', 'PValid', ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'PIssuedBy', 'FamilyMember1Nationality', 'FamilyMember2Nationality'))) { if ($field['Field'] == 'BirthCountry') { $this->check_USSR_RF($this->ussr, $this->rf, $field, $value); } $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->country_china_mow_v1, $value); } elseif ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->MaritalStatus_china_mow_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_local_field_value_by_inc($this->OccupationIndex_china_mow_v1, $value); } elseif ($field['Field'] == 'EmergencyRelationship') { $fields['EmergencyRelationship_Text'] = $this->get_local_field_value_by_inc($this->EmergencyRelationship_china_mow_v1, $value); } elseif (in_array($field['Field'], array('FamilyMember1Relationship', 'FamilyMember2Relationship'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->FamilyMemberRelationship_china_mow_v1, $value); } } } } $fields['DatePlace'] = $this->DatePlace_china(); $this->Refield($fields); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function GetValue_india_mow_v1() { $this->SetValue_india_mow_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LASTLNAME', 'FIRSTLNAME', 'BORN', 'SEX', 'HUMAN', 'PASSPORT', 'PASSPORTISSUE', 'PASSPORTPVALID', 'PASSPORTPGIVEN', 'CHILDNAME1', 'CHILDSEX1', 'CHILDBORN1', 'CHILDNAME2', 'CHILDSEX2', 'CHILDBORN2', 'CHILDNAME3', 'CHILDSEX3', 'CHILDBORN3', 'CHILDNAME4', 'CHILDSEX4', 'CHILDBORN4', 'CHILDNAME5', 'CHILDSEX5', 'CHILDBORN5', 'DURATIONDAYS', 'DEPARTUREDATE', 'ARRIVALDATE', 'FREIGHTTYPE', 'FREIGHTNAME', 'REFERENCESINDIA1', 'REFERENCESINDIA2' ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = isset($field['Entity']) && isset($collection[$field['Entity']][-1][$field['Field']]) ? trim($collection[$field['Entity']][-1][$field['Field']]) : $field['Value']; $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if (in_array($field['Field'], array('BIRTHCOUNTRY', 'ADDRESSPERMAMENTCOUNTRY', 'ADDRESSCOUNTRY', 'PASSPORTCOUNTRY', 'NATIONALITY'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->country_india_mow_v1, $value); } elseif ($field['Field'] == 'NATIONALITYTYPE') { $fields[$field['EntityField'] . '_Text'] = $field['Value']; } elseif ($field['Field'] == 'NATIONALITYOTHERPRESENT') { if ($value == 0) { $fields[$field['EntityField'] . '_Text'] = 'No'; } else { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->country_india_mow_v1, $value); } } elseif ($field['Field'] == 'NATIONALITYOTHERPREVIOUS') { if ($value == 0) { $fields[$field['EntityField'] . '_Text'] = 'Nil'; } else { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->country_india_mow_v1, $value); } } elseif ($field['Field'] == 'DURATIONPERIOD') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->duration_period_india_mow_v1, $value); } elseif ($field['Field'] == 'ENTRIES') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->entries_india_mow_v1, $value); } } } } $fields['DataSource'] = 'Online'; $str = ''; foreach ($fields as $key => $value) { if ($key) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . strtoupper($value); } } return $str; } public function GetValue_spain_mow_v1() { $this->SetValue_spain_mow_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', 'sex', 'Passport', 'PGivenDate', 'PValid', ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'GuardianNationality', 'PIssuedBy'))) { if ($field['Field'] == 'BirthCountry') { $this->check_USSR_RF($ussr = 204, $rf = 70, $field, $value); } $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->country_spain_mow_v1, $value); } elseif ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->MaritalStatus_spain_mow_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_local_field_value_by_inc($this->OccupationIndex_mow_v1, $value); } elseif ($field['Field'] == 'WhoIsPaying') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->WhoIsPaying_spain_mow_v1, $value); } elseif ($field['Field'] == 'ResidencePermit') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->residence_permit_spain_mow_v1, $value); } elseif ($field['Field'] == 'Visa_center') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->Visa_center_mow_v1, $value); } } } } $fields['PassportType'] = '0'; $fields['PassportType_Text'] = 'Ordinary passport'; $fields['SupportMeans'] = '0'; $fields['SupportMeans_Text'] = 'Наличные (CASH) '; $fields['VisaEntries'] = '2'; $fields['VisaEntries_Text'] = 'Многократно '; $fields['TravelPurpose'] = '0'; $fields['TravelPurpose_Text'] = 'Tourism'; $fields['FirstBorderEntry'] = 66; $fields['FirstBorderEntry_Text'] = 'SPAIN'; $fields['FirstDestination'] = 66; $fields['FirstDestination_Text'] = 'SPAIN'; $fields['DatePlace'] = 'Moscow ' . Samo_Datetime::today(); $this->Refield($fields); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function check_USSR_RF($ussr, $rf, $field, $value) { $old = $this->defaults['people_info']['BornDate']['value']->lt('25/12/1991'); $ussr_text = $this->get_name_by_inc($this->country_spain_mow_v1, $ussr); $rf_text = $this->get_name_by_inc($this->country_spain_mow_v1, $rf); if ($value == $rf && $old) { throw new Samo_Exception('Поле "' . $field['Title'] . '": страна "' . $rf_text . '" не соответствует дате рождения. Необходимо выбрать "' . $ussr_text . '"'); } elseif ($value == $ussr && !$old) { throw new Samo_Exception('Поле "' . $field['Title'] . '": страна "' . $ussr_text . '" не соответствует дате рождения. Необходимо выбрать "' . $rf_text . '"'); } } public function GetValue_uae_mow_v1() { $this->SetValue_uae_mow_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; } } } $fields['DatePlace'] = Samo_Datetime::today(); $this->Refield($fields); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_uae_mow() { $sql = sprinf( "exec <OFFICEDB>.dbo.sp_executesql N'
                set datefirst 1
                SELECT TOP 1
                    o.datebeg as datebeg,
                    o.dateend as dateend,
                    f.name as FreightName,
                    f.lname as FreightLName,
                    twnsrc.name as TownSrcName,
                    twnsrc.lname as TownSrcLName,
                    twntrg.name as TownTrgName,
                    twntrg.lname as TownTrgLName
                FROM
                    dbo.[order] o
                        INNER JOIN dbo.opeople op ON (op.[order] = o.inc AND op.claim = o.claim)
                        INNER JOIN dbo.freight f ON f.[inc] = o.freight
                        left outer join dbo.freighttime frt on
                            frt.freight = f.inc and
                            o.datebeg between frt.DateBeg and frt.DateEnd and
                            substring(frt.flydays, DatePart(weekday, o.datebeg), 1) > ''0''
                        left join dbo.town twnsrc on isnull(frt.source,f.source) = twnsrc.inc
                        left join dbo.town twntrg on isnull(frt.target,f.target) = twntrg.inc
                WHERE
                    op.people = %d
                    AND o.freight > 0
                ORDER BY
                    o.datebeg, f.isback, f.islocal
            '", $this->defaults['PEOPLE'] ); $res = $this->db->query($sql); if ($this->db->numRows($res) > 0) { $row = $this->db->fetchRow($sql); $this->defaults['fields']['Arrival']['value'] = $row; } $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                set datefirst 1
                SELECT TOP 1
                    o.datebeg as datebeg,
                    o.dateend as dateend,
                    f.name as FreightName,
                    f.lname as FreightLName,
                    twnsrc.name as TownSrcName,
                    twnsrc.lname as TownSrcLName,
                    twntrg.name as TownTrgName,
                    twntrg.lname as TownTrgLName
                FROM
                    dbo.[order] o
                        INNER JOIN dbo.opeople op ON (op.[order] = o.inc AND op.claim = o.claim)
                        INNER JOIN dbo.freight f ON f.[inc] = o.freight
                        left outer join dbo.freighttime frt on
                            frt.freight = f.inc and
                            o.datebeg between frt.DateBeg and frt.DateEnd and
                            substring(frt.flydays, DatePart(weekday, o.datebeg), 1) > ''0''
                        left join dbo.town twnsrc on isnull(frt.source,f.source) = twnsrc.inc
                        left join dbo.town twntrg on isnull(frt.target,f.target) = twntrg.inc
                WHERE
                    op.people = %d
                    AND o.freight > 0
                ORDER BY
                    o.datebeg desc, f.isback desc, f.islocal
            '", $this->defaults['PEOPLE'] ); $res = $this->db->query($sql); if ($this->db->numRows($res) > 0) { $row = $this->db->fetchRow($sql); $this->defaults['fields']['Departure']['value'] = $row; } $this->defaults['fields']['DatePlace']['value'] = Samo_Datetime::today(); $this->defaults['fields']['Patronymic']['required'] = true; $this->defaults['fields']['Patronymic']['class'] = 'eng'; $this->defaults['fields']['FatherName']['required'] = true; $this->defaults['fields']['FatherName']['class'] = 'eng'; $this->defaults['fields']['MotherName']['required'] = true; $this->defaults['fields']['MotherName']['class'] = 'eng'; $this->defaults['fields']['HusbandName']['required'] = true; $this->defaults['fields']['HusbandName']['class'] = 'eng'; $this->defaults['fields']['Occupation_Text']['required'] = true; $this->defaults['fields']['Occupation_Text']['class'] = 'eng'; $this->defaults['fields']['PassportIssuedBy']['required'] = true; $this->defaults['fields']['PassportIssuedBy']['class'] = 'eng'; $this->defaults['fields']['Address']['required'] = true; $this->defaults['fields']['Address']['class'] = 'eng'; $this->defaults['fields']['ChildName1']['required'] = false; $this->defaults['fields']['ChildName1']['class'] = 'eng'; $this->defaults['fields']['ChildBorn1']['required'] = false; $this->defaults['fields']['ChildBorn1']['class'] = 'eng'; $this->defaults['fields']['ChildBirthPlace1']['required'] = false; $this->defaults['fields']['ChildBirthPlace1']['class'] = 'eng'; $this->defaults['fields']['ChildName2']['required'] = false; $this->defaults['fields']['ChildName2']['class'] = 'eng'; $this->defaults['fields']['ChildBorn2']['required'] = false; $this->defaults['fields']['ChildBorn2']['class'] = 'eng'; $this->defaults['fields']['ChildBirthPlace2']['required'] = false; $this->defaults['fields']['ChildBirthPlace2']['class'] = 'eng'; } public function GetValue_uae_mow() { $str = ''; foreach ($_POST as $key => $value) { $value = strtoupper($value); $str .= $key . '=' . $value . ' ' . chr(13) . chr(10); } $str = rtrim($str); return $str; } public function SetValue_spain_ua_v1() { $this->get_anketa_fields(); $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                SELECT top 1
                    h.lname as Hotel_lname
                    , h.address as Hotel_address
                    , h.phones as Hotel_phones
                    , h.faxes as Hotel_faxes
                    , h.email as Hotel_email
                FROM
                    dbo.opeople op, dbo.[order] o, dbo.hotel h
                WHERE
                    op.people = %d
                    and op.[order] = o.inc
                    and o.hotel > 0
                    and o.hotel = h.inc
            '", $this->defaults['PEOPLE'] ); $hotel_info = $this->db->fetchRow($sql); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Field'] == 'BirthPlace') { if ($field['Value'] == '') { $field['Value'] = 'KIEV'; } } elseif ($field['Field'] == 'BirthCountry') { if ($field['Value'] == '') { $field['Value'] = 'UKRAINE'; } } elseif ($field['Field'] == 'Nationality') { $field['Value'] = $this->defaults['people_info']['Citizenship']['value']; } elseif ($field['Field'] == 'NationalityOriginal') { if ($field['Value'] == '') { $field['Value'] = 'UKRAINE'; } } elseif ($field['Field'] == 'PlaceBornIndex') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'CitizenBornIndex') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'CitizenNowIndex') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'OccupationIndex') { if ($field['Value'] == '') { $field['Value'] = 7; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'PGivenOrg') { $field['Value'] = $this->defaults['people_info']['PGivenOrg']['value']; } elseif ($field['Field'] == 'ArrivalDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; } elseif ($field['Field'] == 'DepartureDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['DepartureDate']['Value']; } elseif ($field['Field'] == 'StayDuration') { $field['Value'] = $this->fields_anketa['VisaOrder']['StayDuration']['Value']; } elseif ($field['Field'] == 'Hotel_lname') { $field['Value'] = $hotel_info['Hotel_lname']; } elseif ($field['Field'] == 'Hotel_address') { $field['Value'] = $hotel_info['Hotel_address']; } elseif ($field['Field'] == 'Hotel_phones') { $field['Value'] = $hotel_info['Hotel_phones']; } elseif ($field['Field'] == 'Hotel_faxes') { $field['Value'] = $hotel_info['Hotel_faxes']; } elseif ($field['Field'] == 'Hotel_email') { $field['Value'] = $hotel_info['Hotel_email']; } elseif ($field['Field'] == 'PreviousShengen') { if ($field['Value'] == '') { $field['Value'] = 'NO'; } } } } unset($fgroup, $field); return true; } public function GetValue_spain_ua_v1() { $this->SetValue_spain_ua_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', 'sex', 'Nationality', 'Passport', 'PGivenDate', 'PValid', 'PGivenOrg', 'ArrivalDate', 'DepartureDate', 'StayDuration', 'Hotel_lname', 'Hotel_address', 'Hotel_phones', 'Hotel_faxes', 'Hotel_email' ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->MaritalStatus_spain_ua_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_name_by_inc($this->OccupationIndex_spain_ua_v1, $value); } elseif ($field['Field'] == 'PlaceBornIndex') { $fields['PlaceBorn_Text'] = $this->get_name_by_inc($this->StateIndex_spain_ua_v1, $value); } elseif ($field['Field'] == 'CitizenBornIndex') { $fields['CitizenBorn_Text'] = $this->get_name_by_inc($this->StateIndex_spain_ua_v1, $value); } elseif ($field['Field'] == 'CitizenNowIndex') { $fields['CitizenNow_Text'] = $this->get_name_by_inc($this->StateIndex_spain_ua_v1, $value); } } } } $fields['DatePlace'] = 'KIEV ' . Samo_Datetime::today(); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_andorra_ua_v1() { $this->get_anketa_fields(); $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                SELECT top 1
                    h.lname as Hotel_lname
                    , h.address as Hotel_address
                    , h.phones as Hotel_phones
                    , h.faxes as Hotel_faxes
                    , h.email as Hotel_email
                FROM
                    dbo.opeople op, dbo.[order] o, dbo.hotel h
                WHERE
                    op.people = %d
                    and op.[order] = o.inc
                    and o.hotel > 0
                    and o.hotel = h.inc
            '", $this->defaults['PEOPLE'] ); $hotel_info = $this->db->fetchRow($sql); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Field'] == 'BirthPlace') { if ($field['Value'] == '') { $field['Value'] = ''; } } elseif ($field['Field'] == 'BirthCountry') { if ($field['Value'] == '') { $field['Value'] = 'UKRAINE'; } } elseif ($field['Field'] == 'Nationality') { $field['Value'] = $this->defaults['people_info']['Citizenship']['value']; } elseif ($field['Field'] == 'NationalityOriginal') { if ($field['Value'] == '') { $field['Value'] = 'UKRAINE'; } } elseif ($field['Field'] == 'PlaceBornIndex') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'CitizenBornIndex') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'CitizenNowIndex') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'OccupationIndex') { if ($field['Value'] == '') { $field['Value'] = 7; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'PGivenOrg') { $field['Value'] = $this->defaults['people_info']['PGivenOrg']['value']; } elseif ($field['Field'] == 'ArrivalDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; } elseif ($field['Field'] == 'DepartureDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['DepartureDate']['Value']; } elseif ($field['Field'] == 'StayDuration') { $field['Value'] = $this->fields_anketa['VisaOrder']['StayDuration']['Value']; } elseif ($field['Field'] == 'Hotel_lname') { $field['Value'] = $hotel_info['Hotel_lname']; } elseif ($field['Field'] == 'Hotel_address') { $field['Value'] = $hotel_info['Hotel_address']; } elseif ($field['Field'] == 'Hotel_phones') { $field['Value'] = $hotel_info['Hotel_phones']; } elseif ($field['Field'] == 'Hotel_faxes') { $field['Value'] = $hotel_info['Hotel_faxes']; } elseif ($field['Field'] == 'Hotel_email') { $field['Value'] = $hotel_info['Hotel_email']; } elseif ($field['Field'] == 'PreviousShengen') { if ($field['Value'] == '') { $field['Value'] = ''; } } } } unset($fgroup, $field); return true; } public function GetValue_andorra_ua_v1() { $this->SetValue_andorra_ua_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', 'sex', 'Nationality', 'Passport', 'PGivenDate', 'PValid', 'PGivenOrg', 'ArrivalDate', 'DepartureDate', 'StayDuration', 'Hotel_lname', 'Hotel_address', 'Hotel_phones', 'Hotel_faxes', 'Hotel_email' ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->MaritalStatus_andorra_ua_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_name_by_inc($this->OccupationIndex_andorra_ua_v1, $value); } elseif ($field['Field'] == 'PlaceBornIndex') { $fields['PlaceBorn_Text'] = $this->get_name_by_inc($this->StateIndex_andorra_ua_v1, $value); } elseif ($field['Field'] == 'CitizenBornIndex') { $fields['CitizenBorn_Text'] = $this->get_name_by_inc($this->StateIndex_andorra_ua_v1, $value); } elseif ($field['Field'] == 'CitizenNowIndex') { $fields['CitizenNow_Text'] = $this->get_name_by_inc($this->StateIndex_andorra_ua_v1, $value); } } } } $fields['DatePlace'] = 'KIEV ' . Samo_Datetime::today(); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_cyprus_ua_v1() { $this->get_anketa_fields(); $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                SELECT top 1
                    h.lname as HotelName
                    , h.phprefix as HotelPhoneCode
                    , h.phones as HotelPhone
                    , town.lname as TownCyprus
                FROM
                    dbo.opeople op, dbo.[order] o, dbo.hotel h
                    inner join dbo.town on town.inc = h.town
                WHERE
                    op.people = %d
                    and op.[order] = o.inc
                    and o.hotel > 0
                    and o.hotel = h.inc
            '", $this->defaults['PEOPLE'] ); $hotel_info = $this->db->fetchRow($sql); $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                SELECT top 1
                    town.lname as Airport
                FROM
                    dbo.opeople op
                    inner join dbo.claim on claim.inc = op.claim
                    inner join dbo.tour on tour.inc = claim.tour
                    inner join dbo.town on town.inc = tour.town
                WHERE
                    op.people = %d
            '", $this->defaults['PEOPLE'] ); $airport_info = $this->db->fetchRow($sql); $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                SELECT top 1
                    p.phprefix as PhoneCode
                FROM
                    dbo.people p
                WHERE
                    p.inc = %d
            '", $this->defaults['PEOPLE'] ); $add_people_info = $this->db->fetchRow($sql); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Field'] == 'LastLName') { $field['Value'] = $this->defaults['people_info']['LastLName']['value']; } elseif ($field['Field'] == 'LastName') { $field['Value'] = $this->defaults['people_info']['LastName']['value']; } elseif ($field['Field'] == 'FirstLName') { $field['Value'] = $this->defaults['people_info']['FirstLName']['value']; } elseif ($field['Field'] == 'FirstName') { $field['Value'] = $this->defaults['people_info']['FirstName']['value']; } elseif ($field['Field'] == 'BornDate') { $field['Value'] = $this->defaults['people_info']['BornDate']['value']; } elseif ($field['Field'] == 'Nationality') { $field['Value'] = $this->defaults['people_info']['Citizenship']['value']; } elseif ($field['Field'] == 'Address') { $field['Value'] = $this->defaults['people_info']['Address']['value']; } elseif ($field['Field'] == 'PhoneNumber') { $field['Value'] = $this->defaults['people_info']['Phones']['value']; } elseif ($field['Field'] == 'PhoneCode') { $field['Value'] = $add_people_info['PhoneCode']; } elseif ($field['Field'] == 'Occupation') { if ($field['Value'] == '') { $field['Value'] = ''; } } elseif ($field['Field'] == 'PassportSerial') { $field['Value'] = $this->defaults['people_info']['PSerie']['value']; } elseif ($field['Field'] == 'PassportNumber') { $field['Value'] = $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PassportValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'ArrivalDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; } elseif ($field['Field'] == 'DepartureDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['DepartureDate']['Value']; } elseif ($field['Field'] == 'HotelName') { $field['Value'] = $hotel_info['HotelName']; } elseif ($field['Field'] == 'HotelPhoneCode') { $field['Value'] = $hotel_info['HotelPhoneCode']; } elseif ($field['Field'] == 'HotelPhone') { $field['Value'] = $hotel_info['HotelPhone']; } elseif ($field['Field'] == 'TownCyprus') { $field['Value'] = $hotel_info['TownCyprus']; } elseif ($field['Field'] == 'Airport') { $field['Value'] = $airport_info['Airport']; } elseif ($field['Field'] == 'VisitPurpose') { $field['Value'] = 'ТУРИЗМ'; } elseif ($field['Field'] == 'VisaType') { if ($field['Value'] == '') { $field['Value'] = 2; } } elseif ($field['Field'] == 'EntriesNumber') { if ($field['Value'] == '') { $field['Value'] = 0; } } } } unset($fgroup, $field); return true; } public function GetValue_cyprus_ua_v1() { $this->SetValue_cyprus_ua_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if ($field['Field'] == 'VisaType') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->VisaType_cyprus_ua_v1, $value); } elseif ($field['Field'] == 'EntriesNumber') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->EntriesNumber_cyprus_ua_v1, $value); } } } } $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_uae_ua_v1() { $this->get_anketa_fields(); $f_info = array(); $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                    SELECT TOP 1 fr.lname as FreightName, o.DateBeg, o.DateEnd
                    FROM dbo.[order] o
                         INNER JOIN dbo.opeople op ON op.claim = o.claim
                         INNER JOIN dbo.freight fr ON o.freight = fr.inc
                    WHERE
                        op.people = %d
						and op.[order] = o.inc
                        and o.freight > 0
						and fr.isback = 0
            '", $this->defaults['PEOPLE'] ); $res = $this->db->fetchRow($sql); if ($res['DateBeg'] != '') { $f_info['DirectDepartureDate'] = $res['DateBeg']; $f_info['DirectArrivalDate'] = $res['DateEnd']; $f_info['DirectFreightName'] = $res['FreightName']; } $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                    SELECT TOP 1 fr.lname as FreightName, o.DateBeg, o.DateEnd
                    FROM
                        dbo.[order] o
                        INNER JOIN dbo.opeople op ON op.claim = o.claim
                        INNER JOIN dbo.freight fr ON o.freight = fr.inc
                    WHERE
                        op.people = %d
						and op.[order] = o.inc
                        and o.freight > 0
						and fr.isback = 1
                    ORDER BY o.datebeg DESC
            '", $this->defaults['PEOPLE'] ); $res = $this->db->fetchRow($sql); $f_info['BackDepartureDate'] = $res['DateBeg']; $f_info['BackArrivalDate'] = $res['DateBeg']; $f_info['BackFreightName'] = $res['FreightName']; $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                    SELECT s1.lname PlaceOfBorn, s2.lname Citizen
                    FROM
                        dbo.people p
                        INNER JOIN dbo.state s1 ON p.placeofborn = s1.inc
                        INNER JOIN dbo.state s2 ON p.state = s2.inc
                    WHERE
                        p.inc = %d
            '", $this->defaults['PEOPLE'] ); $res = $this->db->fetchRow($sql); $p_info['PlaceOfBorn'] = $res['PlaceOfBorn']; $p_info['Citizen'] = $res['Citizen']; unset($res); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Field'] == 'PlaceBorn_Text') { $field['Value'] = $p_info['PlaceOfBorn']; } elseif ($field['Field'] == 'CitizenBorn_Text') { $field['Value'] = $p_info['Citizen']; } elseif ($field['Field'] == 'Sex') { $field['Value'] = $this->defaults['people_info']['Sex']['value']; } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'Hotel_name') { $field['Value'] = $this->defaults['hotel_info']['Hotel_lname']['value']; } elseif ($field['Field'] == 'DirectDepartureDate') { $field['Value'] = $f_info['DirectDepartureDate']; } elseif ($field['Field'] == 'DirectArrivalDate') { $field['Value'] = $f_info['DirectArrivalDate']; } elseif ($field['Field'] == 'DirectFreightName') { $field['Value'] = $f_info['DirectFreightName']; } elseif ($field['Field'] == 'BackDepartureDate') { $field['Value'] = $f_info['BackDepartureDate']; } elseif ($field['Field'] == 'BackArrivalDate') { $field['Value'] = $f_info['BackArrivalDate']; } elseif ($field['Field'] == 'BackFreightName') { $field['Value'] = $f_info['BackFreightName']; } elseif ($field['Field'] == 'PGivenOrg') { $field['Value'] = $this->defaults['people_info']['PGivenOrg']['value']; } } } unset($fgroup, $field); return true; } public function GetValue_uae_ua_v1() { $this->SetValue_uae_ua_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array($field['Field'], array('LastLName', 'FirstLName', 'BornDate',))) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; } } } $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_india_ua_v1() { $this->get_anketa_fields(); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Field'] == 'BirthCountry') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'PlaceBornIndex') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'CitizenNowIndex') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'CitizenBornIndex') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'OccupationIndex') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'PGivenOrg') { $field['Value'] = $this->defaults['people_info']['PGivenOrg']['value']; } elseif ($field['Field'] == 'ArrivalDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; } elseif ($field['Field'] == 'DepartureDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['DepartureDate']['Value']; } elseif ($field['Field'] == 'StayDuration') { $field['Value'] = $this->fields_anketa['VisaOrder']['StayDuration']['Value']; } elseif ($field['Field'] == 'PurposeOfJourney') { if ($field['Value'] == '') { $field['Value'] = 0; } } } } unset($fgroup, $field); return true; } public function GetValue_india_ua_v1() { $this->SetValue_india_ua_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', 'sex', 'Nationality', 'Passport', 'PGivenDate', 'PValid', 'PGivenOrg', 'ArrivalDate', 'DepartureDate', 'StayDuration', 'Hotel_lname', 'Hotel_address', 'Hotel_phones', 'Hotel_faxes', 'Hotel_email' ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField']] = $this->get_name_by_inc($this->MaritalStatus_india_ua_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_name_by_inc($this->OccupationIndex_india_ua_v1, $value); } elseif ($field['Field'] == 'PlaceBornIndex') { $fields['PlaceBorn_Text'] = $this->get_name_by_inc($this->StateIndex_india_ua_v1, $value); } elseif ($field['Field'] == 'CitizenBornIndex') { $fields['CitizenBorn_Text'] = $this->get_name_by_inc($this->StateIndex_india_ua_v1, $value); } elseif ($field['Field'] == 'CitizenNowIndex') { $fields['CitizenNow_Text'] = $this->get_name_by_inc($this->StateIndex_india_ua_v1, $value); } elseif ($field['Field'] == 'BirthCountry') { $fields['BirthCountry'] = $this->get_name_by_inc($this->StateIndex_india_ua_v1, $value); } elseif ($field['Field'] == 'Relationship_1') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->relation_india_ua_v1, $value); } elseif ($field['Field'] == 'Relationship_2') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->relation_india_ua_v1, $value); } } } } $fields['DatePlace'] = 'KIEV ' . Samo_Datetime::today(); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_italy_mow_v1() { $this->get_anketa_fields(); $this->rf = 70; $this->ussr = 204; $this->country_italy_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'countries'); $this->MaritalStatus_italy_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'marital_status'); $this->OccupationIndex_italy_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'occupation'); array_unshift($this->OccupationIndex_italy_mow_v1, array('Inc' => '', 'Name' => ' - Выберите профессию -', 'local_field_value' => ' - Выберите профессию -')); $this->WhoIsPaying_italy_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'payer'); $this->Visa_center_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'visa_center'); array_unshift($this->Visa_center_mow_v1, array('Inc' => '', 'Name' => ' - - -', 'local_field_value' => ' - - -')); $this->shengen_countries_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'shengen_countries'); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal'))) { $field['Variants'] = $this->country_italy_mow_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_italy_mow_v1; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_italy_mow_v1; } elseif ($field['Field'] == 'WhoIsPaying') { $field['Variants'] = $this->WhoIsPaying_italy_mow_v1; } elseif ($field['Field'] == 'Visa_center') { $field['Variants'] = $this->Visa_center_mow_v1; } elseif (in_array($field['Field'], array('PreviousShengen_Country', 'PreviousShengen1_Country'))) { $field['Variants'] = $this->shengen_countries_mow_v1; } if (in_array($field['Field'], array('BirthCountry', 'NationalityOriginal'))) { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = $this->ussr; } else { $field['Value'] = $this->rf; } } } elseif ($field['Field'] == 'Nationality') { if ($field['Value'] == '') { $field['Value'] = $this->rf; } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'PGivenOrg') { if ($field['Value'] == '') { $field['Value'] = $this->defaults['people_info']['PGivenOrg']['value']; } } elseif ($field['Field'] == 'ArrivalDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; } elseif ($field['Field'] == 'DepartureDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['DepartureDate']['Value']; } elseif ($field['Field'] == 'StayDuration') { $field['Value'] = $this->fields_anketa['VisaOrder']['StayDuration']['Value']; } elseif ($field['Field'] == 'Fingers') { if ($field['Value'] == '') { $field['Value'] = 'False'; } else { $field['Value'] = ucfirst(strtolower($field['Value'])); } $field['Variants'] = array(array('Inc' => 'False', 'Name' => 'Нет'), array('Inc' => 'True', 'Name' => 'Да')); } } } unset($fgroup, $field); return true; } public function GetValue_italy_mow_v1() { $this->SetValue_italy_mow_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', 'sex', 'Passport', 'PGivenDate', 'PValid', ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal'))) { if ($field['Field'] == 'BirthCountry') { $this->check_USSR_RF($ussr = $this->ussr, $rf = $this->rf, $field, $value); } $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->country_italy_mow_v1, $value); } elseif ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->MaritalStatus_italy_mow_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_local_field_value_by_inc($this->OccupationIndex_italy_mow_v1, $value); } elseif ($field['Field'] == 'WhoIsPaying') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->WhoIsPaying_italy_mow_v1, $value); } elseif ($field['Field'] == 'Visa_center') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->Visa_center_mow_v1, $value); } elseif (in_array($field['Field'], array('PreviousShengen_Country', 'PreviousShengen1_Country'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->shengen_countries_mow_v1, $value); } } } } $fields['PassportType'] = '0'; $fields['PassportType_Text'] = 'Обычный загранпаспорт'; $fields['SupportMeans'] = '0'; $fields['SupportMeans_Text'] = 'Наличные (CASH) '; $fields['VisaEntries'] = '2'; $fields['VisaEntries_Text'] = 'Многократно '; $fields['TravelPurpose'] = '0'; $fields['TravelPurpose_Text'] = 'Туризм'; $fields['DatePlace'] = 'Moscow ' . Samo_Datetime::today(); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_bulgaria_mow_v1() { $this->get_anketa_fields(); $this->country_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'countries'); $this->MaritalStatus_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'marital_status'); $this->Entries_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'entries'); $this->WhoIsPaying_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'payer'); $this->shengen_countries_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'shengen_countries'); $this->OccupationIndex_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'occupation'); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal'))) { $field['Variants'] = $this->country_mow_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_mow_v1; } elseif ($field['Field'] == 'VisaEntries') { $field['Variants'] = $this->Entries_mow_v1; } elseif ($field['Field'] == 'WhoIsPaying') { $field['Variants'] = $this->WhoIsPaying_mow_v1; } if ($field['Field'] == 'BirthCountry') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 156; } else { $field['Value'] = 136; } } } elseif ($field['Field'] == 'Nationality') { if ($field['Value'] == '') { $field['Value'] = 136; } } elseif ($field['Field'] == 'NationalityOriginal') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 156; } else { $field['Value'] = 136; } } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'ArrivalDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; } elseif ($field['Field'] == 'DepartureDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['DepartureDate']['Value']; } elseif ($field['Field'] == 'StayDuration') { $field['Value'] = $this->fields_anketa['VisaOrder']['StayDuration']['Value']; } elseif ($field['Field'] == 'VisaEntries') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif (in_array($field['Field'], array('PreviousShengen_Country', 'PreviousShengen1_Country'))) { $field['Variants'] = $this->shengen_countries_mow_v1; } elseif ($field['Field'] == 'Fingers') { if ($field['Value'] == '') { $field['Value'] = 'False'; } else { $field['Value'] = ucfirst(strtolower($field['Value'])); } $field['Variants'] = array(array('Inc' => 'False', 'Name' => 'Нет'), array('Inc' => 'True', 'Name' => 'Да')); } elseif (in_array($field['Field'], array('Spokesman'))) { if ($this->defaults['people_info']['age']['value'] >= 18) { $field['Required'] = 0; $field['Visible'] = 0; $field['Editable'] = 0; } else { $field['Required'] = 1; $field['Visible'] = 1; $field['Editable'] = 1; $field['css_classes'] = array_merge($field['css_classes'], array('required')); } } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_mow_v1; if ($field['Value'] == '') { $field['Value'] = 35; } } } } unset($fgroup, $field); return true; } public function GetValue_bulgaria_mow_v1() { $this->SetValue_bulgaria_mow_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', 'sex', 'Passport', 'PGivenDate', 'PValid', 'PGivenOrg', ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Field'] == 'VisaEntries') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->Entries_mow_v1, $value); } if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->country_mow_v1, $value); } elseif ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->MaritalStatus_mow_v1, $value); } elseif ($field['Field'] == 'WhoIsPaying') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->WhoIsPaying_mow_v1, $value); } elseif (in_array($field['Field'], array('PreviousShengen_Country', 'PreviousShengen1_Country'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->shengen_countries_mow_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_local_field_value_by_inc($this->OccupationIndex_mow_v1, $value); } } } } $fields['PassportType'] = '0'; $fields['PassportType_Text'] = 'Обычный загранпаспорт'; $fields['SupportMeans'] = '0'; $fields['SupportMeans_Text'] = 'Наличные (CASH) '; $fields['TravelPurpose'] = '0'; $fields['TravelPurpose_Text'] = 'Туризм'; $fields['DatePlace'] = Samo_Datetime::today() . ' Москва'; $this->Refield($fields); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_cyprus_mow_v1() { $this->get_anketa_fields(); $this->OccupationIndex_cyprus_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'occupation'); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Field'] == 'HUMAN') { $field['Value'] = $this->defaults['people_info']['Human']['value']; } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_cyprus_mow_v1; } if ($field['Field'] == 'OccupationIndex') { if ($field['Value'] == '') { $field['Value'] = 12; } } } } unset($fgroup, $field); return true; } public function GetValue_cyprus_mow_v1() { $this->SetValue_cyprus_mow_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', 'sex', 'Passport', 'PValid', ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_local_field_value_by_inc($this->OccupationIndex_cyprus_mow_v1, $value); } } } } $fields['DatePlace'] = 'Moscow ' . Samo_DateTime::today(); $this->Refield($fields); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_austria_mow_v1() { $this->get_anketa_fields(); $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                SELECT TOP 1
                    1
                FROM
                    [dbo].[order] o
                    INNER JOIN dbo.opeople op ON op.claim = o.claim
                WHERE
                    op.people = %d
                    and op.[order] = o.inc
                    and o.freight > 0
            '", $this->defaults['PEOPLE'] ); $freight_exists = $this->db->fetchOne($sql); $freight_exists = false; $this->rf = 70; $this->ussr = 204; $this->country_austria_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'countries'); $this->MaritalStatus_austria_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'marital_status'); $this->OccupationIndex_austria_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'occupation'); $this->shengen_countries_austria_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'shengen_countries'); foreach ($this->fields_anketa as $group => &$fgroup) { foreach ($fgroup as $key => &$field) { if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal'))) { $field['Variants'] = $this->country_austria_mow_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_austria_mow_v1; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_austria_mow_v1; } elseif (in_array($field['Field'], array('PreviousShengenState1', 'PreviousShengenState2'))) { $field['Variants'] = $this->shengen_countries_austria_mow_v1; } if (in_array($field['Field'], array('BirthCountry', 'NationalityOriginal'))) { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = $this->ussr; } else { $field['Value'] = $this->rf; } } } elseif ($field['Field'] == 'Nationality') { if ($field['Value'] == '') { $field['Value'] = $this->rf; } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'Fingers') { if ($field['Value'] == '') { $field['Value'] = 'False'; } else { $field['Value'] = ucfirst(strtolower($field['Value'])); } $field['Variants'] = array(array('Inc' => 'False', 'Name' => 'Нет'), array('Inc' => 'True', 'Name' => 'Да')); } elseif ($field['Field'] == 'SchengenEntryCountry' && !$freight_exists) { $field['Variants'] = $this->shengen_countries_austria_mow_v1; $field['Required'] = 1; $field['Visible'] = 1; $field['Editable'] = 1; } if (in_array($field['Field'], array('GuardianName', 'GuardianSurName', 'GuardianNationality', 'GuardianAddress'))) { if ($this->defaults['people_info']['age']['value'] >= 18) { unset($this->fields_anketa[$group][$key]); } else { $field['Required'] = 1; $field['Visible'] = 1; $field['Editable'] = 1; $field['css_classes'] = array_merge($field['css_classes'], array('required')); } } } } unset($fgroup, $field); return true; } public function GetValue_austria_mow_v1() { $this->SetValue_austria_mow_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array($field['Field'], array('LastLName', 'FirstLName', 'BornDate', 'sex', 'Passport', 'PGivenDate', 'PValid', 'PGivenOrg'))) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->country_austria_mow_v1, $value); } elseif ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->MaritalStatus_austria_mow_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->OccupationIndex_austria_mow_v1, $value); } elseif (in_array($field['Field'], array('PreviousShengenState1', 'PreviousShengenState2', 'SchengenEntryCountry'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->shengen_countries_austria_mow_v1, $value); } } } } $fields['DatePlace'] = $this->DatePlace(); $this->Refield($fields); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function fill_select($form_name, $field_name) { $return = array(); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_anketa_get_visa_form_fields', [ 'form_name' => $form_name, 'field_name' => $field_name, ] ); if ($res = $this->db->fetchAll($sql)) { foreach ($res as $row) { $return[] = array('Inc' => $row['local_field_id'], 'Name' => $row['display_field_value'], 'local_field_value' => $row['local_field_value']); } } return $return; } public function SetValue_greece_mow_v1() { $this->get_anketa_fields(); $this->ussr = 166; $this->rf = 152; $this->OccupationIndex_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'occupation'); $this->country_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'countries'); $this->Visa_center_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'visa_center'); $this->shengen_countries_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'shengen_countries'); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'PassportIssueCountry'))) { $field['Variants'] = $this->country_mow_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_greece_mow_v1; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_mow_v1; } elseif ($field['Field'] == 'SupportMeans') { $field['Variants'] = $this->SupportMeans_greece_mow_v1; } elseif ($field['Field'] == 'Entries') { $field['Variants'] = $this->Entries_greece_mow_v1; } elseif ($field['Field'] == 'WhoPaying') { $field['Variants'] = $this->WhoPaying_greece_mow_v1; } elseif (in_array($field['Field'], array('PreviousShengen_Country', 'PreviousShengen1_Country'))) { $field['Variants'] = $this->shengen_countries_mow_v1; } if ($field['Field'] == 'BirthCountry') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = $this->ussr; } else { $field['Value'] = $this->rf; } } } elseif ($field['Field'] == 'Nationality') { if ($field['Value'] == '') { $field['Value'] = $this->rf; } } elseif ($field['Field'] == 'PassportIssueCountry') { if ($field['Value'] == '') { $field['Value'] = $this->rf; } } elseif ($field['Field'] == 'NationalityOriginal') { if ($field['Value'] == '') { $field['Value'] = $this->rf; } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'OccupationIndex') { if ($field['Value'] == '') { $field['Value'] = 35; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'PGivenOrg') { if ($field['Value'] == '') { $field['Value'] = $this->defaults['people_info']['PGivenOrg']['value']; } } elseif ($field['Field'] == 'ArrivalDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; } elseif ($field['Field'] == 'DepartureDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['DepartureDate']['Value']; } elseif ($field['Field'] == 'StayDuration') { $field['Value'] = $this->fields_anketa['VisaOrder']['StayDuration']['Value']; } elseif ($field['Field'] == 'Entries') { if ($field['Value'] == '') { $field['Value'] = 1; } } elseif ($field['Field'] == 'Visa_center') { $field['Variants'] = $this->Visa_center_mow_v1; } elseif ($field['Field'] == 'Fingers') { if ($field['Value'] == '') { $field['Value'] = 'False'; } else { $field['Value'] = ucfirst(strtolower($field['Value'])); } $field['Variants'] = array(array('Inc' => 'False', 'Name' => 'Нет'), array('Inc' => 'True', 'Name' => 'Да')); } elseif (in_array($field['Field'], array('Spokesman'))) { if ($this->defaults['people_info']['age']['value'] >= 18) { $field['Required'] = 0; $field['Visible'] = 0; $field['Editable'] = 0; } else { $field['Required'] = 1; $field['Visible'] = 1; $field['Editable'] = 1; $field['css_classes'] = array_merge($field['css_classes'], array('required')); } } } } unset($fgroup, $field); return true; } public function GetValue_greece_mow_v1() { $this->SetValue_greece_mow_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { $notAnketaField = in_array($field['Field'], array('LastLName', 'FirstLName', 'BornDate', 'sex', 'Passport', 'PGivenDate', 'PValid', 'PGivenOrg',)); if (!$field['Editable'] && $notAnketaField) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'PassportIssueCountry'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->country_mow_v1, $value); } elseif ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->MaritalStatus_greece_mow_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_local_field_value_by_inc($this->OccupationIndex_mow_v1, $value); } elseif ($field['Field'] == 'WhoPaying') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->WhoPaying_greece_mow_v1, $value); } elseif ($field['Field'] == 'Entries') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->Entries_greece_mow_v1, $value); } elseif ($field['Field'] == 'Visa_center') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->Visa_center_mow_v1, $value); } elseif (in_array($field['Field'], array('PreviousShengen_Country', 'PreviousShengen1_Country'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->shengen_countries_mow_v1, $value); } } } } $fields['PassportType'] = '0'; $fields['PassportType_Text'] = 'Обычный загранпаспорт'; $fields['Purpose'] = '0'; $fields['Purpose_Text'] = 'Туризм'; $fields['DatePlace'] = $this->DatePlace(); $this->Refield($fields); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_greece_ua_v1() { $this->get_anketa_fields(); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if (in_array($field['Field'], array('Nationality', 'NationalityOriginal', 'PassportIssueCountry'))) { $field['Variants'] = $this->country_greece_ua_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_greece_ua_v1; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_greece_ua_v1; } elseif ($field['Field'] == 'SupportMeans') { $field['Variants'] = $this->SupportMeans_greece_ua_v1; } elseif ($field['Field'] == 'Entries') { $field['Variants'] = $this->Entries_greece_ua_v1; } elseif ($field['Field'] == 'WhoPaying') { $field['Variants'] = $this->WhoPaying_greece_ua_v1; } if ($field['Field'] == 'BirthCountry') { if ($field['Value'] == '') { $field['Value'] = $this->defaults['people_info']['BornState']['value']; } } elseif ($field['Field'] == 'CitizenNow') { if ($field['Value'] == '') { $field['Value'] = $this->defaults['people_info']['Citizenship']['value']; } } elseif ($field['Field'] == 'PlaceOfBornDetail') { if ($field['Value'] == '') { $field['Value'] = $this->defaults['people_info']['PlaceOfBornDetail']['value']; } } elseif ($field['Field'] == 'PassportIssueCountry') { if ($field['Value'] == '') { $field['Value'] = 189; } } elseif ($field['Field'] == 'NationalityOriginal') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 166; } else { $field['Value'] = 189; } } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'OccupationIndex') { if ($field['Value'] == '') { $field['Value'] = 35; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'PGivenOrg') { $field['Value'] = $this->defaults['people_info']['PGivenOrg']['value']; } elseif ($field['Field'] == 'ArrivalDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; } elseif ($field['Field'] == 'DepartureDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['DepartureDate']['Value']; } elseif ($field['Field'] == 'StayDuration') { $field['Value'] = $this->fields_anketa['VisaOrder']['StayDuration']['Value']; } elseif ($field['Field'] == 'PreviousShengen') { if ($field['Value'] == '') { $field['Value'] = 'NO'; } } elseif ($field['Field'] == 'Entries') { if ($field['Value'] == '') { $field['Value'] = 1; } } } } unset($fgroup, $field); return true; } public function GetValue_greece_ua_v1() { $this->SetValue_greece_ua_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', 'sex', 'Passport', 'PGivenDate', 'PValid', 'PGivenOrg', ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Field'] == 'Entries') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->Entries_greece_ua_v1, $value); } if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if (in_array($field['Field'], array('Nationality', 'NationalityOriginal', 'PassportIssueCountry'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->country_greece_ua_v1, $value); } elseif ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->MaritalStatus_greece_ua_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_name_by_inc($this->OccupationIndex_greece_ua_v1, $value); } elseif ($field['Field'] == 'WhoPaying') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->WhoPaying_greece_ua_v1, $value); } elseif ($field['Field'] == 'BirthCountry') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->country_greece_ua_v1, $value); } elseif ($field['Field'] == 'CitizenNow') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->country_greece_ua_v1, $value); } elseif ($field['Field'] == 'Nationality') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->country_greece_ua_v1, $value); } } } } $fields['PassportType'] = '0'; $fields['PassportType_Text'] = 'Обычный загранпаспорт'; $fields['Purpose'] = '0'; $fields['Purpose_Text'] = 'Туризм'; $fields['DatePlace'] = ' ' . Samo_Datetime::today(); $this->Refield($fields); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_morocco_ua_v1() { $this->get_anketa_fields(); $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                SELECT top 1
                    h.lname as Hotel_lname
                    , h.address as Hotel_address
                    , h.phones as Hotel_phones
                    , h.faxes as Hotel_faxes
                    , h.email as Hotel_email
                FROM
                    opeople op, [order] o, hotel h
                WHERE
                    op.people = %d
                    and op.[order] = o.inc
                    and o.hotel > 0
                    and o.hotel = h.inc
            '", $this->defaults['PEOPLE'] ); $hotel_info = $this->db->fetchRow($sql); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Field'] == 'PlaceBorn') { $field['Value'] = $this->defaults['people_info']['PlaceBorn']['value']; } elseif ($field['Field'] == 'Address') { $field['Value'] = $this->defaults['people_info']['Address']['value']; } elseif ($field['Field'] == 'Phones') { $field['Value'] = $this->defaults['people_info']['Phones']['value']; } elseif ($field['Field'] == 'PlaceBorn_Text') { $field['Value'] = $this->defaults['people_info']['BornState']['value']; } elseif ($field['Field'] == 'Nationality') { $field['Value'] = $this->defaults['people_info']['Citizenship']['value']; } elseif ($field['Field'] == 'NationalityOriginal') { if ($field['Value'] == '') { $field['Value'] = 'UKRAINE'; } } elseif ($field['Field'] == 'PlaceBornIndex') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'CitizenBornIndex') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'CitizenNowIndex') { if ($field['Value'] == '') { $field['Value'] = 201; } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'OccupationIndex') { if ($field['Value'] == '') { $field['Value'] = 7; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'PGivenOrg') { $field['Value'] = $this->defaults['people_info']['PGivenOrg']['value']; } elseif ($field['Field'] == 'ArrivalDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; } elseif ($field['Field'] == 'DepartureDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['DepartureDate']['Value']; } elseif ($field['Field'] == 'StayDuration') { $field['Value'] = $this->fields_anketa['VisaOrder']['StayDuration']['Value']; } elseif ($field['Field'] == 'Hotel_lname') { $field['Value'] = $hotel_info['Hotel_lname']; } elseif ($field['Field'] == 'Hotel_address') { $field['Value'] = $hotel_info['Hotel_address']; } elseif ($field['Field'] == 'Hotel_phones') { $field['Value'] = $hotel_info['Hotel_phones']; } elseif ($field['Field'] == 'Hotel_faxes') { $field['Value'] = $hotel_info['Hotel_faxes']; } elseif ($field['Field'] == 'Hotel_email') { $field['Value'] = $hotel_info['Hotel_email']; } elseif ($field['Field'] == 'PreviousShengen') { if ($field['Value'] == '') { $field['Value'] = 'NO'; } } } } unset($fgroup, $field); return true; } public function GetValue_morocco_ua_v1() { $this->SetValue_morocco_ua_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', 'sex', 'Nationality', 'Passport', 'PGivenDate', 'PValid', 'PGivenOrg', 'ArrivalDate', 'DepartureDate', 'StayDuration', 'Hotel_lname', 'Hotel_address', 'Hotel_phones', 'Hotel_faxes', 'Hotel_email' ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_name_by_inc($this->MaritalStatus_morocco_ua_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_name_by_inc($this->OccupationIndex_morocco_ua_v1, $value); } elseif ($field['Field'] == 'CitizenBornIndex') { $fields['CitizenBorn_Text'] = $this->get_name_by_inc($this->StateIndex_morocco_ua_v1, $value); } elseif ($field['Field'] == 'CitizenNowIndex') { $fields['CitizenNow_Text'] = $this->get_name_by_inc($this->StateIndex_morocco_ua_v1, $value); } } } } $fields['DatePlace'] = 'KIEV ' . Samo_Datetime::today(); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_czech_mow_v1() { $this->get_anketa_fields(); $this->country_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'countries'); $this->MaritalStatus_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'marital_status'); $this->OccupationIndex_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'occupation'); $this->WhoIsPaying_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'payer'); $this->Entries_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'entries'); $this->Visa_center_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'visa_center'); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'PIssuedBy', 'GuardianNationality'))) { $field['Variants'] = $this->country_mow_v1; } if ($field['Field'] == 'BirthCountry') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'Nationality') { if ($field['Value'] == '') { $field['Value'] = 70; } } elseif ($field['Field'] == 'NationalityOriginal') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_mow_v1; if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_mow_v1; if ($field['Value'] == '') { $field['Value'] = 35; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'ArrivalDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; } elseif ($field['Field'] == 'DepartureDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['DepartureDate']['Value']; } elseif ($field['Field'] == 'StayDuration') { $field['Value'] = $this->fields_anketa['VisaOrder']['StayDuration']['Value']; } elseif ($field['Field'] == 'PIssuedBy') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'WhoIsPaying') { $field['Variants'] = $this->WhoIsPaying_mow_v1; } elseif ($field['Field'] == 'Entries') { $field['Variants'] = $this->Entries_mow_v1; } elseif ($field['Field'] == 'Visa_center') { $field['Variants'] = $this->Visa_center_mow_v1; } elseif ($field['Field'] == 'Fingers') { if ($field['Value'] == '') { $field['Value'] = 'False'; } else { $field['Value'] = ucfirst(strtolower($field['Value'])); } $field['Variants'] = array(array('Inc' => 'False', 'Name' => 'Нет'), array('Inc' => 'True', 'Name' => 'Да')); } if ($this->defaults['people_info']['age']['value'] < 18) { if (in_array($field['Field'], array('GuardianName', 'GuardianSurName', 'GuardianNationality', 'GuardianAddress'))) { $field['Required'] = 1; $field['Editable'] = 1; $field['Visible'] = 1; $field['css_classes'] = array_merge($field['css_classes'], array('required')); } } } } unset($fgroup, $field); return true; } public function GetValue_czech_mow_v1() { $this->SetValue_czech_mow_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', 'sex', 'Passport', 'PGivenDate', 'PValid', ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'GuardianNationality', 'PIssuedBy'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->country_mow_v1, $value); } elseif ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->MaritalStatus_mow_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_local_field_value_by_inc($this->OccupationIndex_mow_v1, $value); } elseif ($field['Field'] == 'WhoIsPaying') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->WhoIsPaying_mow_v1, $value); } elseif ($field['Field'] == 'Entries') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->Entries_mow_v1, $value); } elseif ($field['Field'] == 'Visa_center') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->Visa_center_mow_v1, $value); } } } } $fields['DatePlace'] = $this->DatePlace(); $this->Refield($fields); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_france_mow_v1() { $this->get_anketa_fields(); $this->country_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'countries'); $this->MaritalStatus_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'marital_status'); $this->OccupationIndex_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'occupation'); $this->WhoIsPaying_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'payer'); $this->shengen_countries_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'shengen_countries'); $this->shengen_year_france_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'shengen_year'); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'GuardianNationality'))) { $field['Variants'] = $this->country_mow_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_mow_v1; if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_mow_v1; if ($field['Value'] == '') { $field['Value'] = 36; } } elseif ($field['Field'] == 'WhoIsPaying') { $field['Variants'] = $this->WhoIsPaying_mow_v1; $field['Value'] = 0; } elseif ($field['Field'] == 'BirthSurName_change') { $field['Value'] = 'False'; $field['Variants'] = array(array('Inc' => 'False', 'Name' => 'Нет'), array('Inc' => 'True', 'Name' => 'Да')); } elseif (in_array($field['Field'], array('PreviousShengen_Country', 'PreviousShengen1_Country', 'PreviousShengen2_Country'))) { $field['Variants'] = $this->shengen_countries_mow_v1; } elseif (in_array($field['Field'], array('PreviousShengen_Year', 'PreviousShengen1_Year', 'PreviousShengen2_Year'))) { $field['Variants'] = $this->shengen_year_france_mow_v1; } if ($field['Field'] == 'BirthCountry') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'Nationality') { if ($field['Value'] == '') { $field['Value'] = 70; } } elseif ($field['Field'] == 'NationalityOriginal') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($this->defaults['people_info']['age']['value'] >= 18 && in_array($field['Field'], array('GuardianName', 'GuardianSurName', 'GuardianNationality', 'GuardianAddress'))) { $field['Required'] = false; $field['Visible'] = false; $field['Editable'] = false; } elseif ($field['Field'] == 'GuardianNationality') { if ($field['Value'] == '') { $field['Value'] = 70; } } elseif ($field['Field'] == 'BirthSurName_change') { if ($this->fields_anketa[$field['Group']]['BirthSurName']['Value'] != '') { $field['Value'] = 'True'; } } } } unset($fgroup, $field); return true; } public function GetValue_france_mow_v1() { $this->SetValue_france_mow_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', 'sex', 'Passport', 'PGivenDate', 'PValid', ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'GuardianNationality'))) { if ($field['Field'] == 'BirthCountry') { $this->check_USSR_RF($ussr = 204, $rf = 70, $field, $value); } $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->country_mow_v1, $value); } elseif ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->MaritalStatus_mow_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_local_field_value_by_inc($this->OccupationIndex_mow_v1, $value); } elseif ($field['Field'] == 'WhoIsPaying') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->WhoIsPaying_mow_v1, $value); } elseif (in_array($field['Field'], array('PreviousShengen_Country', 'PreviousShengen1_Country', 'PreviousShengen2_Country'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->shengen_countries_mow_v1, $value); } elseif (in_array($field['Field'], array('PreviousShengen_Year', 'PreviousShengen1_Year', 'PreviousShengen2_Year'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->shengen_year_france_mow_v1, $value); } } } } $fields['PassportType'] = '0'; $fields['PassportType_Text'] = 'Ordinary passport'; $fields['SupportMeans'] = '0'; $fields['SupportMeans_Text'] = 'Наличные (CASH) '; $fields['VisaEntries'] = '2'; $fields['VisaEntries_Text'] = 'Многократно '; $fields['TravelPurpose'] = '0'; $fields['TravelPurpose_Text'] = 'Tourism'; $fields['FirstBorderEntry'] = 74; $fields['FirstBorderEntry_Text'] = 'FRANCE'; $fields['FirstDestination'] = 74; $fields['FirstDestination_Text'] = 'FRANCE'; $fields['DatePlace'] = $this->DatePlace(); $this->Refield($fields); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } public function SetValue_croatia_mow_v1() { $this->get_anketa_fields(); $this->country_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'countries'); $this->MaritalStatus_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'marital_status'); $this->OccupationIndex_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'occupation'); $this->WhoIsPaying_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'payer'); $this->shengen_countries_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'shengen_countries'); $this->shengen_year_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'shengen_year'); $this->Visa_center_mow_v1 = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'visa_center'); $this->ResidencePermit = $this->fill_select($form_name = 'anketa_' . $this->defaults['anketa'], $field_name = 'residence_permit'); foreach ($this->fields_anketa as &$fgroup) { foreach ($fgroup as &$field) { if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'PIssuedBy', 'GuardianNationality'))) { $field['Variants'] = $this->country_mow_v1; } elseif ($field['Field'] == 'MaritalStatus') { $field['Variants'] = $this->MaritalStatus_mow_v1; } elseif ($field['Field'] == 'OccupationIndex') { $field['Variants'] = $this->OccupationIndex_mow_v1; } elseif ($field['Field'] == 'WhoIsPaying') { $field['Variants'] = $this->WhoIsPaying_mow_v1; } elseif ($field['Field'] == 'ResidencePermit') { $field['Variants'] = $this->ResidencePermit; } elseif (in_array($field['Field'], array('PreviousShengen_Country', 'PreviousShengen1_Country', 'PreviousShengen2_Country'))) { $field['Variants'] = $this->shengen_countries_mow_v1; } elseif (in_array($field['Field'], array('PreviousShengen_Year', 'PreviousShengen1_Year', 'PreviousShengen2_Year'))) { $field['Variants'] = $this->shengen_year_mow_v1; } elseif ($field['Field'] == 'BirthSurName_change') { $field['Value'] = 'False'; $field['Variants'] = array(array('Inc' => 'False', 'Name' => 'Нет'), array('Inc' => 'True', 'Name' => 'Да')); } elseif ($field['Field'] == 'Fingers') { if ($field['Value'] == '') { $field['Value'] = 'False'; } else { $field['Value'] = ucfirst(strtolower($field['Value'])); } $field['Variants'] = array(array('Inc' => 'False', 'Name' => 'Нет'), array('Inc' => 'True', 'Name' => 'Да')); } if ($field['Field'] == 'BirthCountry') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'Nationality') { if ($field['Value'] == '') { $field['Value'] = 70; } } elseif ($field['Field'] == 'NationalityOriginal') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'MaritalStatus') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif ($field['Field'] == 'OccupationIndex') { if ($field['Value'] == '') { $field['Value'] = 35; } } elseif ($field['Field'] == 'Passport') { $field['Value'] = $this->defaults['people_info']['PSerie']['value'] . ' ' . $this->defaults['people_info']['PNumber']['value']; } elseif ($field['Field'] == 'PGivenDate') { $field['Value'] = $this->defaults['people_info']['PGivenDate']['value']; } elseif ($field['Field'] == 'PValid') { $field['Value'] = $this->defaults['people_info']['PValid']['value']; } elseif ($field['Field'] == 'ArrivalDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['ArrivalDate']['Value']; } elseif ($field['Field'] == 'DepartureDate') { $field['Value'] = $this->fields_anketa['VisaOrder']['DepartureDate']['Value']; } elseif ($field['Field'] == 'StayDuration') { $field['Value'] = $this->fields_anketa['VisaOrder']['StayDuration']['Value']; } elseif ($field['Field'] == 'PIssuedBy') { if ($field['Value'] == '') { if ($this->defaults['people_info']['BornDate']['value']->lt('25/12/1991')) { $field['Value'] = 204; } else { $field['Value'] = 70; } } } elseif ($field['Field'] == 'ResidencePermit') { if ($field['Value'] == '') { $field['Value'] = 0; } } elseif (in_array($field['Field'], array('GuardianName', 'GuardianSurName', 'GuardianNationality', 'GuardianAddress'))) { if ($this->defaults['people_info']['age']['value'] >= 18) { $field['Required'] = false; $field['Visible'] = false; $field['Editable'] = false; } else { $field['Required'] = true; $field['Visible'] = true; $field['Editable'] = true; $field['css_classes'] = array_merge($field['css_classes'], array('required')); } } elseif ($field['Field'] == 'GuardianNationality') { if ($field['Value'] == '') { $field['Value'] = 70; } } elseif ($field['Field'] == 'BirthSurName_change') { if ($this->fields_anketa[$field['Group']]['BirthSurName']['Value'] != '') { $field['Value'] = 'True'; } } elseif ($field['Field'] == 'Visa_center') { $field['Variants'] = $this->Visa_center_mow_v1; } elseif ($field['Field'] == 'PGivenOrg') { if ($field['Value'] == '') { $field['Value'] = $this->defaults['people_info']['PGivenOrg']['value']; } } } } unset($fgroup, $field); return true; } public function GetValue_croatia_mow_v1() { $this->SetValue_croatia_mow_v1(); $collection = Samo_Request::post('frm'); $fields = array(); foreach ($this->fields_anketa as $group => $fgroup) { foreach ($fgroup as $key => $field) { if (in_array( $field['Field'], array( 'LastLName', 'FirstLName', 'BornDate', 'sex', 'Passport', 'PGivenDate', 'PValid', ) ) ) { unset($this->fields_anketa[$group][$key]); continue; } $value = trim(@$collection[$field['Entity']][-1][$field['Field']]); $value = strtoupper($value); if ($field['Editable']) { $this->check_field($value, $field); } if ($value != '') { $fields[$field['EntityField']] = $value; if (in_array($field['Field'], array('BirthCountry', 'Nationality', 'NationalityOriginal', 'GuardianNationality', 'PIssuedBy'))) { if ($field['Field'] == 'BirthCountry') { $this->check_USSR_RF($ussr = 204, $rf = 70, $field, $value); } $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->country_mow_v1, $value); } elseif ($field['Field'] == 'MaritalStatus') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->MaritalStatus_mow_v1, $value); } elseif ($field['Field'] == 'OccupationIndex') { $fields['Occupation_Text'] = $this->get_local_field_value_by_inc($this->OccupationIndex_mow_v1, $value); } elseif ($field['Field'] == 'WhoIsPaying') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->WhoIsPaying_mow_v1, $value); } elseif ($field['Field'] == 'ResidencePermit') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->ResidencePermit, $value); } elseif ($field['Field'] == 'Visa_center') { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->Visa_center_mow_v1, $value); } elseif (in_array($field['Field'], array('PreviousShengen_Country', 'PreviousShengen1_Country', 'PreviousShengen2_Country'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->shengen_countries_mow_v1, $value); } elseif (in_array($field['Field'], array('PreviousShengen_Year', 'PreviousShengen1_Year', 'PreviousShengen2_Year'))) { $fields[$field['EntityField'] . '_Text'] = $this->get_local_field_value_by_inc($this->shengen_year_mow_v1, $value); } } } } $fields['PassportType'] = '0'; $fields['PassportType_Text'] = 'Ordinary passport'; $fields['SupportMeans'] = '0'; $fields['SupportMeans_Text'] = 'Наличные (CASH) '; $fields['VisaEntries'] = '2'; $fields['VisaEntries_Text'] = 'Многократно '; $fields['TravelPurpose'] = '0'; $fields['TravelPurpose_Text'] = 'Tourism'; $fields['FirstBorderEntry'] = 52; $fields['FirstBorderEntry_Text'] = 'CROATIA'; $fields['FirstDestination'] = 52; $fields['FirstDestination_Text'] = 'CROATIA'; $fields['DatePlace'] = $this->DatePlace(); $this->Refield($fields); $str = ''; foreach ($fields as $key => $value) { $str .= (($str == '') ? '' : chr(13) . chr(10)) . $key . '=' . $value; } return $str; } protected function getExternalDocumentInit() { if ($this->defaults['CLAIM'] && $this->defaults['PEOPLE']) { return $this->getExternalDocumentJob('anketa_' . Samo_Utils::ifs($this->defaults['CLAIM'], '0') . '_' . Samo_Utils::ifs($this->defaults['PEOPLE'], '0'), sprintf('anketa_fr_%%d_%d_%%s.pdf', $this->defaults['PEOPLE'])); } throw new Samo_Exception($this->messages['CANNOT_PRINT']); } protected function getExternalDocumentParams() { $this->is_enabled(); if ($this->external !== true) { throw new Samo_Exception($this->messages['CANNOT_PRINT']); } $params = array( 'claim' => $this->defaults['CLAIM'], 'people' => $this->defaults['PEOPLE'], 'template' => pathinfo($this->defaults['template'], PATHINFO_FILENAME), ); return $params; } public function Refield(&$fields) { return true; } public function History_Print_Anketa() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_4_anketa_History_Print', [ 'People' => intval($this->defaults['PEOPLE']), 'UserCode' => $this->internet_user(), 'Partpass' => $this->getPartPassInc(), ] ); if (false !== ($res = $this->db->query($sql))) { return true; } return false; } public function DatePlace() { $townfrominfo = $this->TownFromInfo(); return $townfrominfo['LName'] . ' ' . Samo_Datetime::today(); } public function DatePlace_china() { return Samo_Datetime::today()->format('Y-m-d'); } public $Entries_greece_mow_v1 = array( array('Inc' => 0, 'Name' => 'Однократная'), array('Inc' => 1, 'Name' => 'Двукратная'), array('Inc' => 2, 'Name' => 'Многократная'), ); public $country_greece_mow = array( array('inc' => 0, 'name' => 'ABW - Aruba'), array('inc' => 1, 'name' => 'AFG - Afghanistan'), array('inc' => 2, 'name' => 'AGO - Angola'), array('inc' => 3, 'name' => 'ALB - Albania'), array('inc' => 4, 'name' => 'AND - Andorra'), array('inc' => 5, 'name' => 'ARE - Unted Arab Emirates'), array('inc' => 6, 'name' => 'ARG - Argentina'), array('inc' => 7, 'name' => 'ARM - Armenia'), array('inc' => 8, 'name' => 'ATG - Antigua and Barbuda'), array('inc' => 9, 'name' => 'AUS - Australia'), array('inc' => 10, 'name' => 'AUT - Austria'), array('inc' => 11, 'name' => 'AZE - Azerbaijan'), array('inc' => 12, 'name' => 'BDI - Burundi'), array('inc' => 13, 'name' => 'BEL - Belgium'), array('inc' => 14, 'name' => 'BEN - Benin'), array('inc' => 15, 'name' => 'BFA - Burkina Faso'), array('inc' => 16, 'name' => 'BGD - Bangladesh'), array('inc' => 17, 'name' => 'BGR - Bulgaria'), array('inc' => 18, 'name' => 'BHR - Bahrain'), array('inc' => 19, 'name' => 'BHS - Bahamas'), array('inc' => 20, 'name' => 'BIH - Bosnia and Herzegovina'), array('inc' => 21, 'name' => 'BLR - Belarus'), array('inc' => 22, 'name' => 'BLZ - Belize'), array('inc' => 23, 'name' => 'BMU - Bermuda(UK)'), array('inc' => 24, 'name' => 'BOL - Bolivia'), array('inc' => 25, 'name' => 'BRA - Brazil'), array('inc' => 26, 'name' => 'BRB - Barbados'), array('inc' => 27, 'name' => 'BRN - Brunei Darussalam'), array('inc' => 28, 'name' => 'BTN - Bhutan'), array('inc' => 29, 'name' => 'BWA - Botswana'), array('inc' => 30, 'name' => 'CAF - Central African Republic'), array('inc' => 31, 'name' => 'CAN - Canada'), array('inc' => 32, 'name' => 'CHE - Switzerland'), array('inc' => 33, 'name' => 'CHL - Chile'), array('inc' => 34, 'name' => 'CHN - China'), array('inc' => 35, 'name' => 'CIV - Cote d` Ivoire'), array('inc' => 36, 'name' => 'CMR - Cameroon'), array('inc' => 37, 'name' => 'COG - Congo'), array('inc' => 38, 'name' => 'COL - Columbia'), array('inc' => 39, 'name' => 'COM - Comoros'), array('inc' => 40, 'name' => 'CPV - Cape Verde'), array('inc' => 41, 'name' => 'CRC - International Committee of the Red Cross'), array('inc' => 41, 'name' => 'CRI - Costa Rica'), array('inc' => 43, 'name' => 'CSK - Czechoslovakia'), array('inc' => 44, 'name' => 'CUB - Cuba'), array('inc' => 45, 'name' => 'CYP - Cyprus'), array('inc' => 46, 'name' => 'CZE - Czech Republic'), array('inc' => 47, 'name' => 'DJI - Djibouti'), array('inc' => 48, 'name' => 'DMA - Dominica'), array('inc' => 49, 'name' => 'DNK - Denmark'), array('inc' => 50, 'name' => 'DOM - Dominican Republic'), array('inc' => 51, 'name' => 'DSL - Germany'), array('inc' => 52, 'name' => 'DZA - Algeria'), array('inc' => 53, 'name' => 'ECU - Ecuador'), array('inc' => 54, 'name' => 'EGY - Egypt'), array('inc' => 55, 'name' => 'ERI - Erithrea'), array('inc' => 56, 'name' => 'ESH - Western Sahara'), array('inc' => 57, 'name' => 'ESP - Spain'), array('inc' => 58, 'name' => 'EST - Estonia'), array('inc' => 59, 'name' => 'ETH - Ethiopia'), array('inc' => 60, 'name' => 'FIN - Finland'), array('inc' => 61, 'name' => 'FJI - Fiji'), array('inc' => 62, 'name' => 'FRA - France'), array('inc' => 63, 'name' => 'FSM - Micronesia (Federated States of)'), array('inc' => 64, 'name' => 'GAB - Gabon'), array('inc' => 65, 'name' => 'GBR - United  Kingdom'), array('inc' => 66, 'name' => 'GEO - Georgia'), array('inc' => 67, 'name' => 'GHA - Ghana'), array('inc' => 68, 'name' => 'GIN - Guinea'), array('inc' => 69, 'name' => 'GMB - Gambia'), array('inc' => 70, 'name' => 'GNB - Guinea-Bissau'), array('inc' => 71, 'name' => 'GNQ - Equatorial Guinea'), array('inc' => 72, 'name' => 'GRC - Greece'), array('inc' => 73, 'name' => 'GRD - Grenada'), array('inc' => 74, 'name' => 'GTM - Guatemala'), array('inc' => 75, 'name' => 'GUY - Guyana'), array('inc' => 76, 'name' => 'HKG - Hong Kong'), array('inc' => 77, 'name' => 'HND - Honduras'), array('inc' => 78, 'name' => 'HRV - Croatia'), array('inc' => 79, 'name' => 'HTI - Haiti'), array('inc' => 80, 'name' => 'HUN - Hungary'), array('inc' => 81, 'name' => 'IDN - Indonesia'), array('inc' => 82, 'name' => 'IND - India'), array('inc' => 83, 'name' => 'IRL - Ireland'), array('inc' => 84, 'name' => 'IRN - Iran'), array('inc' => 85, 'name' => 'IRQ - Iraq'), array('inc' => 86, 'name' => 'ISL - Iceland'), array('inc' => 87, 'name' => 'ISR - Israel'), array('inc' => 88, 'name' => 'ITA - Italia'), array('inc' => 89, 'name' => 'JAM - Jamaica'), array('inc' => 90, 'name' => 'JOR - Jordan'), array('inc' => 91, 'name' => 'JPN - Japan'), array('inc' => 92, 'name' => 'KAZ - Kazakhstan'), array('inc' => 93, 'name' => 'KEN - Kenya'), array('inc' => 94, 'name' => 'KGZ - Kyrgyzstan'), array('inc' => 95, 'name' => 'KHM - Cambodia'), array('inc' => 96, 'name' => 'KIR - Kiribati'), array('inc' => 97, 'name' => 'KNA - Saint Kitts and Nevis'), array('inc' => 98, 'name' => 'KOR - Korea, Republic of'), array('inc' => 99, 'name' => 'KWT - Kuwait'), array('inc' => 100, 'name' => 'LAO - Laos'), array('inc' => 101, 'name' => 'LBN - Lebanon'), array('inc' => 102, 'name' => 'LBR - Liberia'), array('inc' => 103, 'name' => 'LBY - Libyan Arab Jamahiriya'), array('inc' => 104, 'name' => 'LCA - Saint Lucia'), array('inc' => 105, 'name' => 'LIE - Liechtenstein'), array('inc' => 106, 'name' => 'LKA - Sri Lanka'), array('inc' => 107, 'name' => 'LSO - Lesotho'), array('inc' => 108, 'name' => 'LTU - Lithuania'), array('inc' => 109, 'name' => 'LUX - Luxembourg'), array('inc' => 110, 'name' => 'LVA - Latvia'), array('inc' => 111, 'name' => 'MAC - Macau'), array('inc' => 112, 'name' => 'MAR - Morocco'), array('inc' => 113, 'name' => 'MCO - Monaco'), array('inc' => 114, 'name' => 'MDA - Moldova'), array('inc' => 115, 'name' => 'MDG - Madagascar'), array('inc' => 116, 'name' => 'MDV - Maldives'), array('inc' => 117, 'name' => 'MEX - Mexico'), array('inc' => 118, 'name' => 'MHL - Marshall Islands'), array('inc' => 119, 'name' => 'MLI - Mali'), array('inc' => 120, 'name' => 'MLT - Malta'), array('inc' => 121, 'name' => 'MMR - Myanmar'), array('inc' => 122, 'name' => 'MNE - Montenegro'), array('inc' => 123, 'name' => 'MNG - Mongolia'), array('inc' => 123, 'name' => 'MNP - Northern Mariana Islands'), array('inc' => 125, 'name' => 'MOZ - Mozambique'), array('inc' => 126, 'name' => 'MRT - Mauritania'), array('inc' => 127, 'name' => 'MUS - Mauritius'), array('inc' => 128, 'name' => 'MWI - Malawi'), array('inc' => 129, 'name' => 'MYS - Malaysia'), array('inc' => 130, 'name' => 'NAM - Namibia'), array('inc' => 131, 'name' => 'NER - Niger'), array('inc' => 132, 'name' => 'NGA - Nigeria'), array('inc' => 133, 'name' => 'NIC - Nicaragua'), array('inc' => 134, 'name' => 'NLD - Netherlands'), array('inc' => 135, 'name' => 'NOR - Norway'), array('inc' => 136, 'name' => 'NPL - Nepal'), array('inc' => 137, 'name' => 'NRU - Nauru'), array('inc' => 138, 'name' => 'NZL - New Zealand'), array('inc' => 139, 'name' => 'OMN - Oman'), array('inc' => 140, 'name' => 'PAK - Pakistan'), array('inc' => 141, 'name' => 'PAN - Panama'), array('inc' => 142, 'name' => 'PER - Pereu'), array('inc' => 143, 'name' => 'PHL - Philippines'), array('inc' => 144, 'name' => 'PLW - Palau'), array('inc' => 145, 'name' => 'PNG - Papua New Guinea'), array('inc' => 146, 'name' => 'POL - Poland'), array('inc' => 147, 'name' => 'PRK - Korea, Democratic People`s Republic of'), array('inc' => 148, 'name' => 'PRT - Portugal'), array('inc' => 149, 'name' => 'PRY - Paraguay'), array('inc' => 150, 'name' => 'QAT - Qatar'), array('inc' => 151, 'name' => 'ROM - Romania'), array('inc' => 152, 'name' => 'RUS - Russian Federation'), array('inc' => 153, 'name' => 'RWA - Rwanda'), array('inc' => 154, 'name' => 'SAU - Saudi Arabia'), array('inc' => 155, 'name' => 'SCG - Serbia and Montenegro'), array('inc' => 156, 'name' => 'SDN - Sudan'), array('inc' => 157, 'name' => 'SEN - Senegal'), array('inc' => 158, 'name' => 'SGP - Singapore'), array('inc' => 159, 'name' => 'SLB - Solomon Islands'), array('inc' => 160, 'name' => 'SLE - Siera Leone'), array('inc' => 161, 'name' => 'SLV - El Salvador'), array('inc' => 162, 'name' => 'SMR - San Marino'), array('inc' => 163, 'name' => 'SOM - Somalia'), array('inc' => 164, 'name' => 'SRB - Serbia'), array('inc' => 165, 'name' => 'STP - Sao Tome and Principe'), array('inc' => 166, 'name' => 'SUN - Soviet Union'), array('inc' => 167, 'name' => 'SUR - Suriname'), array('inc' => 168, 'name' => 'SVK - Slovakia'), array('inc' => 169, 'name' => 'SVN - Slovenia'), array('inc' => 170, 'name' => 'SWE - Sweden'), array('inc' => 171, 'name' => 'SWZ - Swaziland'), array('inc' => 172, 'name' => 'SYC - Seychelles'), array('inc' => 173, 'name' => 'SYR - Syria'), array('inc' => 174, 'name' => 'TCD - Chad'), array('inc' => 175, 'name' => 'TGO - Togo'), array('inc' => 176, 'name' => 'THA - Thailand'), array('inc' => 177, 'name' => 'TJK - Tajikistan'), array('inc' => 178, 'name' => 'TKM - Turkmenistan'), array('inc' => 179, 'name' => 'TLS - Timor-Leste'), array('inc' => 180, 'name' => 'TON - Tonga'), array('inc' => 181, 'name' => 'TTO - Trinidad and Tobago'), array('inc' => 182, 'name' => 'TUN - Tunisia'), array('inc' => 183, 'name' => 'TUR - Turkey'), array('inc' => 184, 'name' => 'TUV - Tuvalu'), array('inc' => 185, 'name' => 'TWN - Taiwan'), array('inc' => 186, 'name' => 'TYD - Former Yugoslav Republic of Macedonia'), array('inc' => 187, 'name' => 'TZA - Tanzania'), array('inc' => 188, 'name' => 'UGA - Uganda'), array('inc' => 189, 'name' => 'UKR - Ukraine'), array('inc' => 190, 'name' => 'UNK - Kosovo'), array('inc' => 191, 'name' => 'UNO - United Nations (UN)'), array('inc' => 192, 'name' => 'UNR - UNHCR'), array('inc' => 193, 'name' => 'URY - Uruguay'), array('inc' => 194, 'name' => 'USA - United States'), array('inc' => 195, 'name' => 'UZB - Uzbekistan'), array('inc' => 196, 'name' => 'VAT - Vatican City'), array('inc' => 197, 'name' => 'VCT - Saint Vincent and the Grenadines'), array('inc' => 198, 'name' => 'VEN - Venezuela'), array('inc' => 199, 'name' => 'VNM - Vietnam'), array('inc' => 200, 'name' => 'VUT - Vanuatu'), array('inc' => 201, 'name' => 'WSM - Samoa'), array('inc' => 202, 'name' => 'XXA - Stateless persons'), array('inc' => 203, 'name' => 'XXB - Stateless Persons (Convention of 28/9/1954)'), array('inc' => 204, 'name' => 'XXC - Refugees (other)'), array('inc' => 205, 'name' => 'XXP - Palestine'), array('inc' => 206, 'name' => 'XXT - Tibet'), array('inc' => 207, 'name' => 'XXU - Yugoslavia before independence of FYROM'), array('inc' => 208, 'name' => 'XXX - Uncertain Nationality'), array('inc' => 209, 'name' => 'XXY - Palestinian nationality (used by Germany)'), array('inc' => 210, 'name' => 'YEM - Yemen'), array('inc' => 211, 'name' => 'YMD - Peopole"s Republic of Yemen'), array('inc' => 212, 'name' => 'YUG - Yugoslavia'), array('inc' => 213, 'name' => 'ZAF - South Africa'), array('inc' => 214, 'name' => 'ZAR - Congo,Democratic Republic of (formely Zaire)'), array('inc' => 215, 'name' => 'ZMB - Zambia'), array('inc' => 216, 'name' => 'ZWE - Zimbabwe'), ); public $country_india_mow_v1 = array( array('Inc' => 168, 'Name' => 'UNITED STATES OF AMERICA'), array('Inc' => 10, 'Name' => 'AFGHANISTAN'), array('Inc' => 11, 'Name' => 'ALBANIA'), array('Inc' => 12, 'Name' => 'ALGERIA'), array('Inc' => 13, 'Name' => 'ANGOLA'), array('Inc' => 14, 'Name' => 'ANGUILLA'), array('Inc' => 15, 'Name' => 'ANTIGUA AND BARBADOS'), array('Inc' => 16, 'Name' => 'ARGENTINA'), array('Inc' => 17, 'Name' => 'ARMENIA'), array('Inc' => 18, 'Name' => 'ARUBA'), array('Inc' => 3, 'Name' => 'AUSTRALIA'), array('Inc' => 19, 'Name' => 'AUSTRIA'), array('Inc' => 20, 'Name' => 'AZERBAIJAN'), array('Inc' => 21, 'Name' => 'BAHAMAS'), array('Inc' => 22, 'Name' => 'BAHRAIN'), array('Inc' => 23, 'Name' => 'BANGLADESH'), array('Inc' => 24, 'Name' => 'BARBADOS'), array('Inc' => 25, 'Name' => 'BELARUS'), array('Inc' => 26, 'Name' => 'BELGIUM'), array('Inc' => 27, 'Name' => 'BELIZE'), array('Inc' => 28, 'Name' => 'BENIN'), array('Inc' => 29, 'Name' => 'BHUTAN'), array('Inc' => 30, 'Name' => 'BOLIVIA'), array('Inc' => 36, 'Name' => 'BOSNIA'), array('Inc' => 31, 'Name' => 'BOTSWANA'), array('Inc' => 32, 'Name' => 'BRAZIL'), array('Inc' => 33, 'Name' => 'BRUNEI'), array('Inc' => 34, 'Name' => 'BULGARIA'), array('Inc' => 35, 'Name' => 'BURKINA FASO'), array('Inc' => 193, 'Name' => 'BURUNDI'), array('Inc' => 37, 'Name' => 'CAMBODIA'), array('Inc' => 38, 'Name' => 'CAMEROON'), array('Inc' => 4, 'Name' => 'CANADA'), array('Inc' => 39, 'Name' => 'CAPE VERDE ISLANDS'), array('Inc' => 40, 'Name' => 'CAYMAN ISLANDS'), array('Inc' => 41, 'Name' => 'CENTRAL AFRICAN REPU'), array('Inc' => 42, 'Name' => 'CHAD'), array('Inc' => 43, 'Name' => 'CHILE'), array('Inc' => 44, 'Name' => 'CHINA'), array('Inc' => 45, 'Name' => 'COLOMBIA'), array('Inc' => 46, 'Name' => 'COMOROS'), array('Inc' => 47, 'Name' => 'CONGO'), array('Inc' => 48, 'Name' => 'COSTA RICA'), array('Inc' => 49, 'Name' => 'CUBA'), array('Inc' => 50, 'Name' => 'CYPRUS'), array('Inc' => 51, 'Name' => 'CZECH'), array('Inc' => 195, 'Name' => 'DEMOCRATIC REPUBLIC OF CONGO'), array('Inc' => 55, 'Name' => 'DENMARK'), array('Inc' => 56, 'Name' => 'DJIBOUTI'), array('Inc' => 57, 'Name' => 'DOMINICA'), array('Inc' => 58, 'Name' => 'DOMINICAN REPUBLIC'), array('Inc' => 59, 'Name' => 'ECUADOR'), array('Inc' => 60, 'Name' => 'EGYPT'), array('Inc' => 61, 'Name' => 'EL SALVADOR'), array('Inc' => 62, 'Name' => 'EQUITORIAL GUINEA'), array('Inc' => 63, 'Name' => 'ESTONIA'), array('Inc' => 64, 'Name' => 'ETHIOPIA'), array('Inc' => 179, 'Name' => 'FIJI'), array('Inc' => 65, 'Name' => 'FINLAND'), array('Inc' => 66, 'Name' => 'FRANCE'), array('Inc' => 67, 'Name' => 'GABON'), array('Inc' => 68, 'Name' => 'GAMBIA'), array('Inc' => 69, 'Name' => 'GEORGIA'), array('Inc' => 70, 'Name' => 'GERMANY'), array('Inc' => 71, 'Name' => 'GHANA'), array('Inc' => 72, 'Name' => 'GREECE'), array('Inc' => 73, 'Name' => 'GRENADA'), array('Inc' => 74, 'Name' => 'GUATEMALA'), array('Inc' => 76, 'Name' => 'GUINEA'), array('Inc' => 75, 'Name' => 'GUINEA BISSAU'), array('Inc' => 77, 'Name' => 'GUYANA'), array('Inc' => 78, 'Name' => 'HAITI'), array('Inc' => 79, 'Name' => 'HOLY SEE'), array('Inc' => 80, 'Name' => 'HONDURAS'), array('Inc' => 81, 'Name' => 'HONG KONG'), array('Inc' => 181, 'Name' => 'HUNGURY'), array('Inc' => 82, 'Name' => 'ICELAND'), array('Inc' => 5, 'Name' => 'INDIA'), array('Inc' => 83, 'Name' => 'INDONESIA'), array('Inc' => 52, 'Name' => 'IRAN'), array('Inc' => 84, 'Name' => 'IRAQ'), array('Inc' => 85, 'Name' => 'IRELAND'), array('Inc' => 86, 'Name' => 'ISRAEL'), array('Inc' => 87, 'Name' => 'ITALY'), array('Inc' => 191, 'Name' => 'IVORY COAST'), array('Inc' => 88, 'Name' => 'JAMAICA'), array('Inc' => 89, 'Name' => 'JAPAN'), array('Inc' => 90, 'Name' => 'JORDAN'), array('Inc' => 91, 'Name' => 'KAZAKHSTAN'), array('Inc' => 92, 'Name' => 'KENYA'), array('Inc' => 93, 'Name' => 'KOREA(DPR)'), array('Inc' => 94, 'Name' => 'KOREA(REPUBLIC OF)'), array('Inc' => 95, 'Name' => 'KUWAIT'), array('Inc' => 96, 'Name' => 'KYRGHYZSTAN'), array('Inc' => 97, 'Name' => 'LAOS'), array('Inc' => 98, 'Name' => 'LATVIA'), array('Inc' => 99, 'Name' => 'LEBANON'), array('Inc' => 100, 'Name' => 'LESOTHO'), array('Inc' => 101, 'Name' => 'LIBERIA'), array('Inc' => 102, 'Name' => 'LIBYA'), array('Inc' => 103, 'Name' => 'LITHUANIA'), array('Inc' => 104, 'Name' => 'LUXEMBOURG'), array('Inc' => 105, 'Name' => 'MACAU'), array('Inc' => 190, 'Name' => 'MACEDONIA'), array('Inc' => 106, 'Name' => 'MADAGASCAR'), array('Inc' => 107, 'Name' => 'MALAWI'), array('Inc' => 108, 'Name' => 'MALAYSIA'), array('Inc' => 109, 'Name' => 'MALDIVES'), array('Inc' => 110, 'Name' => 'MALI'), array('Inc' => 111, 'Name' => 'MALTA'), array('Inc' => 112, 'Name' => 'MAURITANIA'), array('Inc' => 113, 'Name' => 'MAURITIUS'), array('Inc' => 114, 'Name' => 'MEXICO'), array('Inc' => 187, 'Name' => 'MOLDOVA'), array('Inc' => 180, 'Name' => 'MONACO'), array('Inc' => 115, 'Name' => 'MONGOLIA'), array('Inc' => 116, 'Name' => 'MONTSERRAT'), array('Inc' => 117, 'Name' => 'MOROCCO'), array('Inc' => 118, 'Name' => 'MOZAMBIQUE'), array('Inc' => 119, 'Name' => 'MYANMAR'), array('Inc' => 120, 'Name' => 'NAMIBIA'), array('Inc' => 121, 'Name' => 'NAURU'), array('Inc' => 123, 'Name' => 'NETHERLANDS'), array('Inc' => 122, 'Name' => 'NETHERLANDS ANTILLES'), array('Inc' => 124, 'Name' => 'NEW ZEALAND'), array('Inc' => 125, 'Name' => 'NICARAGUA'), array('Inc' => 126, 'Name' => 'NIGER'), array('Inc' => 127, 'Name' => 'NIGERIA'), array('Inc' => 128, 'Name' => 'NORWAY'), array('Inc' => 129, 'Name' => 'OMAN'), array('Inc' => 9, 'Name' => 'PAKISTAN'), array('Inc' => 194, 'Name' => 'PALAU'), array('Inc' => 130, 'Name' => 'PANAMA'), array('Inc' => 131, 'Name' => 'PAPUA NEW GUINEA'), array('Inc' => 132, 'Name' => 'PARAGUAY'), array('Inc' => 133, 'Name' => 'PERU'), array('Inc' => 134, 'Name' => 'PHILLIPPINES'), array('Inc' => 135, 'Name' => 'POLAND'), array('Inc' => 136, 'Name' => 'PORTUGAL'), array('Inc' => 182, 'Name' => 'REPUBLIC OF CROATIA'), array('Inc' => 184, 'Name' => 'REPUBLIC OF SLOVENIA'), array('Inc' => 137, 'Name' => 'REUNION ISLANDS'), array('Inc' => 138, 'Name' => 'ROMANIA'), array('Inc' => 139, 'Name' => 'RUSSIA'), array('Inc' => 140, 'Name' => 'RWANDA'), array('Inc' => 189, 'Name' => 'SAINT CHRISTOPHER AND NEVIS'), array('Inc' => 192, 'Name' => 'SAINT LUCIA'), array('Inc' => 141, 'Name' => 'SAN MARINO'), array('Inc' => 142, 'Name' => 'SAO TOME AND PRIncIP'), array('Inc' => 143, 'Name' => 'SAUDI ARABIA'), array('Inc' => 144, 'Name' => 'SENEGAL'), array('Inc' => 201, 'Name' => 'SERBIA'), array('Inc' => 145, 'Name' => 'SEYCHELLES'), array('Inc' => 146, 'Name' => 'SIERRA LEONE'), array('Inc' => 147, 'Name' => 'SINGAPORE'), array('Inc' => 183, 'Name' => 'SLOVAK REPUBLIC'), array('Inc' => 148, 'Name' => 'SOLOMON ISLANDS'), array('Inc' => 53, 'Name' => 'SOMALIA'), array('Inc' => 178, 'Name' => 'SOUTH AFRICA'), array('Inc' => 149, 'Name' => 'SPAIN'), array('Inc' => 54, 'Name' => 'SRI LANKA'), array('Inc' => 185, 'Name' => 'STATE LESS'), array('Inc' => 150, 'Name' => 'SUDAN'), array('Inc' => 151, 'Name' => 'SURINAME'), array('Inc' => 152, 'Name' => 'SWAZILAND'), array('Inc' => 153, 'Name' => 'SWEDEN'), array('Inc' => 154, 'Name' => 'SWITZERLAND'), array('Inc' => 155, 'Name' => 'SYRIA'), array('Inc' => 188, 'Name' => 'TAIWAN'), array('Inc' => 200, 'Name' => 'TAJIKISTAN'), array('Inc' => 156, 'Name' => 'TANZANIA'), array('Inc' => 157, 'Name' => 'THAILAND'), array('Inc' => 199, 'Name' => 'TIBET'), array('Inc' => 158, 'Name' => 'TOGO'), array('Inc' => 159, 'Name' => 'TONGA'), array('Inc' => 197, 'Name' => 'TRAVEL DOC ISSUED BY INDIA'), array('Inc' => 198, 'Name' => 'TRAVEL DOC ISSUED BY OTHERS'), array('Inc' => 196, 'Name' => 'TRAVEL DOCUMENY ISSUED BY USA'), array('Inc' => 160, 'Name' => 'TRINIDAD AND TOBAGO'), array('Inc' => 161, 'Name' => 'TUNISIA'), array('Inc' => 162, 'Name' => 'TURKEY'), array('Inc' => 163, 'Name' => 'TURKMENISTAN'), array('Inc' => 164, 'Name' => 'TURKS AND CAICOS ISL'), array('Inc' => 165, 'Name' => 'TUVALU'), array('Inc' => 166, 'Name' => 'UGANDA'), array('Inc' => 167, 'Name' => 'UKRAINE'), array('Inc' => 7, 'Name' => 'UNITED ARAB EMIRATES'), array('Inc' => 8, 'Name' => 'UNITED KINGDOM'), array('Inc' => 186, 'Name' => 'UNITED NATIONS'), array('Inc' => 169, 'Name' => 'URAGUAY'), array('Inc' => 170, 'Name' => 'UZBEKISTAN'), array('Inc' => 171, 'Name' => 'VANUATU'), array('Inc' => 172, 'Name' => 'VENEZUELA'), array('Inc' => 173, 'Name' => 'VIETNAM'), array('Inc' => 174, 'Name' => 'YEMEN'), array('Inc' => 175, 'Name' => 'YUGOSLAVIA'), array('Inc' => 176, 'Name' => 'ZAMBIA'), array('Inc' => 177, 'Name' => 'ZIMBABWE'), ); public $duration_period_india_mow_v1 = array( array('Inc' => 1, 'Name' => '3 month'), array('Inc' => 2, 'Name' => '6 months'), array('Inc' => 3, 'Name' => '9 months'), array('Inc' => 4, 'Name' => '1 Year'), array('Inc' => 5, 'Name' => '2 Year'), array('Inc' => 6, 'Name' => '3 Year'), array('Inc' => 7, 'Name' => '72 Hour'), array('Inc' => 8, 'Name' => '5 Year'), array('Inc' => 9, 'Name' => '2 months'), array('Inc' => 10, 'Name' => '1 months'), array('Inc' => 11, 'Name' => '10 Years'), array('Inc' => 12, 'Name' => '15 days'), array('Inc' => 13, 'Name' => '7 months'), array('Inc' => 14, 'Name' => '8 months'), array('Inc' => 15, 'Name' => '4 months'), array('Inc' => 16, 'Name' => '5 months'), array('Inc' => 17, 'Name' => '8 Years'), array('Inc' => 18, 'Name' => '4 Years'), array('Inc' => 19, 'Name' => '38 months'), array('Inc' => 20, 'Name' => '40 months'), array('Inc' => 21, 'Name' => '45 days'), array('Inc' => 22, 'Name' => '10 months'), array('Inc' => 23, 'Name' => '13 months'), array('Inc' => 24, 'Name' => '68 months'), array('Inc' => 25, 'Name' => '1 week') ); public $entries_india_mow_v1 = array( array('Inc' => 1, 'Name' => 'Однократно'), array('Inc' => 3, 'Name' => 'Двукратно') ); public $purpose_india_mow_v1 = array( array('Inc' => 3, 'Name' => 'Туризм'), ); public $country_spain_mow_v1 = array( array('Inc' => 0, 'Name' => 'AFGHANISTAN'), array('Inc' => 1, 'Name' => 'ALBANIA'), array('Inc' => 2, 'Name' => 'GERMANY'), array('Inc' => 3, 'Name' => 'ANDORRA'), array('Inc' => 4, 'Name' => 'ANGOLA'), array('Inc' => 5, 'Name' => 'ANTIGUA AND BARBUDA'), array('Inc' => 6, 'Name' => 'STATELESS'), array('Inc' => 7, 'Name' => 'SAUDI ARABIA'), array('Inc' => 8, 'Name' => 'ALGERIA'), array('Inc' => 9, 'Name' => 'ARGENTINA'), array('Inc' => 10, 'Name' => 'ARMENIA'), array('Inc' => 11, 'Name' => 'ARUBA'), array('Inc' => 12, 'Name' => 'AUSTRALIA'), array('Inc' => 13, 'Name' => 'AZERBAIJAN'), array('Inc' => 14, 'Name' => 'BAHAMAS'), array('Inc' => 15, 'Name' => 'BAHRAIN'), array('Inc' => 16, 'Name' => 'BANGLADESH'), array('Inc' => 17, 'Name' => 'BARBADOS'), array('Inc' => 18, 'Name' => 'BELARUS'), array('Inc' => 19, 'Name' => 'BELGIUM'), array('Inc' => 20, 'Name' => 'BELIZE'), array('Inc' => 21, 'Name' => 'BENIN'), array('Inc' => 22, 'Name' => 'BHUTAN'), array('Inc' => 23, 'Name' => 'BOLIVIA'), array('Inc' => 24, 'Name' => 'BOPHUTHATSWANA'), array('Inc' => 25, 'Name' => 'BOSNIA HERZEGOVINA'), array('Inc' => 26, 'Name' => 'BOTSWANA'), array('Inc' => 27, 'Name' => 'BRASIL'), array('Inc' => 28, 'Name' => 'BRUNEI DARUSSALAM'), array('Inc' => 29, 'Name' => 'BULGARIA'), array('Inc' => 30, 'Name' => 'BURKINA FASSO'), array('Inc' => 31, 'Name' => 'BURUNDI'), array('Inc' => 32, 'Name' => 'CAPE VERDE'), array('Inc' => 33, 'Name' => 'CAMBODIA'), array('Inc' => 34, 'Name' => 'CAMEROON'), array('Inc' => 35, 'Name' => 'CANADA'), array('Inc' => 36, 'Name' => 'CENTRAL AFRICAN REPUBLIC'), array('Inc' => 37, 'Name' => 'CHAD'), array('Inc' => 38, 'Name' => 'CZECH REPUBLIC'), array('Inc' => 39, 'Name' => 'CZECHOSLOVAKIA'), array('Inc' => 40, 'Name' => 'CHILE'), array('Inc' => 41, 'Name' => 'CHINA'), array('Inc' => 42, 'Name' => 'CYPRUS'), array('Inc' => 43, 'Name' => 'CISKEI'), array('Inc' => 44, 'Name' => 'COLOMBIA'), array('Inc' => 45, 'Name' => 'COMOROS'), array('Inc' => 46, 'Name' => 'CONGO'), array('Inc' => 47, 'Name' => 'CONGO, REPUB. DEMOC.'), array('Inc' => 48, 'Name' => 'KOREA, DEMOC. PPL.`S REP.'), array('Inc' => 49, 'Name' => 'KOREA, REPUBLIC'), array('Inc' => 50, 'Name' => 'IVORY COAST'), array('Inc' => 51, 'Name' => 'COSTA RICA'), array('Inc' => 52, 'Name' => 'CROATIA'), array('Inc' => 53, 'Name' => 'INTERNL RED CROSS.'), array('Inc' => 54, 'Name' => 'CUBA'), array('Inc' => 55, 'Name' => 'DENMARK'), array('Inc' => 56, 'Name' => 'DJIBUTI'), array('Inc' => 57, 'Name' => 'DOMINICA'), array('Inc' => 58, 'Name' => 'DOMINICAN REPUBLIC'), array('Inc' => 59, 'Name' => 'ECUADOR'), array('Inc' => 60, 'Name' => 'EGYPT'), array('Inc' => 61, 'Name' => 'EL SALVADOR'), array('Inc' => 62, 'Name' => 'U. ARAB EMIRATES'), array('Inc' => 63, 'Name' => 'ERITREA'), array('Inc' => 64, 'Name' => 'SLOVAKIA'), array('Inc' => 65, 'Name' => 'SLOVENIA'), array('Inc' => 66, 'Name' => 'SPAIN'), array('Inc' => 67, 'Name' => 'UNITED STATES'), array('Inc' => 68, 'Name' => 'ESTONIA'), array('Inc' => 69, 'Name' => 'ETHIOPIA'), array('Inc' => 70, 'Name' => 'RUSSIAN FEDERATION'), array('Inc' => 71, 'Name' => 'FIDJI (ISLANDS)'), array('Inc' => 72, 'Name' => 'PHILIPPINES'), array('Inc' => 73, 'Name' => 'FINLAND'), array('Inc' => 74, 'Name' => 'FRANCE'), array('Inc' => 75, 'Name' => 'GABON'), array('Inc' => 76, 'Name' => 'GAMBIA'), array('Inc' => 77, 'Name' => 'GEORGIA'), array('Inc' => 78, 'Name' => 'GHANA'), array('Inc' => 79, 'Name' => 'GRANADA'), array('Inc' => 80, 'Name' => 'GREECE'), array('Inc' => 81, 'Name' => 'GUATEMALA'), array('Inc' => 82, 'Name' => 'GUYANA'), array('Inc' => 83, 'Name' => 'GUINEA'), array('Inc' => 84, 'Name' => 'GUINEA BISSAU'), array('Inc' => 85, 'Name' => 'EQUATORIAL GUINEA'), array('Inc' => 86, 'Name' => 'HAITI'), array('Inc' => 87, 'Name' => 'NETHERLANDS'), array('Inc' => 88, 'Name' => 'HONDURAS'), array('Inc' => 89, 'Name' => 'HONG KONG (CHINA)'), array('Inc' => 90, 'Name' => 'HONG KONG (GB)'), array('Inc' => 91, 'Name' => 'HUNGARY'), array('Inc' => 92, 'Name' => 'INDIA'), array('Inc' => 93, 'Name' => 'INDONESIA'), array('Inc' => 94, 'Name' => 'IRAN, REP. ISLAMIC OF'), array('Inc' => 95, 'Name' => 'IRAQ'), array('Inc' => 96, 'Name' => 'IRELAND'), array('Inc' => 97, 'Name' => 'ICELAND'), array('Inc' => 98, 'Name' => 'ISRAEL'), array('Inc' => 99, 'Name' => 'ITALY'), array('Inc' => 100, 'Name' => 'JAMAICA'), array('Inc' => 101, 'Name' => 'JAPAN'), array('Inc' => 102, 'Name' => 'JORDAN'), array('Inc' => 103, 'Name' => 'KAZAKHSTAN'), array('Inc' => 104, 'Name' => 'KYRGYZSTAN'), array('Inc' => 105, 'Name' => 'KIRIBATI'), array('Inc' => 106, 'Name' => 'KUWAIT'), array('Inc' => 107, 'Name' => 'LAOS'), array('Inc' => 108, 'Name' => 'LESOTHO'), array('Inc' => 109, 'Name' => 'LATVIA'), array('Inc' => 110, 'Name' => 'LEBANON'), array('Inc' => 111, 'Name' => 'LIBERIA'), array('Inc' => 112, 'Name' => 'LIBYA'), array('Inc' => 113, 'Name' => 'LIECHTENSTEIN'), array('Inc' => 114, 'Name' => 'LITHUANIA'), array('Inc' => 115, 'Name' => 'LUXEMBOURG'), array('Inc' => 116, 'Name' => 'MACAO'), array('Inc' => 117, 'Name' => 'MACEDONIA'), array('Inc' => 118, 'Name' => 'MADAGASCAR'), array('Inc' => 119, 'Name' => 'MALAYSIA'), array('Inc' => 120, 'Name' => 'MALAWI'), array('Inc' => 121, 'Name' => 'MALDIVES (ISLANDS)'), array('Inc' => 122, 'Name' => 'MALI'), array('Inc' => 123, 'Name' => 'MALTA'), array('Inc' => 124, 'Name' => 'MARIANAS (ISLANDS)'), array('Inc' => 125, 'Name' => 'MOROCCO'), array('Inc' => 126, 'Name' => 'MARSCHALL (ISLANDS)'), array('Inc' => 127, 'Name' => 'MAURITANIA'), array('Inc' => 128, 'Name' => 'MEXICO'), array('Inc' => 129, 'Name' => 'MICRONESIA, FED STATES'), array('Inc' => 130, 'Name' => 'MOLDOVA'), array('Inc' => 131, 'Name' => 'MONACO'), array('Inc' => 132, 'Name' => 'MONGOLIA'), array('Inc' => 133, 'Name' => 'MONTENEGRO'), array('Inc' => 134, 'Name' => 'MOZAMBIQUE'), array('Inc' => 135, 'Name' => 'MYANMAR (BURMA)'), array('Inc' => 136, 'Name' => 'NAMIBIA'), array('Inc' => 137, 'Name' => 'NAURU'), array('Inc' => 138, 'Name' => 'NEPAL'), array('Inc' => 139, 'Name' => 'NICARAGUA'), array('Inc' => 140, 'Name' => 'NIGER'), array('Inc' => 141, 'Name' => 'NIGERIA'), array('Inc' => 142, 'Name' => 'NORWAY'), array('Inc' => 143, 'Name' => 'NEW ZEALAND'), array('Inc' => 144, 'Name' => 'O.N.U.'), array('Inc' => 145, 'Name' => 'OTHER'), array('Inc' => 146, 'Name' => 'PACIFIC (ISLANDS)'), array('Inc' => 147, 'Name' => 'PAKISTAN'), array('Inc' => 148, 'Name' => 'PALAU'), array('Inc' => 149, 'Name' => 'PALESTINE'), array('Inc' => 150, 'Name' => 'PALESTINIAN NOT ACKNOWLEDGE.'), array('Inc' => 151, 'Name' => 'PANAMA'), array('Inc' => 152, 'Name' => 'PAPUA NEW GUINEA'), array('Inc' => 153, 'Name' => 'PARAGUAY'), array('Inc' => 154, 'Name' => 'PERU'), array('Inc' => 155, 'Name' => 'POLAND'), array('Inc' => 156, 'Name' => 'PORTUGAL'), array('Inc' => 157, 'Name' => 'QATAR'), array('Inc' => 158, 'Name' => 'REFUGEES (OTHERS)'), array('Inc' => 159, 'Name' => 'REFUGEES C28/09/1954'), array('Inc' => 160, 'Name' => 'UNITED KINGDOM'), array('Inc' => 161, 'Name' => 'RWANDA'), array('Inc' => 162, 'Name' => 'ROMANIA'), array('Inc' => 163, 'Name' => 'WESTERN SAHARA'), array('Inc' => 164, 'Name' => 'SOLOMON (ISLANDS)'), array('Inc' => 165, 'Name' => 'WESTERN SAMOA'), array('Inc' => 166, 'Name' => 'SAINT KITTS AND NEVIS'), array('Inc' => 167, 'Name' => 'SAN MARINO'), array('Inc' => 168, 'Name' => 'SAINT VINCENT AND GRANAD.'), array('Inc' => 169, 'Name' => 'SANTA LUCIA'), array('Inc' => 170, 'Name' => 'HOLY SEE'), array('Inc' => 171, 'Name' => 'SAO TOME AND PRINCIPE'), array('Inc' => 172, 'Name' => 'SEICHELLES (ISLANDS)'), array('Inc' => 173, 'Name' => 'SENEGAL'), array('Inc' => 174, 'Name' => 'SERBIA'), array('Inc' => 175, 'Name' => 'SERBIA AND MONTENEGRO'), array('Inc' => 176, 'Name' => 'SIERRA LEONE'), array('Inc' => 177, 'Name' => 'SINGAPORE'), array('Inc' => 178, 'Name' => 'SYRIA'), array('Inc' => 179, 'Name' => 'SOMALIA'), array('Inc' => 180, 'Name' => 'SRI LANKA'), array('Inc' => 181, 'Name' => 'SOUTH AFRICA'), array('Inc' => 182, 'Name' => 'SUDAN'), array('Inc' => 183, 'Name' => 'SWEDEN'), array('Inc' => 184, 'Name' => 'SWITZERLAND'), array('Inc' => 185, 'Name' => 'SURINAME'), array('Inc' => 186, 'Name' => 'SWAZILANDIA'), array('Inc' => 187, 'Name' => 'TADJIKISTAN'), array('Inc' => 188, 'Name' => 'THAILAND'), array('Inc' => 189, 'Name' => 'TAIWAN, CHINA'), array('Inc' => 190, 'Name' => 'TANZANIA, REPUBLIC'), array('Inc' => 191, 'Name' => 'TIBET'), array('Inc' => 192, 'Name' => 'EAST TIMOR'), array('Inc' => 193, 'Name' => 'TOGO'), array('Inc' => 194, 'Name' => 'TONGA'), array('Inc' => 195, 'Name' => 'TRANSKEY'), array('Inc' => 196, 'Name' => 'TRINIDAD AND TOBAGO'), array('Inc' => 197, 'Name' => 'TUNISIA'), array('Inc' => 198, 'Name' => 'TURKMENISTAN'), array('Inc' => 199, 'Name' => 'TURKEY'), array('Inc' => 200, 'Name' => 'TUVALU'), array('Inc' => 201, 'Name' => 'UKRAINE'), array('Inc' => 202, 'Name' => 'UGANDA'), array('Inc' => 203, 'Name' => 'UNHCR'), array('Inc' => 204, 'Name' => 'USSR'), array('Inc' => 205, 'Name' => 'URUGUAY'), array('Inc' => 206, 'Name' => 'UZBEKISTAN'), array('Inc' => 207, 'Name' => 'VANUATU-NEW HEBRIDES'), array('Inc' => 208, 'Name' => 'VENDA'), array('Inc' => 209, 'Name' => 'VENEZUELA'), array('Inc' => 210, 'Name' => 'VIETNAM'), array('Inc' => 211, 'Name' => 'YEMEN (P.D.R.)'), array('Inc' => 212, 'Name' => 'YEMEN REPUBLIC'), array('Inc' => 213, 'Name' => 'YUGOSLAVIA (FORMER)'), array('Inc' => 214, 'Name' => 'ZAMBIA'), array('Inc' => 215, 'Name' => 'ZIMBABWE'), array('Inc' => 216, 'Name' => 'AUSTRIA'), ); public $MaritalStatus_spain_mow_v1 = array( array('Inc' => 0, 'Name' => 'Married - женат / замужем'), array('Inc' => 1, 'Name' => 'Divorced - разведен(а)'), array('Inc' => 2, 'Name' => 'Separated - не проживает с супругом'), array('Inc' => 3, 'Name' => 'Single - холост / не замужем'), array('Inc' => 4, 'Name' => 'Widow(er) - вдовец / вдова'), ); public $WhoIsPaying_spain_mow_v1 = array( array('Inc' => 0, 'Name' => 'Я'), array('Inc' => 1, 'Name' => 'Спонсор'), ); public $residence_permit_spain_mow_v1 = array( array('Inc' => 0, 'Name' => 'National'), array('Inc' => 1, 'Name' => 'Resident'), array('Inc' => 2, 'Name' => 'Non resident'), ); public $residence_permit_malta_mow_v1 = array( array('Inc' => 0, 'Name' => 'National'), array('Inc' => 1, 'Name' => 'Resident'), array('Inc' => 2, 'Name' => 'Non resident'), ); public $MaritalStatus_spain_ua_v1 = array( array('Inc' => 0, 'Name' => 'Single – холост/не замужем'), array('Inc' => 1, 'Name' => 'Married – женат/ замужем'), array('Inc' => 2, 'Name' => 'Separated – женат/ замужем, но живут раздельно'), array('Inc' => 3, 'Name' => 'Divorced – разведен(а)'), array('Inc' => 4, 'Name' => 'Widow(er) – вдова/вдовец'), array('Inc' => 5, 'Name' => 'Other civil marriage – гражданский брак') ); public $StateIndex_spain_ua_v1 = array( array('Inc' => 0, 'Name' => 'AFGHANISTAN'), array('Inc' => 1, 'Name' => 'ALBANIA'), array('Inc' => 2, 'Name' => 'GERMANY'), array('Inc' => 3, 'Name' => 'ANDORRA'), array('Inc' => 4, 'Name' => 'ANGOLA'), array('Inc' => 5, 'Name' => 'ANTIGUA AND BARBUDA'), array('Inc' => 6, 'Name' => 'STATELESS ARABIA'), array('Inc' => 7, 'Name' => 'SAUDI ARABIA'), array('Inc' => 8, 'Name' => 'ARGELIA'), array('Inc' => 9, 'Name' => 'ARGENTINA'), array('Inc' => 10, 'Name' => 'ARMENIA'), array('Inc' => 11, 'Name' => 'ARUBA'), array('Inc' => 12, 'Name' => 'AUSTRALIA'), array('Inc' => 13, 'Name' => 'AZERBOIJAN'), array('Inc' => 14, 'Name' => 'BAHAMAS'), array('Inc' => 15, 'Name' => 'BAHREIN'), array('Inc' => 16, 'Name' => 'BANGLADESH'), array('Inc' => 17, 'Name' => 'BARBADOS'), array('Inc' => 18, 'Name' => 'BELARUS'), array('Inc' => 19, 'Name' => 'BELGIUM'), array('Inc' => 20, 'Name' => 'BELIZE'), array('Inc' => 21, 'Name' => 'BENIN'), array('Inc' => 22, 'Name' => 'BHUTAN'), array('Inc' => 23, 'Name' => 'BOLIVIA'), array('Inc' => 24, 'Name' => 'BOPHUTHATSWANA'), array('Inc' => 25, 'Name' => 'BOSNIA AND HERZEGOVINA'), array('Inc' => 26, 'Name' => 'BOTSWANA'), array('Inc' => 27, 'Name' => 'BRASIL'), array('Inc' => 28, 'Name' => 'BRUNEI DARUSSALAM'), array('Inc' => 29, 'Name' => 'BULGARIA'), array('Inc' => 30, 'Name' => 'BURKINA FASSO'), array('Inc' => 31, 'Name' => 'BURUNDI'), array('Inc' => 32, 'Name' => 'CAPE VERDE'), array('Inc' => 33, 'Name' => 'CAMBOYA'), array('Inc' => 34, 'Name' => 'CAMEROON'), array('Inc' => 35, 'Name' => 'CANADA'), array('Inc' => 36, 'Name' => 'CENTRAL AFRICAN REP.'), array('Inc' => 37, 'Name' => 'CHAD'), array('Inc' => 38, 'Name' => 'CZECH REPUBLIC'), array('Inc' => 39, 'Name' => 'CHECOSLAVAQUIA'), array('Inc' => 40, 'Name' => 'CHILE'), array('Inc' => 41, 'Name' => 'CHINA'), array('Inc' => 42, 'Name' => 'CYPRUS'), array('Inc' => 43, 'Name' => 'CISKEI'), array('Inc' => 44, 'Name' => 'COLOMBIA'), array('Inc' => 45, 'Name' => 'COMORES'), array('Inc' => 46, 'Name' => 'CONGO'), array('Inc' => 47, 'Name' => 'CONGO, REP. DEMOC.'), array('Inc' => 48, 'Name' => 'COREA, REP.POP.DEMOC.'), array('Inc' => 49, 'Name' => 'KOREA, REPUBLIC OF'), array('Inc' => 50, 'Name' => 'COTE IVOIRE'), array('Inc' => 51, 'Name' => 'COSTA RICA'), array('Inc' => 52, 'Name' => 'CROATIA'), array('Inc' => 53, 'Name' => 'INTERNATIONAL REDEROSS'), array('Inc' => 54, 'Name' => 'CUBA'), array('Inc' => 55, 'Name' => 'DENMARK'), array('Inc' => 56, 'Name' => 'DJIBOUTI'), array('Inc' => 57, 'Name' => 'DOMINICA'), array('Inc' => 58, 'Name' => 'DOMINICAN REPUBLIC'), array('Inc' => 59, 'Name' => 'ECUADOR'), array('Inc' => 60, 'Name' => 'EGIPTO'), array('Inc' => 61, 'Name' => 'EL SALVADOR'), array('Inc' => 62, 'Name' => 'UNITED ARAB EMIRATES'), array('Inc' => 63, 'Name' => 'ERITREA'), array('Inc' => 64, 'Name' => 'SLOVAKIA'), array('Inc' => 65, 'Name' => 'SLOVENIA'), array('Inc' => 66, 'Name' => 'ESPANA'), array('Inc' => 67, 'Name' => 'USA'), array('Inc' => 68, 'Name' => 'ESTONIA'), array('Inc' => 69, 'Name' => 'ETHIOPIA'), array('Inc' => 70, 'Name' => 'RUSSIAN FEDERATION'), array('Inc' => 71, 'Name' => 'FIDJI (ISLAS)'), array('Inc' => 72, 'Name' => 'PHILIPPINES'), array('Inc' => 73, 'Name' => 'FINLAND'), array('Inc' => 74, 'Name' => 'FRANCE'), array('Inc' => 75, 'Name' => 'GABON'), array('Inc' => 76, 'Name' => 'GAMBIA'), array('Inc' => 77, 'Name' => 'GEORGIA'), array('Inc' => 78, 'Name' => 'GHANA'), array('Inc' => 79, 'Name' => 'GRANADA'), array('Inc' => 80, 'Name' => 'GREECE'), array('Inc' => 81, 'Name' => 'GUATEMALA'), array('Inc' => 82, 'Name' => 'GUAYANA'), array('Inc' => 83, 'Name' => 'GUINEA'), array('Inc' => 84, 'Name' => 'GUINEA BISSAN'), array('Inc' => 85, 'Name' => 'EQUATORIAL GUINEA'), array('Inc' => 86, 'Name' => 'HAITI'), array('Inc' => 87, 'Name' => 'NITHERLANDS'), array('Inc' => 88, 'Name' => 'HONDURAS'), array('Inc' => 89, 'Name' => 'HONG KONG (CHINA)'), array('Inc' => 90, 'Name' => 'HONG KONG (GB)'), array('Inc' => 91, 'Name' => 'HUNGARY'), array('Inc' => 92, 'Name' => 'INDIA'), array('Inc' => 93, 'Name' => 'INDONESIA'), array('Inc' => 94, 'Name' => 'ISLAMIC, REPUBLIC OF'), array('Inc' => 95, 'Name' => 'IRAQ'), array('Inc' => 96, 'Name' => 'IRELAND'), array('Inc' => 97, 'Name' => 'ISLANDIA'), array('Inc' => 98, 'Name' => 'ISRAEL'), array('Inc' => 99, 'Name' => 'ITALY'), array('Inc' => 100, 'Name' => 'JAMAICA'), array('Inc' => 101, 'Name' => 'JAPAN'), array('Inc' => 102, 'Name' => 'JORDAN'), array('Inc' => 103, 'Name' => 'KAZAKHSTAN'), array('Inc' => 104, 'Name' => 'KIRGUYSTAN'), array('Inc' => 105, 'Name' => 'KIRIBATI'), array('Inc' => 106, 'Name' => 'KUWAIT'), array('Inc' => 107, 'Name' => 'LAOS'), array('Inc' => 108, 'Name' => 'LESOTHO'), array('Inc' => 109, 'Name' => 'LATVIA'), array('Inc' => 110, 'Name' => 'LEBANON'), array('Inc' => 111, 'Name' => 'LIBERIA'), array('Inc' => 112, 'Name' => 'LIBYAN ARAB JAMAHIRIYA'), array('Inc' => 113, 'Name' => 'LEICHTENSTEIN'), array('Inc' => 114, 'Name' => 'LITHUANIA'), array('Inc' => 115, 'Name' => 'LUXEMBOURG'), array('Inc' => 116, 'Name' => 'MACAO'), array('Inc' => 117, 'Name' => 'REPUBLIC OF MACEDONIA'), array('Inc' => 118, 'Name' => 'MADAGASCAR'), array('Inc' => 119, 'Name' => 'MALAYSIA'), array('Inc' => 120, 'Name' => 'MALAWI'), array('Inc' => 121, 'Name' => 'MALDIVAS (ISLAS)'), array('Inc' => 122, 'Name' => 'MALI'), array('Inc' => 123, 'Name' => 'MALTA'), array('Inc' => 124, 'Name' => 'MARIANA ISLANDS'), array('Inc' => 125, 'Name' => 'MAROCCO'), array('Inc' => 126, 'Name' => 'MARSCHALL (ISLAS)'), array('Inc' => 127, 'Name' => 'MAURITANIA'), array('Inc' => 128, 'Name' => 'MEXICO'), array('Inc' => 129, 'Name' => 'MICRONESIA, ESTADOS FED.'), array('Inc' => 130, 'Name' => 'MOLDOVA'), array('Inc' => 131, 'Name' => 'MONACO'), array('Inc' => 132, 'Name' => 'MONGOLIA'), array('Inc' => 133, 'Name' => 'REPUB. OF MONTENEGRO'), array('Inc' => 134, 'Name' => 'MOZAMBIQUE'), array('Inc' => 135, 'Name' => 'MYANMAR (BIRMANIA)'), array('Inc' => 136, 'Name' => 'NAMIBIA'), array('Inc' => 137, 'Name' => 'NAURU'), array('Inc' => 138, 'Name' => 'NEPAL'), array('Inc' => 139, 'Name' => 'NICARAGUA'), array('Inc' => 140, 'Name' => 'NIGER'), array('Inc' => 141, 'Name' => 'NIGERIA'), array('Inc' => 142, 'Name' => 'NORWAY'), array('Inc' => 143, 'Name' => 'NEW ZEALAND'), array('Inc' => 144, 'Name' => 'O.N.U.'), array('Inc' => 145, 'Name' => 'OTHERS'), array('Inc' => 146, 'Name' => 'PACIFIC (ISLANDS)'), array('Inc' => 147, 'Name' => 'PAKISTAN'), array('Inc' => 148, 'Name' => 'PALAU'), array('Inc' => 149, 'Name' => 'PALESTINE'), array('Inc' => 150, 'Name' => 'PALESTIAN NOT ROCOGN'), array('Inc' => 151, 'Name' => 'PANAMA'), array('Inc' => 152, 'Name' => 'PAPUA NEW GUINEA'), array('Inc' => 153, 'Name' => 'PARAGUAY'), array('Inc' => 154, 'Name' => 'PERU'), array('Inc' => 155, 'Name' => 'POLAND'), array('Inc' => 156, 'Name' => 'PORTUGAL'), array('Inc' => 157, 'Name' => 'QATAR'), array('Inc' => 158, 'Name' => 'REFUGEES (OTHER)'), array('Inc' => 159, 'Name' => 'REFUGEES C. 28/09/1954'), array('Inc' => 160, 'Name' => 'UNITED KINGDOM'), array('Inc' => 161, 'Name' => 'RUANDA'), array('Inc' => 162, 'Name' => 'RUMANIA'), array('Inc' => 163, 'Name' => 'WESTARN SAHARA'), array('Inc' => 164, 'Name' => 'SALOMON (ISLAS)'), array('Inc' => 165, 'Name' => 'SAMOA OCCIDENTAL'), array('Inc' => 166, 'Name' => 'SAN CRISTOBAL YNEVIS'), array('Inc' => 167, 'Name' => 'SAN MARINO'), array('Inc' => 168, 'Name' => 'SAN VICENTEY GRANAD.'), array('Inc' => 169, 'Name' => 'SANTA LUSIA'), array('Inc' => 170, 'Name' => 'SANTA SEDE'), array('Inc' => 171, 'Name' => 'SAO TOME AND PRINCIPL'), array('Inc' => 172, 'Name' => 'SEICHELLES (ISLAS)'), array('Inc' => 173, 'Name' => 'SENEGAL'), array('Inc' => 174, 'Name' => 'SERBIA'), array('Inc' => 175, 'Name' => 'SERBIA AND MONTENEGRO'), array('Inc' => 176, 'Name' => 'SIERRA LEONA'), array('Inc' => 177, 'Name' => 'SINGAPORE'), array('Inc' => 178, 'Name' => 'SYRIAN ARAB REPUBLIC'), array('Inc' => 179, 'Name' => 'SOMALIA'), array('Inc' => 180, 'Name' => 'SRI LANKA'), array('Inc' => 181, 'Name' => 'SOUTH AFRICA'), array('Inc' => 182, 'Name' => 'SUDAN'), array('Inc' => 183, 'Name' => 'SWEDEN'), array('Inc' => 184, 'Name' => 'SWITZERLAND'), array('Inc' => 185, 'Name' => 'SURINAME'), array('Inc' => 186, 'Name' => 'SWAZILANDIA'), array('Inc' => 187, 'Name' => 'TAJIKISTAN'), array('Inc' => 188, 'Name' => 'THAILAND'), array('Inc' => 189, 'Name' => 'TAIWAN, PROVINCE CHINA'), array('Inc' => 190, 'Name' => 'TANZANIA, UND REPUBLIC'), array('Inc' => 191, 'Name' => 'TIBET'), array('Inc' => 192, 'Name' => 'TIMOR-LESTE'), array('Inc' => 193, 'Name' => 'TOGO'), array('Inc' => 194, 'Name' => 'TONGA'), array('Inc' => 195, 'Name' => 'TRANSKEY'), array('Inc' => 196, 'Name' => 'TRINIDAD AND TOBAGO'), array('Inc' => 197, 'Name' => 'TUNISIA'), array('Inc' => 198, 'Name' => 'TURKMENISTAN'), array('Inc' => 199, 'Name' => 'TURKEY'), array('Inc' => 200, 'Name' => 'TUVALU'), array('Inc' => 201, 'Name' => 'UKRAINE'), array('Inc' => 202, 'Name' => 'UGANDA'), array('Inc' => 203, 'Name' => 'UNHCR'), array('Inc' => 204, 'Name' => 'URSS'), array('Inc' => 205, 'Name' => 'URUGUAY'), array('Inc' => 206, 'Name' => 'UZBEKISTAN'), array('Inc' => 207, 'Name' => 'VANUATU-NUEVA HEBRIDAS'), array('Inc' => 208, 'Name' => 'VENDA'), array('Inc' => 209, 'Name' => 'VENEZUELA'), array('Inc' => 210, 'Name' => 'VIET NAM'), array('Inc' => 211, 'Name' => 'YEMEN (P.D.R.)'), array('Inc' => 212, 'Name' => 'YEMEN'), array('Inc' => 213, 'Name' => 'YUGOSLAVIA (FORMER)'), array('Inc' => 214, 'Name' => 'ZAMBIA'), array('Inc' => 215, 'Name' => 'ZIMBABWE'), ); public $OccupationIndex_spain_ua_v1 = array( array('Inc' => 0, 'Name' => 'NO OCCUPATION – безработный'), array('Inc' => 1, 'Name' => 'PENSIONER – пенсионер'), array('Inc' => 2, 'Name' => 'STUDENT – студент'), array('Inc' => 3, 'Name' => 'PUPIL – ученик'), array('Inc' => 4, 'Name' => 'KINDERGARTEN – дошкольник'), array('Inc' => 5, 'Name' => 'PRIVATE ENTREPRENEUR – частный предприниматель'), array('Inc' => 6, 'Name' => 'SALES MANAGER – менеджер по продажам'), array('Inc' => 7, 'Name' => 'MANAGER – менеджер'), array('Inc' => 8, 'Name' => 'DIRECTOR – директор'), array('Inc' => 9, 'Name' => 'DEPUTY DIRECTOR – заместитель директора'), array('Inc' => 10, 'Name' => 'ACCOUNTANT – бухгалтер'), array('Inc' => 11, 'Name' => 'DOCTOR – врач'), array('Inc' => 12, 'Name' => 'NURSE – медсестра'), array('Inc' => 13, 'Name' => 'TEACHER – учитель'), array('Inc' => 14, 'Name' => 'ADMINISTRATOR – администратор'), array('Inc' => 15, 'Name' => 'DESIGNER – дизайнер'), array('Inc' => 16, 'Name' => 'PROGRAMMER – программист'), array('Inc' => 17, 'Name' => 'JOURNALIST – журналист'), array('Inc' => 18, 'Name' => 'LAWYER – юрист'), array('Inc' => 19, 'Name' => 'CLERGYMAN. RELIGIOUS – священнослужитель'), array('Inc' => 20, 'Name' => 'DRIVER – водитель'), ); public $MaritalStatus_andorra_ua_v1 = array( array('Inc' => 0, 'Name' => 'Single – холост/не замужем'), array('Inc' => 1, 'Name' => 'Married – женат/ замужем'), array('Inc' => 2, 'Name' => 'Separated – женат/ замужем, но живут раздельно'), array('Inc' => 3, 'Name' => 'Divorced – разведен(а)'), array('Inc' => 4, 'Name' => 'Widow(er) – вдова/вдовец'), array('Inc' => 5, 'Name' => 'Other civil marriage – гражданский брак') ); public $StateIndex_andorra_ua_v1 = array( array('Inc' => 0, 'Name' => 'AFGHANISTAN'), array('Inc' => 1, 'Name' => 'ALBANIA'), array('Inc' => 2, 'Name' => 'GERMANY'), array('Inc' => 3, 'Name' => 'ANDORRA'), array('Inc' => 4, 'Name' => 'ANGOLA'), array('Inc' => 5, 'Name' => 'ANTIGUA AND BARBUDA'), array('Inc' => 6, 'Name' => 'STATELESS ARABIA'), array('Inc' => 7, 'Name' => 'SAUDI ARABIA'), array('Inc' => 8, 'Name' => 'ARGELIA'), array('Inc' => 9, 'Name' => 'ARGENTINA'), array('Inc' => 10, 'Name' => 'ARMENIA'), array('Inc' => 11, 'Name' => 'ARUBA'), array('Inc' => 12, 'Name' => 'AUSTRALIA'), array('Inc' => 13, 'Name' => 'AZERBOIJAN'), array('Inc' => 14, 'Name' => 'BAHAMAS'), array('Inc' => 15, 'Name' => 'BAHREIN'), array('Inc' => 16, 'Name' => 'BANGLADESH'), array('Inc' => 17, 'Name' => 'BARBADOS'), array('Inc' => 18, 'Name' => 'BELARUS'), array('Inc' => 19, 'Name' => 'BELGIUM'), array('Inc' => 20, 'Name' => 'BELIZE'), array('Inc' => 21, 'Name' => 'BENIN'), array('Inc' => 22, 'Name' => 'BHUTAN'), array('Inc' => 23, 'Name' => 'BOLIVIA'), array('Inc' => 24, 'Name' => 'BOPHUTHATSWANA'), array('Inc' => 25, 'Name' => 'BOSNIA AND HERZEGOVINA'), array('Inc' => 26, 'Name' => 'BOTSWANA'), array('Inc' => 27, 'Name' => 'BRASIL'), array('Inc' => 28, 'Name' => 'BRUNEI DARUSSALAM'), array('Inc' => 29, 'Name' => 'BULGARIA'), array('Inc' => 30, 'Name' => 'BURKINA FASSO'), array('Inc' => 31, 'Name' => 'BURUNDI'), array('Inc' => 32, 'Name' => 'CAPE VERDE'), array('Inc' => 33, 'Name' => 'CAMBOYA'), array('Inc' => 34, 'Name' => 'CAMEROON'), array('Inc' => 35, 'Name' => 'CANADA'), array('Inc' => 36, 'Name' => 'CENTRAL AFRICAN REP.'), array('Inc' => 37, 'Name' => 'CHAD'), array('Inc' => 38, 'Name' => 'CZECH REPUBLIC'), array('Inc' => 39, 'Name' => 'CHECOSLAVAQUIA'), array('Inc' => 40, 'Name' => 'CHILE'), array('Inc' => 41, 'Name' => 'CHINA'), array('Inc' => 42, 'Name' => 'CYPRUS'), array('Inc' => 43, 'Name' => 'CISKEI'), array('Inc' => 44, 'Name' => 'COLOMBIA'), array('Inc' => 45, 'Name' => 'COMORES'), array('Inc' => 46, 'Name' => 'CONGO'), array('Inc' => 47, 'Name' => 'CONGO, REP. DEMOC.'), array('Inc' => 48, 'Name' => 'COREA, REP.POP.DEMOC.'), array('Inc' => 49, 'Name' => 'KOREA, REPUBLIC OF'), array('Inc' => 50, 'Name' => 'COTE IVOIRE'), array('Inc' => 51, 'Name' => 'COSTA RICA'), array('Inc' => 52, 'Name' => 'CROATIA'), array('Inc' => 53, 'Name' => 'INTERNATIONAL REDEROSS'), array('Inc' => 54, 'Name' => 'CUBA'), array('Inc' => 55, 'Name' => 'DENMARK'), array('Inc' => 56, 'Name' => 'DJIBOUTI'), array('Inc' => 57, 'Name' => 'DOMINICA'), array('Inc' => 58, 'Name' => 'DOMINICAN REPUBLIC'), array('Inc' => 59, 'Name' => 'ECUADOR'), array('Inc' => 60, 'Name' => 'EGIPTO'), array('Inc' => 61, 'Name' => 'EL SALVADOR'), array('Inc' => 62, 'Name' => 'UNITED ARAB EMIRATES'), array('Inc' => 63, 'Name' => 'ERITREA'), array('Inc' => 64, 'Name' => 'SLOVAKIA'), array('Inc' => 65, 'Name' => 'SLOVENIA'), array('Inc' => 66, 'Name' => 'ESPANA'), array('Inc' => 67, 'Name' => 'USA'), array('Inc' => 68, 'Name' => 'ESTONIA'), array('Inc' => 69, 'Name' => 'ETHIOPIA'), array('Inc' => 70, 'Name' => 'RUSSIAN FEDERATION'), array('Inc' => 71, 'Name' => 'FIDJI (ISLAS)'), array('Inc' => 72, 'Name' => 'PHILIPPINES'), array('Inc' => 73, 'Name' => 'FINLAND'), array('Inc' => 74, 'Name' => 'FRANCE'), array('Inc' => 75, 'Name' => 'GABON'), array('Inc' => 76, 'Name' => 'GAMBIA'), array('Inc' => 77, 'Name' => 'GEORGIA'), array('Inc' => 78, 'Name' => 'GHANA'), array('Inc' => 79, 'Name' => 'GRANADA'), array('Inc' => 80, 'Name' => 'GREECE'), array('Inc' => 81, 'Name' => 'GUATEMALA'), array('Inc' => 82, 'Name' => 'GUAYANA'), array('Inc' => 83, 'Name' => 'GUINEA'), array('Inc' => 84, 'Name' => 'GUINEA BISSAN'), array('Inc' => 85, 'Name' => 'EQUATORIAL GUINEA'), array('Inc' => 86, 'Name' => 'HAITI'), array('Inc' => 87, 'Name' => 'NITHERLANDS'), array('Inc' => 88, 'Name' => 'HONDURAS'), array('Inc' => 89, 'Name' => 'HONG KONG (CHINA)'), array('Inc' => 90, 'Name' => 'HONG KONG (GB)'), array('Inc' => 91, 'Name' => 'HUNGARY'), array('Inc' => 92, 'Name' => 'INDIA'), array('Inc' => 93, 'Name' => 'INDONESIA'), array('Inc' => 94, 'Name' => 'ISLAMIC, REPUBLIC OF'), array('Inc' => 95, 'Name' => 'IRAQ'), array('Inc' => 96, 'Name' => 'IRELAND'), array('Inc' => 97, 'Name' => 'ISLANDIA'), array('Inc' => 98, 'Name' => 'ISRAEL'), array('Inc' => 99, 'Name' => 'ITALY'), array('Inc' => 100, 'Name' => 'JAMAICA'), array('Inc' => 101, 'Name' => 'JAPAN'), array('Inc' => 102, 'Name' => 'JORDAN'), array('Inc' => 103, 'Name' => 'KAZAKHSTAN'), array('Inc' => 104, 'Name' => 'KIRGUYSTAN'), array('Inc' => 105, 'Name' => 'KIRIBATI'), array('Inc' => 106, 'Name' => 'KUWAIT'), array('Inc' => 107, 'Name' => 'LAOS'), array('Inc' => 108, 'Name' => 'LESOTHO'), array('Inc' => 109, 'Name' => 'LATVIA'), array('Inc' => 110, 'Name' => 'LEBANON'), array('Inc' => 111, 'Name' => 'LIBERIA'), array('Inc' => 112, 'Name' => 'LIBYAN ARAB JAMAHIRIYA'), array('Inc' => 113, 'Name' => 'LEICHTENSTEIN'), array('Inc' => 114, 'Name' => 'LITHUANIA'), array('Inc' => 115, 'Name' => 'LUXEMBOURG'), array('Inc' => 116, 'Name' => 'MACAO'), array('Inc' => 117, 'Name' => 'REPUBLIC OF MACEDONIA'), array('Inc' => 118, 'Name' => 'MADAGASCAR'), array('Inc' => 119, 'Name' => 'MALAYSIA'), array('Inc' => 120, 'Name' => 'MALAWI'), array('Inc' => 121, 'Name' => 'MALDIVAS (ISLAS)'), array('Inc' => 122, 'Name' => 'MALI'), array('Inc' => 123, 'Name' => 'MALTA'), array('Inc' => 124, 'Name' => 'MARIANA ISLANDS'), array('Inc' => 125, 'Name' => 'MAROCCO'), array('Inc' => 126, 'Name' => 'MARSCHALL (ISLAS)'), array('Inc' => 127, 'Name' => 'MAURITANIA'), array('Inc' => 128, 'Name' => 'MEXICO'), array('Inc' => 129, 'Name' => 'MICRONESIA, ESTADOS FED.'), array('Inc' => 130, 'Name' => 'MOLDOVA'), array('Inc' => 131, 'Name' => 'MONACO'), array('Inc' => 132, 'Name' => 'MONGOLIA'), array('Inc' => 133, 'Name' => 'REPUB. OF MONTENEGRO'), array('Inc' => 134, 'Name' => 'MOZAMBIQUE'), array('Inc' => 135, 'Name' => 'MYANMAR (BIRMANIA)'), array('Inc' => 136, 'Name' => 'NAMIBIA'), array('Inc' => 137, 'Name' => 'NAURU'), array('Inc' => 138, 'Name' => 'NEPAL'), array('Inc' => 139, 'Name' => 'NICARAGUA'), array('Inc' => 140, 'Name' => 'NIGER'), array('Inc' => 141, 'Name' => 'NIGERIA'), array('Inc' => 142, 'Name' => 'NORWAY'), array('Inc' => 143, 'Name' => 'NEW ZEALAND'), array('Inc' => 144, 'Name' => 'O.N.U.'), array('Inc' => 145, 'Name' => 'OTHERS'), array('Inc' => 146, 'Name' => 'PACIFIC (ISLANDS)'), array('Inc' => 147, 'Name' => 'PAKISTAN'), array('Inc' => 148, 'Name' => 'PALAU'), array('Inc' => 149, 'Name' => 'PALESTINE'), array('Inc' => 150, 'Name' => 'PALESTIAN NOT ROCOGN'), array('Inc' => 151, 'Name' => 'PANAMA'), array('Inc' => 152, 'Name' => 'PAPUA NEW GUINEA'), array('Inc' => 153, 'Name' => 'PARAGUAY'), array('Inc' => 154, 'Name' => 'PERU'), array('Inc' => 155, 'Name' => 'POLAND'), array('Inc' => 156, 'Name' => 'PORTUGAL'), array('Inc' => 157, 'Name' => 'QATAR'), array('Inc' => 158, 'Name' => 'REFUGEES (OTHER)'), array('Inc' => 159, 'Name' => 'REFUGEES C. 28/09/1954'), array('Inc' => 160, 'Name' => 'UNITED KINGDOM'), array('Inc' => 161, 'Name' => 'RUANDA'), array('Inc' => 162, 'Name' => 'RUMANIA'), array('Inc' => 163, 'Name' => 'WESTARN SAHARA'), array('Inc' => 164, 'Name' => 'SALOMON (ISLAS)'), array('Inc' => 165, 'Name' => 'SAMOA OCCIDENTAL'), array('Inc' => 166, 'Name' => 'SAN CRISTOBAL YNEVIS'), array('Inc' => 167, 'Name' => 'SAN MARINO'), array('Inc' => 168, 'Name' => 'SAN VICENTEY GRANAD.'), array('Inc' => 169, 'Name' => 'SANTA LUSIA'), array('Inc' => 170, 'Name' => 'SANTA SEDE'), array('Inc' => 171, 'Name' => 'SAO TOME AND PRINCIPL'), array('Inc' => 172, 'Name' => 'SEICHELLES (ISLAS)'), array('Inc' => 173, 'Name' => 'SENEGAL'), array('Inc' => 174, 'Name' => 'SERBIA'), array('Inc' => 175, 'Name' => 'SERBIA AND MONTENEGRO'), array('Inc' => 176, 'Name' => 'SIERRA LEONA'), array('Inc' => 177, 'Name' => 'SINGAPORE'), array('Inc' => 178, 'Name' => 'SYRIAN ARAB REPUBLIC'), array('Inc' => 179, 'Name' => 'SOMALIA'), array('Inc' => 180, 'Name' => 'SRI LANKA'), array('Inc' => 181, 'Name' => 'SOUTH AFRICA'), array('Inc' => 182, 'Name' => 'SUDAN'), array('Inc' => 183, 'Name' => 'SWEDEN'), array('Inc' => 184, 'Name' => 'SWITZERLAND'), array('Inc' => 185, 'Name' => 'SURINAME'), array('Inc' => 186, 'Name' => 'SWAZILANDIA'), array('Inc' => 187, 'Name' => 'TAJIKISTAN'), array('Inc' => 188, 'Name' => 'THAILAND'), array('Inc' => 189, 'Name' => 'TAIWAN, PROVINCE CHINA'), array('Inc' => 190, 'Name' => 'TANZANIA, UND REPUBLIC'), array('Inc' => 191, 'Name' => 'TIBET'), array('Inc' => 192, 'Name' => 'TIMOR-LESTE'), array('Inc' => 193, 'Name' => 'TOGO'), array('Inc' => 194, 'Name' => 'TONGA'), array('Inc' => 195, 'Name' => 'TRANSKEY'), array('Inc' => 196, 'Name' => 'TRINIDAD AND TOBAGO'), array('Inc' => 197, 'Name' => 'TUNISIA'), array('Inc' => 198, 'Name' => 'TURKMENISTAN'), array('Inc' => 199, 'Name' => 'TURKEY'), array('Inc' => 200, 'Name' => 'TUVALU'), array('Inc' => 201, 'Name' => 'UKRAINE'), array('Inc' => 202, 'Name' => 'UGANDA'), array('Inc' => 203, 'Name' => 'UNHCR'), array('Inc' => 204, 'Name' => 'URSS'), array('Inc' => 205, 'Name' => 'URUGUAY'), array('Inc' => 206, 'Name' => 'UZBEKISTAN'), array('Inc' => 207, 'Name' => 'VANUATU-NUEVA HEBRIDAS'), array('Inc' => 208, 'Name' => 'VENDA'), array('Inc' => 209, 'Name' => 'VENEZUELA'), array('Inc' => 210, 'Name' => 'VIET NAM'), array('Inc' => 211, 'Name' => 'YEMEN (P.D.R.)'), array('Inc' => 212, 'Name' => 'YEMEN'), array('Inc' => 213, 'Name' => 'YUGOSLAVIA (FORMER)'), array('Inc' => 214, 'Name' => 'ZAMBIA'), array('Inc' => 215, 'Name' => 'ZIMBABWE'), ); public $OccupationIndex_andorra_ua_v1 = array( array('Inc' => 0, 'Name' => 'NO OCCUPATION – безработный'), array('Inc' => 1, 'Name' => 'PENSIONER – пенсионер'), array('Inc' => 2, 'Name' => 'STUDENT – студент'), array('Inc' => 3, 'Name' => 'PUPIL – ученик'), array('Inc' => 4, 'Name' => 'KINDERGARTEN – дошкольник'), array('Inc' => 5, 'Name' => 'PRIVATE ENTREPRENEUR – частный предприниматель'), array('Inc' => 6, 'Name' => 'SALES MANAGER – менеджер по продажам'), array('Inc' => 7, 'Name' => 'MANAGER – менеджер'), array('Inc' => 8, 'Name' => 'DIRECTOR – директор'), array('Inc' => 9, 'Name' => 'DEPUTY DIRECTOR – заместитель директора'), array('Inc' => 10, 'Name' => 'ACCOUNTANT – бухгалтер'), array('Inc' => 11, 'Name' => 'DOCTOR – врач'), array('Inc' => 12, 'Name' => 'NURSE – медсестра'), array('Inc' => 13, 'Name' => 'TEACHER – учитель'), array('Inc' => 14, 'Name' => 'ADMINISTRATOR – администратор'), array('Inc' => 15, 'Name' => 'DESIGNER – дизайнер'), array('Inc' => 16, 'Name' => 'PROGRAMMER – программист'), array('Inc' => 17, 'Name' => 'JOURNALIST – журналист'), array('Inc' => 18, 'Name' => 'LAWYER – юрист'), array('Inc' => 19, 'Name' => 'CLERGYMAN. RELIGIOUS – священнослужитель'), array('Inc' => 20, 'Name' => 'DRIVER – водитель'), ); public $MaritalStatus_india_ua_v1 = array( array('Inc' => 0, 'Name' => 'Single – холост/не замужем'), array('Inc' => 1, 'Name' => 'Married – женат/ замужем'), array('Inc' => 2, 'Name' => 'Separated – женат/ замужем, но живут раздельно'), array('Inc' => 3, 'Name' => 'Divorced – разведен(а)'), array('Inc' => 4, 'Name' => 'Widow(er) – вдова/вдовец'), array('Inc' => 5, 'Name' => 'Other civil marriage – гражданский брак') ); public $tours_india_ua_v1 = array( array('Inc' => 0, 'Name' => 'Tourist-Турист'), array('Inc' => 1, 'Name' => 'Transit-Транзит'), array('Inc' => 2, 'Name' => 'Business-Бизнес'), array('Inc' => 3, 'Name' => 'Education-Обучение'), array('Inc' => 4, 'Name' => 'Employment-Трудоустройство'), array('Inc' => 5, 'Name' => 'Project-Проэктная'), array('Inc' => 6, 'Name' => 'Any other-Любая другая ') ); public $te_india_ua_v1 = array( array('Inc' => 0, 'Name' => 'Tourist'), array('Inc' => 1, 'Name' => 'Transit-Транзит'), ); public $relation_india_ua_v1 = array( array('Inc' => 0, 'Name' => 'Son'), array('Inc' => 1, 'Name' => 'Daughter'), ); public $StateIndex_india_ua_v1 = array( array('Inc' => 0, 'Name' => 'AFGHANISTAN'), array('Inc' => 1, 'Name' => 'ALBANIA'), array('Inc' => 2, 'Name' => 'GERMANY'), array('Inc' => 3, 'Name' => 'ANDORRA'), array('Inc' => 4, 'Name' => 'ANGOLA'), array('Inc' => 5, 'Name' => 'ANTIGUA AND BARBUDA'), array('Inc' => 6, 'Name' => 'STATELESS ARABIA'), array('Inc' => 7, 'Name' => 'SAUDI ARABIA'), array('Inc' => 8, 'Name' => 'ARGELIA'), array('Inc' => 9, 'Name' => 'ARGENTINA'), array('Inc' => 10, 'Name' => 'ARMENIA'), array('Inc' => 11, 'Name' => 'ARUBA'), array('Inc' => 12, 'Name' => 'AUSTRALIA'), array('Inc' => 13, 'Name' => 'AZERBOIJAN'), array('Inc' => 14, 'Name' => 'BAHAMAS'), array('Inc' => 15, 'Name' => 'BAHREIN'), array('Inc' => 16, 'Name' => 'BANGLADESH'), array('Inc' => 17, 'Name' => 'BARBADOS'), array('Inc' => 18, 'Name' => 'BELARUS'), array('Inc' => 19, 'Name' => 'BELGIUM'), array('Inc' => 20, 'Name' => 'BELIZE'), array('Inc' => 21, 'Name' => 'BENIN'), array('Inc' => 22, 'Name' => 'BHUTAN'), array('Inc' => 23, 'Name' => 'BOLIVIA'), array('Inc' => 24, 'Name' => 'BOPHUTHATSWANA'), array('Inc' => 25, 'Name' => 'BOSNIA AND HERZEGOVINA'), array('Inc' => 26, 'Name' => 'BOTSWANA'), array('Inc' => 27, 'Name' => 'BRASIL'), array('Inc' => 28, 'Name' => 'BRUNEI DARUSSALAM'), array('Inc' => 29, 'Name' => 'BULGARIA'), array('Inc' => 30, 'Name' => 'BURKINA FASSO'), array('Inc' => 31, 'Name' => 'BURUNDI'), array('Inc' => 32, 'Name' => 'CAPE VERDE'), array('Inc' => 33, 'Name' => 'CAMBOYA'), array('Inc' => 34, 'Name' => 'CAMEROON'), array('Inc' => 35, 'Name' => 'CANADA'), array('Inc' => 36, 'Name' => 'CENTRAL AFRICAN REP.'), array('Inc' => 37, 'Name' => 'CHAD'), array('Inc' => 38, 'Name' => 'CZECH REPUBLIC'), array('Inc' => 39, 'Name' => 'CHECOSLAVAQUIA'), array('Inc' => 40, 'Name' => 'CHILE'), array('Inc' => 41, 'Name' => 'CHINA'), array('Inc' => 42, 'Name' => 'CYPRUS'), array('Inc' => 43, 'Name' => 'CISKEI'), array('Inc' => 44, 'Name' => 'COLOMBIA'), array('Inc' => 45, 'Name' => 'COMORES'), array('Inc' => 46, 'Name' => 'CONGO'), array('Inc' => 47, 'Name' => 'CONGO, REP. DEMOC.'), array('Inc' => 48, 'Name' => 'COREA, REP.POP.DEMOC.'), array('Inc' => 49, 'Name' => 'KOREA, REPUBLIC OF'), array('Inc' => 50, 'Name' => 'COTE IVOIRE'), array('Inc' => 51, 'Name' => 'COSTA RICA'), array('Inc' => 52, 'Name' => 'CROATIA'), array('Inc' => 53, 'Name' => 'INTERNATIONAL REDEROSS'), array('Inc' => 54, 'Name' => 'CUBA'), array('Inc' => 55, 'Name' => 'DENMARK'), array('Inc' => 56, 'Name' => 'DJIBOUTI'), array('Inc' => 57, 'Name' => 'DOMINICA'), array('Inc' => 58, 'Name' => 'DOMINICAN REPUBLIC'), array('Inc' => 59, 'Name' => 'ECUADOR'), array('Inc' => 60, 'Name' => 'EGIPTO'), array('Inc' => 61, 'Name' => 'EL SALVADOR'), array('Inc' => 62, 'Name' => 'UNITED ARAB EMIRATES'), array('Inc' => 63, 'Name' => 'ERITREA'), array('Inc' => 64, 'Name' => 'SLOVAKIA'), array('Inc' => 65, 'Name' => 'SLOVENIA'), array('Inc' => 66, 'Name' => 'ESPANA'), array('Inc' => 67, 'Name' => 'USA'), array('Inc' => 68, 'Name' => 'ESTONIA'), array('Inc' => 69, 'Name' => 'ETHIOPIA'), array('Inc' => 70, 'Name' => 'RUSSIAN FEDERATION'), array('Inc' => 71, 'Name' => 'FIDJI (ISLAS)'), array('Inc' => 72, 'Name' => 'PHILIPPINES'), array('Inc' => 73, 'Name' => 'FINLAND'), array('Inc' => 74, 'Name' => 'FRANCE'), array('Inc' => 75, 'Name' => 'GABON'), array('Inc' => 76, 'Name' => 'GAMBIA'), array('Inc' => 77, 'Name' => 'GEORGIA'), array('Inc' => 78, 'Name' => 'GHANA'), array('Inc' => 79, 'Name' => 'GRANADA'), array('Inc' => 80, 'Name' => 'GREECE'), array('Inc' => 81, 'Name' => 'GUATEMALA'), array('Inc' => 82, 'Name' => 'GUAYANA'), array('Inc' => 83, 'Name' => 'GUINEA'), array('Inc' => 84, 'Name' => 'GUINEA BISSAN'), array('Inc' => 85, 'Name' => 'EQUATORIAL GUINEA'), array('Inc' => 86, 'Name' => 'HAITI'), array('Inc' => 87, 'Name' => 'NITHERLANDS'), array('Inc' => 88, 'Name' => 'HONDURAS'), array('Inc' => 89, 'Name' => 'HONG KONG (CHINA)'), array('Inc' => 90, 'Name' => 'HONG KONG (GB)'), array('Inc' => 91, 'Name' => 'HUNGARY'), array('Inc' => 92, 'Name' => 'INDIA'), array('Inc' => 93, 'Name' => 'INDONESIA'), array('Inc' => 94, 'Name' => 'ISLAMIC, REPUBLIC OF'), array('Inc' => 95, 'Name' => 'IRAQ'), array('Inc' => 96, 'Name' => 'IRELAND'), array('Inc' => 97, 'Name' => 'ISLANDIA'), array('Inc' => 98, 'Name' => 'ISRAEL'), array('Inc' => 99, 'Name' => 'ITALY'), array('Inc' => 100, 'Name' => 'JAMAICA'), array('Inc' => 101, 'Name' => 'JAPAN'), array('Inc' => 102, 'Name' => 'JORDAN'), array('Inc' => 103, 'Name' => 'KAZAKHSTAN'), array('Inc' => 104, 'Name' => 'KIRGUYSTAN'), array('Inc' => 105, 'Name' => 'KIRIBATI'), array('Inc' => 106, 'Name' => 'KUWAIT'), array('Inc' => 107, 'Name' => 'LAOS'), array('Inc' => 108, 'Name' => 'LESOTHO'), array('Inc' => 109, 'Name' => 'LATVIA'), array('Inc' => 110, 'Name' => 'LEBANON'), array('Inc' => 111, 'Name' => 'LIBERIA'), array('Inc' => 112, 'Name' => 'LIBYAN ARAB JAMAHIRIYA'), array('Inc' => 113, 'Name' => 'LEICHTENSTEIN'), array('Inc' => 114, 'Name' => 'LITHUANIA'), array('Inc' => 115, 'Name' => 'LUXEMBOURG'), array('Inc' => 116, 'Name' => 'MACAO'), array('Inc' => 117, 'Name' => 'REPUBLIC OF MACEDONIA'), array('Inc' => 118, 'Name' => 'MADAGASCAR'), array('Inc' => 119, 'Name' => 'MALAYSIA'), array('Inc' => 120, 'Name' => 'MALAWI'), array('Inc' => 121, 'Name' => 'MALDIVAS (ISLAS)'), array('Inc' => 122, 'Name' => 'MALI'), array('Inc' => 123, 'Name' => 'MALTA'), array('Inc' => 124, 'Name' => 'MARIANA ISLANDS'), array('Inc' => 125, 'Name' => 'MAROCCO'), array('Inc' => 126, 'Name' => 'MARSCHALL (ISLAS)'), array('Inc' => 127, 'Name' => 'MAURITANIA'), array('Inc' => 128, 'Name' => 'MEXICO'), array('Inc' => 129, 'Name' => 'MICRONESIA, ESTADOS FED.'), array('Inc' => 130, 'Name' => 'MOLDOVA'), array('Inc' => 131, 'Name' => 'MONACO'), array('Inc' => 132, 'Name' => 'MONGOLIA'), array('Inc' => 133, 'Name' => 'REPUB. OF MONTENEGRO'), array('Inc' => 134, 'Name' => 'MOZAMBIQUE'), array('Inc' => 135, 'Name' => 'MYANMAR (BIRMANIA)'), array('Inc' => 136, 'Name' => 'NAMIBIA'), array('Inc' => 137, 'Name' => 'NAURU'), array('Inc' => 138, 'Name' => 'NEPAL'), array('Inc' => 139, 'Name' => 'NICARAGUA'), array('Inc' => 140, 'Name' => 'NIGER'), array('Inc' => 141, 'Name' => 'NIGERIA'), array('Inc' => 142, 'Name' => 'NORWAY'), array('Inc' => 143, 'Name' => 'NEW ZEALAND'), array('Inc' => 144, 'Name' => 'O.N.U.'), array('Inc' => 145, 'Name' => 'OTHERS'), array('Inc' => 146, 'Name' => 'PACIFIC (ISLANDS)'), array('Inc' => 147, 'Name' => 'PAKISTAN'), array('Inc' => 148, 'Name' => 'PALAU'), array('Inc' => 149, 'Name' => 'PALESTINE'), array('Inc' => 150, 'Name' => 'PALESTIAN NOT ROCOGN'), array('Inc' => 151, 'Name' => 'PANAMA'), array('Inc' => 152, 'Name' => 'PAPUA NEW GUINEA'), array('Inc' => 153, 'Name' => 'PARAGUAY'), array('Inc' => 154, 'Name' => 'PERU'), array('Inc' => 155, 'Name' => 'POLAND'), array('Inc' => 156, 'Name' => 'PORTUGAL'), array('Inc' => 157, 'Name' => 'QATAR'), array('Inc' => 158, 'Name' => 'REFUGEES (OTHER)'), array('Inc' => 159, 'Name' => 'REFUGEES C. 28/09/1954'), array('Inc' => 160, 'Name' => 'UNITED KINGDOM'), array('Inc' => 161, 'Name' => 'RUANDA'), array('Inc' => 162, 'Name' => 'RUMANIA'), array('Inc' => 163, 'Name' => 'WESTARN SAHARA'), array('Inc' => 164, 'Name' => 'SALOMON (ISLAS)'), array('Inc' => 165, 'Name' => 'SAMOA OCCIDENTAL'), array('Inc' => 166, 'Name' => 'SAN CRISTOBAL YNEVIS'), array('Inc' => 167, 'Name' => 'SAN MARINO'), array('Inc' => 168, 'Name' => 'SAN VICENTEY GRANAD.'), array('Inc' => 169, 'Name' => 'SANTA LUSIA'), array('Inc' => 170, 'Name' => 'SANTA SEDE'), array('Inc' => 171, 'Name' => 'SAO TOME AND PRINCIPL'), array('Inc' => 172, 'Name' => 'SEICHELLES (ISLAS)'), array('Inc' => 173, 'Name' => 'SENEGAL'), array('Inc' => 174, 'Name' => 'SERBIA'), array('Inc' => 175, 'Name' => 'SERBIA AND MONTENEGRO'), array('Inc' => 176, 'Name' => 'SIERRA LEONA'), array('Inc' => 177, 'Name' => 'SINGAPORE'), array('Inc' => 178, 'Name' => 'SYRIAN ARAB REPUBLIC'), array('Inc' => 179, 'Name' => 'SOMALIA'), array('Inc' => 180, 'Name' => 'SRI LANKA'), array('Inc' => 181, 'Name' => 'SOUTH AFRICA'), array('Inc' => 182, 'Name' => 'SUDAN'), array('Inc' => 183, 'Name' => 'SWEDEN'), array('Inc' => 184, 'Name' => 'SWITZERLAND'), array('Inc' => 185, 'Name' => 'SURINAME'), array('Inc' => 186, 'Name' => 'SWAZILANDIA'), array('Inc' => 187, 'Name' => 'TAJIKISTAN'), array('Inc' => 188, 'Name' => 'THAILAND'), array('Inc' => 189, 'Name' => 'TAIWAN, PROVINCE CHINA'), array('Inc' => 190, 'Name' => 'TANZANIA, UND REPUBLIC'), array('Inc' => 191, 'Name' => 'TIBET'), array('Inc' => 192, 'Name' => 'TIMOR-LESTE'), array('Inc' => 193, 'Name' => 'TOGO'), array('Inc' => 194, 'Name' => 'TONGA'), array('Inc' => 195, 'Name' => 'TRANSKEY'), array('Inc' => 196, 'Name' => 'TRINIDAD AND TOBAGO'), array('Inc' => 197, 'Name' => 'TUNISIA'), array('Inc' => 198, 'Name' => 'TURKMENISTAN'), array('Inc' => 199, 'Name' => 'TURKEY'), array('Inc' => 200, 'Name' => 'TUVALU'), array('Inc' => 201, 'Name' => 'UKRAINE'), array('Inc' => 202, 'Name' => 'UGANDA'), array('Inc' => 203, 'Name' => 'UNHCR'), array('Inc' => 204, 'Name' => 'URSS'), array('Inc' => 205, 'Name' => 'URUGUAY'), array('Inc' => 206, 'Name' => 'UZBEKISTAN'), array('Inc' => 207, 'Name' => 'VANUATU-NUEVA HEBRIDAS'), array('Inc' => 208, 'Name' => 'VENDA'), array('Inc' => 209, 'Name' => 'VENEZUELA'), array('Inc' => 210, 'Name' => 'VIET NAM'), array('Inc' => 211, 'Name' => 'YEMEN (P.D.R.)'), array('Inc' => 212, 'Name' => 'YEMEN'), array('Inc' => 213, 'Name' => 'YUGOSLAVIA (FORMER)'), array('Inc' => 214, 'Name' => 'ZAMBIA'), array('Inc' => 215, 'Name' => 'ZIMBABWE'), ); public $OccupationIndex_india_ua_v1 = array( array('Inc' => 0, 'Name' => 'NO OCCUPATION – безработный'), array('Inc' => 1, 'Name' => 'PENSIONER – пенсионер'), array('Inc' => 2, 'Name' => 'STUDENT – студент'), array('Inc' => 3, 'Name' => 'PUPIL – ученик'), array('Inc' => 4, 'Name' => 'KINDERGARTEN – дошкольник'), array('Inc' => 5, 'Name' => 'PRIVATE ENTREPRENEUR – частный предприниматель'), array('Inc' => 6, 'Name' => 'SALES MANAGER – менеджер по продажам'), array('Inc' => 7, 'Name' => 'MANAGER – менеджер'), array('Inc' => 8, 'Name' => 'DIRECTOR – директор'), array('Inc' => 9, 'Name' => 'DEPUTY DIRECTOR – заместитель директора'), array('Inc' => 10, 'Name' => 'ACCOUNTANT – бухгалтер'), array('Inc' => 11, 'Name' => 'DOCTOR – врач'), array('Inc' => 12, 'Name' => 'NURSE – медсестра'), array('Inc' => 13, 'Name' => 'TEACHER – учитель'), array('Inc' => 14, 'Name' => 'ADMINISTRATOR – администратор'), array('Inc' => 15, 'Name' => 'DESIGNER – дизайнер'), array('Inc' => 16, 'Name' => 'PROGRAMMER – программист'), array('Inc' => 17, 'Name' => 'JOURNALIST – журналист'), array('Inc' => 18, 'Name' => 'LAWYER – юрист'), array('Inc' => 19, 'Name' => 'CLERGYMAN. RELIGIOUS – священнослужитель'), array('Inc' => 20, 'Name' => 'DRIVER – водитель'), ); public $MaritalStatus_greece_mow_v1 = array( array('Inc' => 0, 'Name' => 'Холост / не замужем'), array('Inc' => 1, 'Name' => 'Женат / замужем'), array('Inc' => 2, 'Name' => 'Не проживает с супругом'), array('Inc' => 3, 'Name' => 'Разведены'), array('Inc' => 4, 'Name' => 'Вдовец / вдова'), ); public $SupportMeans_greece_mow_v1 = array( array('Inc' => 0, 'Name' => 'Наличные (CASH)'), array('Inc' => 1, 'Name' => 'Дорожные чеки'), array('Inc' => 2, 'Name' => 'Кредитные карты'), array('Inc' => 3, 'Name' => 'Обеспеченное место пребывания'), array('Inc' => 4, 'Name' => 'Предоплачен транспорт'), array('Inc' => 5, 'Name' => 'Другое'), ); public $WhoPaying_greece_mow_v1 = array( array('Inc' => 0, 'Name' => 'Я'), array('Inc' => 1, 'Name' => 'Спонсор'), ); public $Entries_greece_ua_v1 = array( array('Inc' => 0, 'Name' => 'Однократная'), array('Inc' => 1, 'Name' => 'Двукратная'), array('Inc' => 2, 'Name' => 'Многократная'), ); public $country_greece_ua_v1 = array( array('Inc' => 0, 'Name' => 'Aruba'), array('Inc' => 1, 'Name' => 'Afghanistan'), array('Inc' => 2, 'Name' => 'Angola'), array('Inc' => 3, 'Name' => 'Albania'), array('Inc' => 4, 'Name' => 'Andorra'), array('Inc' => 5, 'Name' => 'Unted Arab Emirates'), array('Inc' => 6, 'Name' => 'Argentina'), array('Inc' => 7, 'Name' => 'Armenia'), array('Inc' => 8, 'Name' => 'Antigua and Barbuda'), array('Inc' => 9, 'Name' => 'Australia'), array('Inc' => 10, 'Name' => 'Austria'), array('Inc' => 11, 'Name' => 'Azerbaijan'), array('Inc' => 12, 'Name' => 'Burundi'), array('Inc' => 13, 'Name' => 'Belgium'), array('Inc' => 14, 'Name' => 'Benin'), array('Inc' => 15, 'Name' => 'Burkina Faso'), array('Inc' => 16, 'Name' => 'Bangladesh'), array('Inc' => 17, 'Name' => 'Bulgaria'), array('Inc' => 18, 'Name' => 'Bahrain'), array('Inc' => 19, 'Name' => 'Bahamas'), array('Inc' => 20, 'Name' => 'Bosnia and Herzegovina'), array('Inc' => 21, 'Name' => 'Belarus'), array('Inc' => 22, 'Name' => 'Belize'), array('Inc' => 23, 'Name' => 'Bermuda(UK)'), array('Inc' => 24, 'Name' => 'Bolivia'), array('Inc' => 25, 'Name' => 'Brazil'), array('Inc' => 26, 'Name' => 'Barbados'), array('Inc' => 27, 'Name' => 'Brunei Darussalam'), array('Inc' => 28, 'Name' => 'Bhutan'), array('Inc' => 29, 'Name' => 'Botswana'), array('Inc' => 30, 'Name' => 'Central African Republic'), array('Inc' => 31, 'Name' => 'Canada'), array('Inc' => 32, 'Name' => 'Switzerland'), array('Inc' => 33, 'Name' => 'Chile'), array('Inc' => 34, 'Name' => 'China'), array('Inc' => 35, 'Name' => 'Cote d` Ivoire'), array('Inc' => 36, 'Name' => 'Cameroon'), array('Inc' => 37, 'Name' => 'Congo'), array('Inc' => 38, 'Name' => 'Columbia'), array('Inc' => 39, 'Name' => 'Comoros'), array('Inc' => 40, 'Name' => 'Cape Verde'), array('Inc' => 41, 'Name' => 'International Committee of the Red Cross'), array('Inc' => 41, 'Name' => 'Costa Rica'), array('Inc' => 43, 'Name' => 'Czechoslovakia'), array('Inc' => 44, 'Name' => 'Cuba'), array('Inc' => 45, 'Name' => 'Cyprus'), array('Inc' => 46, 'Name' => 'Czech Republic'), array('Inc' => 47, 'Name' => 'Djibouti'), array('Inc' => 48, 'Name' => 'Dominica'), array('Inc' => 49, 'Name' => 'Denmark'), array('Inc' => 50, 'Name' => 'Dominican Republic'), array('Inc' => 51, 'Name' => 'Germany'), array('Inc' => 52, 'Name' => 'Algeria'), array('Inc' => 53, 'Name' => 'Ecuador'), array('Inc' => 54, 'Name' => 'Egypt'), array('Inc' => 55, 'Name' => 'Erithrea'), array('Inc' => 56, 'Name' => 'Western Sahara'), array('Inc' => 57, 'Name' => 'Spain'), array('Inc' => 58, 'Name' => 'Estonia'), array('Inc' => 59, 'Name' => 'Ethiopia'), array('Inc' => 60, 'Name' => 'Finland'), array('Inc' => 61, 'Name' => 'Fiji'), array('Inc' => 62, 'Name' => 'France'), array('Inc' => 63, 'Name' => 'Micronesia (Federated States of)'), array('Inc' => 64, 'Name' => 'Gabon'), array('Inc' => 65, 'Name' => 'United  Kingdom'), array('Inc' => 66, 'Name' => 'Georgia'), array('Inc' => 67, 'Name' => 'Ghana'), array('Inc' => 68, 'Name' => 'Guinea'), array('Inc' => 69, 'Name' => 'Gambia'), array('Inc' => 70, 'Name' => 'Guinea-Bissau'), array('Inc' => 71, 'Name' => 'Equatorial Guinea'), array('Inc' => 72, 'Name' => 'Greece'), array('Inc' => 73, 'Name' => 'Grenada'), array('Inc' => 74, 'Name' => 'Guatemala'), array('Inc' => 75, 'Name' => 'Guyana'), array('Inc' => 76, 'Name' => 'Hong Kong'), array('Inc' => 77, 'Name' => 'Honduras'), array('Inc' => 78, 'Name' => 'Croatia'), array('Inc' => 79, 'Name' => 'Haiti'), array('Inc' => 80, 'Name' => 'Hungary'), array('Inc' => 81, 'Name' => 'Indonesia'), array('Inc' => 82, 'Name' => 'India'), array('Inc' => 83, 'Name' => 'Ireland'), array('Inc' => 84, 'Name' => 'Iran'), array('Inc' => 85, 'Name' => 'Iraq'), array('Inc' => 86, 'Name' => 'Iceland'), array('Inc' => 87, 'Name' => 'Israel'), array('Inc' => 88, 'Name' => 'Italia'), array('Inc' => 89, 'Name' => 'Jamaica'), array('Inc' => 90, 'Name' => 'Jordan'), array('Inc' => 91, 'Name' => 'Japan'), array('Inc' => 92, 'Name' => 'Kazakhstan'), array('Inc' => 93, 'Name' => 'Kenya'), array('Inc' => 94, 'Name' => 'Kyrgyzstan'), array('Inc' => 95, 'Name' => 'Cambodia'), array('Inc' => 96, 'Name' => 'Kiribati'), array('Inc' => 97, 'Name' => 'Saint Kitts and Nevis'), array('Inc' => 98, 'Name' => 'Korea, Republic of'), array('Inc' => 99, 'Name' => 'Kuwait'), array('Inc' => 100, 'Name' => 'Laos'), array('Inc' => 101, 'Name' => 'Lebanon'), array('Inc' => 102, 'Name' => 'Liberia'), array('Inc' => 103, 'Name' => 'Libyan Arab Jamahiriya'), array('Inc' => 104, 'Name' => 'Saint Lucia'), array('Inc' => 105, 'Name' => 'Liechtenstein'), array('Inc' => 106, 'Name' => 'Sri Lanka'), array('Inc' => 107, 'Name' => 'Lesotho'), array('Inc' => 108, 'Name' => 'Lithuania'), array('Inc' => 109, 'Name' => 'Luxembourg'), array('Inc' => 110, 'Name' => 'Latvia'), array('Inc' => 111, 'Name' => 'Macau'), array('Inc' => 112, 'Name' => 'Morocco'), array('Inc' => 113, 'Name' => 'Monaco'), array('Inc' => 114, 'Name' => 'Moldova'), array('Inc' => 115, 'Name' => 'Madagascar'), array('Inc' => 116, 'Name' => 'Maldives'), array('Inc' => 117, 'Name' => 'Mexico'), array('Inc' => 118, 'Name' => 'Marshall Islands'), array('Inc' => 119, 'Name' => 'Mali'), array('Inc' => 120, 'Name' => 'Malta'), array('Inc' => 121, 'Name' => 'Myanmar'), array('Inc' => 122, 'Name' => 'Montenegro'), array('Inc' => 123, 'Name' => 'Mongolia'), array('Inc' => 123, 'Name' => 'Northern Mariana Islands'), array('Inc' => 125, 'Name' => 'Mozambique'), array('Inc' => 126, 'Name' => 'Mauritania'), array('Inc' => 127, 'Name' => 'Mauritius'), array('Inc' => 128, 'Name' => 'Malawi'), array('Inc' => 129, 'Name' => 'Malaysia'), array('Inc' => 130, 'Name' => 'Namibia'), array('Inc' => 131, 'Name' => 'Niger'), array('Inc' => 132, 'Name' => 'Nigeria'), array('Inc' => 133, 'Name' => 'Nicaragua'), array('Inc' => 134, 'Name' => 'Netherlands'), array('Inc' => 135, 'Name' => 'Norway'), array('Inc' => 136, 'Name' => 'Nepal'), array('Inc' => 137, 'Name' => 'Nauru'), array('Inc' => 138, 'Name' => 'New Zealand'), array('Inc' => 139, 'Name' => 'Oman'), array('Inc' => 140, 'Name' => 'Pakistan'), array('Inc' => 141, 'Name' => 'Panama'), array('Inc' => 142, 'Name' => 'Pereu'), array('Inc' => 143, 'Name' => 'Philippines'), array('Inc' => 144, 'Name' => 'Palau'), array('Inc' => 145, 'Name' => 'Papua New Guinea'), array('Inc' => 146, 'Name' => 'Poland'), array('Inc' => 147, 'Name' => 'Korea, Democratic People`s Republic of'), array('Inc' => 148, 'Name' => 'Portugal'), array('Inc' => 149, 'Name' => 'Paraguay'), array('Inc' => 150, 'Name' => 'Qatar'), array('Inc' => 151, 'Name' => 'Romania'), array('Inc' => 152, 'Name' => 'Russian Federation'), array('Inc' => 153, 'Name' => 'Rwanda'), array('Inc' => 154, 'Name' => 'Saudi Arabia'), array('Inc' => 155, 'Name' => 'Serbia and Montenegro'), array('Inc' => 156, 'Name' => 'Sudan'), array('Inc' => 157, 'Name' => 'Senegal'), array('Inc' => 158, 'Name' => 'Singapore'), array('Inc' => 159, 'Name' => 'Solomon Islands'), array('Inc' => 160, 'Name' => 'Siera Leone'), array('Inc' => 161, 'Name' => 'El Salvador'), array('Inc' => 162, 'Name' => 'San Marino'), array('Inc' => 163, 'Name' => 'Somalia'), array('Inc' => 164, 'Name' => 'Serbia'), array('Inc' => 165, 'Name' => 'Sao Tome and Principe'), array('Inc' => 166, 'Name' => 'Soviet Union'), array('Inc' => 167, 'Name' => 'Suriname'), array('Inc' => 168, 'Name' => 'Slovakia'), array('Inc' => 169, 'Name' => 'Slovenia'), array('Inc' => 170, 'Name' => 'Sweden'), array('Inc' => 171, 'Name' => 'Swaziland'), array('Inc' => 172, 'Name' => 'Seychelles'), array('Inc' => 173, 'Name' => 'Syria'), array('Inc' => 174, 'Name' => 'Chad'), array('Inc' => 175, 'Name' => 'Togo'), array('Inc' => 176, 'Name' => 'Thailand'), array('Inc' => 177, 'Name' => 'Tajikistan'), array('Inc' => 178, 'Name' => 'Turkmenistan'), array('Inc' => 179, 'Name' => 'Timor-Leste'), array('Inc' => 180, 'Name' => 'Tonga'), array('Inc' => 181, 'Name' => 'Trinidad and Tobago'), array('Inc' => 182, 'Name' => 'Tunisia'), array('Inc' => 183, 'Name' => 'Turkey'), array('Inc' => 184, 'Name' => 'Tuvalu'), array('Inc' => 185, 'Name' => 'Taiwan'), array('Inc' => 186, 'Name' => 'Former Yugoslav Republic of Macedonia'), array('Inc' => 187, 'Name' => 'Tanzania'), array('Inc' => 188, 'Name' => 'Uganda'), array('Inc' => 189, 'Name' => 'Ukraine'), array('Inc' => 190, 'Name' => 'Kosovo'), array('Inc' => 191, 'Name' => 'United Nations (UN)'), array('Inc' => 192, 'Name' => 'UNHCR'), array('Inc' => 193, 'Name' => 'Uruguay'), array('Inc' => 194, 'Name' => 'United States'), array('Inc' => 195, 'Name' => 'Uzbekistan'), array('Inc' => 196, 'Name' => 'Vatican City'), array('Inc' => 197, 'Name' => 'Saint Vincent and the Grenadines'), array('Inc' => 198, 'Name' => 'Venezuela'), array('Inc' => 199, 'Name' => 'Vietnam'), array('Inc' => 200, 'Name' => 'Vanuatu'), array('Inc' => 201, 'Name' => 'Samoa'), array('Inc' => 202, 'Name' => 'Stateless persons'), array('Inc' => 203, 'Name' => 'Stateless Persons (Convention of 28/9/1954)'), array('Inc' => 204, 'Name' => 'Refugees (other)'), array('Inc' => 205, 'Name' => 'Palestine'), array('Inc' => 206, 'Name' => 'Tibet'), array('Inc' => 207, 'Name' => 'Yugoslavia before independence of FYROM'), array('Inc' => 208, 'Name' => 'Uncertain Nationality'), array('Inc' => 209, 'Name' => 'Palestinian nationality (used by Germany)'), array('Inc' => 210, 'Name' => 'Yemen'), array('Inc' => 211, 'Name' => 'Peopole"s Republic of Yemen'), array('Inc' => 212, 'Name' => 'Yugoslavia'), array('Inc' => 213, 'Name' => 'South Africa'), array('Inc' => 214, 'Name' => 'Congo,Democratic Republic of (formely Zaire)'), array('Inc' => 215, 'Name' => 'Zambia'), array('Inc' => 216, 'Name' => 'Zimbabwe'), ); public $MaritalStatus_greece_ua_v1 = array( array('Inc' => 0, 'Name' => 'Холост / не замужем'), array('Inc' => 1, 'Name' => 'Женат / замужем'), array('Inc' => 2, 'Name' => 'Не проживает с супругом'), array('Inc' => 3, 'Name' => 'Разведены'), array('Inc' => 4, 'Name' => 'Вдовец / вдова'), ); public $OccupationIndex_greece_ua_v1 = array( array('Inc' => 0, 'Name' => 'FARMER'), array('Inc' => 1, 'Name' => 'ARCHITECT'), array('Inc' => 2, 'Name' => 'ARTISAN'), array('Inc' => 3, 'Name' => 'LEGAL PROFESSION (lawyer)'), array('Inc' => 4, 'Name' => 'ARTIST'), array('Inc' => 5, 'Name' => 'BANKER'), array('Inc' => 6, 'Name' => 'TRADESMAN'), array('Inc' => 7, 'Name' => 'MANAGER'), array('Inc' => 8, 'Name' => 'CLERGYMAN'), array('Inc' => 9, 'Name' => 'CHAUFFEUR'), array('Inc' => 10, 'Name' => 'SCIENTIFIC RESEARCHER'), array('Inc' => 11, 'Name' => 'TEACHER'), array('Inc' => 12, 'Name' => 'WHITE-COLLAR WORKER'), array('Inc' => 13, 'Name' => 'CIVIL SERVANT'), array('Inc' => 14, 'Name' => 'POLITICIAN'), array('Inc' => 15, 'Name' => 'COMPUTER EXPERT'), array('Inc' => 16, 'Name' => 'ELECTRONICS EXPERT'), array('Inc' => 17, 'Name' => 'CHEMIST/CHEMICAL ENGINEER'), array('Inc' => 18, 'Name' => 'OTHER KIND OF TECHNICIAN'), array('Inc' => 19, 'Name' => 'JOURNALIST'), array('Inc' => 20, 'Name' => 'MEDICAL AND PARAMEDICAL PROFESSION (doctor)'), array('Inc' => 21, 'Name' => 'SEAMAN'), array('Inc' => 22, 'Name' => 'BLUE-COLLAR WORKER'), array('Inc' => 23, 'Name' => 'SELF-EMPLOYED'), array('Inc' => 24, 'Name' => 'FASHION'), array('Inc' => 25, 'Name' => 'POLICEMAN - SOLDIER'), array('Inc' => 26, 'Name' => 'PENSIONER'), array('Inc' => 27, 'Name' => 'PROFESSIONAL SPORTSPERSON'), array('Inc' => 28, 'Name' => 'NO OCCUPATION'), array('Inc' => 29, 'Name' => 'STUDENT'), array('Inc' => 30, 'Name' => 'DIPLOMAT'), array('Inc' => 31, 'Name' => 'ADMINISTRATIVE'), array('Inc' => 32, 'Name' => 'DIPLOMAT?S PRIVATE SERVANT'), array('Inc' => 33, 'Name' => 'MAGISTRATE'), array('Inc' => 34, 'Name' => 'COMPANY EXECUTIVE'), array('Inc' => 35, 'Name' => 'OTHERS'), ); public $SupportMeans_greece_ua_v1 = array( array('Inc' => 0, 'Name' => 'Наличные (CASH)'), array('Inc' => 1, 'Name' => 'Дорожные чеки'), array('Inc' => 2, 'Name' => 'Кредитные карты'), array('Inc' => 3, 'Name' => 'Обеспеченное место пребывания'), array('Inc' => 4, 'Name' => 'Предоплачен транспорт'), array('Inc' => 5, 'Name' => 'Другое'), ); public $WhoPaying_greece_ua_v1 = array( array('Inc' => 0, 'Name' => 'Я'), array('Inc' => 1, 'Name' => 'Спонсор'), ); public $MaritalStatus_morocco_ua_v1 = array( array('Inc' => 0, 'Name' => 'Single – холост/не замужем'), array('Inc' => 1, 'Name' => 'Married – женат/ замужем'), array('Inc' => 2, 'Name' => 'Separated – женат/ замужем, но живут раздельно'), array('Inc' => 3, 'Name' => 'Divorced – разведен(а)'), array('Inc' => 4, 'Name' => 'Widow(er) – вдова/вдовец'), array('Inc' => 5, 'Name' => 'Other civil marriage – гражданский брак') ); public $StateIndex_morocco_ua_v1 = array( array('Inc' => 0, 'Name' => 'AFGHANISTAN'), array('Inc' => 1, 'Name' => 'ALBANIA'), array('Inc' => 2, 'Name' => 'GERMANY'), array('Inc' => 3, 'Name' => 'ANDORRA'), array('Inc' => 4, 'Name' => 'ANGOLA'), array('Inc' => 5, 'Name' => 'ANTIGUA AND BARBUDA'), array('Inc' => 6, 'Name' => 'STATELESS ARABIA'), array('Inc' => 7, 'Name' => 'SAUDI ARABIA'), array('Inc' => 8, 'Name' => 'ARGELIA'), array('Inc' => 9, 'Name' => 'ARGENTINA'), array('Inc' => 10, 'Name' => 'ARMENIA'), array('Inc' => 11, 'Name' => 'ARUBA'), array('Inc' => 12, 'Name' => 'AUSTRALIA'), array('Inc' => 13, 'Name' => 'AZERBOIJAN'), array('Inc' => 14, 'Name' => 'BAHAMAS'), array('Inc' => 15, 'Name' => 'BAHREIN'), array('Inc' => 16, 'Name' => 'BANGLADESH'), array('Inc' => 17, 'Name' => 'BARBADOS'), array('Inc' => 18, 'Name' => 'BELARUS'), array('Inc' => 19, 'Name' => 'BELGIUM'), array('Inc' => 20, 'Name' => 'BELIZE'), array('Inc' => 21, 'Name' => 'BENIN'), array('Inc' => 22, 'Name' => 'BHUTAN'), array('Inc' => 23, 'Name' => 'BOLIVIA'), array('Inc' => 24, 'Name' => 'BOPHUTHATSWANA'), array('Inc' => 25, 'Name' => 'BOSNIA AND HERZEGOVINA'), array('Inc' => 26, 'Name' => 'BOTSWANA'), array('Inc' => 27, 'Name' => 'BRASIL'), array('Inc' => 28, 'Name' => 'BRUNEI DARUSSALAM'), array('Inc' => 29, 'Name' => 'BULGARIA'), array('Inc' => 30, 'Name' => 'BURKINA FASSO'), array('Inc' => 31, 'Name' => 'BURUNDI'), array('Inc' => 32, 'Name' => 'CAPE VERDE'), array('Inc' => 33, 'Name' => 'CAMBOYA'), array('Inc' => 34, 'Name' => 'CAMEROON'), array('Inc' => 35, 'Name' => 'CANADA'), array('Inc' => 36, 'Name' => 'CENTRAL AFRICAN REP.'), array('Inc' => 37, 'Name' => 'CHAD'), array('Inc' => 38, 'Name' => 'CZECH REPUBLIC'), array('Inc' => 39, 'Name' => 'CHECOSLAVAQUIA'), array('Inc' => 40, 'Name' => 'CHILE'), array('Inc' => 41, 'Name' => 'CHINA'), array('Inc' => 42, 'Name' => 'CYPRUS'), array('Inc' => 43, 'Name' => 'CISKEI'), array('Inc' => 44, 'Name' => 'COLOMBIA'), array('Inc' => 45, 'Name' => 'COMORES'), array('Inc' => 46, 'Name' => 'CONGO'), array('Inc' => 47, 'Name' => 'CONGO, REP. DEMOC.'), array('Inc' => 48, 'Name' => 'COREA, REP.POP.DEMOC.'), array('Inc' => 49, 'Name' => 'KOREA, REPUBLIC OF'), array('Inc' => 50, 'Name' => 'COTE IVOIRE'), array('Inc' => 51, 'Name' => 'COSTA RICA'), array('Inc' => 52, 'Name' => 'CROATIA'), array('Inc' => 53, 'Name' => 'INTERNATIONAL REDEROSS'), array('Inc' => 54, 'Name' => 'CUBA'), array('Inc' => 55, 'Name' => 'DENMARK'), array('Inc' => 56, 'Name' => 'DJIBOUTI'), array('Inc' => 57, 'Name' => 'DOMINICA'), array('Inc' => 58, 'Name' => 'DOMINICAN REPUBLIC'), array('Inc' => 59, 'Name' => 'ECUADOR'), array('Inc' => 60, 'Name' => 'EGIPTO'), array('Inc' => 61, 'Name' => 'EL SALVADOR'), array('Inc' => 62, 'Name' => 'UNITED ARAB EMIRATES'), array('Inc' => 63, 'Name' => 'ERITREA'), array('Inc' => 64, 'Name' => 'SLOVAKIA'), array('Inc' => 65, 'Name' => 'SLOVENIA'), array('Inc' => 66, 'Name' => 'ESPANA'), array('Inc' => 67, 'Name' => 'USA'), array('Inc' => 68, 'Name' => 'ESTONIA'), array('Inc' => 69, 'Name' => 'ETHIOPIA'), array('Inc' => 70, 'Name' => 'RUSSIAN FEDERATION'), array('Inc' => 71, 'Name' => 'FIDJI (ISLAS)'), array('Inc' => 72, 'Name' => 'PHILIPPINES'), array('Inc' => 73, 'Name' => 'FINLAND'), array('Inc' => 74, 'Name' => 'FRANCE'), array('Inc' => 75, 'Name' => 'GABON'), array('Inc' => 76, 'Name' => 'GAMBIA'), array('Inc' => 77, 'Name' => 'GEORGIA'), array('Inc' => 78, 'Name' => 'GHANA'), array('Inc' => 79, 'Name' => 'GRANADA'), array('Inc' => 80, 'Name' => 'GREECE'), array('Inc' => 81, 'Name' => 'GUATEMALA'), array('Inc' => 82, 'Name' => 'GUAYANA'), array('Inc' => 83, 'Name' => 'GUINEA'), array('Inc' => 84, 'Name' => 'GUINEA BISSAN'), array('Inc' => 85, 'Name' => 'EQUATORIAL GUINEA'), array('Inc' => 86, 'Name' => 'HAITI'), array('Inc' => 87, 'Name' => 'NITHERLANDS'), array('Inc' => 88, 'Name' => 'HONDURAS'), array('Inc' => 89, 'Name' => 'HONG KONG (CHINA)'), array('Inc' => 90, 'Name' => 'HONG KONG (GB)'), array('Inc' => 91, 'Name' => 'HUNGARY'), array('Inc' => 92, 'Name' => 'INDIA'), array('Inc' => 93, 'Name' => 'INDONESIA'), array('Inc' => 94, 'Name' => 'ISLAMIC, REPUBLIC OF'), array('Inc' => 95, 'Name' => 'IRAQ'), array('Inc' => 96, 'Name' => 'IRELAND'), array('Inc' => 97, 'Name' => 'ISLANDIA'), array('Inc' => 98, 'Name' => 'ISRAEL'), array('Inc' => 99, 'Name' => 'ITALY'), array('Inc' => 100, 'Name' => 'JAMAICA'), array('Inc' => 101, 'Name' => 'JAPAN'), array('Inc' => 102, 'Name' => 'JORDAN'), array('Inc' => 103, 'Name' => 'KAZAKHSTAN'), array('Inc' => 104, 'Name' => 'KIRGUYSTAN'), array('Inc' => 105, 'Name' => 'KIRIBATI'), array('Inc' => 106, 'Name' => 'KUWAIT'), array('Inc' => 107, 'Name' => 'LAOS'), array('Inc' => 108, 'Name' => 'LESOTHO'), array('Inc' => 109, 'Name' => 'LATVIA'), array('Inc' => 110, 'Name' => 'LEBANON'), array('Inc' => 111, 'Name' => 'LIBERIA'), array('Inc' => 112, 'Name' => 'LIBYAN ARAB JAMAHIRIYA'), array('Inc' => 113, 'Name' => 'LEICHTENSTEIN'), array('Inc' => 114, 'Name' => 'LITHUANIA'), array('Inc' => 115, 'Name' => 'LUXEMBOURG'), array('Inc' => 116, 'Name' => 'MACAO'), array('Inc' => 117, 'Name' => 'REPUBLIC OF MACEDONIA'), array('Inc' => 118, 'Name' => 'MADAGASCAR'), array('Inc' => 119, 'Name' => 'MALAYSIA'), array('Inc' => 120, 'Name' => 'MALAWI'), array('Inc' => 121, 'Name' => 'MALDIVAS (ISLAS)'), array('Inc' => 122, 'Name' => 'MALI'), array('Inc' => 123, 'Name' => 'MALTA'), array('Inc' => 124, 'Name' => 'MARIANA ISLANDS'), array('Inc' => 125, 'Name' => 'MAROCCO'), array('Inc' => 126, 'Name' => 'MARSCHALL (ISLAS)'), array('Inc' => 127, 'Name' => 'MAURITANIA'), array('Inc' => 128, 'Name' => 'MEXICO'), array('Inc' => 129, 'Name' => 'MICRONESIA, ESTADOS FED.'), array('Inc' => 130, 'Name' => 'MOLDOVA'), array('Inc' => 131, 'Name' => 'MONACO'), array('Inc' => 132, 'Name' => 'MONGOLIA'), array('Inc' => 133, 'Name' => 'REPUB. OF MONTENEGRO'), array('Inc' => 134, 'Name' => 'MOZAMBIQUE'), array('Inc' => 135, 'Name' => 'MYANMAR (BIRMANIA)'), array('Inc' => 136, 'Name' => 'NAMIBIA'), array('Inc' => 137, 'Name' => 'NAURU'), array('Inc' => 138, 'Name' => 'NEPAL'), array('Inc' => 139, 'Name' => 'NICARAGUA'), array('Inc' => 140, 'Name' => 'NIGER'), array('Inc' => 141, 'Name' => 'NIGERIA'), array('Inc' => 142, 'Name' => 'NORWAY'), array('Inc' => 143, 'Name' => 'NEW ZEALAND'), array('Inc' => 144, 'Name' => 'O.N.U.'), array('Inc' => 145, 'Name' => 'OTHERS'), array('Inc' => 146, 'Name' => 'PACIFIC (ISLANDS)'), array('Inc' => 147, 'Name' => 'PAKISTAN'), array('Inc' => 148, 'Name' => 'PALAU'), array('Inc' => 149, 'Name' => 'PALESTINE'), array('Inc' => 150, 'Name' => 'PALESTIAN NOT ROCOGN'), array('Inc' => 151, 'Name' => 'PANAMA'), array('Inc' => 152, 'Name' => 'PAPUA NEW GUINEA'), array('Inc' => 153, 'Name' => 'PARAGUAY'), array('Inc' => 154, 'Name' => 'PERU'), array('Inc' => 155, 'Name' => 'POLAND'), array('Inc' => 156, 'Name' => 'PORTUGAL'), array('Inc' => 157, 'Name' => 'QATAR'), array('Inc' => 158, 'Name' => 'REFUGEES (OTHER)'), array('Inc' => 159, 'Name' => 'REFUGEES C. 28/09/1954'), array('Inc' => 160, 'Name' => 'UNITED KINGDOM'), array('Inc' => 161, 'Name' => 'RUANDA'), array('Inc' => 162, 'Name' => 'RUMANIA'), array('Inc' => 163, 'Name' => 'WESTARN SAHARA'), array('Inc' => 164, 'Name' => 'SALOMON (ISLAS)'), array('Inc' => 165, 'Name' => 'SAMOA OCCIDENTAL'), array('Inc' => 166, 'Name' => 'SAN CRISTOBAL YNEVIS'), array('Inc' => 167, 'Name' => 'SAN MARINO'), array('Inc' => 168, 'Name' => 'SAN VICENTEY GRANAD.'), array('Inc' => 169, 'Name' => 'SANTA LUSIA'), array('Inc' => 170, 'Name' => 'SANTA SEDE'), array('Inc' => 171, 'Name' => 'SAO TOME AND PRINCIPL'), array('Inc' => 172, 'Name' => 'SEICHELLES (ISLAS)'), array('Inc' => 173, 'Name' => 'SENEGAL'), array('Inc' => 174, 'Name' => 'SERBIA'), array('Inc' => 175, 'Name' => 'SERBIA AND MONTENEGRO'), array('Inc' => 176, 'Name' => 'SIERRA LEONA'), array('Inc' => 177, 'Name' => 'SINGAPORE'), array('Inc' => 178, 'Name' => 'SYRIAN ARAB REPUBLIC'), array('Inc' => 179, 'Name' => 'SOMALIA'), array('Inc' => 180, 'Name' => 'SRI LANKA'), array('Inc' => 181, 'Name' => 'SOUTH AFRICA'), array('Inc' => 182, 'Name' => 'SUDAN'), array('Inc' => 183, 'Name' => 'SWEDEN'), array('Inc' => 184, 'Name' => 'SWITZERLAND'), array('Inc' => 185, 'Name' => 'SURINAME'), array('Inc' => 186, 'Name' => 'SWAZILANDIA'), array('Inc' => 187, 'Name' => 'TAJIKISTAN'), array('Inc' => 188, 'Name' => 'THAILAND'), array('Inc' => 189, 'Name' => 'TAIWAN, PROVINCE CHINA'), array('Inc' => 190, 'Name' => 'TANZANIA, UND REPUBLIC'), array('Inc' => 191, 'Name' => 'TIBET'), array('Inc' => 192, 'Name' => 'TIMOR-LESTE'), array('Inc' => 193, 'Name' => 'TOGO'), array('Inc' => 194, 'Name' => 'TONGA'), array('Inc' => 195, 'Name' => 'TRANSKEY'), array('Inc' => 196, 'Name' => 'TRINIDAD AND TOBAGO'), array('Inc' => 197, 'Name' => 'TUNISIA'), array('Inc' => 198, 'Name' => 'TURKMENISTAN'), array('Inc' => 199, 'Name' => 'TURKEY'), array('Inc' => 200, 'Name' => 'TUVALU'), array('Inc' => 201, 'Name' => 'UKRAINE'), array('Inc' => 202, 'Name' => 'UGANDA'), array('Inc' => 203, 'Name' => 'UNHCR'), array('Inc' => 204, 'Name' => 'URSS'), array('Inc' => 205, 'Name' => 'URUGUAY'), array('Inc' => 206, 'Name' => 'UZBEKISTAN'), array('Inc' => 207, 'Name' => 'VANUATU-NUEVA HEBRIDAS'), array('Inc' => 208, 'Name' => 'VENDA'), array('Inc' => 209, 'Name' => 'VENEZUELA'), array('Inc' => 210, 'Name' => 'VIET NAM'), array('Inc' => 211, 'Name' => 'YEMEN (P.D.R.)'), array('Inc' => 212, 'Name' => 'YEMEN'), array('Inc' => 213, 'Name' => 'YUGOSLAVIA (FORMER)'), array('Inc' => 214, 'Name' => 'ZAMBIA'), array('Inc' => 215, 'Name' => 'ZIMBABWE'), ); public $OccupationIndex_morocco_ua_v1 = array( array('Inc' => 0, 'Name' => 'NO OCCUPATION – безработный'), array('Inc' => 1, 'Name' => 'PENSIONER – пенсионер'), array('Inc' => 2, 'Name' => 'STUDENT – студент'), array('Inc' => 3, 'Name' => 'PUPIL – ученик'), array('Inc' => 4, 'Name' => 'KINDERGARTEN – дошкольник'), array('Inc' => 5, 'Name' => 'PRIVATE ENTREPRENEUR – частный предприниматель'), array('Inc' => 6, 'Name' => 'SALES MANAGER – менеджер по продажам'), array('Inc' => 7, 'Name' => 'MANAGER – менеджер'), array('Inc' => 8, 'Name' => 'DIRECTOR – директор'), array('Inc' => 9, 'Name' => 'DEPUTY DIRECTOR – заместитель директора'), array('Inc' => 10, 'Name' => 'ACCOUNTANT – бухгалтер'), array('Inc' => 11, 'Name' => 'DOCTOR – врач'), array('Inc' => 12, 'Name' => 'NURSE – медсестра'), array('Inc' => 13, 'Name' => 'TEACHER – учитель'), array('Inc' => 14, 'Name' => 'ADMINISTRATOR – администратор'), array('Inc' => 15, 'Name' => 'DESIGNER – дизайнер'), array('Inc' => 16, 'Name' => 'PROGRAMMER – программист'), array('Inc' => 17, 'Name' => 'JOURNALIST – журналист'), array('Inc' => 18, 'Name' => 'LAWYER – юрист'), array('Inc' => 19, 'Name' => 'CLERGYMAN. RELIGIOUS – священнослужитель'), array('Inc' => 20, 'Name' => 'DRIVER – водитель'), ); public $country_samo = array( array('Inc' => 0, 'Name' => 'AFGHANISTAN'), array('Inc' => 1, 'Name' => 'ALBANIA'), array('Inc' => 2, 'Name' => 'GERMANY'), array('Inc' => 3, 'Name' => 'ANDORRA'), array('Inc' => 4, 'Name' => 'ANGOLA'), array('Inc' => 5, 'Name' => 'ANTIGUA AND BARBUDA'), array('Inc' => 6, 'Name' => 'STATELESS'), array('Inc' => 7, 'Name' => 'SAUDI ARABIA'), array('Inc' => 8, 'Name' => 'ALGERIA'), array('Inc' => 9, 'Name' => 'ARGENTINA'), array('Inc' => 10, 'Name' => 'ARMENIA'), array('Inc' => 11, 'Name' => 'ARUBA'), array('Inc' => 12, 'Name' => 'AUSTRALIA'), array('Inc' => 13, 'Name' => 'AZERBAIJAN'), array('Inc' => 14, 'Name' => 'BAHAMAS'), array('Inc' => 15, 'Name' => 'BAHRAIN'), array('Inc' => 16, 'Name' => 'BANGLADESH'), array('Inc' => 17, 'Name' => 'BARBADOS'), array('Inc' => 18, 'Name' => 'BELARUS'), array('Inc' => 19, 'Name' => 'BELGIUM'), array('Inc' => 20, 'Name' => 'BELIZE'), array('Inc' => 21, 'Name' => 'BENIN'), array('Inc' => 22, 'Name' => 'BHUTAN'), array('Inc' => 23, 'Name' => 'BOLIVIA'), array('Inc' => 24, 'Name' => 'BOPHUTHATSWANA'), array('Inc' => 25, 'Name' => 'BOSNIA HERZEGOVINA'), array('Inc' => 26, 'Name' => 'BOTSWANA'), array('Inc' => 27, 'Name' => 'BRASIL'), array('Inc' => 28, 'Name' => 'BRUNEI DARUSSALAM'), array('Inc' => 29, 'Name' => 'BULGARIA'), array('Inc' => 30, 'Name' => 'BURKINA FASSO'), array('Inc' => 31, 'Name' => 'BURUNDI'), array('Inc' => 32, 'Name' => 'CAPE VERDE'), array('Inc' => 33, 'Name' => 'CAMBODIA'), array('Inc' => 34, 'Name' => 'CAMEROON'), array('Inc' => 35, 'Name' => 'CANADA'), array('Inc' => 36, 'Name' => 'CENTRAL AFRICAN REPUBLIC'), array('Inc' => 37, 'Name' => 'CHAD'), array('Inc' => 38, 'Name' => 'CZECH REPUBLIC'), array('Inc' => 39, 'Name' => 'CZECHOSLOVAKIA'), array('Inc' => 40, 'Name' => 'CHILE'), array('Inc' => 41, 'Name' => 'CHINA'), array('Inc' => 42, 'Name' => 'CYPRUS'), array('Inc' => 43, 'Name' => 'CISKEI'), array('Inc' => 44, 'Name' => 'COLOMBIA'), array('Inc' => 45, 'Name' => 'COMOROS'), array('Inc' => 46, 'Name' => 'CONGO'), array('Inc' => 47, 'Name' => 'CONGO, REPUB. DEMOC.'), array('Inc' => 48, 'Name' => 'KOREA, DEMOC. PPL.`S REP.'), array('Inc' => 49, 'Name' => 'KOREA, REPUBLIC'), array('Inc' => 50, 'Name' => 'IVORY COAST'), array('Inc' => 51, 'Name' => 'COSTA RICA'), array('Inc' => 52, 'Name' => 'CROATIA'), array('Inc' => 53, 'Name' => 'INTERNL RED CROSS.'), array('Inc' => 54, 'Name' => 'CUBA'), array('Inc' => 55, 'Name' => 'DENMARK'), array('Inc' => 56, 'Name' => 'DJIBUTI'), array('Inc' => 57, 'Name' => 'DOMINICA'), array('Inc' => 58, 'Name' => 'DOMINICAN REPUBLIC'), array('Inc' => 59, 'Name' => 'ECUADOR'), array('Inc' => 60, 'Name' => 'EGYPT'), array('Inc' => 61, 'Name' => 'EL SALVADOR'), array('Inc' => 62, 'Name' => 'U. ARAB EMIRATES'), array('Inc' => 63, 'Name' => 'ERITREA'), array('Inc' => 64, 'Name' => 'SLOVAKIA'), array('Inc' => 65, 'Name' => 'SLOVENIA'), array('Inc' => 66, 'Name' => 'SPAIN'), array('Inc' => 67, 'Name' => 'UNITED STATES'), array('Inc' => 68, 'Name' => 'ESTONIA'), array('Inc' => 69, 'Name' => 'ETHIOPIA'), array('Inc' => 70, 'Name' => 'RUSSIAN FEDERATION'), array('Inc' => 71, 'Name' => 'FIDJI (ISLANDS)'), array('Inc' => 72, 'Name' => 'PHILIPPINES'), array('Inc' => 73, 'Name' => 'FINLAND'), array('Inc' => 74, 'Name' => 'FRANCE'), array('Inc' => 75, 'Name' => 'GABON'), array('Inc' => 76, 'Name' => 'GAMBIA'), array('Inc' => 77, 'Name' => 'GEORGIA'), array('Inc' => 78, 'Name' => 'GHANA'), array('Inc' => 79, 'Name' => 'GRANADA'), array('Inc' => 80, 'Name' => 'GREECE'), array('Inc' => 81, 'Name' => 'GUATEMALA'), array('Inc' => 82, 'Name' => 'GUYANA'), array('Inc' => 83, 'Name' => 'GUINEA'), array('Inc' => 84, 'Name' => 'GUINEA BISSAU'), array('Inc' => 85, 'Name' => 'EQUATORIAL GUINEA'), array('Inc' => 86, 'Name' => 'HAITI'), array('Inc' => 87, 'Name' => 'NETHERLANDS'), array('Inc' => 88, 'Name' => 'HONDURAS'), array('Inc' => 89, 'Name' => 'HONG KONG (CHINA)'), array('Inc' => 90, 'Name' => 'HONG KONG (GB)'), array('Inc' => 91, 'Name' => 'HUNGARY'), array('Inc' => 92, 'Name' => 'INDIA'), array('Inc' => 93, 'Name' => 'INDONESIA'), array('Inc' => 94, 'Name' => 'IRAN, REP. ISLAMIC OF'), array('Inc' => 95, 'Name' => 'IRAQ'), array('Inc' => 96, 'Name' => 'IRELAND'), array('Inc' => 97, 'Name' => 'ICELAND'), array('Inc' => 98, 'Name' => 'ISRAEL'), array('Inc' => 99, 'Name' => 'ITALY'), array('Inc' => 100, 'Name' => 'JAMAICA'), array('Inc' => 101, 'Name' => 'JAPAN'), array('Inc' => 102, 'Name' => 'JORDAN'), array('Inc' => 103, 'Name' => 'KAZAKHSTAN'), array('Inc' => 104, 'Name' => 'KYRGYZSTAN'), array('Inc' => 105, 'Name' => 'KIRIBATI'), array('Inc' => 106, 'Name' => 'KUWAIT'), array('Inc' => 107, 'Name' => 'LAOS'), array('Inc' => 108, 'Name' => 'LESOTHO'), array('Inc' => 109, 'Name' => 'LATVIA'), array('Inc' => 110, 'Name' => 'LEBANON'), array('Inc' => 111, 'Name' => 'LIBERIA'), array('Inc' => 112, 'Name' => 'LIBYA'), array('Inc' => 113, 'Name' => 'LIECHTENSTEIN'), array('Inc' => 114, 'Name' => 'LITHUANIA'), array('Inc' => 115, 'Name' => 'LUXEMBOURG'), array('Inc' => 116, 'Name' => 'MACAO'), array('Inc' => 117, 'Name' => 'MACEDONIA'), array('Inc' => 118, 'Name' => 'MADAGASCAR'), array('Inc' => 119, 'Name' => 'MALAYSIA'), array('Inc' => 120, 'Name' => 'MALAWI'), array('Inc' => 121, 'Name' => 'MALDIVES (ISLANDS)'), array('Inc' => 122, 'Name' => 'MALI'), array('Inc' => 123, 'Name' => 'MALTA'), array('Inc' => 124, 'Name' => 'MARIANAS (ISLANDS)'), array('Inc' => 125, 'Name' => 'MOROCCO'), array('Inc' => 126, 'Name' => 'MARSCHALL (ISLANDS)'), array('Inc' => 127, 'Name' => 'MAURITANIA'), array('Inc' => 128, 'Name' => 'MEXICO'), array('Inc' => 129, 'Name' => 'MICRONESIA, FED STATES'), array('Inc' => 130, 'Name' => 'MOLDOVA'), array('Inc' => 131, 'Name' => 'MONACO'), array('Inc' => 132, 'Name' => 'MONGOLIA'), array('Inc' => 133, 'Name' => 'MONTENEGRO'), array('Inc' => 134, 'Name' => 'MOZAMBIQUE'), array('Inc' => 135, 'Name' => 'MYANMAR (BURMA)'), array('Inc' => 136, 'Name' => 'NAMIBIA'), array('Inc' => 137, 'Name' => 'NAURU'), array('Inc' => 138, 'Name' => 'NEPAL'), array('Inc' => 139, 'Name' => 'NICARAGUA'), array('Inc' => 140, 'Name' => 'NIGER'), array('Inc' => 141, 'Name' => 'NIGERIA'), array('Inc' => 142, 'Name' => 'NORWAY'), array('Inc' => 143, 'Name' => 'NEW ZEALAND'), array('Inc' => 144, 'Name' => 'O.N.U.'), array('Inc' => 145, 'Name' => 'OTHER'), array('Inc' => 146, 'Name' => 'PACIFIC (ISLANDS)'), array('Inc' => 147, 'Name' => 'PAKISTAN'), array('Inc' => 148, 'Name' => 'PALAU'), array('Inc' => 149, 'Name' => 'PALESTINE'), array('Inc' => 150, 'Name' => 'PALESTINIAN NOT ACKNOWLEDGE.'), array('Inc' => 151, 'Name' => 'PANAMA'), array('Inc' => 152, 'Name' => 'PAPUA NEW GUINEA'), array('Inc' => 153, 'Name' => 'PARAGUAY'), array('Inc' => 154, 'Name' => 'PERU'), array('Inc' => 155, 'Name' => 'POLAND'), array('Inc' => 156, 'Name' => 'PORTUGAL'), array('Inc' => 157, 'Name' => 'QATAR'), array('Inc' => 158, 'Name' => 'REFUGEES (OTHERS)'), array('Inc' => 159, 'Name' => 'REFUGEES C28/09/1954'), array('Inc' => 160, 'Name' => 'UNITED KINGDOM'), array('Inc' => 161, 'Name' => 'RWANDA'), array('Inc' => 162, 'Name' => 'ROMANIA'), array('Inc' => 163, 'Name' => 'WESTERN SAHARA'), array('Inc' => 164, 'Name' => 'SOLOMON (ISLANDS)'), array('Inc' => 165, 'Name' => 'WESTERN SAMOA'), array('Inc' => 166, 'Name' => 'SAINT KITTS AND NEVIS'), array('Inc' => 167, 'Name' => 'SAN MARINO'), array('Inc' => 168, 'Name' => 'SAINT VINCENT AND GRANAD.'), array('Inc' => 169, 'Name' => 'SANTA LUCIA'), array('Inc' => 170, 'Name' => 'HOLY SEE'), array('Inc' => 171, 'Name' => 'SAO TOME AND PRINCIPE'), array('Inc' => 172, 'Name' => 'SEICHELLES (ISLANDS)'), array('Inc' => 173, 'Name' => 'SENEGAL'), array('Inc' => 174, 'Name' => 'SERBIA'), array('Inc' => 175, 'Name' => 'SERBIA AND MONTENEGRO'), array('Inc' => 176, 'Name' => 'SIERRA LEONE'), array('Inc' => 177, 'Name' => 'SINGAPORE'), array('Inc' => 178, 'Name' => 'SYRIA'), array('Inc' => 179, 'Name' => 'SOMALIA'), array('Inc' => 180, 'Name' => 'SRI LANKA'), array('Inc' => 181, 'Name' => 'SOUTH AFRICA'), array('Inc' => 182, 'Name' => 'SUDAN'), array('Inc' => 183, 'Name' => 'SWEDEN'), array('Inc' => 184, 'Name' => 'SWITZERLAND'), array('Inc' => 185, 'Name' => 'SURINAME'), array('Inc' => 186, 'Name' => 'SWAZILANDIA'), array('Inc' => 187, 'Name' => 'TADJIKISTAN'), array('Inc' => 188, 'Name' => 'THAILAND'), array('Inc' => 189, 'Name' => 'TAIWAN, CHINA'), array('Inc' => 190, 'Name' => 'TANZANIA, REPUBLIC'), array('Inc' => 191, 'Name' => 'TIBET'), array('Inc' => 192, 'Name' => 'EAST TIMOR'), array('Inc' => 193, 'Name' => 'TOGO'), array('Inc' => 194, 'Name' => 'TONGA'), array('Inc' => 195, 'Name' => 'TRANSKEY'), array('Inc' => 196, 'Name' => 'TRINIDAD AND TOBAGO'), array('Inc' => 197, 'Name' => 'TUNISIA'), array('Inc' => 198, 'Name' => 'TURKMENISTAN'), array('Inc' => 199, 'Name' => 'TURKEY'), array('Inc' => 200, 'Name' => 'TUVALU'), array('Inc' => 201, 'Name' => 'UKRAINE'), array('Inc' => 202, 'Name' => 'UGANDA'), array('Inc' => 203, 'Name' => 'UNHCR'), array('Inc' => 204, 'Name' => 'USSR'), array('Inc' => 205, 'Name' => 'URUGUAY'), array('Inc' => 206, 'Name' => 'UZBEKISTAN'), array('Inc' => 207, 'Name' => 'VANUATU-NEW HEBRIDES'), array('Inc' => 208, 'Name' => 'VENDA'), array('Inc' => 209, 'Name' => 'VENEZUELA'), array('Inc' => 210, 'Name' => 'VIETNAM'), array('Inc' => 211, 'Name' => 'YEMEN (P.D.R.)'), array('Inc' => 212, 'Name' => 'YEMEN REPUBLIC'), array('Inc' => 213, 'Name' => 'YUGOSLAVIA (FORMER)'), array('Inc' => 214, 'Name' => 'ZAMBIA'), array('Inc' => 215, 'Name' => 'ZIMBABWE'), ); public $MaritalStatus_samo = array( array('Inc' => 0, 'Name' => 'Married - женат / замужем'), array('Inc' => 1, 'Name' => 'Divorced - разведен(а)'), array('Inc' => 2, 'Name' => 'Separated - не проживает с супругом'), array('Inc' => 3, 'Name' => 'Single - холост / не замужем'), array('Inc' => 4, 'Name' => 'Widow(er) - вдовец / вдова'), ); public $DegreeInfo_uae_mow_v1 = array( array('Inc' => 0, 'Name' => 'С обоими родителями или одним родителем, фамилии одинаковые'), array('Inc' => 1, 'Name' => 'С одним родителем, фамилии разные'), array('Inc' => 2, 'Name' => 'Без родителей в сопровождении 3-их лиц'), ); public function strcmp($a, $b) { $idx = 'name'; if (isset($a["Name"])) { $idx = 'Name'; } return strcmp($a[$idx], $b[$idx]); } public function content_type($file = null) { if (function_exists('mime_content_type')) { return mime_content_type($file); } else { $mime_types = array( 'txt' => 'text/plain', 'htm' => 'text/html', 'html' => 'text/html', 'php' => 'text/html', 'css' => 'text/css', 'js' => 'application/javascript', 'json' => 'application/json', 'xml' => 'application/xml', 'swf' => 'application/x-shockwave-flash', 'flv' => 'video/x-flv', 'png' => 'image/png', 'jpe' => 'image/jpeg', 'jpeg' => 'image/jpeg', 'jpg' => 'image/jpeg', 'gif' => 'image/gif', 'bmp' => 'image/bmp', 'ico' => 'image/vnd.microsoft.icon', 'tiff' => 'image/tiff', 'tif' => 'image/tiff', 'svg' => 'image/svg+xml', 'svgz' => 'image/svg+xml', 'zip' => 'application/zip', 'rar' => 'application/x-rar-compressed', 'exe' => 'application/x-msdownload', 'msi' => 'application/x-msdownload', 'cab' => 'application/vnd.ms-cab-compressed', 'mp3' => 'audio/mpeg', 'qt' => 'video/quicktime', 'mov' => 'video/quicktime', 'pdf' => 'application/pdf', 'psd' => 'image/vnd.adobe.photoshop', 'ai' => 'application/postscript', 'eps' => 'application/postscript', 'ps' => 'application/postscript', 'doc' => 'application/msword', 'rtf' => 'application/rtf', 'xls' => 'application/vnd.ms-excel', 'ppt' => 'application/vnd.ms-powerpoint', 'odt' => 'application/vnd.oasis.opendocument.text', 'ods' => 'application/vnd.oasis.opendocument.spreadsheet', ); $ext = explode('.', $file); $ext = strtolower(array_pop($ext)); if (array_key_exists($ext, $mime_types)) { return $mime_types[$ext]; } elseif (function_exists('finfo_open')) { $finfo = finfo_open(FILEINFO_MIME); $mimetype = finfo_file($finfo, $file); finfo_close($finfo); return $mimetype; } else { return 'application/octet-stream'; } } return null; } public function TownFromInfo() { $sql = sprintf( "exec <OFFICEDB>.dbo.sp_executesql N'
                select
                    [tw].[Inc],
                    [tw].[Name],
                    [tw].[LName]
                from
                    [dbo].[tour] [t],
                    [town] [tw],
                    [claim] [c]
                where
                    [c].[inc] = %d
                    and [t].[inc] = [c].[tour]
                    and [tw].[inc] = [t].[town]
            '", $this->defaults['CLAIM'] ); $row = $this->db->fetchRow($sql); return $row; } protected function file_path($doctype, $type = null, $postfix = null) { $postfix = is_null($postfix) ? uniqid() : $postfix; $type = $type ? $type : 'new'; $return = 'dnl/' . $doctype . '_' . $type . '_' . $this->defaults['CLAIM'] . '_' . $this->defaults['PEOPLE'] . '_' . $postfix . '.jpg'; return $return; } protected function file_name($doctype, $type = null, $postfix = null) { $postfix = is_null($postfix) ? Samo_Utils::randomString() : $postfix; $type = $type ? $type : 'new'; $return = $doctype . '_' . $type . '_' . $this->defaults['CLAIM'] . '_' . $this->defaults['PEOPLE'] . '_' . $postfix . '.jpg'; return $return; } } 