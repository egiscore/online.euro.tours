<?php
 class Aviaticket_Model extends Samo_Claim { protected $auth_required = array('agency', 'person'); protected $SetDistributedDocum = 1; public function construct($claim = null, $people = null, $order = null) { parent::construct($claim, $people, $order); $this->defaults['PEOPLEINC'] = Samo_Utils::ifs($people, Samo_Request::intval('PEOPLEINC'), 0); $this->defaults['ORDERINC'] = Samo_Utils::ifs($order, Samo_Request::get('ORDERINC'), '0'); $this->defaults['TICKET_NUMBER'] = Samo_Utils::ifs(Samo_Request::get('TICKET'), '????????'); $this->messages = Samo_Registry::get('messages'); $this->defaults['RESULT'] = array('PEOPLEINFO' => array(), 'ORDERINFO' => array()); } public function markIssued($claim = null, $peoples = null, $orders = null, $opeoples = null, $docum = '') { $this->defaults['CLAIM'] = $claim; $this->defaults['PEOPLEINC'] = $peoples; $this->defaults['ORDERINC'] = $orders; $this->defaults['TICKET_NUMBER'] = $docum; $this->SaveAviaticket(); return true; } public function get_template_aviaticket() { $res = $this->get_settings_printform($doccategory = 8, $partner = $this->defaults['PartnerInc'], $tour = $this->defaults['TOURINC'], $state = null, $inszone = null, $contracttype = null, $agreement_year = null, $email_type = null, $online_bank = null, $owner = $this->defaults['claim_info']['OwnerInc']); if ($res) { return true; } return $this->messages['TEMPLATE_NOT_INSTALL']; } public function fetchAviaPeopleInfo() { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_aviaticket_peopleinfo', ['People' => $this->defaults['PEOPLEINC']]); return $this->_fetchAviaPeopleInfo($sql); } protected function _fetchAviaPeopleInfo($sql) { if (false !== ($res = $this->db->fetchRow($sql))) { $res['Born'] = Samo_Loader::load_object('Samo_Datetime', $res['Born']); $res['PValid'] = Samo_Loader::load_object('Samo_Datetime', $res['PValid']); $this->defaults['RESULT']['PEOPLEINFO'] = $res; return true; } throw new Samo_Exception($this->messages['CAN_NOT_LOAD_RESULT_PEOPLEINFO']); } public function fetchAviaOrderInfo() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_aviaticket_orderinfo', [ 'Order' => $this->defaults['ORDERINC'], 'People' => $this->defaults['PEOPLEINC'], ] ); return $this->_fetchAviaOrderInfo($sql); } protected function _fetchAviaOrderInfo($sql) { $return = array(); if (false !== ($res = $this->db->query($sql))) { while (false !== ($row = $this->db->fetchRow($res))) { $row['TrgTimeDelta'] = ((intval($row['TrgTime']) - intval($row['SrcTime'])) < 0) ? $row['TrgTime'] . '+1' : $row['TrgTime']; $return[] = $row; } $this->defaults['RESULT']['ORDERINFO'] = $return; return true; } throw new Samo_Exception($this->messages['CAN_NOT_LOAD_RESULT_PEOPLEINFO']); } public function is_enabled() { $clRefer = Samo_Loader::load_object('Cl_Refer_Model', $this->config); $clRefer->construct(); $documents = $clRefer->documentList(null, null, DocCategory::TICKET); $defaults = $this->defaults; $documents = array_filter( $documents, function($document) use ($defaults){ $data = $document['data']; return $data['Order'] == $defaults['ORDERINC'] && $data['People'] == $defaults['PEOPLEINC']; } ); if (count($documents)) { $document = reset($documents); $data = $document['data']; if ($data['Enabled']) { return true; } } return false; } public function getPDF_TICKET() { $this->fetchAviaTicketClaimInfo(); $this->fetchAviaPeopleInfo(); $this->fetchAviaOrderInfo(); if (!$this->is_enabled_print_with_empty_docum()) { foreach ($this->defaults['RESULT']['ORDERINFO'] as $order) { if (empty($order['Docum']) && ($order['printtype'] == 2)) { throw new Samo_Exception($this->messages['CL_DOC_WITHOUT_NUMBER']); } } } $this->defaults['PartnerInc'] = $this->defaults['RESULT']['ORDERINFO'][0]['PartnerInc']; if (true !== $this->get_template_aviaticket()) { throw new Samo_Exception($this->messages['TEMPLATE_NOT_INSTALL']); } } public function SaveAviaticket() { $this->db->exec( '<OFFICEDB>.dbo.up_WEB_4_aviaticket_Save', [ 'Claim' => $this->defaults['CLAIM'], 'People' => $this->defaults['PEOPLEINC'], 'Order' => $this->defaults['ORDERINC'], 'SetDistributedDocum' => $this->SetDistributedDocum, 'UserCode' => $this->internet_user(), 'Partpass' => $this->getPartPassInc(), ] ); $this->SetIssuedDocum(); return true; } public function fetchAviaTicketClaimInfo() { $this->claimInfo(); $this->defaults['claim_info']['datebeg'] = $this->defaults['claim_info']['DateBeg']; $this->defaults['claim_info']['dateend'] = $this->defaults['claim_info']['DateEnd']; $this->defaults['claim_info']['daybefore'] = $this->defaults['claim_info']['before_days']; return true; } public function is_enabled_print_with_empty_docum() { return true; } protected function getExternalDocumentInit() { if ($this->defaults['CLAIM'] && $this->defaults['ORDERINC'] && $this->defaults['PEOPLEINC']) { if (!isset($this->defaults['TOURINC'])) { $this->claimInfo(); } return $this->getExternalDocumentJob('a_' . Samo_Utils::ifs($this->defaults['CLAIM'], '0') . '_' . Samo_Utils::ifs($this->defaults['ORDERINC'], '0'), sprintf('a_%d_%d_%%s_%%s.pdf', $this->defaults['CLAIM'], $this->defaults['PEOPLEINC'])); } throw new Samo_Exception($this->messages['CANNOT_PRINT']); } protected function getExternalDocumentParams() { if (!$this->is_enabled()) { throw new Samo_Exception($this->messages['CL_DOC_PRINT_DISABLED']); } $this->getPDF_TICKET(); $this->SaveAviaticket(); $info = pathinfo($this->defaults['template']); if ($this->external !== true) { throw new Samo_Exception($this->messages['CANNOT_PRINT']); } $params = array( 'claim' => $this->defaults['CLAIM'], 'people' => $this->defaults['PEOPLEINC'], 'order' => str_replace('|', ',', preg_replace('~[^\d\|]~', '', $this->defaults['ORDERINC'])), 'template' => $info['filename'] ); return $params; } } 