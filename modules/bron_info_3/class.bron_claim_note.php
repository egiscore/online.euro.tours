<?php
 class Bron_Claim_Note extends Samo_EnvLoader { public function variants() { $db = $this->db(); $result = array(); $orderByName = $this->config('ORDER_BY_NAME'); $sql = $db->formatExec( '<OFFICEDB>.dbo.up_WEB_4_bron_Claim_note', [ 'ORDER_BY_NAME' => $orderByName, ] ); if (false !== ($query = $db->query($sql))) { while (false !== ($row = $db->fetchRow($query))) { $result[] = array('Inc' => $row['Inc'], 'LName' => $row['Name'], 'addition' => $row['addition'], 'keytype' => isset($row['keytype']) ? $row['keytype'] : null); } $db->freeResult($query); } return (count($result)) ? $result : false; } public function check($claim_note, &$error) { $variants = $this->variants(); $notes = explode('|', $claim_note); foreach ($notes as $note) { if (($i = strpos($note, '{')) > 0) { $inc = substr($note, 0, $i); $j = strpos($note, '}'); $text = substr($note, $i + 1, $j - $i - 1); foreach ($variants as $claim_note) { if ($claim_note['Inc'] == $inc && !empty($claim_note['keytype'])) { switch ($claim_note['keytype']) { case 'int': if (!intval($text)) { $messages = Samo_Registry::get('messages'); $error = sprintf($messages['BRON_CLAIM_NOTE_INTVAL'], $claim_note['LName']); return false; } break; } } } } } return true; } } 