<?php
 class Bron_GDS_Freight extends Samo_EnvLoader { const ROUTE_DIRECT = 0; const ROUTE_BACK = 1; const ONLINE_CLASS = 0; const IDENTITY_SEED = 2000000000; const WEB_LOG_TABLE_PRIORITY = 'gds'; private $claimGuid = null; public function guid($guid = null) { if (null !== $guid) { $this->claimGuid = $guid; } if (null === $this->claimGuid) { throw new GDS_Exception('Invalid setup. Unknown uniqidentifier.'); } return $this->claimGuid; } public function isSelfFreight($freight) { return ($freight <= self::IDENTITY_SEED); } public function doSearch(...$params) { extract((Samo_Array::args2var($params)) ?: []); $sqlParam = (isset($a2v_query)) ? $a2v_query : []; $db = $this->db(); if (!empty($sqlParam)) { $sql = '<OFFICEDB>.dbo.up_WEB_3_newid'; $this->guid($db->fetchOne($sql)); } $sqlArgs = [ 'guid' => $this->guid(), 'cat_claim' => $this->packetinfo['CatClaimPack'], 'tour' => $this->packetinfo['TourInc'], 'adult' => $this->packetinfo['Adult'], 'child' => $this->packetinfo['Child'], 'inf' => $this->packetinfo['Infant'], 'checkin' => $this->packetinfo['CheckIn'], 'checkout' => $this->packetinfo['DateOut'], 'partpass' => $this->partpass(), ]; $sqlArgs = array_merge($sqlArgs, $sqlParam); $sql = $db->formatExec( '<OFFICEDB>.[dbo].[sl_WEB_3_bron_Go_GDS]', $sqlArgs ); $row = $db->fetchOneRow($sql); if (isset($row['Error']) && $row['Error']) { throw new GDS_Exception($row['Message']); } return isset($row['Message']) ? $row['Message'] : null; } public function getFreightsByRoute($route_index) { $db = $this->db(); $sql = $db->formatExec( '<OFFICEDB>.dbo.sl_WEB_3_getFreightsByRoute', [ 'guid' => $this->guid(), 'route_index' => $route_index, ] ); $freights = $db->fetchAll( $sql, function ($row) { return $this->fetchFreight($row); } ); return $freights; } public function getFreightsList(&$filter, &$filterData, &$currency) { $filter = $filterData = $resGroup = $flightTypes = []; $currency = false; $db = $this->db(); $sql = $db->formatExec( '<OFFICEDB>.dbo.sl_WEB_3_get_Freight_List', [ 'guid' => $this->guid() ] ); $freights = $db->fetchAllWithKeyGroup($sql, 'offer_id'); if ($freights && count($freights)) { foreach ($freights as $offerId => $freight) { $selectedOffer = false; foreach ($freight as $index => $data) { $selectedOffer = $data['selected'] || $selectedOffer; } foreach ($freight as $index => $data) { $data = $this->fetchFreight($data); $data['markup'] = ($data['markup'] !== 0) ? number_format($data['markup'], 0, '', '') : 0; if ($selectedOffer) { $data['selected'] = 1; } if (!$currency) { $currency = $data['currency']; } $resGroup[$offerId][$data['route_index']][] = $data; } $airline = Samo_Array::array_unique($resGroup[$offerId], 'full_airline'); $filterData[$offerId]['full_airline'] = (count($airline) > 1) ? null : array_shift($airline); $filterData[$offerId]['fly_duration_on_min'] = $flyDurationMin[0][] = $resGroup[$offerId][0][0]['fly_duration_min']; $filterData[$offerId]['fly_duration_off_min'] = $flyDurationMin[1][] = $resGroup[$offerId][1][0]['fly_duration_min']; $filterData[$offerId]['depart_time_on_min'] = $departTimesMin[0][] = $resGroup[$offerId][0][0]['depart_time_min']; $filterData[$offerId]['depart_time_off_min'] = $departTimesMin[1][] = $resGroup[$offerId][1][0]['depart_time_min']; $filterData[$offerId]['depart_time_on'] = $departTimes[0][] = $resGroup[$offerId][0][0]['depart_time']; $filterData[$offerId]['depart_time_off'] = $departTimes[1][] = $resGroup[$offerId][1][0]['depart_time']; if (count($resGroup[$offerId][0]) > 1 || count($resGroup[$offerId][1]) > 1) { $flightTypes['transfer'] = $filterData[$offerId]['flight_types'] = 2; } else { $flightTypes['direct'] = $filterData[$offerId]['flight_types'] = 1; } } $filter = [ 'full_airline' => Samo_Array::array_unique($filterData, 'full_airline'), 'flight_types' => $flightTypes, 'fly_duration' => array_unique(array_merge($flyDurationMin[0], $flyDurationMin[1])), 'depart_time_on' => array_unique($departTimes[0]), 'depart_time_on_min' => array_unique($departTimesMin[0]), 'depart_time_off' => array_unique($departTimes[1]), 'depart_time_off_min' => array_unique($departTimesMin[1]) ]; return $resGroup; } else { return false; } } public function getBackFreights($directFreight) { $db = $this->db(); if (!$this->isSelfFreight($directFreight)) { $sql = $db->formatExec( '<OFFICEDB>.dbo.sl_WEB_3_getFreightsByDirect', [ 'direct_freight' => $directFreight, 'route_index' => self::ROUTE_BACK, ] ); $freights = $db->fetchAll( $sql, function ($row) { return $this->fetchFreight($row); } ); return $freights; } return false; } protected function fetchFreight($row) { $freight = $row; $freight['Name'] = $freight['Title']; array_key_exists('full_airline', $freight) || ($freight['full_airline'] = $freight['airline']); $freight = array_merge( [ 'ClassInc' => Samo::MAXLONGINT, 'FrPlaceInc' => Samo::MAXLONGINT, 'Partner' => Samo::MAXLONGINT, 'ClassInfInc' => Samo::MAXLONGINT, 'OnlineClass' => self::ONLINE_CLASS, 'addinfant' => false, 'selected' => false, 'external' => true, ], $freight ); return $freight; } } 