<?php
 class Bron_Model extends Samo { const FREIGHT_CHARTER_WITH_REGULAR = 1; const FREIGHT_REGULAR_ONLY = 2; const FREIGHT_ROUTE_DIRECT = 0; const FREIGHT_ROUTE_BACK = 1; protected $auth_required = array('agency'); protected $tourinfo = array(); protected $is_new_claim = false; protected $BRON_ENABLED = true; protected $priceActual = true; private $calc_type = 0; protected $UnreadNote = 0; protected $invoiceneed = false; protected $_cacheTournote = null; protected $_cacheCalculatedclaim = null; protected $_cacheClaimtext = null; protected $claim_guid = null; protected $claimDocument = array(); protected $claim = null; protected $log_priority = 'bron_info'; private $externalFreightHandler = null; public function construct() { if (null === ($claim = Samo_Request::hexval('CATCLAIM'))) { if ((null !== ($claim = Samo_Request::find('CATCLAIM'))) && ctype_xdigit($claim)) { $claim = $this->cat_claim($claim); } elseif ((null !== ($claim = Samo_Request::find('CLAIM'))) && ctype_xdigit($claim)) { $claim = $this->cat_claim($claim); } } if ($claim) { if (!isset($_SESSION['CAT_CLAIM'])) { $_SESSION['CAT_CLAIM'] = []; } if (!isset($_SESSION['CAT_CLAIM'][$claim])) { $_SESSION['CAT_CLAIM'][$claim] = $claim; } $this->defaults['CLAIMINC'] = $_SESSION['CAT_CLAIM'][$claim]; } if (($claim = Samo_Request::hexval('TICKET')) || (($claim = Samo_Request::find('TICKET')) && ctype_xdigit($claim))) { $this->defaults['TICKET'] = $this->cat_claim($claim); $this->log_priority = 'tickets'; $this->defaults['CLAIMINC'] = null; $partner = (false !== ($_partner = $this->getPartner())) ? $_partner : null; $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_bron_TicketInfo', [ 'claim' => $this->defaults['TICKET'], 'partner' => $partner, 'INTERNET_PARTNER' => $this->internet_partner(), 'Mediator' => $this->claim_mediator(), 'UserCode' => $this->internet_user(), ] ); if ($ticket = $this->db->fetchRow($sql)) { $this->townFrom($ticket['TownFromInc']); $this->state($ticket['TrgState']); $this->defaults['TOURINC'] = $ticket['TourInc']; $this->defaults['HOTELSINFO'] = null; $this->defaults['TOFREIGHTINC'] = $ticket['Freight']; $this->defaults['BACKFREIGHTINC'] = $ticket['FreightBack']; $this->defaults['FRCLASS'] = $ticket['Class']; $this->defaults['CHECKIN'] = $ticket['CheckIn']; $this->defaults['CHECKOUT'] = $ticket['CheckOut']; $this->defaults['ADULT'] = $ticket['Adult']; $this->defaults['CHILD'] = $ticket['Child']; $this->defaults['INFANT'] = $ticket['Infant']; $this->defaults['SPOINC'] = isset($ticket['Spog']) && $ticket['Spog'] > 0 ? $ticket['Spog'] : null; $this->defaults['PRICE'] = $this->convertPrice($ticket['Cost'], $ticket['Currency'], $ticket['TourCurrency'], null); $this->defaults['CURRENCY'] = $ticket['Currency']; $this->defaults['TOUR_CURRENCY'] = $ticket['TourCurrency']; if ($this->defaults['CHECKOUT']->is_null()) { $this->defaults['CHECKOUT'] = $this->defaults['CHECKIN']; } $this->defaults['Commission'] = $ticket['Commission']; $this->defaults['EarlyCommission'] = $ticket['EarlyCommission']; $this->defaults['InternetPartnerCommission'] = $ticket['InternetPartnerCommission']; $this->defaults['MediatorCommission'] = $ticket['MediatorCommission']; $this->defaults['AGE1'] = $ticket['AGE1']; $this->defaults['AGE2'] = $ticket['AGE2']; $this->defaults['AGE3'] = $ticket['AGE3']; $this->defaults['CurrencyPriceAlias'] = $ticket['CurrencyPriceAlias']; $this->defaults['FRPLACE'] = $ticket['FrplaceInc']; $this->defaults['ExistPromoCode'] = isset($ticket['ExistPromoCode']) ? $ticket['ExistPromoCode'] : 0; $this->defaults['StateFromInc'] = $ticket['StateFromInc']; } else { $messages = Samo_Registry::get('messages'); throw new Bron_Exception($messages['BRON_OFFER_NOT_ACTUAL'], 1); } } else { $this->defaults['TICKET'] = null; if (!isset($this->defaults['CLAIMINC']) && !$this->parse_andr_key()) { $messages = Samo_Registry::get('messages'); throw new Bron_Exception($messages['BRON_PACKET_NOT_FOUND']); } $this->defaults['TOFREIGHTINC'] = Samo_Request::intval('TOFREIGHTINC'); $this->defaults['BACKFREIGHTINC'] = Samo_Request::intval('BACKFREIGHTINC'); $FRCLASS = Samo_Request::find('FRCLASS'); $this->defaults['FRCLASS'] = (null !== $FRCLASS) ? intval($FRCLASS) : $FRCLASS; $this->defaults['CURRENCY'] = Samo_Request::intval('CURRENCY'); } $this->defaults['NIGHTS'] = Samo_Request::intval('NIGHTS'); $this->defaults['NOTE'] = null; $this->calc_type = Samo_Utils::ifs(Samo_Request::intval('CALCULATED_CLAIM'), $this->calc_type); $this->defaults['CLAIM_OWNER'] = Samo_Request::intval('CLAIM_OWNER'); if (Samo_Request::is_post()) { $this->claimDocument = Samo_Utils::ifs(Samo_Request::post('claimDocument'), array()); $this->defaults['NOTE'] = Samo_Request::strval('note', 0, 512); $this->tourinfo = array( 'TourInc' => 0, 'PeopleCount' => 0, 'CheckIn' => Samo_Request::time(), 'CheckOut' => strtotime('yesterday'), 'Adult' => 0, 'Child' => 0, 'Infant' => 0, 'EarlyCommission' => 0, 'Commission' => 0, 'InternetPartnerCommission' => 0 ); $this->defaults['CLAIM_NOTE'] = Samo_Utils::ifs(Samo_Request::strval('claim_note'), ''); $this->defaults['CONTACTS'] = trim(Samo_Utils::ifs(Samo_Request::strval('CONTACTS'), '')); $this->defaults['REKLAMA'] = trim(Samo_Utils::ifs(Samo_Request::strval('ORIGIN'), 0)); } $this->defaults['ADD_INFANT'] = Samo_Utils::ifs(Samo_Request::intval('add_infant', 0, 1), 0); $this->claim_guid = Samo_Request::guid('claim_guid'); } public function hasExternalFreights() { return isset($this->tourinfo['FreightExternal']) ? $this->tourinfo['FreightExternal'] : 0; } public function isExternalPacket() { return isset($this->tourinfo['PacketExternal']) ? $this->tourinfo['PacketExternal'] : 0; } public function skipPacketFreights() { return isset($this->tourinfo['FreightExternal']) ? $this->tourinfo['FreightExternal'] == self::FREIGHT_REGULAR_ONLY : false; } public function externalFreightHandler() { if (null === $this->externalFreightHandler) { $gds = Samo_Loader::load_object('Bron_GDS_Freight', $this->config, $this->tourinfo, 0); $gds->guid($this->claim_guid); $this->externalFreightHandler = $gds; } return $this->externalFreightHandler; } public function is_new_claim() { return $this->is_new_claim; } public function bron_enabled() { return $this->BRON_ENABLED; } public function claim_price($convert = false, $currency = null, $price = null) { if ($convert) { $toCurrency = $this->tourinfo['Currency']; if (null === $currency) { $currency = $toCurrency; } $list = $this->getCurrencyRates(); if (isset($list[$this->defaults['CURRENCY']])) { $toCurrency = $this->defaults['CURRENCY']; } elseif (isset($list[CURRENCYINC])) { $toCurrency = CURRENCYINC; } if ($currency != $toCurrency) { $messages = Samo_Registry::get('messages'); if (null === $price) { $price = $this->tourinfo['Price']; } return array( 'date' => sprintf($messages['BRON_CLAIM_DATE_CURRATE'], $list[$toCurrency]['Date']), 'price' => $this->convertPrice($price, $currency, $toCurrency) ); } return false; } return $this->tourinfo['Price'] . ' ' . $this->tourinfo['Alias']; } public function getTourinfoCurrencyAlias() { return $this->tourinfo['Alias']; } public function getTourinfoCurrencyPriceAlias() { return isset($this->tourinfo['CurrencyPriceAlias']) ? $this->tourinfo['CurrencyPriceAlias'] : $this->getTourinfoCurrencyAlias(); } public function getTOURISTS() { $this->claimDocument['peoples'] = array(); for ($i = 1; $i < $this->tourinfo['Adult'] + $this->tourinfo['Child'] + $this->tourinfo['Infant'] + 1; $i++) { if ($i - 1 < $this->tourinfo['Adult']) { $human = 'MRS'; } elseif ($i - 1 < $this->tourinfo['Adult'] + $this->tourinfo['Child']) { $human = 'CHD'; } elseif ($i - 1 < $this->tourinfo['Adult'] + $this->tourinfo['Child'] + $this->tourinfo['Infant']) { $human = 'INF'; } $this->claimDocument['peoples'][] = array( 'key' => $i, 'human' => $human, 'sex' => 0, 'bornplaceKey' => Samo::MAXLONGINT, 'nationalityKey' => Samo::MAXLONGINT, ); } return array( 'Adults' => $this->tourinfo['Adult'] + ($this->tourinfo['Infant'] > 1 && null !== $this->defaults['TICKET'] ? ($this->tourinfo['Infant'] - 1) : 0), 'Childs' => $this->tourinfo['Child'], 'Infant' => $this->tourinfo['Infant'] > 1 && null !== $this->defaults['TICKET'] ? 1 : $this->tourinfo['Infant'], 'visainfo' => null === $this->defaults['TICKET'] ? $this->_getVISAINFO() : false, 'fields' => $this->_getTouristFields(), 'frplace_for_infant' => 1, ); } public function getSPOGMESSAGE() { return $this->tourinfo['SpogMessage']; } public function getCOMMISSION() { $result = array( 'Early' => $this->tourinfo['EarlyCommission'], 'Internet' => $this->tourinfo['InternetPartnerCommission'], 'common' => $this->tourinfo['Commission'], 'Mediator' => $this->tourinfo['MediatorCommission'], ); return $result; } public function getExistsPromoAction() { return isset($this->tourinfo['ExistPromoCode']) ? $this->tourinfo['ExistPromoCode'] : 0; } private function all_clients() { $clients = array(); foreach ($this->claimDocument['peoples'] as $key => $people) { $key = (-1) * ($key + 1); $clients[] = array( 'peopleKey' => $key, 'common' => $key, 'selected' => 0, ); } return $clients; } public function getASERVICES() { $this->claimDocument['services'] = array(); $clients = $this->all_clients(); $offer = Samo_Loader::load_object('Bron_Claim', $this->config, $this->tourinfo, 0); $packet_services = $offer->PacketServices(); if ($packet_services) { foreach ($packet_services as $packet_servtype) { foreach ($packet_servtype['Services'] as $packet_service) { $this->claimDocument['services'][] = array( 'type' => 'stOther', 'key' => $packet_service['Inc'], 'datebeg' => $packet_service['DateBeg'], 'dateend' => $packet_service['DateEnd'], 'count' => $this->tourinfo['PeopleCount'], 'mealKey' => $packet_service['mealKey'], 'roomKey' => $packet_service['roomKey'], 'addinfant' => 0, 'hotelKey' => $packet_service['hotelKey'], 'departureTownKey' => $packet_service['departureTownKey'], 'arrivalTownKey' => $packet_service['arrivalTownKey'], 'transportCompanyKey' => $packet_service['transportCompanyKey'], 'classKey' => $packet_service['classKey'], 'routeIndex' => $packet_service['RouteIndex'], 'packet' => 1, 'clients' => $clients, 'partner' => $packet_service['Partner'], 'serviceTypeKey' => $packet_service['ServiceTypeInc'], 'serviceCategoryKey' => $packet_service['ServiceCategoryInc'], ); } } } $result = array(); $old = array(); $new = array(); $offer->load_from_array($this->claimDocument); $offer->partpass = $this->getPartPassInc(); $offer->internet_partner = $this->internet_partner(); $offer->calctype = $this->calc_type; $offer->cat_claim = $this->defaults['CLAIMINC']; $calc_price = $this->getConfig('SHOW_COST_SERVICE_REQUIRED', 'bron'); if (false !== ($res = $offer->available_services($old, $new, 1, $all_serv = 0))) { foreach ($res as $row) { if (!$row['error']) { if ((1 == $row['Packet'] && 0 == $row['Input']) || (1 == $row['Required']) || (1 == $row['Offered'])) { $service = [ 'Inc' => $row['ServiceInc'], 'Name' => $this->service_title($row, 'Name'), 'LName' => $this->service_title($row), 'selected' => $row['Selected'], 'required' => $row['Required'], 'offered' => $row['Offered'], 'select_tourist' => 0, 'Url' => $row['ServiceUrl'], 'Packet' => $row['Packet'], 'DateBeg' => $row['DateBeg'], 'DateEnd' => $row['DateEnd'], 'uid' => $row['uid'], 'HotelInc' => $row['HotelInc'], 'MealInc' => $row['MealInc'], 'RoomInc' => $row['RoomInc'], 'SrcTownInc' => $row['SrcTownInc'], 'TrgTownInc' => $row['TrgTownInc'], 'AirlineInc' => $row['AirlineInc'], 'FreightInc' => $row['FreightInc'], 'ClassInc' => $row['ClassInc'], 'RouteIndex' => $row['RouteIndex'], 'ServiceTypeName' => $row['ServiceTypeName'], 'ServiceTypeLName' => $row['ServiceTypeLName'], 'price' => $this->service_price($row, $calc_price), 'Partner' => $row['Partner'], 'ServiceTypeInc' => $row['ServiceTypeInc'], 'ServiceCategoryInc' => $row['ServiceCategoryInc'], 'ServiceNote' => '', 'clients' => $clients, 'count' => $this->tourinfo['PeopleCount'], ]; $service['required'] = (($row['Required'] || $row['Packet']) && !$row['Remove']) ? 1 : 0; $service['selected'] = ($service['required'] || 0 == $row['Offered']) ? 1 : 0; $service['ServiceNote'] = isset($row['ServiceNote']) ? $row['ServiceNote'] : ''; $service['ServiceTypeName'] = $row['ServiceTypeName']; $service['ServiceTypeLName'] = $row['ServiceTypeLName']; $result[] = $service; } } } if (count($new) || count($old)) { $this->priceActual(false); } } return count($result) ? $result : false; } public function getTOURINFO() { if ($extNote = $this->getTOURNOTE()) { $this->tourinfo['ExtNote'] = $extNote; } return $this->tourinfo; } public function getTOURNOTE() { if (null === $this->_cacheTournote) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_bron_TourNote', [ 'Tour' => $this->tourinfo['TourInc'], 'UserCode' => $this->internet_user(), ] ); $res = $this->db->fetchOne($sql); $this->_cacheTournote = $res; } return $this->_cacheTournote; } public function getCALCULATED_CLAIM() { if (null === $this->_cacheCalculatedclaim) { if ($this->isExternalPacket() || $this->hasExternalFreights()) { $enable = 0; $text = ''; } else { $enable = isset($this->tourinfo['EnableDraftClaim']) ? $this->tourinfo['EnableDraftClaim'] : 0; $text = $this->config('CALCULATED_CLAIM_TEXT', 'bron'); } $this->_cacheCalculatedclaim = ['enable' => $enable, 'text' => $text]; } return $this->_cacheCalculatedclaim; } public function getFREIGHTS() { $return = []; foreach (['TOFREIGHTINC' => ['date' => 'CHECKIN', 'required' => true], 'BACKFREIGHTINC' => ['date' => 'CHECKOUT', 'required' => false]] as $freightMethod => $direction) { if (!empty($this->defaults[$freightMethod])) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_bron_FreightInfo', [ 'Freight' => $this->defaults[$freightMethod], 'Tour' => $this->defaults['TOURINC'], 'OnlineClass' => $this->defaults['FRCLASS'], 'PeopleCount' => $this->tourinfo['PeopleCount'], 'DateBeg' => $this->defaults[$direction['date']], 'UserCode' => $this->internet_user(), ] ); if ($freight = $this->db->fetchRow($sql)) { if ($freight['place_status'] != 0) { $freight['selected'] = true; $return[] = [ 'DateBeg' => $this->defaults[$direction['date']], 'DateEnd' => $this->defaults[$direction['date']], 'num' => $this->tourinfo['PeopleCount'], 'freights' => array($freight), ]; continue; } else { $messages = Samo_Registry::get('messages'); throw new Bron_Exception(sprintf($messages['BRON_FREIGHT_NOT_ACTUAL'], $freight['LName']), 1); } } $messages = Samo_Registry::get('messages'); throw new Bron_Exception($messages['BRON_OFFER_NOT_ACTUAL'], 1); } elseif ($direction['required']) { $messages = Samo_Registry::get('messages'); throw new Bron_Exception($messages['BRON_OFFER_NOT_ACTUAL'], 1); } } $this->defaults['FREIGHTSINFO'] = $return; $this->setTransportsToClaimDocument($return); return (count($return)) ? $return : false; } protected function setTransportsToClaimDocument($freights) { if (count($freights) > 0) { $this->claimDocument['transports'] = array(); $clients = array(); for ($i = 1; $i < $this->tourinfo['PeopleCount'] + 1; $i++) { $clients[] = array( 'peopleKey' => $i, 'common' => -$i, ); } foreach ($freights as $route) { if (is_array($route['freights'])) { foreach ($route['freights'] as $freight) { if ($freight['selected'] && $freight['Inc'] > 0) { $this->claimDocument['transports'][] = array( 'key' => $freight['Inc'], 'classKey' => $freight['ClassInc'], 'frplaceKey' => $freight['FrPlaceInc'], 'datebeg' => $freight['DateBeg'], 'dateend' => $freight['DateEnd'], 'count' => $this->tourinfo['PeopleCount'], 'addinfant' => 0, 'clients' => $clients, 'partner' => $freight['Partner'], ); } } } } } } public function getFREIGHTSINFO() { $return = array(); $skipPacketFreights = $this->skipPacketFreights(); if ($skipPacketFreights) { return false; } if (false !== ($routes = $this->getPacketFreights())) { $stopTime = $this->config('FREIGHT_STOPTIME', 'online_config'); foreach ($routes as $idx => $route) { if ($idx > 0 && !$this->defaults['TOFREIGHTINC']) { $route['freights'] = false; } else { $last = ($idx == (count($routes) - 1)); $route['freightin'] = ($last) ? $this->defaults['TOFREIGHTINC'] : null; $route['num'] = $this->tourinfo['PeopleCount']; if (!$skipPacketFreights && false !== ($freights = $this->_getFreights($route, $route['Freight'], $stopTime))) { if (0 === $idx && !$this->defaults['TOFREIGHTINC']) { foreach ($freights as $freight) { if ($freight['selected']) { $this->defaults['TOFREIGHTINC'] = $freight['Inc']; break; } } if (!$this->defaults['TOFREIGHTINC']) { $this->defaults['TOFREIGHTINC'] = $freights[0]['Inc']; } } foreach ($freights as $freight) { if ($freight['selected']) { $route['Note'] = isset($freight['Note']) ? $freight['Note'] : ''; break; } } $route['freights'] = $freights; } else { $route['freights'] = false; $this->BRON_ENABLED = false; } } $return[] = $route; } } $this->defaults['FREIGHTSINFO'] = $return; $this->setTransportsToClaimDocument($return); return (count($return)) ? $return : false; } public function _getFreights($routeinfo, $current = 0, $stoptime = null) { $freights = $this->_getFreights_res($routeinfo, $stoptime); if (false !== $freights) { $this->_getFreights_priority($freights, $current); $this->_getFreights_selected($freights); $this->_getFreights_data($freights, $routeinfo); $messages = Samo_Registry::get('messages'); foreach ($freights as $key => $freight) { $freights[$key]['OnlineClassName'] = isset($freight['OnlineClass']) && isset($messages['FRCLASS_' . $freight['OnlineClass']]) ? $messages['FRCLASS_' . $freight['OnlineClass']] : (isset($freight['ClassName']) ? $freight['ClassName'] : null); } return $freights; } return false; } public function _getFreights_res($routeinfo, $stoptime = null) { try { $cross_class = $this->config('FREIGHT_CROSS_CLASSES', 'bron'); } catch (Samo_Exception $e) { $cross_class = false; } $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_5_bron_FreightOnline', [ 'Cat_Claim' => $this->defaults['CLAIMINC'], 'Tour' => $this->tourinfo['TourInc'], 'DateBeg' => $routeinfo['DateBeg'], 'DateEnd' => $routeinfo['DateEnd'], 'Source' => $routeinfo['Source'], 'Target' => $routeinfo['Target'], 'Spog' => $this->tourinfo['Spog'], 'RouteIndex' => $routeinfo['RouteIndex'], 'FreightIn' => isset($routeinfo['freightin']) ? $routeinfo['freightin'] : null, 'Nights' => $this->tourinfo['Nights'], 'PeopleCount' => $this->tourinfo['PeopleCount'], 'CrossTour' => $this->tourinfo['crosstour'], 'Business' => (!$cross_class && $routeinfo['RouteIndex'] != 0) ? intval($this->defaults['FRCLASS']) : null, 'StopTime' => (null !== $stoptime) ? intval($stoptime) : null, 'UserCode' => $this->internet_user(), 'PacketClass' => $routeinfo['Class'], ] ); $freights = $this->db->fetchAll($sql); return $freights; } public function _getFreights_priority(&$freights, $current) { $priority_freight_in_packet = 1; $priority_yes_place = 2; $priority_equal_onlineclass = 4; foreach ($freights as $idx => $freight) { $total_priority = 0; if ($freight['OnlineClass'] == $this->defaults['FRCLASS']) { $total_priority += $priority_equal_onlineclass; if ($freight['Inc'] == $current) { $total_priority += $priority_freight_in_packet; } if ($freight['place_status'] == 1) { $total_priority += $priority_yes_place; } } $freight['priority'] = $total_priority; $freights[$idx] = $freight; } } public function _getFreights_selected(&$freights) { $idx_max_priority = null; $idx_selected = null; $max_priority = null; foreach ($freights as $idx => $freight) { if (!isset($freight['selected'])) { $freight['selected'] = false; } if ($freight['selected']) { $idx_selected = $idx; } if ($freight['priority'] > $max_priority) { $idx_max_priority = $idx; $max_priority = $freight['priority']; } $freights[$idx] = $freight; } if (null === $idx_selected) { if (null === $idx_max_priority) { array_unshift( $freights, array( 'Inc' => 0, 'Name' => '---', 'LName' => '---', 'selected' => true, ) ); } else { $freights[$idx_max_priority]['selected'] = true; } } } public function _getFreights_data(&$freights, $routeinfo) { foreach ($freights as $idx => $freight) { if ($freight['Inc'] > 0) { $day_delta = ((intval($freight['TrgTime']) - intval($freight['SrcTime'])) < 0) ? 1 : 0; $freight['ddelay'] = $freight['delay']; $_tmp = (int)$freight['delay'] + (int)$freight['days']; $freight['bdelay'] = ($_tmp) ? $_tmp : $day_delta; $freight['DateBeg'] = $routeinfo['DateBeg']; $freights[$idx] = $freight; } } } public function getPacketFreights() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_4_bron_PacketFreight', [ 'Cat_Claim' => $this->defaults['CLAIMINC'], 'UserCode' => $this->internet_user(), ] ); if (false !== ($freights = $this->db->fetchAll($sql))) { return $freights; } return false; } public function fetchClaimInfo() { $packetInfo = Samo_Loader::load_object('Packet_Info', $this->config); $partner = (false !== ($_partner = $this->getPartner())) ? $_partner : null; if ($this->defaults['CLAIMINC']) { if (!$packetInfo->find_by_cat_claim($this->defaults['CLAIMINC'], $partner, $this->internet_partner(), $this->claim_mediator())) { $messages = Samo_Registry::get('messages'); throw new Bron_Exception($messages['BRON_OFFER_NOT_ACTUAL'], 1); } else { $this->townFrom($packetInfo['TownFromInc']); $this->state($packetInfo['StateInc']); } $this->defaults['CLAIMINC'] = $packetInfo->Cat_Claim; if ($packetInfo->is_new_claim) { if ($key = Samo_Request::find('KEY')) { $_SESSION['KEY'][$key]['SPOINC'] = $packetInfo['Spog']; $_SESSION['KEY'][$key]['CLAIMINC'] = $this->defaults['CLAIMINC']; } $this->is_new_claim = true; } } else { $currency = $this->getCurrencyRates(); $packetInfo->load_from_array( array( 'Cat_Claim_Inc' => null, 'TourInc' => $this->defaults['TOURINC'], 'TownFromInc' => $this->defaults['TOWNFROMINC'], 'StateInc' => $this->defaults['STATEINC'], 'Spog' => isset($this->defaults['SPOINC']) ? $this->defaults['SPOINC'] : null, 'PeopleCount' => $this->defaults['ADULT'] + $this->defaults['CHILD'] + ($this->defaults['INFANT'] > 0 ? $this->defaults['INFANT'] - 1 : 0), 'CheckIn' => $this->defaults['CHECKIN'], 'CheckOut' => $this->defaults['CHECKOUT'], 'Nights' => $this->defaults['CHECKOUT']->diff($this->defaults['CHECKIN']), 'MealInc' => null, 'RoomInc' => null, 'HotelInc' => null, 'Adult' => $this->defaults['ADULT'], 'Child' => $this->defaults['CHILD'], 'Infant' => $this->defaults['INFANT'] > 0 ? $this->defaults['INFANT'] - 1 : 0, 'TotalCommission' => 0, 'Price' => $this->defaults['PRICE'], 'Alias' => isset($currency[$this->defaults['TOUR_CURRENCY']]) ? $currency[$this->defaults['TOUR_CURRENCY']]['Name'] : '???', 'Currency' => $this->defaults['TOUR_CURRENCY'], 'Commission' => $this->defaults['Commission'], 'InternetPartnerCommission' => $this->defaults['InternetPartnerCommission'], 'EarlyCommission' => $this->defaults['EarlyCommission'], 'MediatorCommission' => $this->defaults['MediatorCommission'], 'AGE1' => $this->defaults['AGE1'], 'AGE2' => $this->defaults['AGE2'], 'AGE3' => $this->defaults['AGE3'], 'freeinfant' => 1, 'freeinfant_checked' => $this->defaults['INFANT'] > 0, 'CurrencyPriceAlias' => $this->defaults['CurrencyPriceAlias'], 'FreightExternal' => 0, 'FrplaceInc' => $this->defaults['FRPLACE'], 'ExistPromoCode' => $this->defaults['ExistPromoCode'], 'StateFromInc' => $this->defaults['StateFromInc'] ) ); } $packetInfo->checkBronIsPossible(); if (null === $this->defaults['FRCLASS']) { $this->defaults['FRCLASS'] = $packetInfo['business']; } $this->tourinfo = $packetInfo; return $packetInfo; } public function check_packet() { $partner = (false !== ($_partner = $this->getPartner())) ? $_partner : null; $check_owner = $this->getConfig('OWNER', 'bron', 0); $check_agreement_date = $this->getConfig('CHECK_AGREEMENT_DATE', 'bron', false); $messages = Samo_Registry::get('messages'); if ($check_agreement_date) { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_bron_Check_Agreement_Date', ['Partner' => $partner]); $res = $res = $this->db->query($sql); if ($this->db->numRows($res) == 0) { throw new Bron_Exception($messages['BRON_PARTNER_NOT_EXIST'], 8); } } if ($check_owner > 0) { $sql = $this->_owner_list_sql($partner); if (false !== ($res = $this->db->query($sql))) { $exception = true; if ($this->db->numRows($res) == 0) { $partner_info = $this->getPartnerInfo($partner); $headpartner = $partner_info['Partner_headpartner']; if (!empty($headpartner)) { $sql = $this->_owner_list_sql($headpartner); if (false !== ($res = $this->db->query($sql))) { if ($this->db->numRows($res) > 0) { $exception = false; } } } } else { $exception = false; } if ($exception) { $routes = Samo_Registry::get('routes'); $msg = $messages['BRON_AGREEMENT_ABSENCE']; if (isset($routes['agreement'])) { $link = sprintf($messages['BRON_AGREEMENT_ABSENCE2'], $routes['agreement']['url']); $msg .= $link; } throw new Bron_Exception($msg, 7); } if ($this->db->numRows($res) == 1) { $row = $this->db->fetchRow($res); $this->defaults['CLAIM_OWNER'] = $row['owner']; } } } } public function _owner_list_sql($partner) { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_bron_Owner_list', ['Partner' => $partner, 'Tour' => $this->tourinfo['TourInc'],]); return $sql; } public function spog() { if (isset($this->tourinfo['Spog'])) { return $this->tourinfo['Spog']; } throw new RuntimeException('run fetchClaimInfo before execute this method'); } public function getOWNERINFO() { $result = array(); $check_owner = $this->getConfig('OWNER', 'bron', 0); if ($check_owner != 0) { $partner = (false !== ($_partner = $this->getPartner())) ? $_partner : null; $sql = $this->_owner_list_sql($partner); if (false !== ($res = $this->db->query($sql))) { if ($this->db->numRows($res) == 0) { $partner_info = $this->getPartnerInfo($partner); $headpartner = $partner_info['Partner_headpartner']; if (!empty($headpartner)) { $sql = $this->_owner_list_sql($headpartner); $res = $this->db->query($sql); } } while (false !== ($row = $this->db->fetchRow($res))) { $p = $this->getPartnerInfo($row['owner']); $p['selected'] = $row['selected']; $result[] = $p; } $this->db->freeResult($res); } } return $result; } public function getHOTELSINFO() { $result = array(); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_5_bron_PacketHotel', [ 'Cat_Claim' => $this->defaults['CLAIMINC'], 'UserCode' => $this->internet_user(), 'developer' => 0, ] ); if (false !== ($res = $this->db->query($sql))) { while (false !== ($row = $this->db->fetchRow($res))) { if ($row['StopSale'] && !$this->tourinfo['crosstour']) { $messages = Samo_Registry::get('messages'); throw new Bron_Exception(sprintf($messages['BRON_HOTEL_STOPSALE'], $row['HotelLName']), 6); } $row['WWW'] = Samo_Url::parse($row['WWW']); $row['Banner'] = []; $result[] = $row; } while (false !== ($row = $this->db->fetchRow($res))) { foreach ($result as &$hotel) { if ($row['HotelInc'] == $hotel['HotelInc']) { $hotel['Banner'][] = $row; break; } } } $this->db->freeResult($res); } if ($this->tourinfo['crosstour']) { foreach ($result as &$hotel) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_5_bron_AlternativeHotel', [ 'spog' => $this->tourinfo['Spog'], 'tour' => $this->tourinfo['TourInc'], 'hotel_base' => $this->tourinfo['HotelInc'], 'room_base' => $this->tourinfo['RoomInc'], 'htplace_base' => $this->tourinfo['HtPlaceInc'], 'meal_base' => $this->tourinfo['MealInc'], 'datebeg' => $hotel['DateBeg'], 'dateend' => $hotel['DateEnd'], 'routeindex' => $hotel['RouteIndex'], 'calc_price' => 0, 'hotel' => $hotel['HotelInc'], 'room' => $hotel['RoomInc'], 'htplace' => $hotel['HtPlaceInc'], 'meal' => $hotel['MealInc'], 'UserCode' => $this->internet_user(), 'developer' => 0, ] ); $hotel['alt_hotel_list'] = false; if (false !== ($rows = $this->db->fetchAll($sql))) { $selected_hotel = $hotel['HotelInc']; $selected_room = $hotel['RoomInc']; $selected_htplace = $hotel['HtPlaceInc']; $selected_meal = $hotel['MealInc']; $rows = array_map( function($row) use ($selected_hotel, $selected_room, $selected_htplace, $selected_meal) { $row['selected'] = ($row['HotelInc'] == $selected_hotel && $row['RoomInc'] == $selected_room && $row['HtPlaceInc'] == $selected_htplace && $row['MealInc'] == $selected_meal); return $row; }, $rows ); $hotel['alt_hotel_list'] = $rows; } if ($hotel['StopSale'] && !$hotel['alt_hotel_list']) { $messages = Samo_Registry::get('messages'); throw new Bron_Exception(sprintf($messages['BRON_HOTEL_STOPSALE'], $hotel['HotelLName']), 6); } } unset($hotel); } $this->defaults['HOTELSINFO'] = $result; if (count($this->defaults['HOTELSINFO']) > 0) { $clients = array(); for ($i = 1; $i < $this->tourinfo['PeopleCount'] + 1; $i++) { $clients[] = array( 'peopleKey' => $i, 'common' => -1 ); } $this->claimDocument['hotels'] = array(); foreach ($this->defaults['HOTELSINFO'] as $hotel) { $this->claimDocument['hotels'][] = array( 'key' => $hotel['HotelInc'], 'roomKey' => $hotel['RoomInc'], 'htplaceKey' => $hotel['HtPlaceInc'], 'datebeg' => $hotel['DateBeg'], 'dateend' => $hotel['DateEnd'], 'count' => 1, 'mealKey' => $hotel['MealInc'], 'addinfant' => 0, 'routeIndex' => $hotel['RouteIndex'], 'clients' => $clients, 'partner' => $hotel['Partner'], ); } } return $result; } public function getBACKFREIGHTS() { if ($this->defaults['TOFREIGHTINC']) { if (false !== ($routes = $this->getPacketFreights())) { $route = $routes[count($routes) - 1]; $route['freightin'] = $this->defaults['TOFREIGHTINC']; if (false !== ($freights = $this->_getFreights($route, $this->defaults['BACKFREIGHTINC']))) { $route['num'] = $this->tourinfo['PeopleCount']; $route['freights'] = $freights; return $route; } } } return false; } public function getINSURESINFO() { $result = array(); $offer = Samo_Loader::load_object('Bron_Claim', $this->config, $this->tourinfo, 0); $offer->load_from_array($this->claimDocument); if (false !== ($res = $offer->available_insures())) { $clients = array(); for ($i = 1; $i < $this->tourinfo['PeopleCount'] + 1; $i++) { $clients[] = array( 'peopleKey' => -$i, 'common' => -$i ); } $new_insure_exists = false; foreach ($res as $row) { if (!$new_insure_exists && 0 == $row['Packet'] && 1 == $row['Required']) { $new_insure_exists = true; $this->priceActual(false); } if (1 == $row['Packet'] || 1 == $row['Required']) { $ins_c = array(); if (!empty($row['inscusts'])) { foreach ($row['inscusts'] as $ins_1) { if ($ins_1['required']) { $ins_1['Inc'] = $ins_1['Inscust']; $ins_1['DateBeg'] = $row['DateBeg']; $ins_1['DateEnd'] = $row['DateEnd']; $ins_1['count'] = $this->tourinfo['PeopleCount']; $ins_1['clients'] = $clients; $ins_1['headUid'] = $ins_1['Insure']; $ins_1['Medical'] = 0; $ins_1['SumPrice'] = (isset($ins_1['Price'])) ? $ins_1['Price'] * $this->tourinfo['PeopleCount'] : null; $ins_c[] = $ins_1; } } } $insure = array( 'Inc' => $row['InsureInc'], 'Name' => $this->insure_title($row, false), 'LName' => $this->insure_title($row, true), 'Url' => $row['InsureUrl'], 'DateBeg' => $row['DateBeg'], 'DateEnd' => $row['DateEnd'], 'count' => $this->tourinfo['PeopleCount'], 'clients' => $clients, 'Medical' => $row['Medical'], 'type' => $row['type'], 'Price' => (isset($row['Price'])) ? $row['Price'] : null, 'CurrencyAlias' => $row['CurrencyAlias'], 'SumPrice' => (isset($row['Price'])) ? $row['Price'] * $this->tourinfo['PeopleCount'] : null, 'Packet' => $row['Packet'], 'Partner' => $row['Partner'], 'Sum' => $row['Sum'], 'CurrencyAliasSum' => $row['CurrencyAliasSum'], 'Note' => isset($row['Note']) ? $row['Note'] : null, 'inscusts' => $ins_c, 'Remove' => isset($row['Remove']) ? $row['Remove'] : 0, ); $insure['required'] = ($row['Required'] || $row['Packet']) && !$row['Remove']; $result[] = $insure; } } } return (count($result)) ? $result : false; } public function _getVISAINFO() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_5_bron_PacketVisa', [ 'Cat_Claim' => $this->defaults['CLAIMINC'], 'UserCode' => $this->internet_user(), 'Developer' => 0, 'LangId' => Samo_Request::langid(), 'auth_type' => in_array($_SESSION['samo_auth']['type'], ['person', 'agency']) ? $_SESSION['samo_auth']['type'] : 'person', ] ); if (false !== ($result = $this->db->fetchAllWithKeyGroup($sql, 'VisaTownName'))) { $selectedNotPacket = array_filter( $result, function($visacenter) { $visas = array_filter( $visacenter, function ($visa) { return $visa['Selected'] && !$visa['VisaInPacket']; } ); return !empty($visas); } ); if (!empty($selectedNotPacket)) { $this->priceActual(false); } } return $result; } protected function _getTouristFields() { $people = Samo_Loader::load_object('Samo_People', $this->config, $this->tourinfo); $return = $people->load(null, array('Visible' => 1)); foreach ($return as &$fields) { foreach ($fields as &$field) { $field['Editable'] = true; } } return $return; } protected function claim_author() { return $this->internet_user(); } protected function internet_partner() { return $this->getConfig('INTERNET_PARTNER'); } protected function _calc($save = 0, & $return, & $errorMessage) { $save = ($save !== 0) ? 1 : 0; $messages = Samo_Registry::get('messages'); if ($this->defaults['CLAIMINC']) { $claim_note = Samo_Loader::load_object('Bron_Claim_Note', $this->config); if ($save && !$claim_note->check($this->defaults['CLAIM_NOTE'], $errorMessage)) { return false; } } else { $this->defaults['CLAIM_NOTE'] = false; } $offer = Samo_Loader::load_object('Bron_Claim', $this->config, $this->tourinfo, $save); if ($this->hasExternalFreights()) { $offer->external_freight = $this->externalFreightHandler(); } $offer->partpass = $this->getPartPassInc(); $offer->note = $this->defaults['NOTE']; $offer->noteclaim = $this->defaults['NOTE']; $offer->mediator = $this->claim_mediator(); $offer->claim_owner = $this->defaults['CLAIM_OWNER']; $offer->calctype = $this->calc_type; $offer->cat_claim = $this->defaults['CLAIMINC']; $offer->useunreadfornote = (int)$this->UnreadNote; $offer->claimnote = $this->defaults['CLAIM_NOTE']; $offer->log_priority = $this->log_priority; $offer->guid = $this->claim_guid; if ($this->defaults['CONTACTS'] != '') { $offer->contacts = $this->defaults['CONTACTS']; } if ($this->defaults['REKLAMA'] != 0) { $offer->reklama = $this->defaults['REKLAMA']; } $offer->load_from_array($this->claimDocument); $calc_result = $offer->calc_save($save, $return, $errorMessage); if ($return === false) { throw new Bron_Exception($messages['BRON_CALC_ERROR']); } if (!$errorMessage) { $penalty_model = new Penalty($this->config); $return['penalty_size_message'] = !$save ? $penalty_model->PenaltyByClaimDocument($offer->claim_document()) : false; } return $calc_result; } public function getPrice(&$return, &$errorMessage) { if ($data = $this->_calc(0, $return, $errorMessage)) { $return['Converted'] = $this->claim_price(true, $return['Currency'], $return['PriceStr']); if (array_key_exists('promo_sum', $return)) { $return['PromoConverted'] = $this->claim_price(true, $return['promo_currency'], $return['promo_sum']); } $payment_notice = ''; $messages = Samo_Registry::get('messages'); if (isset($return['pdate1']) && isset($return['paypercent']) && $return['paypercent'] > 0 && $return['pdate1']->not_null()) { $payment_notice .= sprintf($messages['BRON_PARTPAYMENT'], $return['paypercent'], $return['pdate1']->format("datetime")); } if ((isset($return['pdate']) && $return['pdate']->not_null())) { $payment_notice .= ' ' . sprintf($messages['BRON_PAYMENT'], $return['pdate']->format('datetime')); } if ($payment_notice) { $return['payment_message'] = $payment_notice; } } return $data; } public function getBron(&$return, &$errorMessage) { if ($bron = $this->_calc(1, $return, $errorMessage)) { $this->claim = isset($return['Claim']) ? $return['Claim'] : null; $this->claim_guid = isset($return['guid']) ? $return['guid'] : null; $agree_key = 'agree_' . $this->defaults['CLAIMINC']; if (isset($_SESSION[$agree_key])) { unset($_SESSION[$agree_key]); } $payment_schedule = Samo_Request::intval('payment_schedule'); if ($payment_schedule) { $this->CreateClaimPaymentSchedule($this->claim); } $this->callback($return); } return $bron; } public function CreateClaimPaymentSchedule($claim) { $sql = $this->db->formatExec( '<OFFICEDB>.[dbo].[up_get_claimpaymentschedule]', [ 'claims' => $claim, 'author' => $this->claim_author(), ] ); return false !== $this->db->query($sql); } public function show_agreement() { $claim = $this->defaults['CLAIMINC']; $key = 'agree_' . $claim; if (!isset($_SESSION[$key])) { $names = array($this->tourinfo['TourInc'], null); foreach ($names as $basename) { if ($agreement = $this->config('agreement', 'bron', null, null, $basename)) { $_SESSION['agreement_' . $claim] = $_POST; return $agreement; } } } return false; } public function check_agreement() { $claim = $this->defaults['CLAIMINC']; $show_key = 'agreement_' . $claim; $agree_key = 'agree_' . $claim; if (isset($_SESSION[$show_key])) { $_POST = $_SESSION[$show_key]; unset($_SESSION[$show_key]); $_SESSION[$agree_key] = true; return true; } return false; } public function calc_type($val = null) { if (null !== $val) { $this->calc_type = ($val > 0) ? 1 : 0; } return $this->calc_type; } protected function insure_title($data, $latin = true) { return ($latin) ? $data['InsureLName'] : $data['InsureName']; } public function getCLAIM_NOTE() { $claim_note = Samo_Loader::load_object('Bron_Claim_Note', $this->config); $variants = $claim_note->variants(); return (!empty($variants)) ? $variants : false; } public function ReloadPageServices(&$old, &$new) { $result = array(); $res = $this->ReloadServices($old, $new); foreach ($res as $row) { foreach ($row['Services'] as $service) { if ($service['selected']) { $result[] = $service; } } } return $result; } public function ShowServicesByPeople() { $result = array(); $old = array(); $new = array(); $offer = Samo_Loader::load_object('Bron_Claim', $this->config, $this->tourinfo, 0); $offer->load_from_array($this->claimDocument); $offer->partpass = $this->getPartPassInc(); $offer->internet_partner = $this->internet_partner(); $offer->calctype = $this->calc_type; $offer->cat_claim = $this->defaults['CLAIMINC']; if (false !== ($res = $offer->available_services($old, $new, 1, $all_serv = 1))) { $packet_services = $offer->PacketServices(); $calc_price = $this->getConfig('SHOW_COST_SERVICE_REQUIRED', 'bron'); foreach ($res as $row) { $all_clients = $this->all_clients(); $service_exists = false; if (isset($this->claimDocument['services'])) { foreach ($this->claimDocument['services'] as $order) { if ($order['type'] == 'stOther' && $row['ServiceInc'] == $order['key'] && $row['RouteIndex'] == $order['routeIndex']) { $service_exists = true; foreach ($order['clients'] as $order_client) { foreach ($all_clients as &$client) { if ($order_client['peopleKey'] == $client['peopleKey']) { $client['selected'] = 1; break; } } } break; } } } $row2 = $row; if ($packet_services) { foreach ($packet_services as $packet_servtype) { foreach ($packet_servtype['Services'] as $packet_service) { if ($row['ServiceInc'] == $packet_service['Inc']) { $row2['Packet'] = 1; } } } } $row['Complete'] = (int)!$row['select_tourist']; $service = [ 'Inc' => $row['ServiceInc'], 'Name' => $this->service_title($row, 'Name'), 'LName' => $this->service_title($row), 'required' => ($row['Required'] || $row['Packet']) && !$row['Remove'] && !$row['error'], 'selected' => $service_exists && $row['Complete'], 'select_tourist' => 0, 'Url' => $row['ServiceUrl'], 'Packet' => $row['Packet'], 'DateBeg' => $row['DateBeg'], 'DateEnd' => $row['DateEnd'], 'uid' => $row['uid'], 'HotelInc' => $row['HotelInc'], 'MealInc' => $row['MealInc'], 'RoomInc' => $row['RoomInc'], 'SrcTownInc' => $row['SrcTownInc'], 'TrgTownInc' => $row['TrgTownInc'], 'AirlineInc' => $row['AirlineInc'], 'FreightInc' => $row['FreightInc'], 'ClassInc' => $row['ClassInc'], 'RouteIndex' => $row['RouteIndex'], 'ServiceTypeName' => $row['ServiceTypeName'], 'ServiceTypeLName' => $row['ServiceTypeLName'], 'price' => $this->service_price($row2, $calc_price), 'Partner' => $row['Partner'], 'ServiceTypeInc' => $row['ServiceTypeInc'], 'ServiceCategoryInc' => $row['ServiceCategoryInc'], 'ServiceNote' => $row['ServiceNote'], 'clients' => $all_clients, 'count' => 0, 'Complete' => $row['Complete'], 'error' => $row['error'], ]; if ($packet_services) { foreach ($packet_services as $packet_servtype) { foreach ($packet_servtype['Services'] as $packet_service) { if ($row['ServiceInc'] == $packet_service['Inc'] && !$row['Remove'] && $row['RouteIndex'] == $packet_service['RouteIndex']) { $service['required'] = 1; $service['selected'] = 1; } } } } $result[] = $service; } } return $result; } public function ReloadServices(&$old, &$new) { $result = array(); $old = array(); $_old = array(); $new = array(); $_new = array(); $offer = Samo_Loader::load_object('Bron_Claim', $this->config, $this->tourinfo, 0); $offer->load_from_array($this->claimDocument); $offer->partpass = $this->getPartPassInc(); $offer->internet_partner = $this->internet_partner(); $offer->calctype = $this->calc_type; $offer->cat_claim = $this->defaults['CLAIMINC']; if (false !== ($res = $offer->available_services($_old, $_new, 1, 1))) { $calc_price = $this->getConfig('SHOW_COST_SERVICE_REQUIRED', 'bron'); $packet_services = $offer->PacketServices(); $all_clients = $this->all_clients(); foreach ($_new as $key => $row) { if (($row['Required'] || $row['Packet']) && !$row['Remove']) { $tmp = 1; } else { unset($_new[$key]); } } foreach ($_old as $key => $row) { if (($row['Required'] || $row['Packet']) && !$row['Remove']) { $tmp = 1; } else { unset($_old[$key]); } } foreach ($res as $row) { $clients = null; if (isset($this->claimDocument['services'])) { foreach ($this->claimDocument['services'] as $order) { if ($order['type'] == 'stOther' && $row['ServiceInc'] == $order['key']) { $clients = $order['clients']; break; } } } if (is_null($clients)) { if ($row['Required'] && $row['Remove']) { continue; } $clients = $all_clients; } $row2 = $row; if ($packet_services) { foreach ($packet_services as $packet_servtype) { foreach ($packet_servtype['Services'] as $packet_service) { if ($row['ServiceInc'] == $packet_service['Inc']) { $row2['Packet'] = 1; } } } } $service = [ 'Inc' => $row['ServiceInc'], 'Name' => $this->service_title($row, 'Name'), 'LName' => $this->service_title($row), 'selected' => $row['Selected'], 'required' => (($row['Required'] || $row['Packet']) && !$row['Remove']) ? 1 : 0, 'offered' => 0, 'Url' => $row['ServiceUrl'], 'Packet' => $row['Packet'], 'DateBeg' => $row['DateBeg'], 'DateEnd' => $row['DateEnd'], 'uid' => $row['uid'], 'HotelInc' => $row['HotelInc'], 'MealInc' => $row['MealInc'], 'RoomInc' => $row['RoomInc'], 'SrcTownInc' => $row['SrcTownInc'], 'TrgTownInc' => $row['TrgTownInc'], 'AirlineInc' => $row['AirlineInc'], 'FreightInc' => $row['FreightInc'], 'ClassInc' => $row['ClassInc'], 'RouteIndex' => $row['RouteIndex'], 'price' => $this->service_price($row2, $calc_price), 'Partner' => $row['Partner'], 'ServiceTypeInc' => $row['ServiceTypeInc'], 'clients' => $clients, 'count' => count($clients), ]; $service['ServiceNote'] = isset($row['ServiceNote']) ? $row['ServiceNote'] : ''; $service['ServiceTypeName'] = $row['ServiceTypeName']; $service['ServiceTypeLName'] = $row['ServiceTypeLName']; $result[$row['ServiceTypeInc']]['Inc'] = $row['ServiceTypeInc']; $result[$row['ServiceTypeInc']]['Name'] = $row['ServiceTypeName']; $result[$row['ServiceTypeInc']]['LName'] = $row['ServiceTypeLName']; $result[$row['ServiceTypeInc']]['required'] = false; if ($packet_services) { foreach ($packet_services as $packet_servtype) { foreach ($packet_servtype['Services'] as $packet_service) { if ($row['ServiceInc'] == $packet_service['Inc'] && !$row['Remove'] && $row['RouteIndex'] == $packet_service['RouteIndex']) { $service['required'] = $row['Required'] = 1; if (!$row['Selected']) { $service['selected'] = $row['Selected'] = 1; $_new[] = $row; } else { $service['selected'] = 1; } } } } } $result[$row['ServiceTypeInc']]['Services'][$row['uid']] = $service; } foreach ($_old as $row) { $old[] = $this->service_title($row); } foreach ($_new as $row) { $new[] = $this->service_title($row); } $stmb = $offer->_getServTypeMustBron(); if ($stmb) { foreach ($stmb as $stmb1) { if (isset($result[$stmb1['ServiceTypeInc']])) { $result[$stmb1['ServiceTypeInc']]['required'] = true; } } } } return $result; } public function service_price($row, $calc_price) { return (!$row['Packet'] && !$row['Required']) ? $row['price'] : ($calc_price && !$row['Packet'] ? $row['price'] : ''); } public function service_title($row, $name_suffix = 'LName') { $offer = Samo_Loader::load_object('Bron_Claim', $this->config, $this->tourinfo, 0); return $offer->service_title($row, $name_suffix); } public function PaymentSchedule() { $return = false; if ($this->defaults['CLAIMINC']) { $searchprice = Samo_Loader::load_object('Search_Tour_Model', $this->config); $return = $searchprice->paymentschedule($this->defaults['CLAIMINC']); } return $return; } public function ShowInsuresByPeople(&$max_inscusts) { $result = array(); if ($data = $this->ShowAdditionalInsures($max_inscusts)) { foreach ($data as $item) { $clients = $item['clients']; unset($item['clients']); foreach ($clients as $row) { $item['selected'] = isset($row['selected']) ? $row['selected'] : false; if (!isset($result[$row['key']])) { unset($row['selected']); $result[$row['key']] = $row; $result[$row['key']]['insure'] = array(); } $result[$row['key']]['insure'][] = $item; } } } return array_values($result); } public function ShowAdditionalInsures(&$max_inscusts) { $result = array(); $max_inscusts = 0; $offer = Samo_Loader::load_object('Bron_Claim', $this->config, $this->tourinfo, 0); $offer->load_from_array($this->claimDocument); if (false !== ($res = $offer->available_insures())) { $types = array(); foreach ($res as $row) { $row['Selected'] = 0; if ($row['Medical']) { $max_inscusts = max($max_inscusts, count($row['inscusts'])); } $clients = $this->claimDocument['peoples']; if (isset($this->claimDocument['services'])) { foreach ($this->claimDocument['services'] as $order) { if ($order['type'] == 'stInsurance' && $row['InsureInc'] == $order['key']) { foreach ($order['clients'] as $order_client) { foreach ($clients as &$client) { if ($order_client['peopleKey'] == $client['key']) { $client['selected'] = 1; } } } break; } } foreach ($row['inscusts'] as &$ic) { foreach ($this->claimDocument['services'] as $order) { if ($order['type'] == 'stInsurance' && (isset($order['headUid']) && $order['headUid'] == $row['InsureInc']) && $ic['Inscust'] == $order['key']) { $ins_clients = array(); foreach ($order['clients'] as $order_client) { $ins_clients[$order_client['peopleKey']] = 1; } $ic['clients'] = $ins_clients; } } } } $insure = array( 'Inc' => $row['InsureInc'], 'Name' => $this->insure_title($row, false), 'LName' => $this->insure_title($row, true), 'Type' => $row['InsureType'], 'TypeName' => $row['InsureTypeName'], 'TypeLName' => $row['InsureTypeLName'], 'required' => $row['Required'], 'remove' => $row['Remove'], 'Url' => $row['InsureUrl'], 'Packet' => $row['Packet'], 'DateBeg' => $row['DateBeg'], 'DateEnd' => $row['DateEnd'], 'count' => $this->tourinfo['PeopleCount'], 'Price' => $row['Price'], 'CurrencyAlias' => $row['CurrencyAlias'], 'clients' => $clients, 'Medical' => $row['Medical'], 'inscusts' => $row['inscusts'], 'Partner' => $row['Partner'], 'Complete' => $row['Complete'], 'Sum' => $row['Sum'], 'Note' => $row['Note'], 'CurrencyAliasSum' => $row['CurrencyAliasSum'], ); if (!isset($types[$insure['Type']])) { $types[$insure['Type']] = array(); } $types[$insure['Type']][count($result)] = $row['Required']; $result[] = $insure; } foreach ($types as $type) { $selected = false; $required = in_array(1, $type); foreach ($type as $key => $row) { if ($required) { if ($row == false) { unset($result[$key]); } } elseif ($selected == false && isset($result[$key]['selected']) && $result[$key]['selected']) { $selected = true; } else { $result[$key]['selected'] = false; } } } usort( $result, function ($a, $b) { return $a['Type'] == $b['Type'] ? 0 : (($a['Type'] < $b['Type']) ? -1 : 1); } ); foreach ($result as &$row) { $row['colspan'] = ($row['Medical']) ? $max_inscusts - count($row['inscusts']) : $max_inscusts; } } return (count($result)) ? $result : false; } public function RedrawInsure() { $result = array(); $this->getTOURISTS(); $offer = Samo_Loader::load_object('Bron_Claim', $this->config, $this->tourinfo, 0); $offer->load_from_array($this->claimDocument); if (false !== ($res = $offer->available_insures())) { $types = $allclients = array(); for ($i = 1; $i < $this->tourinfo['PeopleCount'] + 1; $i++) { $allclients[] = array( 'peopleKey' => -$i, 'common' => -$i ); } $insureDocument = Samo_Utils::ifs(Samo_Request::post('insureDocument'), array()); $maininsures = array(); $inscusts = array(); foreach ($insureDocument as $insure) { if ($insure['type'] == 'stInsurance') { if (!isset($maininsures[$insure['insure']])) { $maininsures[$insure['insure']] = array(); } $maininsures[$insure['insure']][] = array('peopleKey' => $insure['people'], 'common' => $insure['people']); } else { if (!isset($inscusts[$insure['maininsure']])) { $inscusts[$insure['maininsure']] = array(); } if (!isset($inscusts[$insure['maininsure']][$insure['insure']])) { $inscusts[$insure['maininsure']][$insure['insure']] = array(); } $inscusts[$insure['maininsure']][$insure['insure']][] = array('peopleKey' => $insure['people'], 'common' => $insure['people']); } } foreach ($res as $index => $row) { $add = false; if (1 == $row['Required'] && 0 == $row['Remove']) { $add = true; } if (isset($maininsures[$row['InsureInc']])) { $clients = $maininsures[$row['InsureInc']]; $add = true; } else { $clients = $allclients; } if ($add) { $insure = array( 'Inc' => $row['InsureInc'], 'Name' => $this->insure_title($row, false), 'LName' => $this->insure_title($row, true), 'Url' => $row['InsureUrl'], 'DateBeg' => $row['DateBeg'], 'DateEnd' => $row['DateEnd'], 'Packet' => $row['Packet'], 'required' => ($row['Required'] && !$row['Remove']), 'count' => count($clients), 'clients' => $clients, 'Medical' => $row['Medical'], 'type' => $row['type'], 'Price' => (isset($row['Price'])) ? $row['Price'] : null, 'CurrencyAlias' => $row['CurrencyAlias'], 'SumPrice' => (isset($row['Price'])) ? $row['Price'] * count($clients) : null, 'Partner' => $row['Partner'], 'Sum' => $row['Sum'], 'Note' => $row['Note'], 'CurrencyAliasSum' => $row['CurrencyAliasSum'], ); if (count($row['inscusts']) > 0 && isset($inscusts[$row['InsureInc']])) { $ic_real = array(); foreach ($inscusts[$row['InsureInc']] as $key => $ic) { foreach ($row['inscusts'] as $ic_availible) { if ($key == $ic_availible['Inscust']) { $ic_availible['Inc'] = $ic_availible['Inscust']; $ic_availible['DateBeg'] = $row['DateBeg']; $ic_availible['DateEnd'] = $row['DateEnd']; $ic_availible['count'] = count($ic); $ic_availible['clients'] = $ic; $ic_availible['headUid'] = $row['InsureInc']; $ic_availible['Medical'] = 0; $ic_availible['Price'] = $ic_availible['Price']; $ic_availible['CurrencyAlias'] = $ic_availible['CurrencyAlias']; $ic_availible['SumPrice'] = (isset($ic_availible['Price'])) ? $ic_availible['Price'] * count($ic) : null; $ic_availible['Partner'] = $ic_availible['Partner']; $ic_real[] = $ic_availible; } } } $insure['inscusts'] = $ic_real; } $result[] = $insure; } if (!isset($types[$row['InsureType']])) { $types[$row['InsureType']] = array(); } $types[$row['InsureType']][$add ? (count($result) - 1) : -($index + 1)] = $row['Required']; } } foreach ($types as $type) { $clients = array(); $required = in_array(1, $type); foreach ($type as $key => $row) { if ($key > 0) { if ($required) { if ($row == false) { unset($result[$key]); } } else { $_clients = $result[$key]['clients']; foreach ($_clients as $index => $client) { if (in_array($client['peopleKey'], $clients)) { unset($result[$key]['clients'][$index]); if (empty($result[$key]['clients'])) { unset($result[$key]); } } else { $clients[] = $client['peopleKey']; } } if (isset($result[$key])) { $result[$key]['clients'] = array_values($result[$key]['clients']); } } } } } return (count($result)) ? $result : false; } public function claim_note_text() { return true; } public function freightBoarding() { $freightInc = Samo_Request::post('freight'); $freights = array_filter( $this->claimDocument['transports'], function ($transport) use ($freightInc) { return $transport['key'] == $freightInc; } ); $freight = reset($freights); if (1 == count($freights)) { $peoples = $this->claimDocument['peoples']; } else { $peoples = []; foreach ($freights as $transport) { $clients = array_map( function ($client) { return $client['peopleKey']; }, $transport['clients'] ); $transportClients = array_filter( $this->claimDocument['peoples'], function ($people) use ($clients) { return in_array($people['key'], $clients); } ); if ($transport['count'] < count($transport['clients'])) { $transportClients = [ array_reduce( $transportClients, function ($result, $people) { if (array_key_exists('additional', $people) && $people['additional']) { foreach (['name', 'lname'] as $name) { if (empty($result[$name])) { $result[$name] = 'NO NAME'; } if (empty($people[$name])) { $people[$name] = 'NO NAME'; } $result[$name] .= sprintf(', %s %s', $people['human'], $people[$name]); } } return $result; }, reset($transportClients) ) ]; } $peoples = array_merge($peoples, $transportClients); } } $peoples = array_map( function ($people) { $people['VisiblePersonalInformation'] = 1; return $people; }, $peoples ); $frplacement = Samo_Loader::load_object('FreightBoarding'); $frplacement->setTour($this->tourinfo['TourInc']); $frplacement->setPeoples($peoples); $frplacement->setFreight($freight['key']); $frplacement->setDateBeg(Samo_Datetime::parse($freight['datebeg'])); $frplacement->setDateEnd(Samo_Datetime::parse($freight['dateend'])); $frplacement->setClass($freight['classKey']); if ($return = $frplacement->boarding()) { if ($seats = Samo_Request::post('seats')) { $return['seats'] = $seats; } if ($seats_service = Samo_Request::post('seats_service')) { $return['seats_service'] = $seats_service; } } $return['FrPlacementClass'] = $freight['classKey']; return $return; } public function FreeInfant() { return array( 'freeinfant' => isset($this->tourinfo['freeinfant']) ? $this->tourinfo['freeinfant'] : 0, 'freeinfant_checked' => isset($this->tourinfo['freeinfant_checked']) ? $this->tourinfo['freeinfant_checked'] : 0, ); } public function getPriceStats() { $this->api_name = 'Search_Api'; $api = $this->api(); $api->setParams('CATCLAIM', $this->tourinfo['CatClaimPack']); $api->setParams('TOWNFROMINC', $this->tourinfo['TownFromInc']); $api->setParams('STATEINC', $this->tourinfo['StateInc']); $api->setParams('SPOINC', $this->tourinfo['Spog']); $info = $this->api()->getPRICE_DYNAMICS(); if (is_array($info['prices'])) { foreach ($info['prices'] as $key => $val) { $info['prices'][$key]['convertedPriceNumber'] = $this->convertPrice($val['price'], $val['currencyKey'], $val['convertedCurrencyKey'], null); } } return $info && $info['prices'] ? $info : false; } public function getPriceCalendar($checkInBeg = null, $nightsFrom = null, $segment = 0) { $tourinfo = $this->tourinfo; if (0 == $this->getConfig('ENABLE_PRICE_CALENDAR', 'bron', 1) || (isset($tourinfo['ShowCalendar']) && $tourinfo['ShowCalendar'] == 0) || (!isset($tourinfo['ShowCalendar']) && $tourinfo['PacketExternal']) ) { return false; } if (!$nightsFrom && $tourinfo['Nights'] >= 3) { $nightsFrom = $tourinfo['Nights'] - 2; $nightsTill = $tourinfo['Nights'] + 2; } else { $nightsFrom = 1; $nightsTill = 5; } $return['nightsFrom'] = $nightsFrom; $return['nightsTill'] = $nightsTill; $return['checkIn'] = $tourinfo['CheckIn']->format(); $return['nights'] = $tourinfo['Nights']; $this->api_name = 'Search_Api'; $api = $this->api(); $checkInBeg = $checkInBeg ? Samo_Datetime::parse($checkInBeg) : $tourinfo['CheckIn']; $dateStart = clone $checkInBeg; $_dateStart = clone $dateStart; if ($_dateStart->add_days(-14)->lt()) { $dateStart = Samo_Datetime::today(); } else { $dateStart->add_days(-14); } $_dateStart = clone $checkInBeg; if ($_dateStart->add_days(-3)->lt()) { $_dateStart = clone $checkInBeg; do { $startCalendarDays = clone $_dateStart; } while ($_dateStart->add_days(-1)->gt()); } else { $startCalendarDays = clone $_dateStart; } $dateEnd = clone $dateStart; $dateEnd->add_days(28); for ($i = $segment; $i < $segment + 7; $i++) { $return['datesIn'][Samo_Datetime::parse($startCalendarDays->format())->add_days($i)->format()] = Samo_Datetime::parse($startCalendarDays->format())->add_days($i)->format('d M, D'); } $checkInEnd = Samo_Datetime::parse($checkInBeg->format())->add_days($nightsTill - 1); $api->setParams('CATCLAIM', $tourinfo['CatClaimPack']); $api->setParams('TOWNFROMINC', $tourinfo['TownFromInc']); $api->setParams('STATEINC', $tourinfo['StateInc']); $api->setParams('CHECKIN_BEG', $dateStart); $api->setParams('CHECKIN_END', $dateEnd); $api->setParams('NIGHTS_FROM', $nightsFrom); $api->setParams('NIGHTS_TILL', $nightsTill); $api->setParams('REC_ON_PAGE', 140); $api->setParams('FILTER', 1); $api->setParams('TOURINC', $tourinfo['TourInc']); $api->setParams('PARTITION_PRICE', Search_Api::PARTITION_BY_NIGHTS + Search_Api::PARTITION_BY_CHECKIN); if (null === $api->getParam('HOTELLIST')) { $api = $this->catclaimInfo($api); } $currency = $api->currency(); $currencyList = $this->db->exec('<ONLINEDB>.dbo.up_WEB_3_currency_list'); $currencyList = $currencyList->fetchAllWithKey(null, 'Inc'); $return['currency'] = false; if ($data = $api->getPRICES()) { foreach ($data['prices'] as $item) { if (!$item['bron']) { continue; } if (!$return['currency']) { $return['currency'] = $currencyList[$item['convertedCurrencyKey']]['Alias']; } $in = $item['checkIn']->format(); $return['prices'][$in]['priceNumber'][$item['nights']] = $this->convertPrice($item['price'], $item['currencyKey'], $item['convertedCurrencyKey'], null); $return['prices'][$in]['color'][$item['nights']] = $item['color']; $return['prices'][$in]['catclaim'][$item['nights']] = $item['id']; $return['prices'][$in]['datestr'] = $in . ', ' . $item['checkIn']->format('D'); $return['priceList'][$in][$item['nights']] = $return['prices'][$in][$item['nights']] = $item['convertedPrice']; } $actualPrice = $this->convertPrice($tourinfo['Price'], $tourinfo['Currency'], $currency, null); if (isset($return['priceList'])) { foreach ($return['priceList'] as $checkIn => $nights) { foreach ($nights as $night => $price) { $return['prices'][$checkIn]['diff'][$night] = $return['prices'][$checkIn]['priceNumber'][$night] - $actualPrice; } } } else { return false; } } return (count($return)) ? $return : false; } public function catclaimInfo(Search_Api $api) { $sql = $this->db->formatExec('<ONLINEDB>.dbo.up_WEB_3_catclaim_info', ['Cat_Claim' => $api->getParam('CATCLAIM')]); if ($return = $this->db->fetchRow($sql)) { $api->setParams('MEALINC', $return['MealInc']); $api->setParams('ROOMINC', $return['RoomInc']); $api->setParams('HOTELS', $return['HotelInc']); $api->setParams('HTPLACEINC', $return['HtPlaceInc']); $api->setParams('ADULT', $return['Adult']); $api->setParams('CHILD', $return['Child']); } return $api; } public function priceActual($actual = null) { if (null !== $actual) { $this->priceActual = $actual; } return $this->priceActual; } public function getFreightExternalNote() { return $this->tourinfo['FreightExternalNote']; } public function checkContacts() { $result = true; if (!isset($this->claimDocument['buyer'])) { $required = $this->getConfig('CONTACTS', 'bron', 0); if ($required == 2 && empty($this->defaults['CONTACTS'])) { $result = false; } if (strlen($this->defaults['CONTACTS']) > 64) { $messages = Samo_Registry::get('messages'); throw new Bron_Exception($messages['BRON_CONTACTS_LEN'], 1); } } return $result; } public function getREKLAMA() { $result = false; $val = $this->getConfig('REKLAMA', 'bron', 0); if ($val) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEBST_Get_Reklama', [ 'UserCode' => $this->internet_user(), 'Lang' => $this->lng, ] ); if (false !== ($result = $this->db->fetchAll($sql))) { if (count($result) > 1) { $empty = ['id' => 0, 'name' => '----', 'selected' => 1]; array_unshift($result, $empty); } else { $result = false; } } } return $result; } public function checkReklama() { $result = true; $required = $this->getConfig('REKLAMA', 'bron', 0); $selected = $this->defaults['REKLAMA']; if ($required > 0) { $variants = $this->getREKLAMA(); if (!empty($variants)) { $variants = array_map( function($variant) { return $variant['id']; }, $variants ); if ($required == 2) { $variants = array_filter($variants); } if (!in_array($selected, $variants)) { $result = false; } } else { if ($selected != 0) { $result = false; } } } elseif ($selected) { $result = false; } return $result; } } 