<?php
 class Bron_Order extends Samo_EnvLoader { public $id = null; public $inc = null; private $uid = null; public $type = 'order'; public $placebig = null; public $datebeg = null; public $dateend = null; public $count = null; public $mealKey = null; public $roomKey = null; public $ainfant = null; public $peoples = array(); public $seats = array(); public $hotelKey = null; public $departureTownKey = null; public $arrivalTownKey = null; public $transportCompanyKey = null; public $transportKey = null; public $classKey = null; public $routeIndex = null; public $packet = null; public $headUid = null; public $seatKey = null; public $partner = null; public $place = null; public $external = 0; public $serviceTypeKey = null; public $hotelUid = null; public $serviceCategoryKey = null; public $fareKey = null; public function load_from_array(array $_order) { $this->type = $_order['type']; $this->id = $_order['id']; $this->inc = $_order['key']; switch ($this->type) { case 'F': $this->placebig = (isset($_order['classKey']) && ($_order['classKey'])) ? $_order['classKey'] : null; $this->place = (isset($_order['frplaceKey']) && ($_order['frplaceKey'])) ? $_order['frplaceKey'] : null; $this->fareKey = (isset($_order['fareKey']) && ($_order['fareKey'])) ? $_order['fareKey'] : null; break; case 'H': $this->placebig = (isset($_order['roomKey']) && ($_order['roomKey'])) ? $_order['roomKey'] : null; $this->place = (isset($_order['htplaceKey']) && ($_order['htplaceKey'])) ? $_order['htplaceKey'] : null; break; case 'S': $this->uid = (isset($_order['uid']) && ($_order['uid'])) ? $_order['uid'] : null; $this->hotelUid = (isset($_order['hotel_uid']) && ($_order['hotel_uid'])) ? $_order['hotel_uid'] : null; $this->serviceTypeKey = $_order['serviceTypeKey']; $this->serviceCategoryKey = $_order['serviceCategoryKey']; break; default: break; } $this->datebeg = Samo_Loader::load_object('Samo_Datetime', $_order['datebeg']); $this->dateend = Samo_Loader::load_object('Samo_Datetime', $_order['dateend']); $this->count = intval($_order['count']); $this->mealKey = (isset($_order['mealKey']) && ($_order['mealKey'])) ? $_order['mealKey'] : null; $this->roomKey = (isset($_order['roomKey']) && ($_order['roomKey'])) ? $_order['roomKey'] : null; $this->ainfant = $_order['addinfant']; $this->hotelKey = (isset($_order['hotelKey']) && ($_order['hotelKey'])) ? $_order['hotelKey'] : null; $this->departureTownKey = (isset($_order['departureTownKey']) && ($_order['departureTownKey'])) ? $_order['departureTownKey'] : null; $this->arrivalTownKey = (isset($_order['arrivalTownKey']) && ($_order['arrivalTownKey'])) ? $_order['arrivalTownKey'] : null; $this->transportCompanyKey = (isset($_order['transportCompanyKey']) && ($_order['transportCompanyKey'])) ? $_order['transportCompanyKey'] : null; $this->transportKey = (isset($_order['transportKey']) && ($_order['transportKey'])) ? $_order['transportKey'] : null; $this->classKey = (isset($_order['classKey']) && ($_order['classKey'])) ? $_order['classKey'] : null; $this->routeIndex = (isset($_order['routeIndex'])) ? intval($_order['routeIndex']) : null; $this->packet = (isset($_order['packet'])) ? intval($_order['packet']) : null; $this->headUid = (isset($_order['headUid'])) ? $_order['headUid'] : null; $this->seatKey = (isset($_order['seatKey'])) ? $_order['seatKey'] : null; $this->peoples = array(); $this->partner = (isset($_order['partner']) && !empty($_order['partner'])) ? $_order['partner'] : null; $this->external = (isset($_order['external']) && !empty($_order['external'])) ? intval($_order['external']) : 0; foreach ($_order['clients'] as $client) { $this->peoples[$client['peopleKey']] = $client['common']; if (isset($client['seatKey'])) { $this->seats[$client['peopleKey']] = $client['seatKey']; if (isset($client['seat_service'])) { $this->seats_service[$client['peopleKey']] = $client['seat_service']; } } } $this->self_test(); } protected function self_test() { if (!count($this->peoples)) { $msg = sprintf($this->messages('BRON_ORDER_WITHOUT_PEOPLES'), $this->title()); throw new Bron_Exception($msg); } $ok = true; if (in_array($this->type, ['F', 'S'])) { if (count($this->peoples) != $this->count + $this->ainfant) { $ok = false; } } elseif (in_array($this->type, ['I', 'V'])) { if (count($this->peoples) != $this->count) { $ok = false; } } if (!$ok) { $msg = sprintf($this->messages('BRON_ORDER_INCORRECT_PEOPLES'), $this->title()); throw new Bron_Exception($msg, 1); } if (!$this->datebeg->is_smalldatetime() || !$this->dateend->is_smalldatetime()) { $msg = sprintf($this->messages('BRON_ORDER_INCORRECT_DATE'), $this->title()); throw new Bron_Exception($msg, 1); } } public function uid($with_id = true) { if ($this->uid == null) { $val = $this->type . '|' . $this->inc . '|' . $this->datebeg->format('xml') . '|' . $this->dateend->format('xml') . '|'; switch ($this->type) { case 'H': $val .= $this->placebig . '|' . $this->place . '|' . $this->mealKey; break; case 'F': $val .= $this->placebig . '|' . $this->place; break; case 'S': $val .= $this->xmltype() . '|' . $this->hotelKey . '|' . $this->mealKey . '|' . $this->roomKey . '|' . $this->departureTownKey . '|' . $this->arrivalTownKey . '|' . $this->transportCompanyKey . '|' . $this->transportKey . '|' . $this->classKey . '|' . $this->routeIndex; break; case 'V': $val .= $this->arrivalTownKey; default: break; } if ($with_id) { $val .= '|' . $this->id; } return md5($val); } return $this->uid; } public function xmltype() { switch ($this->type) { case 'V': $result = 'stVisa'; break; case 'I': case 'IE': $result = 'stInsurance'; break; case 'S': default: $result = 'stOther'; break; } return $result; } public function partner() { if (null !== $this->partner) { return $this->partner; } $sql = $this->db()->formatExec( '<OFFICEDB>.dbo.up_WEB_3_bron_OrderPartner', [ 'Inc' => $this->inc, 'Type' => $this->type, ] ); return $this->db()->fetchOne($sql); } public function title($lname = true) { $sql = $this->db()->formatExec( '<ONLINEDB>.dbo.up_WEB_3_bron_OrderTitle', [ 'Inc' => $this->inc, 'Type' => $this->type, 'Lng' => ($lname) ? 0 : 21, ] ); return $this->db()->fetchOne($sql); } } 