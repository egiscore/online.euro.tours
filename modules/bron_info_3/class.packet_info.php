<?php
 class Packet_Info extends Samo_EnvLoader implements ArrayAccess { protected $packetinfo = array(); protected function check_price($cat_claim) { $db = $this->db(); $sql = $db->formatExec( '<OFFICEDB>.dbo.up_WEB_4_bron_CheckPrice', [ 'Cat_Claim' => $cat_claim, 'UserCode' => $this->internet_user(), ] ); if (false !== ($priceInfo = $db->fetchAll($sql))) { $price = reset($priceInfo); if (isset($price['error'])) { throw new Bron_Exception(('rus' == Samo_Request::lang()) ? $price['name'] : $price['lname']); } return $price; } return false; } protected function load_packet_info($cat_claim, $partner, $internet_partner, $mediator) { $db = $this->db(); $sql = $db->formatExec( '<OFFICEDB>.dbo.up_WEB_6_bron_PacketInfo', [ 'Cat_Claim' => $cat_claim, 'Partner' => $partner, 'INTERNET_PARTNER' => $internet_partner, 'Mediator' => $mediator, 'UserCode' => $this->internet_user(), 'Partpass' => $this->partpass(), ] ); if (false !== ($packetInfo = $db->fetchAll($sql))) { $info = reset($packetInfo); if (isset($info['Spog']) && is_numeric($info['Spog']) && $info['Spog'] < 0) { $info['Spog'] = null; } if (!array_key_exists('FreightExternal', $info)) { $info['FreightExternal'] = 0; } $info['TotalCommission'] = $info['Commission'] + $info['InternetPartnerCommission'] + $info['EarlyCommission'] + $info['MediatorCommission']; $info['CatClaimPack'] = $cat_claim; return $info; } return false; } private function is_new_claim($row) { $this->packetinfo['is_new_claim'] = (bool)$row['IsNewPrice']; return $this->packetinfo['is_new_claim']; } public function find_by_cat_claim($cat_claim, $partner, $internet_partner = null, $mediator = null) { $return = false; if (strlen($cat_claim) < 10) { throw new InvalidArgumentException('Unpacked cat_claim not supported anymore'); } if (false !== ($check = $this->check_price($cat_claim))) { $this->is_new_claim($check); $cat_claim = $check['Cat_Claim']; if (false !== ($info = $this->load_packet_info($cat_claim, $partner, $internet_partner, $mediator))) { $return = true; $this->packetinfo = array_merge($this->packetinfo, $check, $info); if (!$this->config('RESERVE_TODAY') && (Samo_Datetime::today()->gte($this->packetinfo['CheckIn']))) { throw new Bron_Exception($this->messages('BRON_REJECT_TODAYS_RESERV')); } $this->internal_check(); } } return $return; } public function checkBronIsPossible() { $db = $this->db(); $sql = $db->formatExec( '<OFFICEDB>.dbo.up_bron_checkBronIsPossible', [ 'Townfrom' => $this->packetinfo['TownFromInc'], 'State' => $this->packetinfo['StateInc'], 'Tour' => $this->packetinfo['TourInc'], 'Checkin' => $this->packetinfo['CheckIn'], 'Status' => null, 'STATUSTEXT' => null, 'PARTNER' => $this->partner() ] ); ; if (false !== ($rules = $db->fetchAll($sql))) { $is_possible = reset($rules); if (!(isset($is_possible['Status']) && $is_possible['Status'] == 1)) { $text = isset($is_possible['Text']) ? $is_possible['Text'] : $this->messages('BRON_REJECT_RESERV'); throw new Bron_Exception($text, $is_possible['Inc']); } } } public function load_from_claim(array $claim, array $auth) { $claim['ClaimInc'] = $claim['Inc']; $claim['CheckIn'] = $claim['DateBeg']; $claim['CheckOut'] = $claim['DateEnd']; $this->packetinfo = array_merge($claim, $auth); $this->internal_check(); return $this; } public function load_from_array(array $packetinfo) { $this->packetinfo = $packetinfo; $this->internal_check(); return $this; } public function internal_check() { if (!isset($this->packetinfo['TourInc'])) { throw new Samo_Exception('Unknown tour'); } } public function offsetExists($offset) { return array_key_exists($offset, $this->packetinfo); } public function offsetGet($offset) { return $this->packetinfo[$offset]; } public function offsetSet($offset, $value) { $this->packetinfo[$offset] = $value; return $this->packetinfo[$offset]; } public function offsetUnset($offset) { unset($this->packetinfo[$offset]); return null; } public function __isset($offset) { return $this->offsetExists($offset); } public function __get($offset) { return $this->offsetGet($offset); } public function __set($offset, $value) { return $this->offsetSet($offset, $value); } public function instance() { return $this->packetinfo; } public function ages() { $ages = []; foreach ([1, 2, 3] as $i) { $key = 'AGE' . $i; if (isset($this->packetinfo[$key]) && null !== $this->packetinfo[$key]) { $ages[] = intval($this->packetinfo[$key]); } } return $ages; } } 