<?php
 class Samo_Buyer extends Samo_EnvLoader { public $inc = null; public $NAME = null; public $ADDRESS = null; public $PSERIE = null; public $PNUMBER = null; public $PGIVEN = null; public $PGIVENORG = null; public $PGIVENCODE = null; public $MOBILE = null; public $EMAIL = null; public $BORN = null; public $SMSMAILING = null; public $EMAILING = null; private $fields = null; private $_is_exists = false; protected $_errors = array(); public function customer_rules() { } protected function required() { $empty_required_fields = array(); $buyer = ($this->is_exists()) ? $this->inc : null; foreach ($this->fields($buyer) as $field) { if (($field['Visible'] || $buyer) && $field['Required']) { switch ($field['Type']) { case 'date': $is_empty = (null === $this->{$field['Field']}); break; case 'checkbox': $is_empty = in_array($this->{$field['Field']}, [0, "false", false]); break; default: $is_empty = empty($this->{$field['Field']}); break; } if ($is_empty) { $empty_required_fields[] = $this->format_error_field($field['Field'], $field['Title']); } } } $empty_fields = count($empty_required_fields); if ($empty_fields) { if (Samo_Request::is_api()) { foreach ($empty_required_fields as $field) { $this->add_error_fields('EMPTY_REQUIRED_FIELD', array($field)); } } else { $message_idx = 'BUYER_EMPTY_FIELD' . (($empty_fields > 1) ? 'S' : ''); $this->add_error_fields($message_idx, $empty_required_fields); } return false; } return true; } protected function add_error($message, $field) { $this->add_error_fields($message, array($this->format_error_field($field))); } protected function add_error_fields($msg, $fields = array()) { $format = $this->messages($msg); if ($format != $msg) { $_fields = array(); foreach ($fields as $field) { if (isset($field['Title'])) { $_fields[] = $field['Title']; } } $msg = sprintf($format, implode(', ', $_fields)); } $this->_errors[$msg] = $fields; } protected function format_error_field($field, $title = null) { return array( 'Field' => $field, 'FormField' => sprintf('[phys_byer][%d][%s]', $this->inc, $field), 'Title' => $title, ); } public function is_exists($inc = null) { if (null !== $inc) { $this->_is_exists = true; $this->inc = $inc; } return $this->_is_exists; } public function self_test() { $result = true; if ($this->strict_check) { $result = $this->required(); } if ($this->strict_check) { $this->errors(); } return $result; } public function errors() { if (count($this->_errors)) { throw new Samo_Buyer_Exception($this->messages('BUYER_FILL_ERROR'), $this->_errors); } } protected function fields($buyer = null) { if (null === $this->fields) { $db = $this->db(); $sql = $db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_get_online_field', [ 'Entity' => 'phys_byer', 'EntityInc' => $buyer, 'LangId' => Samo_Request::langid(), ] ); $this->fields = $db->fetchAll($sql); if ($this->fields) { foreach ($this->fields as &$field) { $current_value = (null !== $this->{$field['Field']}) ? $this->{$field['Field']} : null; $field['Value'] = $field['OldValue'] = (null !== $current_value && (!isset($field['Value']) || empty($field['Value']))) ? $current_value : ((isset($field['Value'])) ? $field['Value'] : (('sex' == $field['Type']) ? 0 : null)); $field['MaxLength'] = $field['max_length']; $field['MinLength'] = $field['min_length']; unset($field['max_length'], $field['min_length']); if (!$field['Editable'] && $field['Required'] && empty($field['Value'])) { $field['Editable'] = 1; } if ($buyer && !$field['Visible'] && $field['Required']) { $field['Visible'] = 1; } $this->{$field['Field']} = ('date' == $field['Type']) ? Samo_Loader::load_object('Samo_Datetime', $field['Value']) : $field['Value']; } unset($field); } else { throw new Samo_Exception('Buyer not found (Inc=' . $buyer . ')'); } } return $this->fields; } public function find_by_claim($claim) { $db = $this->db(); $sql = $db->formatExec('<OFFICEDB>.dbo.up_WEBST_buyer_Edit', ['claim' => $claim]); if ($inc = $db->fetchOne($sql)) { return $inc > 0 ? $this->load($inc) : false; } return false; } public function load($buyer, $filter = array()) { $return = array(); $fields = $this->fields($buyer); $exist = $this->is_exists($buyer); $_filter = count($filter); foreach ($fields as $field) { if (!$_filter || count(array_intersect_assoc($filter, $field)) === $_filter) { $field['attributes']['autocomplete'] = "off"; $field['css_classes'] = array($field['Type']); if (!isset($return[$field['Group']])) { $return[$field['Group']] = array(); } $field['Value'] = $this->{$field['Field']}; if (in_array($field['Field'], array('SMSMAILING', 'EMAILING'))) { if ($field['Value'] > 0) { $field['Checked'] = 1; } } if ($field['Required']) { $field['css_classes'][] = 'required'; } if ($field['PatternTitle']) { $field['attributes']['placeholder'] = $field['PatternTitle']; } if (!$field['Visible']) { if ($field['Editable'] && $exist) { $field['Visible'] = 1; } } if (!isset($field['attributes']['placeholder'])) { $field['attributes']['placeholder'] = (('date' == $field['Type'])) ? $this->messages('DATE_FORMAT') : Samo_String::set($field['Title'])->upper()->safehtml(); } $return[$field['Group']][] = $field; } } return $return; } public function load_from_array(array $buyer) { if (!isset($buyer['inc'])) { $this->inc = -1; } if (isset($buyer['PHONE']) && !empty($buyer['PHONE']) && (!isset($buyer['MOBILE']) || empty($buyer['MOBILE']))) { $buyer['MOBILE'] = $buyer['PHONE']; unset($buyer['PHONE']); } $__fields = $this->fields($this->inc); foreach ($__fields as $field) { if ($field['Editable'] && isset($buyer[$field['Field']])) { $value = isset($buyer[$field['Field']]) ? $buyer[$field['Field']] : null; $this->{$field['Field']} = ('date' == $field['Type']) ? Samo_Loader::load_object('Samo_Datetime', $value) : $value; } } unset($__fields, $field); return $this; } public function save($inc, array $buyer) { $this->inc = $inc; $return = false; $fields = array(); $__fields = $this->fields($inc); $_changes = array(); foreach ($__fields as $field) { if (isset($buyer[$field['Field']])) { $value = isset($buyer[$field['Field']]) ? $buyer[$field['Field']] : null; if ('date' == $field['Type']) { $value = Samo_Datetime::parse($value); } if ('checkbox' == $field['Type']) { $value = ($value === 'true' || $value == 1 || $value === true) ? 1 : 0; } $field['Value'] = (null !== $value && 'date' == $field['Type']) ? ((!empty($value)) ? $value->format('sql') : '') : $value; if ($field['Editable']) { if ($field['OldValue'] != $field['Value']) { $_changes[] = $field; } $this->{$field['Field']} = ('date' == $field['Type'] && $value) ? Samo_Loader::load_object('Samo_Datetime', $value) : $value; } } $fields[$field['Field']] = $field; } unset($__fields, $field); $db = $this->db(); $this->self_test(); if (count($_changes)) { $proc_params = array( 'inc' => $this->inc, 'claim' => $this->packetinfo ? $this->packetinfo->ClaimInc : null, 'user' => $this->internet_user(), ); $changes = array(); foreach ($_changes as $field) { $proc_params[$field['EntityField']] = Samo_Utils::ifs($field['Value'], ''); $changes[$field['EntityField']] = array('old' => $field['OldValue'], 'new' => $field['Value']); } $log = array( 'partpass' => $this->packetinfo ? $this->packetinfo->PARTPASS : null, 'claim' => $this->packetinfo ? $this->packetinfo->ClaimInc : null, 'message' => 'edit_phys_byer', 'result' => array('changes' => $changes), 'priority' => 'edit_phys_byer', ); $msgid = $db->web_log_table($log); $sql = $db->formatExec('<OFFICEDB>.dbo.up_WEBST_buyer_Edit', $proc_params); $query = $db->query($sql); $log['sql'] = $db->getSql(); $error = true; if ($query) { $error = false; if ($result = $db->fetchRow()) { if (isset($result['error'])) { $error = $result['error']; $log['priority'] = 'warning'; $log['result']['proc_error'] = $error; } elseif ($result['Inc'] > 0) { $this->inc = $result['Inc']; $return = true; } else { $log['priority'] = 'warning'; $log['result']['return'] = $result; } } else { $log['priority'] = 'err'; $log['result']['db_error'] = $db->lastError(); } $db->freeResult(); } $db->web_log_table($log, $msgid); if ($error) { throw new Samo_Exception($error); } } return $return; } } class Samo_Buyer_Exception extends Samo_People_Exception { } 