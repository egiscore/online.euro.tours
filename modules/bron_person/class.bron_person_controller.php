<?php
 class Bron_Person_Controller extends Bron_Controller { public $model; public function __construct() { $this->auth_init(); parent::__construct(); } public function construct() { if ($this->model->action != 'contractPreview') { parent::construct(); } Cl_Refer_Person_Model::fixRoutes(); $this->view->module('bron_info'); } public function default_action() { try { $buyer = $this->model->BUYER(); $this->view->assign('BUYER', $buyer) ->assignif('LOGGED_BUYER', true, $buyer === false); $contractPreview = true; if ($contract = $this->contractPrepare()) { if (isset($contract['error'])) { $contractPreview = false; } } $this->view->assign('CONTRACT', $contractPreview); $agree_processing_personal_data = $this->model->getConfig('AGREE_PROCESSING_PERSONAL_DATA', 'bron_person', ''); if ($agree_processing_personal_data != '') { $this->view->assign('AGREE_PROCESSING_PERSONAL_DATA', $agree_processing_personal_data); } parent::default_action(); $this->view->js_var('samo.ROUTES.bron.url', $this->bron_person_url()); } catch (Bron_Exception $e) { parent::default_action(); $this->view->error($e->getMessage()); } } public function check_antibot() { $this->auth_init(); if (in_array($this->model->action, ['CALC', 'BRON'])) { parent::check_antibot(); } if (!isset($_SESSION['samo_auth']) || $_SESSION['samo_auth'] === false) { if (Samo_Request::bitval('GUEST')) { if (false === ($_SESSION['samo_auth'] = $this->model->checkAuth(null, null))) { $this->view->error($this->messages['BROKEN_CONFIG']); } } } if (isset($_SESSION['samo_auth']) && $_SESSION['samo_auth'] !== false) { $this->view->assign('logged', true) ->assign('LOGIN_AGENCY_OFFICIAL_NAME', $_SESSION['samo_auth']['OfficialName']) ->assign('LOGIN_OFFICIAL_NAME', (isset($_SESSION['samo_auth']['PartPassName']) && strlen(trim($_SESSION['samo_auth']['PartPassName']))) ? $_SESSION['samo_auth']['PartPassName'] : '') ->assign('LOGIN_AGENCY_PARTNER_TYPE', $_SESSION['samo_auth']['ParttypeName']); return $_SESSION['samo_auth']['type']; } } public function check_auth() { $this->auth_init(); $is_post = Samo_Request::is_post(); $is_logon = $is_post && 'logon' === Samo_Request::post('samo_action'); $response = Samo_Registry::get('response'); $login = Samo_Request::post('CLAIM'); $is_js = $response->respond_to_js(); $paranoia = !$this->auth_paranoia(); if ($paranoia) { unset($_SESSION['paranoia']); $_SESSION['samo_auth'] = false; } if (!isset($_SESSION['samo_auth']) || $_SESSION['samo_auth'] == false) { if ($is_js && !$is_logon) { $this->_logon_popup_open(); } if ($is_logon) { $wordpassword = Samo_Request::post('WORDPASSWORD'); $logon_key = Samo_Request::post('logon_key'); if (!isset($_SESSION['logon_key']) or $logon_key !== $_SESSION['logon_key']) { $_SESSION['auth_error'] = $this->messages['SAMO_LOGIN_AUTH_TIMEOUT']; return $response->refresh(); } $result = $this->model->checkAuth($login, $wordpassword); if (!$result || (is_array($result) && isset($result['Partner']) && (string)$result['Partner'] === '-1')) { $_SESSION['auth_error'] = $this->messages['SAMO_LOGON_ERROR']; } else { if (isset($_SESSION['auth_error'])) { unset($_SESSION['auth_error']); } $_SESSION['samo_auth'] = $result; $this->model->defaults['PARTTYPE'] = $result['ParttypeName']; $this->model->defaults['OFFICIAL_NAME'] = $result['OfficialName']; } if ($is_js) { if (isset($_SESSION['auth_error'])) { $this->view->js_call('samo.logon_error', $_SESSION['auth_error']); unset($_SESSION['auth_error']); $response->output(); $response->finish(); } else { $this->_logon_popup_close(); } } else { $response->refresh(); } } else { $error = isset($_SESSION['auth_error']) ? $_SESSION['auth_error'] : false; $this->logon_key(); $this->view->assignif('flash', true, $error) ->assign('flash_message', $error) ->module(false)->render('login_person'); if ($error) { unset($_SESSION['auth_error']); } $response->output(); $response->finish(); } } else { if ($is_logon) { $response->refresh(); } elseif ($paranoia && !$is_js) { $this->LOGOUT(); } if (($_SESSION['samo_auth'] !== false) && !empty($_SESSION['samo_auth']['ClaimList'])) { $this->unread_msg(); } $this->view->assign('logged', $_SESSION['samo_auth'] !== false) ->assign('LOGIN_AGENCY_OFFICIAL_NAME', $_SESSION['samo_auth']['OfficialName']) ->assign('LOGIN_OFFICIAL_NAME', (isset($_SESSION['samo_auth']['PartPassName']) && strlen(trim($_SESSION['samo_auth']['PartPassName']))) ? $_SESSION['samo_auth']['PartPassName'] : '') ->assign('LOGIN_AGENCY_PARTNER_TYPE', $_SESSION['samo_auth']['ParttypeName']); } return ($_SESSION['samo_auth'] !== false) ? $_SESSION['samo_auth']['type'] : false; } private function _logon_popup_open($antibot = false) { $view = $this->view->module(false); $this->logon_key(); $view->popup_template('login_form_person.tpl', $this->messages['SAMO_AUTH_REQUIRED'], $antibot ? 220 : 400, 180, true, 'logon') ->js_call('samo.logon_box'); if (Samo_Request::is_post()) { $_SESSION['orig_POST'] = $_POST; if ($_post = Samo_Registry::get('_POST')) { $_SESSION['unmodified_POST'] = $_post; } } } public function AGREE() { parent::AGREE(); $this->after_bron(); } protected function after_bron() { if ($bron = $this->view->get_template_vars('bron')) { if (is_array($bron) && array_key_exists('Claim', $bron)) { if (isset($_POST['claimDocument']['buyer'])) { $_SESSION['samo_auth']['CLAIM'] = $bron['Claim']; $_SESSION['samo_auth']['PNUMBER'] = $_POST['claimDocument']['peoples']['0']['pnumber']; $_SESSION['samo_auth']['BUYER'] = $_POST['claimDocument']['buyer']; } if ($this->model->is_module_installed('cl_refer_person')) { $model = Samo_Loader::load_object('Cl_Refer_Person_Model'); $model->construct($bron['Claim']); $result = $model->getClaim(); $_SESSION['samo_auth']['AccessPay'] = $result['AccessPay']; $redirect = $model->getConfig('pay_redirect', 'bron_person', 0); if ((bool)$redirect && $result['AccessPay'] && $model->payVariants()) { $this->view->redirect_to(Samo_Url::route('cl_refer_person', ['CLAIM' => $bron['Claim'], 'DOPAY' => Cl_Refer_Person_Controller::PAYMENT_AUTOSTART])); } } } } } public function BRON() { $routes = Samo_Registry::get('routes'); $cl_refer_person = $this->model->is_module_installed('cl_refer_person'); if ($cl_refer_person) { $routes['cl_refer'] = $routes['cl_refer_person']; } $routes['bron'] = $routes['bron_person']; Samo_Registry::set('routes', $routes); if (!$this->model->check_buyer()) { $this->view ->element_prop('calc', 'disabled', false) ->message($this->messages['BRON_PERSON_BUYER_EMPTY'], 'error'); Samo_Registry::get('response')->flush(); } parent::BRON(); $this->after_bron(); } public function CALC() { if (isset($_POST['claimDocument']['buyer']) && isset($_POST['claimDocument']['buyer']['NAME']) && !empty($_POST['claimDocument']['buyer']['NAME'])) { if ($_SESSION['samo_auth']['OfficialName'] != $_POST['claimDocument']['buyer']['NAME']) { $_SESSION['samo_auth']['OfficialName'] = $_POST['claimDocument']['buyer']['NAME']; $this->view->assign('LOGIN_AGENCY_OFFICIAL_NAME', $_SESSION['samo_auth']['OfficialName']) ->assign('LOGIN_AGENCY_PARTNER_TYPE', $_SESSION['samo_auth']['ParttypeName']) ->assign('control', 'logout') ->element_update('#div_logout', '../controls.tpl'); } } return parent::CALC(); } public function bron_url() { $routes = Samo_Registry::get('routes'); $bron_person_url = $routes['bron_person']['url']; $routes['bron']['url'] = $bron_person_url; $routes['bron']['fix_person'] = true; $routes['bron_person']['url'] = $bron_person_url; Samo_Registry::set('routes', $routes); $result = parent::bron_url(); return $result; } public function bron_person_url() { $this->bron_url(); $routes = Samo_Registry::get('routes'); $result = $routes['bron_person']['url'] . '&'; if ($guest = Samo_Request::get('GUEST')) { $result .= 'GUEST=' . $guest . '&'; } return $result; } private function contractPrepare() { $agreement = Samo_Loader::load_object('Agreement_Person'); $agreement->partner($this->model->partner()); if ($tour = Samo_Request::intval('TOURINC')) { $agreement->tour($tour); } else { $tourinfo = $this->model->getTOURINFO(); $agreement->tour($tourinfo['TourInc']); } return $agreement->getExternalDocument(); } public function contractPreview() { if (false !== ($res = $this->contractPrepare())) { if (!isset($res['error'])) { return $this->view->js_call('samo.download_result', array_merge($res, array('label' => $this->messages['BRON_PERSON_CONTRACT_LINK']))); } } $this->view->js_call('samo.download_result', array_merge($res, array('label' => ' '))); } } 