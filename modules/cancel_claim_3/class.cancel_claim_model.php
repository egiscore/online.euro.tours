<?php
 class Cancel_Claim_Model extends Samo_Claim { protected $messages = null; public function construct($claim = null, $people = null, $order = null) { parent::construct($claim, $people, $order); $this->defaults['CANCEL_CLAIM_REASON_SELECT'] = Samo_Utils::ifs(Samo_Request::intval('CANCEL_CLAIM_REASON_SELECT'), null); $this->messages = Samo_Registry::get('messages'); } public function is_enable() { $cancel_days = $this->getConfig('CANCEL_DAYS', 'cancel_claim'); $cancel_days = (is_numeric($cancel_days)) ? $cancel_days : 365; if ($this->clinfo = $clinfo = $this->claimInfo()) { $before_tour = $clinfo['DateBeg']->diff(); if (3 == $clinfo['Status'] || $clinfo['RequestCancelDate']->not_null()) { throw new Samo_Exception($this->messages['CANCEL_CLAIM_ALREADY'], 409); } if ($before_tour <= 0) { throw new Samo_Exception($this->messages['CANCEL_CLAIM_TOUR_BEGIN'], 410); } if ($before_tour > $cancel_days) { if (in_array($clinfo['Status'], [Samo_Claim::STATUS_PAID, Samo_Claim::STATUS_UNPAID])) { return true; } else { throw new Samo_Exception($this->messages['CANCEL_CLAIM_NOT_ALLOWED_STATUS'], 423); } } else { throw new Samo_Exception($this->messages['CANCEL_CLAIM_TOUR_FORBIDDEN'], 408); } return true; } throw new Samo_Exception($this->messages['ACCESS_DENIED'], 403); } public function get_msg_for_cancel_claim_popup() { return sprintf($this->messages['CANCEL_CLAIM_NOTE'], $this->defaults['CLAIM']); } public function request() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEBST_CancelClaim', array( 'Claim' => $this->defaults['CLAIM'], 'Reason' => $this->defaults['CANCEL_CLAIM_REASON_SELECT'], 'UserCode' => $this->internet_user(), 'IP' => Samo_Request::remote_addr(), 'PartPass' => $this->getPartPassInc(), ) ); $log_array = array( 'partpass' => $this->getPartPassInc(), 'sql' => $sql, 'priority' => 'cancel_claim', 'message' => 'REQUEST', 'claim' => $this->defaults['CLAIM'], ); $id = $this->db->web_log_table($log_array); if (false !== ($res = $this->db->query($sql))) { $log_array['result']['operation'] = ($res) ? 'OK' : 'FAIL'; $this->db->web_log_table($log_array, $id); return $this->emailNotice(); } return false; } public function emailNotice() { try { $params = ['Inc' => $this->defaults['CLAIM']]; $return = $this->samotourMail(self::MAIL_CANCEL_CLAIM_TOUROPERATOR, $params); } catch (Samo_Exception $e) { $return = false; } if (!$return) { throw new Samo_Exception($this->messages['CANCEL_CLAIM_NOTIFY_ERROR'], 431); } return $return; } public function agreement() { $msg = $this->messages['CANCEL_CLAIM_CONFIRM']; if ($info = $this->claimInfo()) { $tour = ($info['TourInc'] > 0) ? $info['TourInc'] : null; $msg = $this->tour_config('agreement', 'cancel_claim', null, $tour); } return $msg; } public function reason() { $result = array(); $result[] = array('Inc' => 0, 'Name' => $this->messages['CANCEL_CLAIM_CHOOSE_REASON'], 'LName' => $this->messages['CANCEL_CLAIM_CHOOSE_REASON']); $sql = '<OFFICEDB>.dbo.up_WEB_3_claim_Cancel_reason'; if ($res = $this->db->fetchAll($sql)) { $result = array_merge($result, $res); } return $result; } public function PenaltyMessage() { $penalty_model = new Penalty($this->config); return $penalty_model->PenaltyByClaim($this->defaults['CLAIM']); } } 