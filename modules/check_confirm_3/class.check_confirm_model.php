<?php
 class Check_Confirm_Model extends Samo_Claim { protected $load_peoples = false; protected $load_document_status = true; protected $show_extended = true; protected $load_payment = true; public function construct($claim = null, $people = null, $order = null) { $this->defaults['CLAIM'] = (isset($_GET['CLAIM']) && intval($_GET['CLAIM'])) ? intval($_GET['CLAIM']) : null; $this->defaults['PNUMBER'] = (isset($_GET['PNUMBER']) && is_numeric($_GET['PNUMBER'])) ? $_GET['PNUMBER'] : null; $this->defaults['LASTNAME'] = (isset($_GET['LASTNAME']) && strlen($_GET['LASTNAME'])) ? trim($_GET['LASTNAME']) . FIO_DELIMETER : null; $this->defaults['claim_required'] = true; $this->defaults['pnumber_required'] = false; $this->defaults['fio_required'] = false; } public function check_fields() { $messages = Samo_Registry::get('messages'); if ($this->defaults['claim_required'] && null == $this->defaults['CLAIM']) { throw new Samo_Exception($messages['NOT_SET_CLAIM'], 1); } if ($this->defaults['pnumber_required'] && null == $this->defaults['PNUMBER']) { throw new Samo_Exception($messages['NOT_SET_PNUMBER'], 2); } if ($this->defaults['fio_required'] && null == $this->defaults['LASTNAME']) { throw new Samo_Exception($messages['NOT_SET_LASTNAME'], 3); } } public function check_confirm() { $this->check_fields(); if ($this->defaults['CLAIM'] != null || $this->defaults['PNUMBER'] != null || $this->defaults['LASTNAME'] != null) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_claim_Status', [ 'Claim' => $this->defaults['CLAIM'], 'Pnumber' => $this->defaults['PNUMBER'], 'Fio' => $this->defaults['LASTNAME'], ] ); if (false !== ($result = $this->db->fetchRow($sql))) { $messages = Samo_Registry::get('messages'); $this->defaults['CLAIM'] = $result['Claim'] = $result['CLAIM']; $costs = $this->claimCost(); $cost = array_shift($costs); $result['PaidPercent'] = ($cost['Amount']) ? round((($cost['Amount'] - $cost['Debt']) / $cost['Amount']) * 100) : 0; $result['Cancelled'] = (in_array($result['Status'], [Samo_Claim::STATUS_CANCELED, Samo_Claim::STATUS_PENALTY, Samo_Claim::STATUS_PAID_PENALTY])); $result = array_merge($result, $this->load_orders($result)); if ($this->load_document_status) { $result['documents'] = ($result['issued']) ? $messages['DOCUMENT_ISSUED'] : (($result['ready_document']) ? $messages['DOCUMENT_READY'] : $messages['DOCUMENT_NOT_READY']); } $result['cost'] = $cost; $result['load_payment'] = $this->load_payment; $routes = Samo_Registry::get('routes'); $result['cl_refer_url'] = $routes['cl_refer']['url'] . 'CLAIM=' . $this->defaults['CLAIM']; return $result; } else { return false; } } return false; } public function check_auth($claim, $pnumber) { $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . "." . $this->OFFICEDB . ".dbo.up_WEB_3_Logon_Person", [ 'Claim' => $claim, 'Pnumber' => $pnumber, 'Skip_Acccess_Check' => 1, 'UserCode' => $this->internet_user(), ] ); return $this->db->fetchRow($sql); } public function load_orders($r) { $messages = Samo_Registry::get('messages'); $result = array(); $days = $this->getConfig('DAYS_SHOW_FREIGHTS', 'check_confirm'); if ($r['CheckOut']->gte()) { if ($r['CheckIn']->diff() <= $days) { $result['freights'] = $this->claimFreights(); if ($this->show_extended) { $result['peoples'] = ($this->load_peoples) ? $this->claimPeoples() : array(); $result['hotels'] = $this->claimHotels(); $result['services'] = $this->claimServices(); $result['insures'] = $this->claimInsures(); $result['visas'] = $this->claimVisas(); } } else { $result['no_data'] = sprintf($messages['CH_CONFIRM_INFO_BEFORE'], $days); } } return $result; } public function save_phones() { foreach ($_POST['PHONES'] as $inc => $phone) { $_GET['PEOPLEINC'] = $inc; parent::construct($this->defaults['CLAIM'], $inc); $packetInfo = Samo_Loader::load_object('Packet_Info', $this->config); $packetInfo->load_from_claim( $this->claimInfo(), [ 'ADMINISTRATOR' => $this->defaults['ADMINISTRATOR'], 'PARTNER' => $this->defaults['PARTNER'], 'PARTPASS' => $this->defaults['PARTPASS'], 'PARTNERGROUP' => $this->defaults['PARTNERGROUP'] ] ); $people = Samo_Loader::load_object('Samo_People', $this->config, $packetInfo, false); $people->customer_rules(); $people->save($inc, array('MOBILE' => $phone)); } } public function auth_required() { return ($this->action == 'SAVE_PHONES') ? array('person') : false; } public function link_to_page() { $result = parent::link_to_page(); if (Samo_Request::get('samo_action') == 'embed') { return $result; } else { return $result . (strpos($result, '?') === false ? '?' : '&') . 'DOLOAD=1'; } } } 