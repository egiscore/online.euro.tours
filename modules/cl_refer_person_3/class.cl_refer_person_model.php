<?php
 class Cl_Refer_Person_Model extends Samo_Claim { protected $auth_required = array('person', 'phys_byer'); protected $claimcost_rate_type = 2; public $skip_acccess_check = null; public function construct($claim = null, $people = null, $order = null) { if (null === $claim && isset($_SESSION['samo_auth']['CLAIM'])) { $claim = $_SESSION['samo_auth']['CLAIM']; } parent::construct($claim, $people, $order); $this->defaults['CLAIM'] = $claim; $this->defaults['CLAIMTYPE'] = 1; $this->fixRoutes(); } public function checkAuth($login, $wordpassword) { $login = trim($login); $wordpassword = null !== $wordpassword ? trim($wordpassword) : null; if (!empty($login)) { if (is_numeric($login) && !empty($wordpassword)) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_Logon_Person', [ 'Claim' => $login, 'Pnumber' => $wordpassword, 'skip_acccess_check' => $this->skip_acccess_check, 'LangId' => Samo_Request::langid(), 'UserCode' => $this->internet_user(), ] ); } elseif (is_numeric($login) && null === $wordpassword) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_buyer_inc', [ 'inc' => $login, 'LangId' => Samo_Request::langid(), 'UserCode' => $this->internet_user(), ] ); } else { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_buyer_inc', [ 'email' => $login, 'passwd' => $wordpassword, 'LangId' => Samo_Request::langid(), 'UserCode' => $this->internet_user(), ] ); } if ((false !== ($auth = $this->db->fetchRow($sql))) && isset($auth['PartPassInc'])) { $auth['ClaimList'] = explode(',', $auth['ClaimList']); $auth['permissions'] = $this->load_permissions($auth['PartPassInc']); return $auth; } } return false; } public function claimList() { $claim = isset($_SESSION['samo_auth']['CLAIM']) ? $_SESSION['samo_auth']['CLAIM'] : null; $buyer = $_SESSION['samo_auth']['PhysBuyerInc'] ? $_SESSION['samo_auth']['PhysBuyerInc'] : null; $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_person_claimList', [ 'PartPass' => $this->getPartPassInc(), 'UserCode' => $this->internet_user(), 'LangId' => Samo_Request::langid(), 'Claim' => $claim, 'PhysBuyer' => $buyer, ] ); $selected = Samo_Utils::ifs($claim, Samo_Request::intval('CLAIM')); $list = ($list = $this->db->fetchAll($sql)) ? $list : []; $return = array_map( function ($claim) use ($selected) { $claim['selected'] = $claim['id'] == $selected; if ($claim['selected']) { $this->defaults['CLAIM'] = $claim['id']; $this->defaults['CLAIMBEG'] = $claim['id']; $this->defaults['CLAIMEND'] = $claim['id']; } return $claim; }, $list ); return $return; } public function getClaim() { if ($this->defaults['CLAIM']) { $this->defaults['CLAIMBEG'] = $this->defaults['CLAIMEND'] = $this->defaults['CLAIM']; } if ($claims = parent::getClaims()) { $claim = reset($claims); if (in_array($claim['Status'], [Samo_Claim::STATUS_PENALTY, Samo_Claim::STATUS_CANCELED]) && 0 == $_SESSION['samo_auth']['Person']) { return false; } if (Samo_Claim::STATUS_UNPAID == $claim['Status']) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEBST_claim_hold_status', [ 'Claim' => $claim['Inc'], 'LangId' => Samo_Request::langid(), ] ); if (false !== ($holdStatus = $this->db->fetchOneRow($sql))) { $claim['Status'] = -1; $claim['cl_status'] = 'hold'; $claim['HoldStatus'] = $holdStatus; $claim['paymentschedule'] = 0; $claim['AccessPay'] = 0; } } return $claim; } return false; } public function phys_byer($obj = false) { if ($this->phys_byer_exists()) { $buyer = Samo_Loader::load_object('Samo_Buyer', $this->config); if ($obj) { return $buyer; } return $buyer->load($_SESSION['samo_auth']['PhysBuyerInc']); } return false; } public function phys_byer_exists() { return isset($_SESSION['samo_auth']['PhysBuyerInc']) && $_SESSION['samo_auth']['PhysBuyerInc'] > 0; } public function phys_byer_edit($params) { if ($this->phys_byer_exists()) { $buyer = Samo_Loader::load_object('Samo_Buyer', $this->config); return $buyer->save($_SESSION['samo_auth']['PhysBuyerInc'], $params); } return false; } public static function fixRoutes() { $routes = Samo_Registry::get('routes'); $agency_modules = ['agreement_person',]; foreach ($agency_modules as $module) { if (isset($routes[$module])) { unset($routes[$module]); } } $routes['cl_refer_person']['fix_person'] = true; Samo_Registry::set('routes', $routes); foreach ($routes as $module => $info) { if (isset($info['uses']) && is_array($info['uses']) && in_array('cl_refer_person', $info['uses'])) { $routes[$module]['url'] = Samo_Url::route('cl_refer_person', ['target' => $module, 'samo_action' => 'proxy_action']) . '&'; $routes['fix_person'] = true; } } if (isset($routes['messages_person'])) { $routes['messages'] = $routes['messages_person']; } elseif (isset($routes['messages'])) { unset($routes['messages']); } Samo_Registry::set('routes', $routes); } public function checkPersonAndrAuth($crypted, $login, $claim) { $params = [ 'client_id' => $login, 'nonce' => uniqid('andr_', true), 'created' => Samo_Datetime::now(), ]; $sql = $this->db->formatExec('<OFFICEDB>.[dbo].[up_WEB_3_oauth_ws]', $params); if ($data = $this->db->fetchRow($sql)) { $crypter = new Samo_CryptAes(); $crypter->setKey(strtolower(SAMOGUID . $data['ClientSecret'])); if (false !== ($data = $crypter->decrypt(base64_decode($crypted)))) { list($session_id, $uid) = explode(':', $data); $cKey = ''; if ($claim) { $cKey = base64_encode(SAMOGUID . base64_encode($crypter->encrypt($claim))); } $opts = [ 'http' => [ 'method' => 'POST', 'user_agent' => Samo_Request::user_agent(), 'header' => 'Content-Type: application/x-www-form-urlencoded', 'content' => 'ckey=' . urlencode($cKey), ], ]; $context = stream_context_create($opts); $url = $this->andr_root() . 'search/index.php?action=tourist_check_identity&uid=' . $uid; if ($return = file_get_contents($url, false, $context)) { if ($data = json_decode($return, true)) { if (isset($data['CLAIM']) && $data['CLAIM'] == $claim) { return $this->checkAuth(intval($data['CLAIM']), $data['PNUMBER']); } } } } } return false; } public function payVariants() { $variants = false; if (isset($_SESSION['samo_auth']['AccessPay']) && $_SESSION['samo_auth']['AccessPay'] == 1) { $model = Samo_Loader::load_object('Pay_Variant_Model'); $model->construct($this->defaults['CLAIM']); $model->claimcost_rate_type = $this->claimcost_rate_type; $variants = $model->payVariants(); } return $variants; } public function bonus_info() { if (isset($_SESSION['samo_auth']['PhysBuyerInc']) && $_SESSION['samo_auth']['PhysBuyerInc'] > 0) { $model = Samo_Loader::load_object('Bonus_Manager_Model', $this->config); $return = $model->bonus_info(); foreach ($return as $key => $res) { foreach ($res['detail'] as $key2 => $detail) { $return[$key]['detail'][$key2]['allow_show'] = false; if (in_array($detail['claim'], $_SESSION['samo_auth']['ClaimList'])) { $return[$key]['detail'][$key2]['allow_show'] = true; } } } return count($return) ? $return : false; } else { return false; } } } 