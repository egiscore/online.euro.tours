<?php
 class Cl_Wizard_Controller extends Samo_Controller { protected $date = null; public $model; protected $embeddable = false; public function construct() { $this->view->module('cl_wizard')->assign('MAXLONGINT', Samo::MAXLONGINT); $this->messages = Samo_Registry::get('messages'); $this->actions = array( 'INIT' => array('TOWNFROM', 'STATE', 'TOURINC', 'TOURIST_EMPTY'), 'TOWNFROM' => array('STATE', 'TOURINC', 'TOURIST_EMPTY'), 'STATE' => array('TOURINC', 'TOURIST_EMPTY'), 'TOURINC' => array('TOURIST_EMPTY'), 'ORDER_HOTEL_TOWN' => array('ORDER_HOTELINC', 'ORDER_ROOMINC', 'ORDER_HTPLACEINC', 'ORDER_MEALINC'), 'ORDER_HOTELINC' => array('ORDER_ROOMINC', 'ORDER_HTPLACEINC', 'ORDER_MEALINC'), 'ORDER_ROOMINC' => array('ORDER_HTPLACEINC', 'ORDER_MEALINC'), 'ORDER_FREIGHT_DATE' => array('ORDER_TOWNFROM', 'ORDER_TOWNTO', 'ORDER_CLASSINC', 'ORDER_FRPLACEINC', 'ORDER_FREIGHTINC'), 'ORDER_TOWNFROM' => array('ORDER_TOWNTO', 'ORDER_CLASSINC', 'ORDER_FRPLACEINC', 'ORDER_FREIGHTINC'), 'ORDER_TOWNTO' => array('ORDER_CLASSINC', 'ORDER_FRPLACEINC', 'ORDER_FREIGHTINC'), 'ORDER_CLASSINC' => array('ORDER_FRPLACEINC', 'ORDER_FREIGHTINC'), 'ORDER_FRPLACEINC' => array('ORDER_FREIGHTINC'), 'ORDER_SERVICEDATES' => array('ORDER_SERVICEINC'), 'ORDER_INSUREDATES' => array('ORDER_INSUREINC'), 'ORDER_VISADATES' => array('ORDER_VISAINC'), ); $this->options_only = array('STATE', 'TOWNFROM', 'TOURINC', 'ORDER_HOTELINC', 'ORDER_ROOMINC', 'ORDER_HTPLACEINC', 'ORDER_MEALINC', 'ORDER_TOWNFROM', 'ORDER_TOWNTO', 'ORDER_CLASSINC', 'ORDER_FRPLACEINC'); $this->persistent = array(); $this->auth_init(); if (!in_array($this->action, array('TOWNFROM', 'STATE', 'TOURINC'))) { $this->InitClWizard(); } } public function InitClWizard($new = false) { if ($new || !isset($_SESSION['cl_wizard']) || $_SESSION['cl_wizard'] == false) { $_SESSION['cl_wizard'] = array(); $_SESSION['cl_wizard']['TOURIST'] = array(); $_SESSION['cl_wizard']['TOURISTINC'] = 0; } else { if (Samo_Request::intval('TOWNFROM')) { $this->model->defaults['TOWNFROM'] = $_SESSION['cl_wizard']['TOWNFROM'] = Samo_Request::intval('TOWNFROM'); } else { $this->model->defaults['TOWNFROM'] = (isset($_SESSION['cl_wizard']['TOWNFROM']) && intval($_SESSION['cl_wizard']['TOWNFROM'])) ? intval($_SESSION['cl_wizard']['TOWNFROM']) : TOWNFROMINC; } if (Samo_Request::intval('STATE')) { $this->model->defaults['STATE'] = $_SESSION['cl_wizard']['STATE'] = Samo_Request::intval('STATE'); } else { $this->model->defaults['STATE'] = (isset($_SESSION['cl_wizard']['STATE']) && intval($_SESSION['cl_wizard']['STATE'])) ? intval($_SESSION['cl_wizard']['STATE']) : null; } if (Samo_Request::intval('TOURINC')) { $this->model->defaults['TOURINC'] = $_SESSION['cl_wizard']['TOURINC'] = Samo_Request::intval('TOURINC'); } else { $this->model->defaults['TOURINC'] = (isset($_SESSION['cl_wizard']['TOURINC']) && intval($_SESSION['cl_wizard']['TOURINC'])) ? intval($_SESSION['cl_wizard']['TOURINC']) : null; } $this->model->STATEINC = $this->model->defaults['STATE']; } } public function default_action() { try { $res = array(); $model = $this->model; foreach ($this->actions['INIT'] as $control) { $r = $model->loadData($control); $res[$control] = $r; } $_SESSION['cl_wizard']['TOWNFROM'] = $this->model->defaults['TOWNFROM']; $_SESSION['cl_wizard']['STATE'] = $this->model->defaults['STATE']; $_SESSION['cl_wizard']['TOURINC'] = $this->model->defaults['TOURINC']; $this->view->bulk_assign($res); $DATE_BEG = (isset($_SESSION['cl_wizard']['DATE_BEG'])) ? Samo_Datetime::parse($_SESSION['cl_wizard']['DATE_BEG']) : Samo_Datetime::null(); $DATE_END = (isset($_SESSION['cl_wizard']['DATE_END'])) ? Samo_Datetime::parse($_SESSION['cl_wizard']['DATE_END']) : Samo_Datetime::null(); $today = Samo_Datetime::today(); if ($this->model->defaults['TOURINC'] > 0) { $this->view->assign('DATE_BEG_VALIDDATES', $this->model->getCheckinString(0, $today)); if (!$DATE_BEG->is_null()) { $this->view->assign('DATE_END_VALIDDATES', $this->model->getCheckinString(1, $DATE_BEG)); } } $view = $this->view ->assign('step', 1) ->assign('DATE_BEG', $DATE_BEG) ->assign('DATE_END', $DATE_END) ->js_var('step', 1); $this->redrawTourists(); if (isset($_SESSION['cl_wizard']['WARNING_TOURIST']) && count($_SESSION['cl_wizard']['WARNING_TOURIST']) > 0) { $view->assign('warning_stop', $_SESSION['cl_wizard']['WARNING_TOURIST']); } parent::default_action(); } catch (Samo_Exception $e) { $this->view->error($e->getMessage()); } } public function samo_action($action) { if (in_array($action, array('TOWNFROM', 'STATE', 'TOURINC')) && isset($_SESSION['cl_wizard']['ORDER']) && count($_SESSION['cl_wizard']['ORDER']) > 0) { $this->view ->set_selected($action, $_SESSION['cl_wizard'][$action]); $this->view->popup_message($this->messages['CL_W_ALREADY_ORDER'], $this->messages['PAGE_TITLE'], 350, 60); return; } else { $this->InitClWizard(); } if ($action == 'TOWNFROM') { $_SESSION['cl_wizard']['STATE'] = $this->model->defaults['STATE'] = null; $_SESSION['cl_wizard']['TOURINC'] = $this->model->defaults['TOURINC'] = null; } if ($action == 'STATE') { $_SESSION['cl_wizard']['TOURINC'] = $this->model->defaults['TOURINC'] = null; } $this->_orderGET(); $model = $this->model; foreach ($this->actions[$action] as $control) { $result = $model->loadData($control); if (isset($model->defaults[$control])) { $_SESSION['cl_wizard'][$control] = $model->defaults($control); } if (in_array($control, $this->options_only)) { $this->view->add_options('#' . $control, $result); } else { if ($control == 'ORDER_FREIGHTINC') { $tmp = '<option data-tpartner_name="" data-freight_name="" data-trg_time="" data-trg_port="" data-target_name="" data-src_time="" data-srcport="" data-source_name="" value="0" days="0">----</option>'; foreach ($result as $res) { $selected = ($res['selected']) ? 'selected' : ''; $tmp .= '<option value="' . $res['Inc'] . '" ' . $selected . ' data-srcport="' . $res['SrcPort'] . '" data-src_time="' . $res['SrcTime'] . '" trg_port="' . $res['TrgPort'] . '" data-trg_time="' . $res['TrgTime'] . '" data-freight_name="' . $res['LName'] . '" data-tpartner_name="' . $res['PartnerLName'] . '" data-days="' . $res['days'] . '">' . $res['LName'] . ' (' . $res['SrcPort'] . ' ' . $res['SrcTime'] . ' --> ' . $res['TrgPort'] . ' ' . $res['TrgTime'] . ') ' . $res['PartnerLName'] . ' ' . ($res['request'] ? '(' . $this->messages['CL_W_ORDER_FREIGHT_REQUEST'] . ')' : '') . '</option>'; } $this->view->element_text('#ORDER_FREIGHTINC', $tmp); if (count($result) === 1) { $this->prepare_FrPlace(); } } if ($action == 'ORDER_SERVICEDATES') { $tmp = '<option value="0">----</option>'; foreach ($result as $res) { $tmp .= '<option value="' . $res['Inc'] . '" data-trantype-name="' . $res['TrantypeLName'] . '" data-service-name="' . $res['LName'] . '" data-servtype-name="' . $res['ServTypeLName'] . '" data-servtype="' . $res['ServTypeInc'] . '" data-servcategory="' . $res['ServCategoryInc'] . '" data-source-name="' . $res['TownSourceLName'] . '" data-target-name="' . $res['TownTargetLName'] . '" data-routeindex="' . $res['RouteIndex'] . '" >' . $res['ServTypeLName'] . ': ' . $res['LName'] . ' (' . $res['TownSourceLName'] . (($res['TownTargetLName'] != '') ? ' --> ' . $res['TownTargetLName'] : '') . ') ' . $res['TrantypeLName'] . '</option>'; } $this->view->element_text('#ORDER_SERVICEINC', $tmp); } if ($action == 'ORDER_INSUREDATES') { $tmp = '<option value="0">----</option>'; foreach ($result as $res) { $tmp .= '<option value="' . $res['Inc'] . '" data-state-name="' . $res['StateLName'] . '" data-state="' . $res['StateInc'] . '" data-insure-name="' . $res['LName'] . '" data-partner-name="' . $res['PartnerLName'] . '">' . $res['StateLName'] . ': ' . $res['LName'] . ' (' . $res['PartnerLName'] . ')</option>'; } $this->view->element_text('#ORDER_INSUREINC', $tmp); } if ($action == 'ORDER_VISADATES') { $tmp = '<option value="0">----</option>'; foreach ($result as $res) { $tmp .= '<option value="' . $res['Inc'] . '" data-state-name="' . $res['StateLName'] . '" data-visa-name="' . $res['LName'] . '" data-days="' . $res['Days'] . '">' . $res['StateLName'] . ': ' . $res['LName'] . ' (' . $res['Days'] . ')</option>'; } $this->view->element_text('#ORDER_VISAINC', $tmp); } } if ($control === 'ORDER_HTPLACEINC') { $this->prepare_HtPlace(); } } if (in_array($action, ['TOWNFROM', 'STATE', 'TOURINC'])) { if ($this->model->defaults['TOURINC'] > 0) { $today = Samo_Datetime::today(); $this->view->calendar_attrs('#DATE_BEG', Samo_Datetime::null(), $today, $this->model->getCheckinString(0, $today)); $this->view->calendar_attrs('#DATE_END', Samo_Datetime::null(), $today, $this->model->getCheckinString(1, $today)); } $this->redrawTourists(); } return true; } public function DATEBEG_CHANGE() { $DATE_BEG = Samo_Request::date('DATE_BEG'); if (!$DATE_BEG->is_null()) { $this->view->calendar_attrs('#DATE_END', Samo_Datetime::null(), $DATE_BEG, $this->model->getCheckinString(1, $DATE_BEG)); } } public function TOURIST_FORM() { if (is_null($this->model->defaults['TOURINC'])) { return $this->view->error($this->messages['CL_WIZARD_NOT_CHOOSE_TOUR']); } try { $inc = $this->model->NextTouristInc(); $this->model->defaults['TOURIST_INC'] = Samo_Utils::ifs(Samo_Request::intval('TOURIST_INC'), $inc); $data = isset($_SESSION['cl_wizard']['TOURIST'][$this->model->defaults['TOURIST_INC']]) ? $_SESSION['cl_wizard']['TOURIST'][$this->model->defaults['TOURIST_INC']] : array(); if (false !== ($result = $this->model->loadTourist($this->model->defaults['TOURIST_INC'], $data))) { $this->view->assign('TouristInfo', $result) ->assign('TOURIST_INC', $this->model->defaults['TOURIST_INC']) ->assign('CHECKOUT', date("Ymd")) ->popup_template('edit_tourist.tpl', $this->messages['CL_W_ADD_EDIT_TOURIST'], 400, 300) ->module('modalContainer'); } } catch (Samo_Exception $e) { $this->view->error($e->getMessage()); } } public function SAVE_TOURIST() { $collection = Samo_Request::post('frm'); foreach ($collection as $data) { foreach ($data as $inc => $params) { $this->model->defaults['TOURIST_INC'] = $inc; $_SESSION['cl_wizard']['TOURIST'][$inc] = $params; } } $this->redrawTourists(); } public function DELETE_TOURIST() { $this->model->defaults['TOURIST_INC'] = Samo_Request::intval('TOURIST_INC'); $delete_tourist_confirm = Samo_Request::intval('DELETE_TOURIST_CONFIRM'); $is_tourist_in_order = $this->IS_TOURIST_IN_ORDER($this->model->defaults['TOURIST_INC']); if (!is_null($delete_tourist_confirm) && $is_tourist_in_order) { $tourist_in_order = 1; } else { $tourist_in_order = 0; if ($is_tourist_in_order) { foreach ($_SESSION['cl_wizard']['ORDER'] as $index => $order) { $new_opeople = array(); $opeoples = explode('|', $order['OPEOPLE']); $ocount = count($opeoples); for ($i = 0; $i < $ocount; $i++) { $peoples = explode(',', $opeoples[$i]); $pcount = count($peoples); for ($j = 0; $j < $pcount; $j++) { if ((int)$peoples[$j] == $this->model->defaults['TOURIST_INC']) { $peoples[$j] = -1; } } $new_opeople[] = implode(',', $peoples); } $_SESSION['cl_wizard']['ORDER'][$index]['OPEOPLE'] = implode('|', $new_opeople); } } unset($_SESSION['cl_wizard']['TOURIST'][$this->model->defaults['TOURIST_INC']]); $this->redrawTourists(); } $this->view ->js_var('tourist_inc', $this->model->defaults['TOURIST_INC']) ->js_var('tourist_in_order', $tourist_in_order); } public function redrawTourists() { $result = array(); if (isset($_SESSION['cl_wizard']['TOURIST']) && count($_SESSION['cl_wizard']['TOURIST']) > 0) { $result = $_SESSION['cl_wizard']['TOURIST']; } $view = $this->view ->assign('Tourist', $result); if ('default_action' !== $this->action) { $view->element_update('#ALL_TOURIST', 'table_tourist.tpl'); } } public function SERVTYPEFORM() { try { $result = $this->model->getServType(); $this->view ->assign('Items', $result) ->popup_template('servtype_form.tpl', $this->messages['CL_W_ADD_SERVICE'], 300, 200); } catch (Samo_Exception $e) { $this->view->popup_message($e->getMessage(), $this->messages['PAGE_TITLE'], 350, 60); } } public function ORDERFORM() { try { if (!isset($_SESSION['cl_wizard']['ORDER'])) { $_SESSION['cl_wizard']['ORDER'] = array(); } $model = $this->model; $model->defaults['ORDER_TYPE'] = Samo_Request::get('ORDER_TYPE'); if ($order_inc = Samo_Request::intval('ORDER_INC')) { $model->defaults['ORDER_INC'] = $order_inc; } else { $order_inc = $model->defaults['ORDER_INC'] = $_SESSION['cl_wizard']['ORDERINC'] = $_SESSION['cl_wizard']['ORDERINC'] + 1; } $this->_orderGET(); $ORDER_DATEBEG = $model->defaults['ORDER_DATEBEG'] = Samo_Datetime::parse($_SESSION['cl_wizard']['DATE_BEG']); $ORDER_DATEEND = $model->defaults['ORDER_DATEEND'] = Samo_Datetime::parse($_SESSION['cl_wizard']['DATE_END']); $order_exists = false; if (isset($_SESSION['cl_wizard']['ORDER'][$order_inc])) { $order_exists = true; $s = $_SESSION['cl_wizard']['ORDER'][$order_inc]; $model->defaults['ORDER_DATEBEG'] = $s['ORDER_DATEBEG']; $model->defaults['ORDER_DATEEND'] = $s['ORDER_DATEEND']; $ORDER_DATEBEG = $s['ORDER_DATEBEG']; $ORDER_DATEEND = $s['ORDER_DATEEND']; switch ($model->defaults['ORDER_TYPE']) { case 'H': $model->defaults['ORDER_HOTELINC'] = $s['ORDER_HOTELINC']; $model->defaults['ORDER_ROOMINC'] = $s['ORDER_ROOMINC']; $model->defaults['ORDER_HTPLACEINC'] = $s['ORDER_HTPLACEINC']; $model->defaults['ORDER_MEALINC'] = $s['ORDER_MEALINC']; break; case 'F': $model->defaults['ORDER_TOWNFROM'] = $s['ORDER_TOWNFROM']; $model->defaults['ORDER_TOWNTO'] = $s['ORDER_TOWNTO']; $model->defaults['ORDER_FREIGHTINC'] = $s['ORDER_FREIGHTINC']; $model->defaults['ORDER_CLASSINC'] = $s['ORDER_CLASSINC']; $model->defaults['ORDER_FRPLACEINC'] = $s['ORDER_FRPLACEINC']; break; case 'S': $model->defaults['ORDER_SERVICEINC'] = $s['ORDER_SERVICEINC']; $model->defaults['ORDER_TOWNS_SERVICE'] = $s['ORDER_TOWNS_SERVICE']; $model->defaults['ORDER_HOTEL_SERVICE'] = $s['ORDER_HOTEL_SERVICE']; $model->defaults['SERVTYPEINC'] = $s['servtype_inc']; break; case 'I': $model->defaults['ORDER_INSUREINC'] = $s['ORDER_INSUREINC']; break; case 'V': $model->defaults['ORDER_VISAINC'] = $s['ORDER_VISAINC']; break; } } if (false !== ($result = $this->model->getOrderDefault())) { $this->view->assign('load', $this->model->defaults['ORDER_TYPE']) ->assign('OrderInfo', $result) ->assign('ORDER_INC', $order_inc) ->assign('ORDER_TYPE', $model->defaults['ORDER_TYPE']) ->assign('ORDER_DATEBEG', $ORDER_DATEBEG) ->assign('ORDER_DATEEND', $ORDER_DATEEND) ->assign('ORDER_STARTDATE', $_SESSION['cl_wizard']['DATE_BEG']) ->assign('ORDER_ENDDATE', $_SESSION['cl_wizard']['DATE_END']); if (in_array($model->defaults['ORDER_TYPE'], ['H', 'S'])) { $valid_dates = $model->Order_valid_dates(); $this->view->assign('DATE_BEG_VALIDDATES', $valid_dates[0]); $this->view->assign('DATE_END_VALIDDATES', $valid_dates[1]); } $this->view->popup_template('order_form.tpl', $this->messages['CL_W_ADD_EDIT_ORDER'], $result['width'], $result['height']); if ($order_exists) { $this->view->module('modalContainer') ->set_selected('#ORDER_COUNT', $s['ORDER_COUNT']) ->element_data('#ORDER_COUNT', 'old', $s['ORDER_COUNT']) ->element_data('#edit_order', 'order-opeople', $s['OPEOPLE']) ->element_data('#edit_order', 'pcount', $s['pcount']) ->element_data('#edit_order', 'pcount-adult', $s['adult']) ->element_data('#edit_order', 'pcount-child', $s['child']) ->element_data('#edit_order', 'pcount-infant', $s['infant']); switch ($model->defaults['ORDER_TYPE']) { case 'H': $this->view ->set_selected('#ORDER_HOTELINC', $model->defaults['ORDER_HOTELINC']) ->set_selected('#ORDER_ROOMINC', $model->defaults['ORDER_ROOMINC']) ->set_selected('#ORDER_HTPLACEINC', $model->defaults['ORDER_HTPLACEINC']) ->set_selected('#ORDER_MEALINC', $model->defaults['ORDER_MEALINC']) ->element_prop('#ORDER_ADD_INFANT', 'checked', $s['ORDER_ADD_INFANT']); break; case 'F': $this->view ->set_selected('#ORDER_TOWNFROM', $model->defaults['ORDER_TOWNFROM']) ->set_selected('#ORDER_TOWNTO', $model->defaults['ORDER_TOWNTO']) ->set_selected('#ORDER_CLASSINC', $model->defaults['ORDER_CLASSINC']) ->set_selected('#ORDER_FRPLACEINC', $model->defaults['ORDER_FRPLACEINC']) ->set_selected('#ORDER_FREIGHTINC', $model->defaults['ORDER_FREIGHTINC']) ->element_prop('#ORDER_ADD_INFANT', 'checked', $s['ORDER_ADD_INFANT']); break; case 'S': $this->view ->set_selected('#ORDER_SERVICEINC', $model->defaults['ORDER_SERVICEINC']) ->set_selected('#ORDER_TOWNS_SERVICE', $model->defaults['ORDER_TOWNS_SERVICE']) ->set_selected('#ORDER_HOTEL_SERVICE', $model->defaults['ORDER_HOTEL_SERVICE']) ->element_prop('#ORDER_ADD_INFANT', 'checked', $s['ORDER_ADD_INFANT']); break; case 'I': $this->view ->set_selected('#ORDER_INSUREINC', $model->defaults['ORDER_INSUREINC']); break; case 'V': $this->view ->set_selected('#ORDER_VISAINC', $model->defaults['ORDER_VISAINC']); break; } $opeoples = explode('|', $s['OPEOPLE']); $ocount = count($opeoples); if ($ocount > 0) { for ($i = 0; $i < $ocount; $i++) { $peoples = explode(',', $opeoples[$i]); $pcount = count($peoples); $this->view->element_append('#OPEOPLE', '<div class="div_order" id="DIV_ORDER' . $i . '"><div class="opeople_btn"><input type="button" id="FROM_LEFT_TO_RIGHT_BTN' . $i . '" class="from_left_to_right" value=">>" data-to="' . $i . '"><br><input type="button" id="FROM_RIGHT_TO_LEFT_BTN' . $i . '" class="from_right_to_left" value="<<" data-from="' . $i . '"></div><div class="order"><select size="' . ((int)$s['pcount'] + (($model->defaults['ORDER_TYPE'] == 'H') ? (int)$s['ORDER_ADD_INFANT'] : 0)) . '" id="ORDER' . $i . '" class="order_opeople" multiple="" /></div><div class="eraser"/></div>'); $r = ''; for ($j = 0; $j < $pcount; $j++) { if ((int)$peoples[$j] < 0) { $r = $r . '<option value="' . $peoples[$j] . '">' . $this->messages['CL_W_ORDER_OPEOPLE_FREE'] . '</option>'; } else { $tourist = $this->PeopleInc2Name($peoples[$j]); $r = $r . '<option value="' . $tourist['Inc'] . '">' . $tourist['LName'] . '</option>'; } } $this->view->element_text('#ORDER' . $i, $r); } $r = ''; $tourists = $this->GetFreeTouristForOrder($order_inc, $s['ORDER_DATEBEG'], $s['ORDER_DATEEND'], false); foreach ($tourists as $human) { $tourist = $this->PeopleInc2Name($human['Inc']); $r .= '<option value="' . $tourist['Inc'] . '">' . $tourist['LName'] . '</option>'; } $this->view->element_text('#ORDER_ALL_TOURIST', $r); $this->view->element_show('#FIELDSET_OPEOPLE'); } } if ($model->defaults['ORDER_TYPE'] == 'S') { $this->view->element_data('#edit_order', 'servtype', $model->defaults['SERVTYPEINC']); } } } catch (Samo_Exception $e) { $this->view->error($e->getMessage()); } } public function LOAD_ORDER() { $this->model->getOrderPacket(); $this->redrawOrders(); } public function SAVE_ORDER() { try { $this->model->defaults['ORDER_INC'] = Samo_Request::intval('ORDER_INC'); $_SESSION['cl_wizard']['ORDER'][$this->model->defaults['ORDER_INC']] = $this->model->OrderFromPost(); $this->redrawOrders(); } catch (Samo_Exception $e) { $this->view->popup_message($e->getMessage(), $this->messages['PAGE_TITLE'], 350, 60); } } public function DELETE_ORDER() { $this->model->defaults['ORDER_INC'] = Samo_Request::intval('ORDER_INC'); unset($_SESSION['cl_wizard']['ORDER'][$this->model->defaults['ORDER_INC']]); $this->redrawOrders(); } public function getPrice() { if (isset($_SESSION['cl_wizard']['ORDER']) && count($_SESSION['cl_wizard']['ORDER']) > 0) { $result = array(); $error = ''; if (false !== $this->model->getPrice($result, $error)) { $this->view ->assign('load', 'CALC_RESULT') ->assign('Calc', $result) ->element_update('#CLAIMPRICE', 'controls.tpl') ->element_show('#CLAIMPRICE') ->element_prop('#NEXT', 'disabled', false); } else { $this->view ->assign('load', 'CALC_ERROR') ->assign('error', $error) ->element_update('#CLAIMPRICE', 'controls.tpl') ->element_show('#CLAIMPRICE') ->element_prop('#NEXT', 'disabled', true); } } else { $this->view->element_hide('#CLAIMPRICE'); } } public function redrawOrders() { $res = $this->model->reloadServices(); if (isset($res['error'])) { foreach ($res['error'] as $row) { $this->view->message(sprintf($this->messages['CL_W_SERVICE_EXCLUDE_PAGE'], $row['ServiceLName'], $row['Errormessage']), 'notice'); } } if (isset($res['auto_added'])) { foreach ($res['auto_added'] as $row) { $this->view->message(sprintf($this->messages['CL_W_SERVICE_INCLUDE_PAGE'], $row['ServiceLName']), 'notice'); } } if (isset($res['service_changed'])) { foreach ($res['service_changed'] as $row) { $this->view->message(sprintf($this->messages['CL_W_SERVICE_CHANGES_PAGE'], $row['ServiceLName']), 'notice'); } } $this->view ->assign('Order', $this->Opeople2Name()) ->element_update('#ALL_ORDER', 'table_order.tpl'); $this->getPrice(); } public function IS_TOURIST_IN_ORDER($pinc) { if (isset($_SESSION['cl_wizard']['ORDER'])) { foreach ($_SESSION['cl_wizard']['ORDER'] as $order) { $opeoples = explode('|', $order['OPEOPLE']); $ocount = count($opeoples); for ($i = 0; $i < $ocount; $i++) { $peoples = explode(',', $opeoples[$i]); if (in_array($pinc, $peoples)) { return true; } } } } return false; } public function NEW_CLAIM() { $this->InitClWizard(true); $routes = Samo_Registry::get('routes'); $url = $routes['cl_wizard']['url']; Samo_Registry::get('response')->redirect_to($url); } public function STEP2() { if (!isset($_SESSION['cl_wizard']['TOURIST']) || count($_SESSION['cl_wizard']['TOURIST']) == 0) { $this->view->popup_message($this->messages['CL_W_NO_TOURIST'], $this->messages['PAGE_TITLE'], 350, 60); return; } $_SESSION['cl_wizard']['DATE_BEG'] = Samo_Request::date('DATE_BEG'); $_SESSION['cl_wizard']['DATE_END'] = Samo_Request::date('DATE_END'); $routes = Samo_Registry::get('routes'); $url = $routes['cl_wizard']['url']; $url .= 'samo_action=STEP2load'; Samo_Registry::get('response')->redirect_to($url); } public function Opeople2Name() { $orders = array(); if ($_SESSION['cl_wizard']['ORDER']) { foreach ($_SESSION['cl_wizard']['ORDER'] as $order) { $tmp_order = $order; $tmp_order['OPEOPLE'] = array(); $opeoples = explode('|', $order['OPEOPLE']); $ocount = count($opeoples); if ($ocount > 0) { for ($i = 0; $i < $ocount; $i++) { $peoples = explode(',', $opeoples[$i]); $pcount = count($peoples); $r = array(); for ($j = 0; $j < $pcount; $j++) { if ((int)$peoples[$j] < 0) { $r[] = array('Inc' => 0, 'LName' => $this->messages['CL_W_ORDER_OPEOPLE_FREE']); } else { $r[] = $this->PeopleInc2Name($peoples[$j]); } } $tmp_order['OPEOPLE'][$i] = $r; } } $orders[] = $tmp_order; } } return $orders; } public function STEP2load() { try { if (!isset($_SESSION['cl_wizard']['ORDERINC'])) { $_SESSION['cl_wizard']['ORDERINC'] = 0; } if (false !== ($result = $this->model->getButton())) { if (!isset($_SESSION['cl_wizard']['ORDER'])) { $_SESSION['cl_wizard']['ORDER'] = array(); } if (count($result) > 0) { $result['load_order_btn'] = 1; } $result['load_order_btn'] = 0; $this->view ->assign('step', 2) ->js_var('step', 2) ->assign('load', 'ORDER_BUTTONS') ->assign('btn', $result) ->element_update('#BUTTONS', 'controls.tpl'); $this->redrawOrders(); parent::default_action(); } else { $this->view->message($this->messages['CL_W_NO_PACKET_ORDER']); } } catch (Samo_Exception $e) { $this->view->error($e->getMessage()); } } public function GetFreeTouristForOrder($exclude_inc, $dbeg, $dend, $load_new_place) { $return = array(); $tmp_include_people = array(); $model = $this->model; foreach ($_SESSION['cl_wizard']['ORDER'] as $order) { $order_type = $order['ORDER_TYPE']; if ($order['inc'] != $exclude_inc || !$load_new_place) { $f = false; switch ($model->defaults['ORDER_TYPE']) { case 'H': if ($order_type == 'H' && $dend->gt($order['ORDER_DATEBEG']) && $dbeg->lt($order['ORDER_DATEEND'])) { $f = true; } break; case 'F': case 'S': case 'I': case 'V': if ($order['inc'] == $exclude_inc) { $f = true; } break; } if ($f) { $opeoples = explode('|', $order['OPEOPLE']); $ocount = count($opeoples); for ($i = 0; $i < $ocount; $i++) { $peoples = explode(',', $opeoples[$i]); $pcount = count($peoples); for ($j = 0; $j < $pcount; $j++) { if ((int)$peoples[$j] > 0) { $tmp_include_people[] = (int)$peoples[$j]; } } } } } } foreach ($_SESSION['cl_wizard']['TOURIST'] as $inc => $tourist) { if (!in_array($inc, $tmp_include_people)) { $return[] = $this->PeopleInc2Name($inc); } } return $return; } public function PeopleInc2Name($tinc) { foreach ($_SESSION['cl_wizard']['TOURIST'] as $inc => $tourist) { if ((int)$inc === (int)$tinc) { return array('Inc' => $inc, 'LName' => (isset($tourist['HUMAN']) ? $tourist['HUMAN'] . ' ' : '') . (isset($tourist['LASTLNAME']) ? $tourist['LASTLNAME'] : $tourist['LASTNAME']) . ' ' . (isset($tourist['FIRSTLNAME']) ? $tourist['FIRSTLNAME'] : $tourist['FIRSTNAME'])); } } } public function _orderGET() { $model = $this->model; $model->defaults['ORDER_INC'] = Samo_Utils::ifs(Samo_Request::intval('ORDER_INC'), 0); $model->defaults['ORDER_TYPE'] = Samo_Request::get('ORDER_TYPE'); $model->defaults['ORDER_DATEBEG'] = Samo_Request::date('ORDER_DATEBEG'); $model->defaults['ORDER_DATEEND'] = Samo_Request::date('ORDER_DATEEND'); $model->defaults['SERVTYPEINC'] = Samo_Request::intval('servtype_inc'); $orders = array( 'ORDER_HOTELINC', 'ORDER_ROOMINC', 'ORDER_HTPLACEINC', 'ORDER_MEALINC', 'ORDER_TOWNFROM', 'ORDER_TOWNTO', 'ORDER_CLASSINC', 'ORDER_FRPLACEINC', 'ORDER_FREIGHTINC', 'ORDER_SERVICEINC', 'ORDER_INSUREINC', 'ORDER_VISAINC', 'ORDER_HOTEL_SERVICE' ); foreach ($orders as $order) { $model->defaults[$order] = Samo_Request::intval($order); } $model->defaults['ORDER_TOWNS_SERVICE'] = (isset($_GET['ORDER_TOWNS_SERVICE'])) ? $_GET['ORDER_TOWNS_SERVICE'] : ''; return true; } public function ORDER_FREIGHTINC() { $this->_orderGET(); $model = $this->model; if ($model->defaults['ORDER_FREIGHTINC'] > 0) { $this->prepare_FrPlace(); } } public function prepare_FrPlace() { $model = $this->model; $res = $model->getFrPlacePCount(); $res['PCount'] = ($res['PCount'] != null) ? $res['PCount'] : 0; $res['Adult'] = ($res['Adult'] != null) ? $res['Adult'] : 0; $res['Child'] = ($res['Child'] != null) ? $res['Child'] : 0; $res['Infant'] = ($res['Infant'] != null) ? $res['Infant'] : 0; $this->view->element_data('#edit_order', 'pcount', $res['PCount']) ->element_data('#edit_order', 'pcount-adult', $res['Adult']) ->element_data('#edit_order', 'pcount-child', $res['Child']) ->element_data('#edit_order', 'pcount-infant', $res['Infant']) ->set_selected('#ORDER_COUNT', 1); if ($res['PCount'] > 0) { $res = $this->GetFreeTouristForOrder($model->defaults['ORDER_INC'], $model->defaults['ORDER_DATEBEG'], $model->defaults['ORDER_DATEEND'], true); if (count($res) > 0) { $this->view->add_options('#ORDER_ALL_TOURIST', $res); } $this->view->element_show('#FIELDSET_OPEOPLE'); } } public function ORDER_HTPLACEINC() { $this->_orderGET(); $model = $this->model; $result = $model->loadData('ORDER_MEALINC'); $this->view->add_options('#ORDER_MEALINC', $result); $this->prepare_HtPlace(); } public function prepare_HtPlace() { $model = $this->model; $res = $model->getHtPlacePCount(); $res['PCount'] = ($res['PCount'] != null) ? $res['PCount'] : 0; $res['Adult'] = ($res['Adult'] != null) ? $res['Adult'] : 0; $res['Child'] = ($res['Child'] != null) ? $res['Child'] : 0; $res['Infant'] = ($res['Infant'] != null) ? $res['Infant'] : 0; $this->view->element_data('#edit_order', 'pcount', $res['PCount']) ->element_data('#edit_order', 'pcount-adult', $res['Adult']) ->element_data('#edit_order', 'pcount-child', $res['Child']) ->element_data('#edit_order', 'pcount-infant', $res['Infant']) ->set_selected('#ORDER_COUNT', 1); if ($res['PCount'] > 0) { $res = $this->GetFreeTouristForOrder($model->defaults['ORDER_INC'], $model->defaults['ORDER_DATEBEG'], $model->defaults['ORDER_DATEEND'], true); if (count($res) > 0) { $this->view->add_options('#ORDER_ALL_TOURIST', $res); } $this->view->element_show('#FIELDSET_OPEOPLE'); } } public function ORDER_SERVICEINC() { $this->ORDER_SIV_INC(); $result = $this->model->loadData('ORDER_TOWNS_SERVICE'); $this->view->assign('load', 'ORDER_TOWNS_SERVICE_OPTION') ->assign('OrderInfo', array('Towns' => $result)) ->element_update('#ORDER_TOWNS_SERVICE', 'controls.tpl'); $result = $this->model->loadData('ORDER_HOTEL_SERVICE'); $this->view->assign('load', 'ORDER_HOTEL_SERVICE_OPTION') ->assign('OrderInfo', array('Hotel' => $result)) ->element_update('#ORDER_HOTEL_SERVICE', 'controls.tpl'); } public function ORDER_TOWNS_SERVICE() { $this->_orderGET(); $result = $this->model->loadData('ORDER_HOTEL_SERVICE'); $this->view->assign('load', 'ORDER_HOTEL_SERVICE_OPTION') ->assign('OrderInfo', array('Hotel' => $result)) ->element_update('#ORDER_HOTEL_SERVICE', 'controls.tpl'); } public function ORDER_SERVICEINC_LOAD_OPEOPLE() { $this->ORDER_SIV_INC(); } public function ORDER_INSUREINC() { $this->ORDER_SIV_INC(); } public function ORDER_VISAINC() { $this->ORDER_SIV_INC(); } public function ORDER_SIV_INC() { $this->_orderGET(); $model = $this->model; if ($model->defaults['ORDER_SERVICEINC'] > 0 || $model->defaults['ORDER_INSUREINC'] > 0 || $model->defaults['ORDER_VISAINC'] > 0 || $model->defaults['ORDER_VISAINC'] == -1) { $res = array('pcount' => 1, 'adult' => 1, 'child' => 0, 'infant' => 0); $this->view->element_data('#edit_order', 'pcount', $res['pcount']) ->element_data('#edit_order', 'pcount-adult', $res['adult']) ->element_data('#edit_order', 'pcount-child', $res['child']) ->element_data('#edit_order', 'pcount-infant', $res['infant']) ->set_selected('#ORDER_COUNT', 1); $model->defaults['ORDER_INC'] = Samo_Utils::ifs(Samo_Request::intval('ORDER_INC'), 0); $res = $this->GetFreeTouristForOrder($model->defaults['ORDER_INC'], $model->defaults['ORDER_DATEBEG'], $model->defaults['ORDER_DATEEND'], true); if (count($res) > 0) { $this->view->add_options('#ORDER_ALL_TOURIST', $res); } $this->view->element_show('#FIELDSET_OPEOPLE'); } } public function STEP3() { $res = array(); $_SESSION['cl_wizard']['WARNING_TOURIST'] = $res; $routes = Samo_Registry::get('routes'); if (!$this->model->check_Tourist_Fields($res)) { $_SESSION['cl_wizard']['WARNING_TOURIST'] = $res; $url = $routes['cl_wizard']['url']; Samo_Registry::get('response')->redirect_to($url); return true; } $res = array(); $_SESSION['cl_wizard']['WARNING_ORDER'] = $res; if (!$this->model->check_AllOrder_Warning($res)) { $_SESSION['cl_wizard']['WARNING_ORDER'] = $res; } $res = array(); $_SESSION['cl_wizard']['WARNING_ORDER_STOP'] = $res; if (!$this->model->check_AllOrder_Stop($res)) { $_SESSION['cl_wizard']['WARNING_ORDER_STOP'] = $res; } $url = $routes['cl_wizard']['url']; $url .= 'samo_action=STEP3load'; Samo_Registry::get('response')->redirect_to($url); } public function STEP3load() { if (!isset($_SESSION['samo_auth']['permissions']['bron'])) { return $this->LOGOUT(); } if (!$_SESSION['samo_auth']['permissions']['bron']) { throw new Samo_Exception($this->messages['CL_WIZARD_DISABLE_BRON']); } $this->view ->assign('step', 3) ->js_var('step', 3) ->assign('NOTECLAIM', (isset($_SESSION['NOTE'])) ? $_SESSION['NOTE'] : ''); parent::default_action(); if (isset($_SESSION['cl_wizard']['WARNING_ORDER']) && count($_SESSION['cl_wizard']['WARNING_ORDER']) > 0) { $this->view ->assign('warning', $_SESSION['cl_wizard']['WARNING_ORDER']) ->element_update('#ORDER_WARNING', 'warning.tpl') ->element_show('#ORDER_WARNING'); } if (isset($_SESSION['cl_wizard']['WARNING_ORDER_STOP']) && count($_SESSION['cl_wizard']['WARNING_ORDER_STOP']) > 0) { $this->view ->clear_assign('warning') ->assign('warning_stop', $_SESSION['cl_wizard']['WARNING_ORDER_STOP']) ->element_update('#ORDER_WARNING_STOP', 'warning.tpl') ->element_show('#ORDER_WARNING_STOP') ->element_prop('#NEXT', 'disabled', true); } } public function BRON() { $routes = Samo_Registry::get('routes'); if (isset($_SESSION['cl_wizard']['ORDER']) && count($_SESSION['cl_wizard']['ORDER']) > 0) { $_SESSION['NOTE'] = Samo_Request::post('NOTE'); $result = array(); $error = ''; if (false !== $this->model->getBron($result, $error)) { if (!$return_to = $this->model->callback()) { $this->view->assign('bron', $result) ->assign('cl_refer', $routes['cl_refer']['url'] . 'CLAIM=' . $result['Claim']) ->assign('bron_again', $routes['cl_wizard']['url']) ->popup_template('resultset.tpl', $this->messages['CL_W_BRON_SUCCESSFUL_TITLE'], 500, 100, false); } else { $this->view->clear_unload()->redirect_to($return_to); } } else { $this->view ->assign('load', 'CALC_ERROR') ->assign('error', $error) ->popup_template('controls.tpl', $this->messages['CL_W_BRON_FAILED_TITLE'], 500, 100, true); } } else { $this->view->element_hide('#CLAIMPRICE'); } } public function LOGOUT() { if (isset($_SESSION['samo_auth'])) { unset($_SESSION['samo_auth']); } Samo_Registry::get('response')->refresh(); } } 