<?php
 class Cl_Wizard_Model extends Samo_Tourinfo { protected $_cacheClaimtext = null; protected $messages = null; private $packetinfo = null; private $fareonline = null; public function construct() { $this->defaults['STATUS_RASCHETNAYA'] = 1; $this->defaults['UseUnreadForNote'] = 0; $this->defaults['TOWNFROM'] = null; $this->defaults['STATE'] = null; $this->defaults['TOURINC'] = null; $this->messages = Samo_Registry::get('messages'); } public function auth_required() { return (isset($_GET['samo_action']) and in_array($_GET['samo_action'], array('STEP3load', 'LOGOUT'))) ? array('agency') : false; } public function getTOWNFROM() { $order_by = intval($this->getConfig('TOWN_ORDER_BY_NAME')); $sql = $this->db->formatExec($this->ONLINEDB . '.dbo.up_WEB_3_cl_wizard_Townfrom', ['Order_By_Name' => $order_by]); $return = array(); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $order_by = ($order_by) ? 'Name' : 'LName'; $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { $row['LName'] = $row[$order_by]; if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['TOWNFROM'] || $numRows == 1); } else { $row['selected'] = false; } $return[] = $row; } if ((!$selected_exists && $numRows > 0) || $numRows == 1) { $this->defaults['TOWNFROM'] = $return[0]['Inc']; } } } if (!count($return)) { $messages = Samo_Registry::get('messages'); throw new Samo_Exception($messages['CL_WIZARD_TOURS_NOT_AVAILABLE'], 404); } return $return; } public function getSTATE() { $order_by = intval($this->getConfig('STATE_ORDER_BY_NAME')); $sql = $this->db->formatExec( $this->ONLINEDB . '.dbo.up_WEB_3_cl_wizard_State', [ 'TownFrom' => $this->defaults['TOWNFROM'], 'Order_By_Name' => $order_by, ] ); $return = array(); $messages = Samo_Registry::get('messages'); $return[] = array('Inc' => 0, 'LName' => $messages['STATE_ANY_LNAME'], 'Name' => $messages['STATE_ANY_NAME'], 'selected' => false); $default = $this->defaults['STATE']; $selected_exists = false; if ($res = $this->db->query($sql)) { $order_by = ($order_by) ? 'Name' : 'LName'; while ($row = $this->db->fetchRow($res)) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['StateInc'] == $default); } else { $row['selected'] = false; } $row['Inc'] = $row['StateInc']; $row['Name'] = $row['StateName']; $row['LName'] = $row['State' . $order_by]; $return[] = $row; } if (!$selected_exists && count($return) >= 2) { $return[1]['selected'] = true; $this->defaults['STATE'] = $return[1]['Inc']; } } return $return; } public function getTOURINC() { $sql = $this->db->formatExec( $this->ONLINEDB . '.dbo.up_WEB_3_cl_wizard_Tour', [ 'TownFrom' => $this->defaults['TOWNFROM'], 'StateInc' => $this->defaults['STATE'], 'Order_By_Name' => $this->getConfig('ORDER_BY_NAME'), ] ); return $this->tourinc($sql); } private function loadPeople($inc, $data, $strict = false) { $packetInfo = Samo_Loader::load_object('Packet_Info', $this->config); $packetInfo['TownFromInc'] = $this->defaults['TOWNFROMINC']; $packetInfo['StateInc'] = $this->defaults['STATEINC']; $packetInfo['TourInc'] = $this->defaults['TOURINC']; $packetInfo['CheckIn'] = Samo_Request::find('DATE_BEG') ? Samo_Request::date('DATE_BEG') : (isset($_SESSION['cl_wizard']['DATE_BEG']) ? $_SESSION['cl_wizard']['DATE_BEG'] : Samo_Datetime::null()); $packetInfo['CheckOut'] = Samo_Request::find('DATE_END') ? Samo_Request::date('DATE_END') : (isset($_SESSION['cl_wizard']['DATE_END']) ? $_SESSION['cl_wizard']['DATE_END'] : Samo_Datetime::null()); $tours = $this->getTOURINC(); foreach ($tours as $tour) { if ($this->defaults['TOURINC'] == $tour['Inc'] && isset($tour['StateFromInc'])) { $packetInfo['StateFromInc'] = $tour['StateFromInc']; break; } } $people = Samo_Loader::load_object('Samo_People', $this->config, $packetInfo, $strict); $people->load_from_cl_wizard($data); $people->inc = $inc; return $people; } public function loadTourist($inc, $data = array()) { if (empty($data)) { $defaultState = $this->getConfig('DEFAULT_STATE', 'people'); $data['PLACEBORN'] = $defaultState; $data['NATIONALITY'] = $defaultState; } $people = $this->loadPeople($inc, $data); $return = []; $gfields = $people->load(null); foreach ($gfields as $fields) { foreach ($fields as $field) { if ($field['Field'] == 'HUMAN') { $field['Visible'] = true; $field['Required'] = true; } if (!$field['Visible']) { continue; } $field['Editable'] = true; if (!isset($return[$field['Group']])) { $return[$field['Group']] = []; } $return[$field['Group']][] = $field; } } return $return; } public function NextTouristInc() { $_SESSION['cl_wizard']['TOURISTINC']++; return $_SESSION['cl_wizard']['TOURISTINC']; } public function getTOURIST_EMPTY() { if (0 == count($_SESSION['cl_wizard']['TOURIST'])) { for ($i = 0; $i < 2; $i++) { $inc = $this->NextTouristInc(); $tourist = array(); $result = $this->loadTourist($inc); foreach ($result as $fields) { foreach ($fields as $field) { if ($field['Field'] == 'HUMAN') { $field['Value'] = 'MRS'; } elseif ($field['Field'] == 'LASTLNAME') { $field['Value'] = 'NO'; } elseif ($field['Field'] == 'FIRSTLNAME') { $field['Value'] = 'NAME~' . $inc; } $tourist[$field['Field']] = $field['Value']; } } $_SESSION['cl_wizard']['TOURIST'][$inc] = $tourist; } } return $_SESSION['cl_wizard']['TOURIST']; } public function getCheckinString($isback, $date) { $return = ''; $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_tour_checkin', [ 'Tour' => $this->defaults['TOURINC'], 'IsBack' => $isback, 'DateBeg' => $date, ] ); if (false !== ($req = $this->db->fetchRow($sql))) { $return = $req['sdays']; } return $return; } private function prepare_valid_dates(& $result, $tournights) { $result = substr($result, 0, $tournights + 1); return true; } public function Order_valid_dates() { $return = []; $DATE_BEG = Samo_Datetime::parse($_SESSION['cl_wizard']['DATE_BEG']); $tournights = $this->_tournights(); $result = $this->getCheckinString(0, $DATE_BEG); $this->prepare_valid_dates($result, $tournights); $return[] = $result; $result = $this->getCheckinString(1, $DATE_BEG); $this->prepare_valid_dates($result, $tournights); $return[] = $result; return $return; } public function OrderFromPost() { $order = array('inc' => $this->defaults['ORDER_INC']); $order['ORDER_TYPE'] = (isset($_POST['ORDER_TYPE'])) ? $_POST['ORDER_TYPE'] : ''; $post = array('ORDER_ADD_INFANT', 'ORDER_COUNT', 'ORDER_DATEBEG', 'ORDER_DATEEND', 'pcount', 'adult', 'child', 'infant'); $tmp = array(); switch ($order['ORDER_TYPE']) { case 'H': $tmp = array('ORDER_HOTELINC', 'ORDER_ROOMINC', 'ORDER_HTPLACEINC', 'ORDER_MEALINC', 'hotelname', 'roomname', 'htplacename', 'mealname', 'townname', 'state_inc'); break; case 'F': $tmp = array('ORDER_TOWNFROM', 'ORDER_TOWNTO', 'ORDER_CLASSINC', 'ORDER_FRPLACEINC', 'ORDER_FREIGHTINC', 'class_name', 'frplace_name', 'source_name', 'srcport', 'src_time', 'target_name', 'trg_port', 'trg_time', 'freight_name', 'tpartner_name'); break; case 'S': $tmp = array('ORDER_SERVICEINC', 'ORDER_TOWNS_SERVICE', 'ORDER_HOTEL_SERVICE', 'servtype_inc', 'servtype_name', 'service_name', 'trantype_name', 'source_name', 'target_name', 'service_hotel_name', 'servcategory_inc', 'routeindex', 'service_roominc', 'service_mealinc'); break; case 'I': $tmp = array('ORDER_INSUREINC', 'insure_name', 'partner_name', 'state_name', 'state_inc'); break; case 'V': $tmp = array('ORDER_VISAINC', 'visa_name', 'days', 'state_name'); break; } $post = array_merge($post, $tmp); foreach ($post as $key) { $order[$key] = (in_array($key, array('ORDER_DATEBEG', 'ORDER_DATEEND'))) ? Samo_Request::date($key) : Samo_Request::post($key); } $order['OPEOPLE'] = $_POST['ORDER_OPEOPLE']; if ($order['ORDER_TYPE'] == 'S') { $order['AirlineInc'] = null; $order['FreightInc'] = null; $order['ClassInc'] = null; $uid = Samo_Utils::randomString(20); $order['uid'] = $uid; } $order['auto_added'] = 0; $this->CheckOrder($order); return $order; } public function CheckOrder($order) { $tournights = $this->_tournights(); $sql = ''; switch ($order['ORDER_TYPE']) { case 'H': $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_CheckOrderHotel', [ 'TownFrom' => $this->defaults['TOWNFROM'], 'Tour' => $this->defaults['TOURINC'], 'Hotel' => $order['ORDER_HOTELINC'], 'DateBeg' => $order['ORDER_DATEBEG'], 'DateEnd' => $order['ORDER_DATEEND'], 'Room' => $order['ORDER_ROOMINC'], 'HtPlace' => $order['ORDER_HTPLACEINC'], 'TourNights' => $tournights, 'Meal' => $order['ORDER_MEALINC'], ] ); break; } if ($sql != '') { $res = $this->db->fetchOne($sql); if ($res) { throw new Samo_Exception($res, 1); } } return true; } public function getButton() { $sql = $this->db->formatExec($this->ONLINEDB . '.dbo.up_WEB_3_cl_wizard_Btn', ['Tour' => $this->defaults['TOURINC']]); if (false !== ($req = $this->db->fetchRow($sql))) { return $req; } return false; } public function getOrderDefault() { $result = array(); $result['height'] = 150; switch ($this->defaults['ORDER_TYPE']) { case 'H': $result['width'] = 500; $result['Hotel'] = $this->getORDER_HOTELINC(); $result['Room'] = $this->getORDER_ROOMINC(); $result['HtPlace'] = $this->getORDER_HTPLACEINC(); $result['Meal'] = $this->getORDER_MEALINC(); break; case 'F': $result['width'] = 500; $result['TownFrom'] = $this->getORDER_TOWNFROM(); $result['TownTo'] = $this->getORDER_TOWNTO(); $result['Class'] = $this->getORDER_CLASSINC(); $result['FrPlace'] = $this->getORDER_FRPLACEINC(); $result['Freight'] = $this->getORDER_FREIGHTINC(); break; case 'S': $result['width'] = 500; $result['Service'] = $this->getORDER_SERVICEINC(); $result['Towns'] = $this->getORDER_TOWNS_SERVICE(); $result['Hotel'] = $this->getORDER_HOTEL_SERVICE(); break; case 'I': $result['width'] = 500; $result['Insure'] = $this->getORDER_INSUREINC(); break; case 'V': $result['width'] = 500; $result['Visa'] = $this->getORDER_VISAINC(); break; } return $result; } public function getORDER_TOWNS_SERVICE() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $return = array(); if ($this->defaults['ORDER_SERVICEINC'] > 0 && !$DATEBEG->is_null()) { $offer = $this->prepareXML($save = 0); $xml = $offer->claim_document(); $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_TownsService', [ 'DateBeg' => $DATEBEG, 'DateEnd' => $DATEBEG, 'Service' => $this->defaults['ORDER_SERVICEINC'], 'xml' => $xml, ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['SourceInc'] . '|' . $row['TargetInc'] == $this->defaults['ORDER_TOWNS_SERVICE'] || $numRows == 1); } else { $row['selected'] = false; } $row['Inc'] = $row['SourceInc'] . '|' . $row['TargetInc']; $row['Name'] = $row['SourceName'] . '-->' . $row['TargetName']; $row['LName'] = $row['SourceLName'] . '-->' . $row['TargetLName']; $return[] = $row; } if (!$selected_exists || '' == $this->defaults['ORDER_TOWNS_SERVICE']) { $this->defaults['ORDER_TOWNS_SERVICE'] = $return[0]['Inc']; } } } } else { $return[] = array('Inc' => '0|0', 'Name' => '----', 'LName' => '----'); } return $return; } public function getORDER_HOTEL_SERVICE() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $return = array(); if ($this->defaults['ORDER_SERVICEINC'] > 0 && !$DATEBEG->is_null()) { list($orderTownFrom, $orderTownTo) = explode('|', $this->defaults['ORDER_TOWNS_SERVICE']); $offer = $this->prepareXML(0); $xml = $offer->claim_document(); $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_HotelService', [ 'DateBeg' => $DATEBEG, 'DateEnd' => $DATEBEG, 'TownFrom' => $orderTownFrom, 'TownTo' => $orderTownTo, 'Service' => $this->defaults['ORDER_SERVICEINC'], 'xml' => $xml, ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['ORDER_HOTEL_SERVICE'] || $numRows == 1); } else { $row['selected'] = false; } $row['Name'] = $row['Name'] . (($row['TownName'] !== '') ? ' (' . $row['TownName'] . ')' : ''); $row['LName'] = $row['LName'] . (($row['TownLName'] !== '') ? ' (' . $row['TownLName'] . ')' : ''); $return[] = $row; } if ($selected_exists && $numRows == 1) { $this->defaults['ORDER_HOTEL_SERVICE'] = $return[0]['Inc']; } } else { $return[] = array('Inc' => 0, 'Name' => '----', 'LName' => '----'); } } } else { $return[] = array('Inc' => 0, 'Name' => '----', 'LName' => '----'); } return $return; } public function getORDER_HOTELINC() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $DATEEND = $this->defaults['ORDER_DATEEND']; $return = array(); $return[] = array('Inc' => 0, 'Name' => '----', 'LName' => '----'); $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_hotel', [ 'Tour' => $this->defaults['TOURINC'], 'Town' => null, 'DateBeg' => $DATEBEG, 'DateEnd' => $DATEEND, ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['ORDER_HOTELINC'] || $numRows == 1); } else { $row['selected'] = false; } $row['Name'] = $row['Name'] . ' ' . $row['StarName']; $row['LName'] = $row['LName'] . ' ' . $row['StarLName']; unset($row['StarName'], $row['StarLName']); $return[] = $row; } if ($selected_exists && $numRows == 1) { $this->defaults['ORDER_HOTELINC'] = $return[1]['Inc']; } } } return $return; } public function getORDER_ROOMINC() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $DATEEND = $this->defaults['ORDER_DATEEND']; $return = array(); $return[] = array('Inc' => 0, 'Name' => '----', 'LName' => '----'); if ($this->defaults['ORDER_HOTELINC'] > 0 && !$DATEBEG->is_null() && !$DATEEND->is_null()) { $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_room', [ 'Tour' => $this->defaults['TOURINC'], 'Hotel' => $this->defaults['ORDER_HOTELINC'], 'DateBeg' => $DATEBEG, 'DateEnd' => $DATEEND, ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['ORDER_ROOMINC'] || $numRows == 1); } else { $row['selected'] = false; } $return[] = $row; } if ($selected_exists && $numRows == 1) { $this->defaults['ORDER_ROOMINC'] = $return[1]['Inc']; } } } } return $return; } public function getORDER_HTPLACEINC() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $DATEEND = $this->defaults['ORDER_DATEEND']; $tournights = $this->_tournights(); $return = array(); $return[] = array('Inc' => 0, 'Name' => '----', 'LName' => '----'); if ($this->defaults['ORDER_HOTELINC'] > 0 && !$DATEBEG->is_null() && !$DATEEND->is_null() && $this->defaults['ORDER_ROOMINC'] > 0) { $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_htplace', [ 'Tour' => $this->defaults['TOURINC'], 'Hotel' => $this->defaults['ORDER_HOTELINC'], 'DateBeg' => $DATEBEG, 'DateEnd' => $DATEEND, 'Room' => $this->defaults['ORDER_ROOMINC'], 'TourNights' => $tournights, ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['ORDER_HTPLACEINC'] || $numRows == 1); } else { $row['selected'] = false; } $return[] = $row; } if ($selected_exists && $numRows == 1) { $this->defaults['ORDER_HTPLACEINC'] = $return[1]['Inc']; } } } } return $return; } public function getORDER_MEALINC() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $DATEEND = $this->defaults['ORDER_DATEEND']; $return = array(); $return[] = array('Inc' => 0, 'Name' => '----', 'LName' => '----'); if ($this->defaults['ORDER_HOTELINC'] > 0 && !$DATEBEG->is_null() && !$DATEEND->is_null() && $this->defaults['ORDER_ROOMINC'] > 0 && $this->defaults['ORDER_HTPLACEINC'] > 0) { $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_meal', [ 'Tour' => $this->defaults['TOURINC'], 'Hotel' => $this->defaults['ORDER_HOTELINC'], 'DateBeg' => $DATEBEG, 'DateEnd' => $DATEEND, 'Room' => $this->defaults['ORDER_ROOMINC'], 'HtPlace' => $this->defaults['ORDER_HTPLACEINC'], ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['ORDER_MEALINC'] || $numRows == 1); } else { $row['selected'] = false; } $return[] = $row; } if ($selected_exists && $numRows == 1) { $this->defaults['ORDER_MEALINC'] = $return[1]['Inc']; } } } } return $return; } public function getHtPlacePCount() { if (null === $this->defaults['ORDER_HTPLACEINC']) { $this->defaults['ORDER_HTPLACEINC'] = Samo_Request::intval('ORDER_HTPLACEINC'); } if ($this->defaults['ORDER_HTPLACEINC'] > 0) { $sql = $this->db->formatExec($this->ONLINEDB . '.dbo.up_WEB_3_cl_wizard_HtPlaceInfo', ['INC' => $this->defaults['ORDER_HTPLACEINC']]); return $this->db->fetchRow($sql); } else { return array('PCount' => 0, 'Adult' => 0, 'Child' => 0, 'Infant' => 0); } } public function getORDER_TOWNFROM() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $tournights = $this->_tournights(); $return = array(); $return[] = array('Inc' => 0, 'Name' => '----', 'LName' => '----'); if (!$DATEBEG->is_null()) { $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_freight_townfrom', [ 'Tour' => $this->defaults['TOURINC'], 'DateBeg' => $DATEBEG, 'TourNights' => $tournights, ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['ORDER_TOWNFROM'] || $numRows == 1); } else { $row['selected'] = false; } $return[] = $row; } if ($selected_exists && $numRows == 1) { $this->defaults['ORDER_TOWNFROM'] = $return[1]['Inc']; } } } } return $return; } public function getORDER_TOWNTO() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $tournights = $this->_tournights(); $return = array(); $return[] = array('Inc' => 0, 'Name' => '----', 'LName' => '----'); if (!$DATEBEG->is_null() && $this->defaults['ORDER_TOWNFROM'] > 0) { $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_freight_townto', [ 'Tour' => $this->defaults['TOURINC'], 'DateBeg' => $DATEBEG, 'TownFrom' => $this->defaults['ORDER_TOWNFROM'], 'TourNights' => $tournights, ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['ORDER_TOWNTO'] || $numRows == 1); } else { $row['selected'] = false; } $return[] = $row; } if ($selected_exists && $numRows == 1) { $this->defaults['ORDER_TOWNTO'] = $return[1]['Inc']; } } } } return $return; } public function getORDER_CLASSINC() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $tournights = $this->_tournights(); $return = array(); $return[] = array('Inc' => 0, 'Name' => '----', 'LName' => '----'); if (!$DATEBEG->is_null() && $this->defaults['ORDER_TOWNFROM'] > 0 && $this->defaults['ORDER_TOWNTO'] > 0) { $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_class', [ 'Tour' => $this->defaults['TOURINC'], 'DateBeg' => $DATEBEG, 'TownFrom' => $this->defaults['ORDER_TOWNFROM'], 'TownTo' => $this->defaults['ORDER_TOWNTO'], 'TourNights' => $tournights, ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['ORDER_CLASSINC'] || $numRows == 1); } else { $row['selected'] = false; } $return[] = $row; } if ($selected_exists && $numRows == 1) { $this->defaults['ORDER_CLASSINC'] = $return[1]['Inc']; } } } } return $return; } public function getORDER_FRPLACEINC() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $tournights = $this->_tournights(); $return = array(); $return[] = array('Inc' => 0, 'Name' => '----', 'LName' => '----'); if (!$DATEBEG->is_null() && $this->defaults['ORDER_TOWNFROM'] > 0 && $this->defaults['ORDER_TOWNTO'] > 0 && $this->defaults['ORDER_CLASSINC'] > 0) { $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_frplace', [ 'Tour' => $this->defaults['TOURINC'], 'DateBeg' => $DATEBEG, 'TownFrom' => $this->defaults['ORDER_TOWNFROM'], 'TownTo' => $this->defaults['ORDER_TOWNTO'], 'Class' => $this->defaults['ORDER_CLASSINC'], 'TourNights' => $tournights, ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['ORDER_FRPLACEINC'] || $numRows == 1); } else { $row['selected'] = false; } $return[] = $row; } if ($selected_exists && $numRows == 1) { $this->defaults['ORDER_FRPLACEINC'] = $return[1]['Inc']; } } } } return $return; } public function getORDER_FREIGHTINC() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $tournights = $this->_tournights(); $return = array(); if (!$DATEBEG->is_null() && $this->defaults['ORDER_TOWNFROM'] > 0 && $this->defaults['ORDER_TOWNTO'] > 0 && $this->defaults['ORDER_CLASSINC'] > 0 && $this->defaults['ORDER_FRPLACEINC'] > 0) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_cl_wizard_freight', [ 'Tour' => $this->defaults['TOURINC'], 'DateBeg' => $DATEBEG, 'TownFrom' => $this->defaults['ORDER_TOWNFROM'], 'TownTo' => $this->defaults['ORDER_TOWNTO'], 'Class' => $this->defaults['ORDER_CLASSINC'], 'FrPlace' => $this->defaults['ORDER_FRPLACEINC'], 'TourNights' => $tournights, 'UserCode' => $this->internet_user(), ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['ORDER_FREIGHTINC'] || $numRows == 1); } else { $row['selected'] = false; } $day_delta = ((intval($row['TrgTime']) - intval($row['SrcTime'])) < 0) ? 1 : 0; $row['SrcTimeDelta'] = $row['delay']; $tmp = (int)$row['delay'] + (int)$row['days']; $row['TrgTimeDelta'] = ($tmp) ? $tmp : $day_delta; $row['SrcTime'] = $row['SrcTime'] . ($row['delay'] > 0 ? '+' . $row['delay'] : ''); $row['TrgTime'] = $row['TrgTime'] . ($row['TrgTimeDelta'] > 0 ? '+' . $row['TrgTimeDelta'] : ''); $return[] = $row; } if ($selected_exists && $numRows == 1) { $this->defaults['ORDER_FREIGHTINC'] = $return[0]['Inc']; } } } } return $return; } public function getFrPlacePCount() { $inc = $this->defaults['ORDER_FRPLACEINC']; if ($inc > 0) { $sql = $this->db->formatExec($this->ONLINEDB . '.dbo.up_WEB_3_cl_wizard_FrPlaceInfo', ['INC' => $inc]); return $this->db->fetchRow($sql); } else { return array('PCount' => 0, 'Adult' => 0, 'Child' => 0, 'Infant' => 0); } } public function getServType() { $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_servtype', ['Tour' => $this->defaults['TOURINC'],] ); if (false !== ($result = $this->db->fetchAll($sql))) { return $result; } $messages = Samo_Registry::get('messages'); throw new Samo_Exception($messages['CL_WIZARD_SERVTYPE_NOT_AVAILABLE']); } public function _sqlService($datebeg, $dateend, $servtype, $service = null) { return $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_4_cl_wizard_service', [ 'Tour' => $this->defaults['TOURINC'], 'DateBeg' => $datebeg, 'DateEnd' => $dateend, 'ServType' => $servtype, 'Service' => $service, ] ); } public function getORDER_SERVICEINC() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $return = array(); if ($DATEBEG->not_null() && $this->defaults['SERVTYPEINC'] > 0) { $sql = $this->_sqlService($DATEBEG, $DATEBEG, $this->defaults['SERVTYPEINC']); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['ORDER_SERVICEINC'] || $numRows == 1); } else { $row['selected'] = false; } $return[] = $row; } if ($selected_exists && $numRows == 1) { $this->defaults['ORDER_SERVICEINC'] = $return[0]['Inc']; } } } } return $return; } public function getORDER_INSUREINC() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $DATEEND = $this->defaults['ORDER_DATEEND']; $return = array(); if (!$DATEBEG->is_null() && !$DATEEND->is_null()) { $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_insure', [ 'Tour' => $this->defaults['TOURINC'], 'DateBeg' => $DATEBEG, 'DateEnd' => $DATEEND, 'Insure' => null, ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['ORDER_INSUREINC'] || $numRows == 1); } else { $row['selected'] = false; } $return[] = $row; } if ($selected_exists && $numRows == 1) { $this->defaults['ORDER_INSUREINC'] = $return[0]['Inc']; } } } } return $return; } public function getORDER_VISAINC() { $DATEBEG = $this->defaults['ORDER_DATEBEG']; $DATEEND = $this->defaults['ORDER_DATEEND']; $return = array(); if (!$DATEBEG->is_null() && !$DATEEND->is_null()) { $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_visa', [ 'Tour' => $this->defaults['TOURINC'], 'DateBeg' => $DATEBEG, 'DateEnd' => $DATEEND, 'VisaPr' => null, ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $selected_exists = false; while (false !== ($row = $this->db->fetchRow($res))) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $this->defaults['ORDER_VISAINC'] || $numRows == 1); } else { $row['selected'] = false; } $return[] = $row; } if ($selected_exists && $numRows == 1) { $this->defaults['ORDER_VISAINC'] = $return[0]['Inc']; } } } } return $return; } public function _tournights() { $result = 0; $DATE_BEG = Samo_Datetime::parse($_SESSION['cl_wizard']['DATE_BEG']); $DATE_END = Samo_Datetime::parse($_SESSION['cl_wizard']['DATE_END']); if ($DATE_BEG->not_null() && $DATE_END->not_null()) { $result = $DATE_END->diff($DATE_BEG); } return ($result > 0) ? $result : 1; } public function getPrice(&$return, &$errorMessage) { return $this->_calc(0, $return, $errorMessage); } public function getBron(&$return, &$errorMessage) { $calc_result = $this->_calc(1, $return, $errorMessage); if ($calc_result) { $this->callback($return); } return $calc_result; } protected function people_count($human = null) { $count = 0; if (null == $human && isset($_SESSION['cl_wizard']['TOURIST'])) { $count = count($_SESSION['cl_wizard']['TOURIST']); } else { foreach ($_SESSION['cl_wizard']['TOURIST'] as $people) { if ($people['HUMAN'] == $human) { $count++; } } } return $count; } public function getPacketInfo() { if (!$this->packetinfo) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_4_cl_wizard_TourInfo', [ 'Tour' => $this->defaults['TOURINC'], ] ); $row = $this->db->fetchRow($sql); $frplace = $row['frplace']; $this->fareonline = $row['fareonline']; $packetInfo = Samo_Loader::load_object('Packet_Info', $this->config); $packetInfo->load_from_array( array( 'TourInc' => $this->defaults['TOURINC'], 'TownFromInc' => $this->defaults['TOWNFROM'], 'StateInc' => $this->defaults['STATE'], 'StateFromInc' => $row['StateFromInc'], 'Spog' => null, 'PeopleCount' => $this->people_count(), 'Nights' => $this->_tournights(), 'CheckIn' => Samo_Datetime::parse($_SESSION['cl_wizard']['DATE_BEG']), 'CheckOut' => Samo_Datetime::parse($_SESSION['cl_wizard']['DATE_END']), 'TotalCommission' => 0, 'Adult' => $this->people_count('MRS') + $this->people_count('MR'), 'Child' => $this->people_count('CHD'), 'Infant' => $this->people_count('INF'), 'Cat_Claim_Inc' => null, 'AGE1' => null, 'AGE2' => null, 'AGE3' => null, 'FrplaceInc' => $frplace, ) ); $this->packetinfo = $packetInfo; } return $this->packetinfo; } public function prepareXML($save = 0) { $save = ($save !== 0) ? 1 : 0; $packetInfo = $this->getPacketInfo(); $offer = Samo_Loader::load_object('Bron_Claim', $this->config, $packetInfo, $save); if (isset($_SESSION['cl_wizard']['TOURIST']) && count($_SESSION['cl_wizard']['TOURIST']) > 0) { foreach ($_SESSION['cl_wizard']['TOURIST'] as $inc => $tourist) { $people = Samo_Loader::load_object('Samo_People', $this->config, $packetInfo, $save); $tourist['inc'] = $inc; $people->load_from_cl_wizard($tourist); $offer->add_people($people); } } $order_counter = 0; if (isset($_SESSION['cl_wizard']['ORDER']) && count($_SESSION['cl_wizard']['ORDER']) > 0) { foreach ($_SESSION['cl_wizard']['ORDER'] as $order) { $order_counter++; $clients = array(); $people_groups = explode('|', $order['OPEOPLE']); foreach ($people_groups as $common => $group) { $peoples = explode(',', $group); foreach ($peoples as $people) { if ($people > 0) { $clients[] = array('peopleKey' => $people, 'common' => $common); } } } $common_params = array( 'id' => $order_counter , 'type' => $order['ORDER_TYPE'] , 'datebeg' => Samo_Datetime::parse($order['ORDER_DATEBEG']) , 'dateend' => Samo_Datetime::parse($order['ORDER_DATEEND']) , 'clients' => $clients , 'count' => $order['ORDER_COUNT'] , 'addinfant' => $order['ORDER_ADD_INFANT'] ); switch ($order['ORDER_TYPE']) { case 'H': $order_specific = array( 'key' => $order['ORDER_HOTELINC'] , 'roomKey' => $order['ORDER_ROOMINC'] , 'htplaceKey' => $order['ORDER_HTPLACEINC'] , 'mealKey' => $order['ORDER_MEALINC'] ); break; case 'F': $order_specific = array( 'key' => $order['ORDER_FREIGHTINC'] , 'classKey' => $order['ORDER_CLASSINC'] , 'frplaceKey' => $order['ORDER_FRPLACEINC'] , 'fareKey' => $this->fareonline ); break; case 'S': $towns = explode('|', $order['ORDER_TOWNS_SERVICE']); if (2 == count($towns)) { $SERVICE_TOWNFROM = $towns[0]; $SERVICE_TOWNTO = $towns[1]; } else { $SERVICE_TOWNFROM = $SERVICE_TOWNTO = $order['ORDER_TOWNS_SERVICE']; } $order_specific = array( 'key' => $order['ORDER_SERVICEINC'] , 'uid' => $order['uid'] , 'hotel_uid' => isset($order['hotel_uid']) ? $order['hotel_uid'] : null , 'hotelKey' => $order['ORDER_HOTEL_SERVICE'] , 'departureTownKey' => $SERVICE_TOWNFROM , 'arrivalTownKey' => $SERVICE_TOWNTO , 'serviceTypeKey' => $order['servtype_inc'] , 'serviceCategoryKey' => $order['servcategory_inc'] , 'routeIndex' => $order['routeindex'] , 'roomKey' => $order['service_roominc'] , 'mealKey' => $order['service_mealinc'] , 'transportCompanyKey' => $order['AirlineInc'] , 'transportKey' => $order['FreightInc'] , 'classKey' => $order['ClassInc'] ); break; case 'I': $order_specific = array( 'key' => $order['ORDER_INSUREINC'] ); break; case 'V': $order_specific = array( 'key' => $order['ORDER_VISAINC'] ); break; } $_order = Samo_Loader::load_object('Bron_Order', $this->config, $packetInfo, $save); $params = array_merge($common_params, $order_specific); $_order->load_from_array($params); $offer->add_order($_order); } } $note = (isset($_SESSION['NOTE'])) ? $_SESSION['NOTE'] : ''; $offer->note = $note; $offer->noteclaim = $note; if (false !== ($partpass = $this->getPartPassInc())) { $offer->partpass = $partpass; } $offer->mediator = $this->claim_mediator(); $offer->calctype = (int)$this->defaults['STATUS_RASCHETNAYA']; $offer->nights = $this->_tournights(); $offer->log_priority = 'cl_wizard'; return $offer; } protected function _calc($save = 0, &$return, &$errorMessage) { $offer = $this->prepareXML($save); if (false !== ($res = $this->GetServiceAvailable($save))) { $packetInfo = $this->getPacketInfo(); $order_counter = count($_SESSION['cl_wizard']['ORDER']); foreach ($res as $row) { if ($row['ServicePrivate']) { $order_counter++; $clients = array(); $clients_str = $this->_service_clients($row['Peoples'], $service_count); $people_groups = explode('|', $clients_str); foreach ($people_groups as $common => $group) { $peoples = explode(',', $group); foreach ($peoples as $people) { if ($people > 0) { $clients[] = array('peopleKey' => $people, 'common' => $common); } } } $common_params = array( 'id' => $order_counter , 'type' => 'S' , 'datebeg' => Samo_Datetime::parse($row['DateBeg']) , 'dateend' => Samo_Datetime::parse($row['DateEnd']) , 'clients' => $clients , 'count' => $service_count , 'addinfant' => 0 ); $towns = explode('|', $row['SrcTownInc'] . '|' . $row['TrgTownInc']); if (2 == count($towns)) { $SERVICE_TOWNFROM = $towns[0]; $SERVICE_TOWNTO = $towns[1]; } else { $SERVICE_TOWNFROM = $SERVICE_TOWNTO = $row['SrcTownInc'] . '|' . $row['TrgTownInc']; } $uid = Samo_Utils::randomString(20); $order_specific = array( 'key' => $row['ServiceInc'] , 'uid' => $uid , 'hotel_uid' => isset($row['hotel_uid']) ? $row['hotel_uid'] : null , 'hotelKey' => $row['HotelInc'] , 'departureTownKey' => $SERVICE_TOWNFROM , 'arrivalTownKey' => $SERVICE_TOWNTO , 'serviceTypeKey' => $row['ServiceTypeInc'] , 'serviceCategoryKey' => $row['ServiceCategoryInc'] , 'routeIndex' => $row['RouteIndex'] , 'roomKey' => $row['RoomInc'] , 'mealKey' => $row['MealInc'] , 'transportCompanyKey' => $row['AirlineInc'] , 'transportKey' => $row['FreightInc'] , 'classKey' => $row['ClassInc'] ); $_order = Samo_Loader::load_object('Bron_Order', $this->config, $packetInfo, $save); $params = array_merge($common_params, $order_specific); $_order->load_from_array($params); $offer->add_order($_order); } } } try { if ($save) { $offer->packetInfo()->checkBronIsPossible(); } $calc_result = $offer->calc_save($save, $return, $errorMessage); } catch (Bron_Exception $e) { $errorMessage = $e->getMessage(); return false; } if ($return === false) { $messages = Samo_Registry::get('messages'); throw new Bron_Exception($messages['BRON_CALC_ERROR']); } else { $_SESSION['cl_wizard']['PRICE'] = $return; } return $calc_result; } public function check_Tourist_Fields(&$res) { foreach ($_SESSION['cl_wizard']['TOURIST'] as $inc => $tourist) { try { $this->loadPeople($inc, $tourist, true); } catch (Samo_People_Exception $e) { foreach ($e->getErrors() as $error => $null) { $res[] = $error; } } } return (count($res)) ? false : true; } public function check_AllOrder_Stop(&$res) { $flag = true; if (isset($_SESSION['cl_wizard']) && isset($_SESSION['cl_wizard']['ORDER'])) { foreach ($_SESSION['cl_wizard']['ORDER'] as $order) { if ($order['ORDER_TYPE'] == 'H' || $order['ORDER_TYPE'] == 'F') { $ph = array(); $ppls = preg_split('/[|,]/', $order['OPEOPLE']); foreach ($ppls as $ppl) { if ((int)$ppl > 0) { $ph[$ppl] = $ppl; $flag = false; } } if (count($ph) == 0) { $res[] = $this->messages['CL_W_ORDER_HOTEL_WITHOUT_PEOPLES']; } } } if ($flag) { $res[] = $this->messages['CL_W_NO_HOTEL_OR_TRANSPORT']; } } else { $res[] = $this->messages['CL_W_ORDERS_EMPTY']; } return (count($res)) ? false : true; } public function check_AllOrder_Warning(&$res) { return (count($res)) ? false : true; } public function getOrderPacket() { $DATEBEG = Samo_Datetime::parse($_SESSION['cl_wizard']['DATE_BEG']); $DATEEND = Samo_Datetime::parse($_SESSION['cl_wizard']['DATE_END']); $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_Load_Packet', [ 'Tour' => $this->defaults['TOURINC'], 'DateBeg' => $DATEBEG, 'DateEnd' => $DATEEND, ] ); if (false !== ($res = $this->db->query($sql))) { if (($numRows = $this->db->numRows($res))) { $opeople = implode('|', array_keys($_SESSION['cl_wizard']['TOURIST'])); while (false !== ($row = $this->db->fetchRow($res))) { $return = array(); $this->defaults['ORDER_INC'] = $_SESSION['cl_wizard']['ORDERINC'] = $_SESSION['cl_wizard']['ORDERINC'] + 1; switch ($row['OrderType']) { case 'S': $sql = $this->_sqlService($DATEBEG, $DATEEND, null, $row['Inc']); if (false !== ($req = $this->db->fetchRow($sql))) { $return = array( 'inc' => $this->defaults['ORDER_INC'], 'ORDER_TYPE' => 'S', 'ORDER_ADD_INFANT' => 0, 'ORDER_COUNT' => count($_SESSION['cl_wizard']['TOURIST']), 'ORDER_DATEBEG' => $_SESSION['cl_wizard']['DATE_BEG'], 'ORDER_DATEEND' => $_SESSION['cl_wizard']['DATE_END'], 'pcount' => 1, 'adult' => 1, 'child' => 0, 'infant' => 0, 'ORDER_SERVICEINC' => $req['Inc'], 'servtype_inc' => $req['ServTypeInc'], 'servtype_name' => $req['ServTypeLName'], 'service_name' => $req['LName'], 'trantype_name' => $req['TrantypeLName'], 'source_name' => $req['TownSourceLName'], 'target_name' => $req['TownTargetLName'], 'OPEOPLE' => $opeople, ); } break; case 'I': $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_insure', [ 'Tour' => $this->defaults['TOURINC'], 'DateBeg' => $DATEBEG, 'DateEnd' => $DATEEND, 'Insure' => null, ] ); if (false !== ($req = $this->db->fetchRow($sql))) { $return = array( 'inc' => $this->defaults['ORDER_INC'], 'ORDER_TYPE' => 'I', 'ORDER_ADD_INFANT' => 0, 'ORDER_COUNT' => count($_SESSION['cl_wizard']['TOURIST']), 'ORDER_DATEBEG' => $_SESSION['cl_wizard']['DATE_BEG'], 'ORDER_DATEEND' => $_SESSION['cl_wizard']['DATE_END'], 'pcount' => 1, 'adult' => 1, 'child' => 0, 'infant' => 0, 'ORDER_INSUREINC' => $req['Inc'], 'insure_name' => $req['LName'], 'partner_name' => $req['PartnerLName'], 'state_name' => $req['StateLName'], 'state_inc' => $req['StateInc'], 'OPEOPLE' => $opeople, ); } break; case 'V': $sql = $this->db->formatExec( $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_cl_wizard_visa', [ 'Tour' => $this->defaults['TOURINC'], 'DateBeg' => $DATEBEG, 'DateEnd' => $DATEEND, 'VisaPr' => $row['Inc'], ] ); if (false !== ($req = $this->db->fetchRow($sql))) { $return = array( 'inc' => $this->defaults['ORDER_INC'], 'ORDER_TYPE' => 'V', 'ORDER_ADD_INFANT' => 0, 'ORDER_COUNT' => count($_SESSION['cl_wizard']['TOURIST']), 'ORDER_DATEBEG' => $_SESSION['cl_wizard']['DATE_BEG'], 'ORDER_DATEEND' => $_SESSION['cl_wizard']['DATE_END'], 'pcount' => 1, 'adult' => 1, 'child' => 0, 'infant' => 0, 'ORDER_VISAINC' => $req['Inc'], 'visa_name' => $req['LName'], 'days' => $req['Days'], 'state_name' => $req['StateLName'], 'OPEOPLE' => $opeople, ); } break; } if (count($return) > 0) { $_SESSION['cl_wizard']['ORDER'][$this->defaults['ORDER_INC']] = $return; } } } } return true; } private function _service_clients($str, &$service_count) { $clients_orig = simplexml_load_string($str); $clients_str = ''; $service_count = count($clients_orig); foreach ($clients_orig as $client) { $attr = (array)$client->attributes(); $attr = reset($attr); $clients_str .= ($clients_str == '' ? '' : '|') . (int)$attr['peopleKey']; } return $clients_str; } public function GetServiceAvailable($save) { $offer = $this->prepareXML($save); $xml = $offer->claim_document(); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_4_cl_wizard_GetServiceAvailable', [ 'ClaimDocument' => $xml, 'developer' => 0, ] ); $result = $this->db->fetchAll($sql); return $result; } public function reloadServices() { $return = array(); if (false !== ($res = $this->GetServiceAvailable(0))) { foreach ($res as $row) { if ($row['Error'] && $row['Errormessage']) { $return['error'][] = $row; if ($_SESSION['cl_wizard']['ORDER']) { foreach ($_SESSION['cl_wizard']['ORDER'] as $key => &$order) { if ($order['ORDER_TYPE'] == 'S' && $order['uid'] == $row['uid']) { unset($_SESSION['cl_wizard']['ORDER'][$key]); } } } } elseif ($row['auto_added']) { if (!$row['ServicePrivate']) { $clients_str = $this->_service_clients($row['Peoples'], $service_count); $return['auto_added'][] = $row; $_SESSION['cl_wizard']['ORDERINC']++; $order_inc = $_SESSION['cl_wizard']['ORDERINC']; $uid = Samo_Utils::randomString(20); $_SESSION['cl_wizard']['ORDER'][$order_inc] = array( 'ORDER_TYPE' => 'S', 'inc' => $order_inc, 'uid' => $uid, 'hotel_uid' => $row['hotel_uid'], 'ORDER_ADD_INFANT' => 0, 'ORDER_COUNT' => $service_count, 'ORDER_DATEBEG' => $row['DateBeg'], 'ORDER_DATEEND' => $row['DateEnd'], 'pcount' => 1, 'adult' => 1, 'child' => 0, 'infant' => 0, 'ORDER_SERVICEINC' => $row['ServiceInc'], 'ORDER_TOWNS_SERVICE' => $row['SrcTownInc'] . '|' . $row['TrgTownInc'], 'ORDER_HOTEL_SERVICE' => $row['HotelInc'], 'servtype_inc' => $row['ServiceTypeInc'], 'servtype_name' => $row['ServiceTypeLName'], 'service_name' => $row['ServiceLName'], 'trantype_name' => $row['TranTypeLName'], 'source_name' => $row['SrcTownLName'], 'target_name' => $row['TrgTownLName'], 'service_hotel_name' => $row['HotelLName'], 'servcategory_inc' => $row['ServiceCategoryInc'], 'routeindex' => $row['RouteIndex'], 'service_roominc' => $row['RoomInc'], 'service_mealinc' => $row['MealInc'], 'AirlineInc' => $row['AirlineInc'], 'FreightInc' => $row['FreightInc'], 'ClassInc' => $row['ClassInc'], 'OPEOPLE' => $clients_str, 'auto_added' => 1, ); } } elseif ($row['service_changed']) { if ($_SESSION['cl_wizard']['ORDER']) { foreach ($_SESSION['cl_wizard']['ORDER'] as $key => &$order) { if ($order['ORDER_TYPE'] == 'S' && $order['uid'] == $row['uid']) { $clients_str = $this->_service_clients($row['Peoples'], $service_count); if ( $order['ORDER_DATEBEG'] != $row['DateBeg'] || $order['ORDER_DATEEND'] != $row['DateEnd'] || $order['ORDER_TOWNS_SERVICE'] != $row['SrcTownInc'] . '|' . $row['TrgTownInc'] || $order['ORDER_HOTEL_SERVICE'] != $row['HotelInc'] || $order['routeindex'] != $row['RouteIndex'] || $order['service_roominc'] != $row['RoomInc'] || $order['service_mealinc'] != $row['MealInc'] || $order['OPEOPLE'] != $clients_str ) { $return['service_changed'][] = $row; } $order['ORDER_ADD_INFANT'] = 0; $order['ORDER_COUNT'] = $service_count; $order['ORDER_DATEBEG'] = $row['DateBeg']; $order['ORDER_DATEEND'] = $row['DateEnd']; $order['pcount'] = 1; $order['adult'] = 1; $order['child'] = 0; $order['infant'] = 0; $order['ORDER_SERVICEINC'] = $row['ServiceInc']; $order['ORDER_TOWNS_SERVICE'] = $row['SrcTownInc'] . '|' . $row['TrgTownInc']; $order['ORDER_HOTEL_SERVICE'] = $row['HotelInc']; $order['servtype_inc'] = $row['ServiceTypeInc']; $order['servtype_name'] = $row['ServiceTypeLName']; $order['service_name'] = $row['ServiceLName']; $order['trantype_name'] = $row['TranTypeLName']; $order['source_name'] = $row['SrcTownLName']; $order['target_name'] = $row['TrgTownLName']; $order['service_hotel_name'] = $row['HotelLName']; $order['servcategory_inc'] = $row['ServiceCategoryInc']; $order['routeindex'] = $row['RouteIndex']; $order['service_roominc'] = $row['RoomInc']; $order['service_mealinc'] = $row['MealInc']; $order['AirlineInc'] = $row['AirlineInc']; $order['FreightInc'] = $row['FreightInc']; $order['ClassInc'] = $row['ClassInc']; $order['OPEOPLE'] = $clients_str; } } } } } } return $return; } } 