<?php
 class Credit_Europe_Bank_Model extends Samo_Acquiring { protected $moduleName = 'credit_europe_bank'; protected $bankInc = null; protected $bankAlias = null; const CURRENCY = 643; public function __construct() { parent::__construct(); $this->bankInc = $this->acquiringConfig('CREDIT_EUROPE_BANK_SAMO_INC'); $this->bankAlias = $this->acquiringConfig('CREDIT_EUROPE_BANK_SAMO_LOGIN'); if (null == $this->bankInc || null === $this->bankAlias) { throw new Samo_Exception(get_called_class() . ' was not configured', 501); } } public function getHiddenFields() { return array( 'clientid' => $this->acquiringConfig('CREDIT_EUROPE_BANK_CLIENT_ID'), 'storetype' => '3d_pay_hosting', 'islemtipi' => 'Auth', 'currency' => self::CURRENCY, 'taksit' => '', 'oid' => '', 'rnd' => '', 'hash' => '', 'okUrl' => '', 'failUrl' => '', 'encoding' => 'windows-1251', 'description' => '', 'refreshtime' => '15', ); } public function getFormAction() { return $this->acquiringConfig('CREDIT_EUROPE_BANK_PAY_URL'); } public function makeFormData() { $invoice = $this->getInvoice(); $amount = Samo_Request::floatval('amount'); $clientid = $this->acquiringConfig('CREDIT_EUROPE_BANK_CLIENT_ID'); $rnd = uniqid(); $oid = $invoice['inumber']; $okUrl = $this->makeOkURL($invoice['inumber']); $failUrl = $this->makeFailURL($invoice['inumber']); $taksit = ''; $islemtipi = 'Auth'; $storekey = $this->acquiringConfig('CREDIT_EUROPE_BANK_STOREKEY'); $hashStr = $clientid . $oid . $amount . $okUrl . $failUrl . $islemtipi . $taksit . $rnd . $storekey; $hash = base64_encode(pack('H*', sha1($hashStr))); $this->createCheckOrderStatusJob( '$result = Credit_Europe_Bank_Model::checkOrderStatusJob(\'' . $oid . '\', \'' . $this->defaults['CLAIM'] . '\'); return $result;' , 24 * 3600 ); self::__log($oid, 'Job created'); return array( 'rnd' => $rnd, 'oid' => $oid, 'hash' => $hash, 'description' => sprintf($this->messages['ACQUIRING_PAYMENT_PURPOSE'], $this->defaults['CLAIM']), 'okUrl' => $okUrl, 'failUrl' => $failUrl, ); } public function parseCallback() { $error = true; if (Samo_Request::find('RESULT') == 'OK' && Samo_Request::find('Response') == 'Approved') { if (($inumber = Samo_Request::find('ReturnOid')) && ($hashParamsVal = Samo_Request::find('HASHPARAMSVAL')) && ($hash = Samo_Request::find('HASH')) ) { $needHash = base64_encode(pack('H*', sha1($hashParamsVal . $this->acquiringConfig('CREDIT_EUROPE_BANK_STOREKEY')))); if ($needHash && $needHash == $hash) { $error = !self::confirmOrder($this->bankAlias, $inumber); } } } return $error ? 'FAIL' : 'OK'; } public function pay_variant($claim) { $claim; if ($this->is_module_installed('credit_europe_bank')) { return true; } return false; } protected static function __log($orderId, $what) { if (!defined('CREDIT_EUROPE_BANK_LOG') || !CREDIT_EUROPE_BANK_LOG) { return false; } $what = date('Y-m-d H:i:s') . ' [' . $orderId . ']' . PHP_EOL . (is_scalar($what) ? $what : var_export($what, true)) . PHP_EOL . PHP_EOL; try { if (!file_exists(CREDIT_EUROPE_BANK_LOG) && touch(CREDIT_EUROPE_BANK_LOG)) { $umask = umask(0); chmod(CREDIT_EUROPE_BANK_LOG, 0666); umask($umask); } file_put_contents(CREDIT_EUROPE_BANK_LOG, $what, FILE_APPEND); } catch (Exception $e) { $e; } return true; } public static function checkOrderStatusJob($orderId, $claimInc) { self::__log($orderId, 'Trying to check ...'); try { $samo = Samo_Loader::load_object('Samo_Environment'); $samo->save(); $db = db_connect(null, null); if (!$claimInc) { self::__log($orderId, 'Getting claim number ...'); $sql = $db->formatExec('<BANKDB>.dbo.up_GetInvoiceClaim', ['IId' => @$orderId]); $invdetail = $db->fetchOneRow($sql); $claimInc = $invdetail['Claim']; if (!$claimInc) { throw new Samo_Exception('Can not find claim number'); } self::__log($orderId, 'Claim: '. $claimInc); } $model = Samo_Loader::load_object('Credit_Europe_Bank_Model'); $model->defaults['CLAIM'] = $claimInc; $model->updateOrderStatus($orderId); } catch (Exception $e) { self::__log($orderId, 'Exception with message:' . PHP_EOL . $e->getMessage()); throw $e; } self::__log($orderId, 'Bye!'); return true; } public static function checkOrderStatus($orderId) { self::checkOrderStatusJob($orderId, null); } public function updateOrderStatus($orderId) { $post = new Andr_Xml('<CC5Request/>'); $post->addChilds( array( 'Name' => $this->acquiringConfig('CREDIT_EUROPE_BANK_API_LOGIN'), 'Password' => $this->acquiringConfig('CREDIT_EUROPE_BANK_API_PASSWORD'), 'ClientId' => $this->acquiringConfig('CREDIT_EUROPE_BANK_CLIENT_ID'), 'OrderId' => $orderId, ) ); $post->addChild('Extra')->addChild('ORDERSTATUS', 'QUERY'); $post = 'DATA=' . urlencode('<?xml version="1.0" encoding="windows-1251"?>' . $post->asXml()); $url = $this->acquiringConfig('CREDIT_EUROPE_BANK_API_STATUS_URL'); self::__log($orderId, 'URL: ' . $url . PHP_EOL . "POST: " . $post); $res = Samo_Curl::request($url,$post); self::__log($orderId, 'Response: ' . PHP_EOL . $res); $res = new Andr_Xml($res); if (!isset($res->ProcReturnCode)) { $code = '99'; } else { $code = (string)$res->ProcReturnCode; } self::__log($orderId, 'Response code: ' . $code); if ($code == '99') { throw new Samo_Exception((string)$res->ErrMsg); } if ($code == '00' && trim((string)$res->Response) == 'Approved') { self::__log($orderId, 'Trying to confirm ...'); self::confirmOrder($this->acquiringConfig('CREDIT_EUROPE_BANK_SAMO_LOGIN'), $orderId); self::__log($orderId, 'Confirmation is ok'); } } } 