<?php
 class Fondy_Model extends Samo_Acquiring { protected $moduleName = 'fondy'; public function __construct() { $inc = $this->acquiringConfig('FONDY_SAMO_INC'); $login = $this->acquiringConfig('FONDY_SAMO_ALIAS'); if ($inc && $login) { parent::__construct(); $this->bankInc = $inc; $this->bankAlias = $login; } else { if ($this->is_module_installed('fondy')) { throw new Samo_Exception(get_called_class() . ' was not configured', 501); } } } public function getFormAction() { return Fondy::PAY_URL; } public function getHiddenFields() { return [ 'order_id' => '', 'amount' => '', 'merchant_id' => '', 'order_desc' => '', 'currency' => '', 'signature' => '', 'preauth' => '', 'merchant_data' => '', 'response_url' => '' ]; } public static function getFondy() { $merchantID = self::acquiringConfig('FONDY_MERCHANT_ID'); $password = self::acquiringConfig('FONDY_PASSWORD'); return Samo_Loader::load_object('Fondy', $merchantID, $password); } public function makeFormData() { $fondy = static::getFondy(); $invoice = $this->getInvoice(); $inumber = $invoice['inumber']; $amount = $this->_amount; $res = $fondy->getFormData($inumber, $amount, $this->acquiringConfig('FONDY_CURRENCY'), 'Pay for claim N'.$this->_claim, $this->makeOkURL($inumber), $this->acquiringConfig('FONDY_PREAUTH')); $this->createCheckOrderStatusJob('return Fondy_Model::processOrderStatus(\'' . $inumber . '\');'); return $res; } public static function processOrderStatus($inumber) { $fondy = static::getFondy(); try { if ($status = $fondy->getStatus($inumber)) { switch ($status) { case 'hold': static::setHoldInvoiceByINumber(static::acquiringConfig('FONDY_SAMO_ALIAS'), $inumber); return true; break; case 'processing': case 'created': $ttl = static::acquiringConfig('FONDY_PAY_TTL'); if ($ttl) { $data = static::getInvoiceInfo($inumber); if (isset($data['IDateTime'])) { $now = Samo_Datetime::now()->getDateTime()->getTimestamp(); $date = $data['IDateTime']->getDateTime()->getTimestamp(); $diff = ($now - $date) / 60; if ($diff > static::acquiringConfig('FONDY_PAY_TTL')) { return true; } } } return false; break; case 'expired': case 'declined': case 'reversed': return true; break; case 'approved': self::confirmOrder(static::acquiringConfig('FONDY_SAMO_ALIAS'), $inumber); return true; break; } } } catch (Fondy_Exception $e) { if ($e->getCode() == 1018) { return true; } throw $e; } return true; } public function _capture($invoice) { $fondy = $this->getFondy(); $status = $fondy->capture($invoice['INumber'], $invoice['RubSum'], $this->acquiringConfig('FONDY_CURRENCY')); return $status == 'captured'; } public function _reverse($invoice) { $fondy = $this->getFondy(); $status = $fondy->reverse($invoice['INumber'], $invoice['RubSum'], $this->acquiringConfig('FONDY_CURRENCY')); return $status == 'approved'; } } 