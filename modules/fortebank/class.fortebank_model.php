<?php
 class Fortebank_Model extends Samo_Acquiring { protected $moduleName = 'fortebank'; public function __construct() { if (defined('FORTEBANK_SAMO_INC') && defined('FORTEBANK_SAMO_LOGIN')) { parent::__construct(); $this->bankInc = FORTEBANK_SAMO_INC; $this->bankAlias = FORTEBANK_SAMO_LOGIN; } else { if ($this->is_module_installed($this->moduleName)) { throw new Samo_Exception(get_called_class() . ' was not configured', 501); } } } private static function _aparams() { $merchantid = self::acquiringConfig('FORTEBANK_MERCHANTID'); $service_url = self::acquiringConfig('FORTEBANK_SERVICE_URL'); return [ 'URL' => $service_url, 'MERCHANTID' => $merchantid, ]; } public function makeFormData() { $claim = $this->defaults['CLAIM']; $invoice = $this->getInvoice(); $inumber = $invoice['inumber']; $amount = Samo_Request::floatval('amount'); $paySystem = Samo_Loader::load_object('ForteBank'); $lang = self::acquiringConfig('FORTEBANK_LANG'); $currency = self::acquiringConfig('FORTEBANK_CURRENCY'); $aParams = $this->_aparams(); $aParams['iSamoPayId'] = $inumber; $aParams['fPrice'] = $amount; $aParams['sDescription'] = 'Payment reservation: ' . $claim; $aParams['sReturnUrl'] = $this->getReturnURL(); $aParams['sLang'] = $lang; $aParams['sCurrencyId'] = $currency; $log = [ 'partpass' => $this->getPartPassInc(), 'sql' => '', 'claim' => $claim, 'message' => 'PAY', 'priority' => $this->moduleName, 'result' => [ 'input_params' => $aParams, ], ]; $msgid = $this->db->web_log_table($log); $payResult = $paySystem->Pay($aParams); $log['result']['resultset'] = $payResult; $this->db->web_log_table($log, $msgid); if (is_array($payResult) && isset($payResult['code']) && $payResult['code'] != $paySystem::PAY_OK) { throw new Samo_Exception(strval(Samo_String::set($payResult['status'])->ansi())); } $this->createCheckOrderStatusJob('return Fortebank_Model::processOrderStatus("' . $inumber . '", "' . base64_encode(json_encode($payResult)) . '");'); return (isset($payResult['redirect']) && !empty($payResult['redirect'])) ? $payResult['redirect'] : $payResult['paySystemData']; } public static function processOrderStatus($inumber, $data) { $paySystemConf = self::_aparams(); $ps = Samo_Loader::load_object('ForteBank'); $params = json_decode(base64_decode($data), true) + $paySystemConf; $payStatus = $ps->PayStatus($params); $return = false; switch ($payStatus['code']) { case $ps::PAY_STATUS_INT_PAYED: self::confirmOrder(FORTEBANK_SAMO_LOGIN, $inumber); $return = true; break; case $ps::PAY_STATUS_INT_WAIT: break; case $ps::PAY_STATUS_INT_CANCEL: $return = true; break; case $ps::PAY_STATUS_INT_HOLD: static::setHoldInvoiceByINumber(FORTEBANK_SAMO_LOGIN, $inumber); $return = true; break; case $ps::PAY_STATUS_INT_ERROR: throw new Samo_Exception(strval(Samo_String::set($payStatus['status'])->ansi())); default: throw new Samo_Exception('Unexpected payStatus["code"] : ' . var_export($payStatus['code'], true)); }; return $return; } public function pay_variant($claim) { if (parent::pay_variant($claim)) { if ($this->pay_variant_check_owner($claim, $this->moduleName)) { return true; } } return false; } } 