<?php
 class Freight_changes_Model extends Samo_Tourinfo { public function construct() { $this->townfrom(Samo_Utils::ifs(Samo_Request::intval('TOWNFROMINC'), null)); $this->state(Samo_Utils::ifs(Samo_Request::intval('STATEINC'), null)); $this->defaults['CHECKIN'] = Samo_Request::date('CHECKIN', Samo_Datetime::today(), Samo_Datetime::parse('+2 year')); } public function result() { $sql = $this->db->formatExec( $this->ONLINEDB . '.dbo.up_WEB_3_frchanges_list', [ 'TownFrom' => $this->townFrom(), 'State' => $this->state(), 'Tour' => $this->defaults['TOURINC'], 'CheckIn' => $this->defaults['CHECKIN'], ] ); $result = $this->db->fetchAll($sql); return ($result) ? $result : array(); } public function getCHECKIN() { return $this->_getCHECKIN('CHECKIN'); } public function getSTATEINC() { $params = [ 'TownFrom' => $this->townFrom(), 'Order_By_Name' => $this->getConfig('STATE_ORDER_BY_NAME'), ]; $cache_key = __METHOD__ . serialize($params); if (!$states = $this->cache->get($cache_key)) { $sql = $this->db->formatExec('<ONLINEDB>.dbo.up_WEB_4_frchanges_states', $params); $states = Samo_Utils::ifs($this->db->fetchAll($sql), array()); $this->cache->set($cache_key, $states); } $selected_exists = false; foreach ($states as &$state) { $selected = false; if (!$selected_exists && $state['id'] == $this->state()) { $selected_exists = $selected = true; } $state['selected'] = $selected; $state['attributes'] = isset($state['searchTerms']) ? ['data-search-string' => $state['searchTerms']] : null; } if (empty($states)) { $states[] = ['id' => 0, 'name' => str_repeat('&mdash;', 10), 'selected' => false]; } elseif (!$selected_exists) { $this->state($states[0]['id']); } return $states; } public function getTOWNFROMINC() { $_order_by = $this->getConfig('TOWN_ORDER_BY_NAME'); $cache_key = __METHOD__ . $_order_by; if (!$towns = $this->cache->get($cache_key)) { $sql = $this->db->formatExec('<ONLINEDB>.dbo.up_WEB_4_frchanges_townFroms', ['Order_By_Name' => $_order_by]); $towns = Samo_Utils::ifs($this->db->fetchAll($sql), array()); $this->cache->set($cache_key, $towns); } $selected_exists = false; foreach ($towns as &$town) { $selected = false; if (!$selected_exists && $town['id'] == $this->townFrom()) { $selected_exists = $selected = true; } $town['selected'] = $selected; $town['attributes'] = isset($town['searchTerms']) ? ['data-search-string' => $town['searchTerms']] : null; } if (!$selected_exists) { $this->townFrom($towns[0]['id']); } return $towns; } public function getTOURINC() { $cache_key = __METHOD__ . $this->defaults['STATEINC'] . '_' . $this->townFrom() . '_' . $this->defaults['TOURINC']; if (!$data = $this->cache->get($cache_key)) { $sql = $this->db->formatExec( '<ONLINEDB>.dbo.up_WEB_4_search_Tour', [ 'State' => $this->state(), 'TownFrom' => $this->townFrom(), 'CATALOGDB' => $this->CATALOGDB, 'Order_By_Name' => $this->getConfig('ORDER_BY_NAME'), ] ); $tours = $this->tourinc($sql); $tours = array_map( function ($tour) { $tour['id'] = $tour['Inc']; $tour['name'] = $tour['LName']; if (isset($tour['searchTerms'])) { $tour['attributes'] = ['data-search-string' => "{$tour['searchTerms']}"]; } return $tour; }, $tours ); $data = array('tours' => $tours, 'tourinc' => $this->defaults['TOURINC']); $this->cache->set($cache_key, $data); } else { $tours = $data['tours']; $this->defaults['TOURINC'] = $data['tourinc']; } return $tours; } } 