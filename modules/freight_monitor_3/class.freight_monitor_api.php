<?php
 class Freight_Monitor_Api extends Api_Model { public function __construct(Samo_Config $config, $callback = null) { $this->field_type['integers'] = array(); parent::__construct($config, $callback); } protected function _getALL() { $return = array(); $methods = array( ['SOURCES', 'SOURCE'], ['TARGETS', 'TARGET'], ['AIRLINES', 'AIRLINE'], ); foreach ($methods as $name) { if (is_array($name)) { list($name, $param) = $name; } $method = '_get' . $name; if (method_exists($this, $method)) { $result = $this->$method(); $return[$name] = $result; if ($result && $param && !$this->defaults[$param]) { $firstRow = reset($result); $firstValue = $firstRow['id']; $this->setParams($param, $firstValue); } } } return $return; } public function _getFreightsRoundTrip() { $return = false; $sql = $this->db->formatExec( '<ONLINEDB>.[dbo].[up_WEB_3_frmonitor_RoundTrip]', [ 'Cat_Claim' => $this->defaults['CATCLAIM'], 'UserCode' => $this->internet_user(), ] ); $res = $this->db->fetchAll($sql); if (false !== $res && count($res) > 0) { if (!array_key_exists('error', $res[0])) { $return = [ 'direct' => [], 'back' => [], ]; foreach ($res as $row) { $direct = $row['direction']; unset($row['direction']); $place = []; foreach (array_keys($this->frclasses) as $class) { $_class = ucfirst($class); $place_status = $this->placeStatus($row['place' . $_class]); $place[] = [ 'class' => $class, 'status' => $place_status, 'placeTotal' => $row['placeTotal'], ]; } $row['places'] = $place; $row['departure'] = [ 'portKey' => $row['departurePortKey'], 'port' => $row['departurePort'], 'portAlt' => $row['departurePortAlt'], 'portAlias' => $row['departurePortAlt'], 'time' => $row['departureTime'], ]; $row['arrival'] = [ 'portKey' => $row['arrivalPortKey'], 'port' => $row['arrivalPort'], 'portAlt' => $row['arrivalPortAlt'], 'portAlias' => $row['arrivalPortAlt'], 'time' => $row['arrivalTime'], ]; if ($direct == 'direct') { $return['direct'][] = $row; } else { $return['back'][] = $row; } } } } else { $sql = $this->db->formatExec( '<ONLINEDB>.[dbo].[up_WEB_3_frmonitor_Routes]', [ 'Cat_Claim' => $this->defaults['CATCLAIM'], 'CATALOGDB' => $this->CATALOGDB, 'UserCode' => $this->internet_user(), ] ); if (false !== ($res = $this->db->fetchAll($sql))) { $show_places = intval($this->getConfig('FreiMonitorPlaces', 'Online')); $return = array( 'routes' => array(), ); $tour = $this->getParam('TOURINC'); $spog = $this->getParam('SPOINC'); $nights = $this->getParam('NIGHTS'); $stoptime = 0; foreach ($res as $row) { $sql = $this->db->formatExec( '<ONLINEDB>.[dbo].[up_WEB_3_frmonitor_StepFreight]', [ 'SOURCE' => $row['sourceKey'], 'TARGET' => $row['targetKey'], 'Tour' => $tour, 'Date' => $row['date'], 'Spog' => $spog, 'Nights' => $nights, 'StopTime' => $stoptime, 'UserCode' => $this->internet_user(), ] ); $step = array( 'info' => ['date' => $row['date'], 'sourceTown' => $row['sourceTown'], 'targetTown' => $row['targetTown']], 'freights' => array(), ); if (false !== ($res2 = $this->db->fetchAll($sql))) { foreach ($res2 as $row2) { $day_delta = ((intval($row2['TrgTime']) - intval($row2['SrcTime'])) < 0) ? 1 : 0; $row2['SrcTimeDelta'] = $row2['delay']; $tmp = (int)$row2['delay'] + (int)$row2['days']; $row2['TrgTimeDelta'] = ($tmp) ? $tmp : $day_delta; $item = array( 'key' => $row2['FreightInc'], 'name' => $row2['FreightName'], 'transportCompanyKey' => $row2['PartnerInc'], 'transportCompany' => $row2['PartnerName'], 'transportCompanyLogo' => $row2['PartnerLogo'], 'transportTypeKey' => $row2['TranTypeInc'], 'transportType' => $row2['TranTypeName'], 'departure' => [ 'portKey' => $row2['SrcPortInc'], 'port' => $row2['SrcPortName'], 'portAlias' => $row2['SrcPortAlias'], 'time' => ($row2['SrcTime']) ? $row2['SrcTime'] . (($row2['SrcTimeDelta']) ? ' +' . $row2['SrcTimeDelta'] : '') : null, ], 'arrival' => [ 'portKey' => $row2['TrgPortInc'], 'port' => $row2['TrgPortName'], 'portAlias' => $row2['TrgPortAlias'], 'time' => ($row2['TrgTime']) ? $row2['TrgTime'] . (($row2['TrgTimeDelta']) ? ' +' . $row2['TrgTimeDelta'] : '') : null, ], ); $place = []; foreach (array_keys($this->frclasses) as $class) { $_class = substr($class, 0, 1); $stopList = $row2[$_class . 'StopList']; $stopList = strlen($stopList) ? explode(',', $stopList) : []; $stopFlag = (in_array(0, $stopList) || in_array($nights, $stopList)); $place_status = $this->placeStatus($row2[$_class . 'Place'], $stopFlag); $place_count = ($place_status == 'yesnoplace' && ($show_places == 1 || $row2[$_class . 'PlaceTotal'] < $show_places)) ? $row2[$_class . 'PlaceTotal'] : null; $place[] = [ 'class' => $class, 'status' => $place_status, 'placeTotal' => $place_count, ]; } $item['places'] = $place; $step['freights'][] = $item; } } $return['routes'][] = $step; } } else { $return = $this->_getFreights(); } } return $return; } public function _getFreights() { $return = array( 'direct' => array(), 'back' => array(), ); $checkin = $this->getParam('CHECKIN'); $checkout = $this->getParam('CHECKOUT'); $plus_minus = $this->getParam('PLUS_MINUS'); $params = [ 'TownFrom' => $this->getParam('TOWNFROMINC'), 'Tour' => $this->getParam('TOURINC'), 'TownTo' => $this->getParam('TOWNTOINC'), 'PortFrom' => $this->getParam('PORTFROMINC'), 'PortTo' => $this->getParam('PORTTOINC'), 'DateBeg' => $checkin, 'DateEnd' => $checkout, 'PlusMinus' => $plus_minus, 'Spog' => $this->getParam('SPOINC'), 'Nights' => $this->getParam('NIGHTS'), 'StopTime' => intval($this->config('FREIGHT_STOPTIME', 'online_config')), 'UserCode' => $this->internet_user(), 'Airline' => $this->getParam('AIRLINE'), ]; $sql = $this->db->formatExec('<ONLINEDB>.dbo.up_WEB_5_frmonitor_List', $params); if (false !== ($res = $this->db->fetchAll($sql))) { $checkin_min = $checkin->copy()->add_days(-$plus_minus); $checkin_max = $checkin->copy()->add_days($plus_minus); $checkout_min = $checkout->copy()->add_days(-$plus_minus); $checkout_max = $checkout->copy()->add_days($plus_minus); foreach ($res as $row) { $date = $row['Date']; if ($row['FreightInc'] > 0 && $date->gte($checkin_min) && $date->lte($checkin_max)) { $item = $this->formatFreight($row); $return['direct'][] = $item; } if ($row['FreightIncBack'] > 0 && $date->gte($checkout_min) && $date->lte($checkout_max)) { $item = $this->formatFreight($row, 'Back'); $return['back'][] = $item; } } } return $return; } private function formatFreight($row, $direction = '') { $place = []; $nights = $this->getParam('NIGHTS'); $name = $this->getConfig('ORDER_BY_NAME') ? 'Name' : 'LName'; $show_places = intval($this->getConfig('FreiMonitorPlaces', 'Online')); foreach (array_keys($this->frclasses) as $class) { $_class = substr($class, 0, 1); $stopList = $row[$_class . 'StopList' . $direction]; $stopList = strlen($stopList) ? explode(',', $stopList) : []; $stopFlag = (in_array(0, $stopList) || in_array($nights, $stopList)); $place_status = $this->placeStatus($row[$_class . 'Place' . $direction], $stopFlag); $place_count = ($place_status == 'yesnoplace' && ($show_places == 1 || $row[$_class . 'PlaceTotal' . $direction] < $show_places)) ? $row[$_class . 'PlaceTotal' . $direction] : null; $place[] = [ 'class' => $class, 'status' => $place_status, 'placeTotal' => $place_count, ]; } $day_delta = ((intval($row['TrgTime' . $direction]) - intval($row['SrcTime' . $direction])) < 0) ? 1 : 0; $row['SrcTimeDelta' . $direction] = $row['delay' . $direction]; $tmp = (int)$row['delay' . $direction] + (int)$row['days' . $direction]; $row['TrgTimeDelta' . $direction] = ($tmp) ? $tmp : $day_delta; $item = array( 'date' => $row['Date'], 'key' => $row['FreightInc' . $direction], 'name' => $row['Freight' . $name . $direction], 'transportCompanyKey' => $row['PartnerInc' . $direction], 'transportCompany' => $row['Partner' . $name . $direction], 'transportTypeKey' => $row['TranTypeInc' . $direction], 'transportType' => $row['TranType' . $name . $direction], 'departure' => [ 'portKey' => $row['SrcPortInc' . $direction], 'port' => $row['SrcPort' . $name . $direction], 'portAlias' => $row['SrcPortAlias' . $direction], 'time' => ($row['SrcTime' . $direction]) ? $row['SrcTime' . $direction] . (($row['SrcTimeDelta' . $direction]) ? ' +' . $row['SrcTimeDelta' . $direction] : '') : null, ], 'arrival' => [ 'portKey' => $row['TrgPortInc' . $direction], 'port' => $row['TrgPort' . $name . $direction], 'portAlias' => $row['TrgPortAlias' . $direction], 'time' => ($row['TrgTime' . $direction]) ? $row['TrgTime' . $direction] . (($row['TrgTimeDelta' . $direction]) ? ' +' . $row['TrgTimeDelta' . $direction] : '') : null, ], 'places' => $place, ); return $item; } private function placeStatus($place, $stopFlag = false) { if ($stopFlag) { $return = 'noplace'; } else { if (in_array($place, [-1, 3, 'R'], true)) { $return = 'requestplace'; } elseif (in_array($place, [2, 'Y'], true)) { $return = 'yesplace'; } elseif (in_array($place, [1, 'F'], true)) { $return = 'yesnoplace'; } else { $return = 'noplace'; } } return $return; } public function _getAIRLINES() { $params = [ 'TownFrom' => $this->getParam('TOWNFROMINC'), 'TownTo' => $this->getParam('TOWNTOINC'), 'UserCode' => $this->internet_user(), ]; $sql = $this->db->formatExec('<ONLINEDB>.[dbo].[up_WEB_3_frmonitor_Airline]', $params); $return = $this->db->fetchAll($sql); return $return; } public function _getSOURCES() { $params = [ 'UserCode' => $this->internet_user(), ]; $sql = $this->db->formatExec('<ONLINEDB>.[dbo].[up_WEB_5_frmonitor_TownFrom]', $params); $return = $this->portList($sql); return $return; } public function _getTARGETS() { $params = [ 'TownFrom' => $this->defaults['TOWNFROMINC'], 'UserCode' => $this->internet_user(), ]; $sql = $this->db->formatExec('<ONLINEDB>.[dbo].[up_WEB_5_frmonitor_TownTo]', $params); $return = $this->portList($sql); return $return; } private function portList($sql) { $return = false; $is_api2 = version_compare(Samo_Request::api_version(), '2.0') >= 0; if (false !== ($query = $this->db->query($sql))) { if ($numRows = $this->db->numRows($query)) { while (false !== ($res = $this->db->fetchRow($query))) { $row = array(); $id = $res['TownInc'] . '.' . ($res['PortInc'] == null ? 0 : $res['PortInc']); $row['id'] = $is_api2 ? doubleval($id) : $id; $row['name'] = $res['TownName'] . ' - ' . $res['PortName']; $row['portKey'] = null === $res['PortInc'] ? 0 : $res['PortInc']; $row['townKey'] = $res['TownInc']; $row['stateKey'] = $res['StateInc']; $row['port'] = $res['PortName']; $row['town'] = $res['TownName']; $row['state'] = $res['StateName']; $return[] = $row; } } $this->db->freeResult($query); } return $return; } public function setParams($params = array(), $value = null) { $result = $this->defaults; if (is_string($params) && !empty($params) && !is_null($value)) { $this->defaults[$params] = $value; } elseif (is_array($params)) { $result = $this->defaults = array_merge($this->defaults, $params); } foreach (array('SOURCE' => 'FROM', 'TARGET' => 'TO') as $api => $model) { if (isset($this->defaults[$api])) { list($town, $port) = explode('.', $this->defaults[$api] . '.'); $result['TOWN' . $model . 'INC'] = $this->defaults['TOWN' . $model . 'INC'] = ($town = intval($town)) ? $town : null; $result['PORT' . $model . 'INC'] = $this->defaults['PORT' . $model . 'INC'] = ($port = intval($port)) ? $port : null; } } return $result; } } 