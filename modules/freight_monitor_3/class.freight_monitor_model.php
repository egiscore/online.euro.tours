<?php
 class Freight_Monitor_Model extends Samo_Tourinfo { protected $api_name = 'Freight_Monitor_Api'; public function construct() { $this->defaults['SOURCE'] = Samo_Utils::ifs(Samo_Request::strval('SOURCE'), null); $this->defaults['TOURINC'] = Samo_Utils::ifs(Samo_Request::intval('TOURINC'), null); $this->defaults['TARGET'] = Samo_Utils::ifs(Samo_Request::strval('TARGET'), null); $this->defaults['AIRLINE'] = Samo_Utils::ifs(Samo_Request::strval('AIRLINE'), null); $this->defaults['PLUS_MINUS'] = Samo_Utils::ifs(Samo_Request::intval('PLUS_MINUS'), 0); $this->defaults['PERIOD'] = Samo_Utils::ifs(Samo_Request::intval('PERIOD'), $this->getConfig('FreiMonitorNights', 'Online',7)); $this->defaults['SHOW_PLACES'] = intval($this->getConfig('FreiMonitorPlaces', 'Online',0)); $plus2year = Samo_Datetime::parse('2 year'); $this->defaults['CHECKIN'] = Samo_Request::date('CHECKIN', $this->today, $plus2year); $this->defaults['CHECKOUT'] = Samo_Request::date('CHECKOUT', $this->today, $plus2year); $this->defaults['SPOINC'] = Samo_Utils::ifs(Samo_Request::intval('SPOINC'), null); $this->defaults['NIGHTS'] = Samo_Utils::ifs(Samo_Request::intval('NIGHTS'), null); } private function getEmptyTown() { return array( array( 'id' => 0, 'name' => '----', 'portKey' => 0, 'townKey' => 0, 'stateKey' => 0, 'port' => '----', 'town' => '----', 'state' => '----', 'selected' => 1, ) ); } public function getSOURCE() { $api = $this->api(); $result = $api->getSOURCES(); if (!$result) { return false; } if (!$this->defaults['SOURCE']) { $this->setSelectedDirection($result, 'SOURCE', $this->defaults['TOWNFROMINC']); } else { list($town, $port) = explode('.', $this->defaults['SOURCE'] . '.'); $town = ($town = intval($town)) ? $town : 0; $port = ($port = intval($port)) ? $port : 0; $this->defaults['SOURCE'] = null; foreach ($result as & $row) { $row['selected'] = 0; if (!$this->defaults['SOURCE'] && $row['townKey'] == $town && $row['portKey'] == $port) { $row['selected'] = 1; $this->defaults['SOURCE'] = $town . '.' . $port; } } if (!$this->defaults['SOURCE']) { foreach ($result as & $row) { $row['selected'] = 0; if (!$this->defaults['SOURCE'] && $row['townKey'] == $town) { $row['selected'] = 1; $this->defaults['SOURCE'] = $town . '.' . $row['portKey']; } } } if (!$this->defaults['SOURCE']) { $result = array_merge($this->getEmptyTown(), $result); } } return $this->groupPorts($this->searchTerms($result)); } public function getTARGET() { $api = $this->api(); $api->setParams('SOURCE', $this->defaults['SOURCE']); $result = $api->getTARGETS(); if (!$result) { return false; } if (!$this->defaults['TARGET']) { $this->setSelectedDirection($result, 'TARGET', null, $this->defaults['STATEINC']); } else { list($town, $port) = explode('.', $this->defaults['TARGET'] . '.'); $town = ($town = intval($town)) ? $town : 0; $port = ($port = intval($port)) ? $port : 0; $this->defaults['TARGET'] = null; foreach ($result as & $row) { $row['selected'] = 0; if (!$this->defaults['TARGET'] && $row['townKey'] == $town && $row['portKey'] == $port) { $row['selected'] = 1; $this->defaults['TARGET'] = $town . '.' . $port; } } if (!$this->defaults['TARGET']) { foreach ($result as & $row) { $row['selected'] = 0; if (!$this->defaults['TARGET'] && $row['townKey'] == $town) { $row['selected'] = 1; $this->defaults['TARGET'] = $town . '.' . $row['portKey']; } } } if (!$this->defaults['TARGET']) { $result = array_merge($this->getEmptyTown(), $result); } } return $this->groupPorts($this->searchTerms($result)); } public function setSelectedDirection(& $result, $direction, $townfrom, $stateto = null) { if ($townfrom) { foreach ($result as & $row) { $row['selected'] = 0; if (!$this->defaults[$direction] && $row['townKey'] == $townfrom) { $row['selected'] = 1; $this->defaults[$direction] = $row['townKey']; } } } if (!$this->defaults[$direction]) { if ($stateto) { foreach ($result as & $row) { $row['selected'] = 0; if (!$this->defaults[$direction] && $row['stateKey'] == $stateto) { $row['selected'] = 1; $this->defaults[$direction] = $row['townKey'] . '.' . $row['portKey']; } } } if (!$this->defaults[$direction]) { $firstRow = reset($result); $this->defaults[$direction] = $firstRow['id']; foreach ($result as & $row) { $row['selected'] = ($row['id'] == $this->defaults[$direction]); } } } } public function getAIRLINE() { $api = $this->api(); $api->setParams('SOURCE', $this->defaults['SOURCE']); $api->setParams('TARGET', $this->defaults['TARGET']); $empty = array( array( 'id' => 0, 'name' => '----', 'selected' => false ) ); $result = $api->getAIRLINES(); if (!$result) { return $empty; } if (!$this->defaults['AIRLINE'] && count($result) == 1) { $firstRow = reset($result); $this->defaults['AIRLINE'] = $firstRow['id']; } foreach ($result as & $row) { $row['selected'] = ($row['id'] == $this->defaults['AIRLINE']); } if (count($result) > 1) { $result = array_merge($empty, $result); } return $result; } private function searchTerms($towns) { if ($towns) { foreach ($towns as &$port) { $terms = array(); foreach ($port as $value) { if (!intval($value)) { $terms[] = $value; } } $port['tags'] = array_unique($terms); } } return $towns; } private function groupPorts($towns) { if (!$towns) { return $towns; } $data = array(); foreach ($towns as $row) { if (!isset($data[$row['state']])) { $data[$row['state']] = array(); } $data[$row['state']][] = $row; } return $data; } public function getPERIOD() { return $this->defaults['PERIOD']; } public function getPLUS_MINUS() { return $this->defaults['PLUS_MINUS']; } private function getDate($var, $default) { $value = isset($this->defaults[$var]) ? $this->defaults[$var] : Samo_Datetime::null(); if ($value->is_null()) { $value = $this->defaults[$var] = $default; } $return = ['startDate' => $this->today, 'value' => $value]; return $return; } public function getCHECKIN() { return $this->getDate('CHECKIN', $this->today); } public function getCHECKOUT() { return $this->getDate('CHECKOUT', $this->defaults['CHECKIN']->copy()->add_days($this->defaults['PERIOD'])); } public function getFreightList() { $api = $this->api(); $checkin = $this->defaults['CHECKIN']; $checkout = $this->defaults['CHECKOUT']; $plus_minus = $this->defaults['PLUS_MINUS']; $api->setParams('SOURCE', $this->defaults['SOURCE']); $api->setParams('TOURINC', $this->defaults['TOURINC']); $api->setParams('TARGET', $this->defaults['TARGET']); $api->setParams('CHECKIN', $checkin); $api->setParams('CHECKOUT', $checkout); $api->setParams('PLUS_MINUS', $plus_minus); $api->setParams('SPOINC', $this->defaults['SPOINC']); $api->setParams('NIGHTS', $this->defaults['NIGHTS']); $result = $api->getFreights(); foreach (['Direct', 'Back'] as $direction) { $result['classes' . $direction] = $this->frclasses; } foreach ($result as $key => &$rows) { foreach ($rows as &$row) { if ($key == 'direct') { $result['classesDirect']['busines'] += ($row['places'][1]['status'] == 'noplace') ? 0 : 1; $result['classesDirect']['comfort'] += ($row['places'][2]['status'] == 'noplace') ? 0 : 1; $result['classesDirect']['premium'] += ($row['places'][3]['status'] == 'noplace') ? 0 : 1; $row['TdClass'] = $row['date']->eq($checkin) ? 'date_selected' : ''; } elseif ($key == 'back') { $result['classesBack']['busines'] += ($row['places'][1]['status'] == 'noplace') ? 0 : 1; $result['classesBack']['comfort'] += ($row['places'][2]['status'] == 'noplace') ? 0 : 1; $result['classesBack']['premium'] += ($row['places'][3]['status'] == 'noplace') ? 0 : 1; $row['TdClass'] = $row['date']->eq($checkout) ? 'date_selected' : ''; } } } return $result; } } 