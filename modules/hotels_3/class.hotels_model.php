<?php
 class Hotels_Model extends Samo_Tourinfo { protected $cache_ttl = 3600; private $hotelinc = 0; private $price = null; private $thumbnail = null; private $room_attr = [ 'TV' => 'Телевизор', 'Phone' => 'Телефон', 'WC' => 'Туалет', 'Frost' => 'Холодильник', 'Bath' => 'Ванна', 'Shower' => 'Душ', 'Balcony' => 'Балкон', 'Cond' => 'Кондиционер', 'Bar' => 'Бар', 'Safe' => 'Сейф', 'Window' => 'Окно', 'Bidet' => 'Биде', 'Hairdrier' => 'Фен', 'SatelliteTV' => 'Спутниковое ТВ', 'LocalTV' => 'Местное ТВ', 'Kitchen' => 'Кухня', 'Radio' => 'Радио', 'RussianChannel' => 'Русский канал', ]; public $rowOnPage = 200; private $database = null; private $paraminc = null; public function construct() { parent::construct(); $this->database = (Samo_Request::is_admin()) ? '<OFFICEDB>' : '<ONLINEDB>'; $this->hotelinc = Samo_Utils::ifs(Samo_Request::intval('HOTELINC'), 0); $this->paraminc = Samo_Utils::ifs(Samo_Request::intval('PARAMINC'), 0); $this->defaults['STATEFROM'] = Samo_Request::intval('STATEFROM'); $this->defaults['STATEINC'] = Samo_Request::intval('STATEINC'); $this->defaults['REGIONINC'] = Samo_Request::intval('REGIONINC'); $this->defaults['TOWNTO'] = Samo_Request::intval('TOWNTO'); $this->defaults['CATEGORY'] = Samo_Request::integers('CATEGORY'); $this->defaults['PARAMS'] = Samo_Request::integers('PARAMS'); $this->defaults['ROOM'] = Samo_Request::integers('ROOM'); $this->defaults['MEAL'] = Samo_Request::strval('MEAL'); $this->defaults['HOTELNAME'] = Samo_Request::strval('HOTELNAME'); $this->defaults['PAGE'] = Samo_Utils::ifs(Samo_Request::intval('PAGE'), 1); } public function getTOWNFROMINC() { return $this->api('Api_Model')->getTOWNFROMS(); } private function fetchList($sql, $entity, $orderByName) { $order_by = ($orderByName) ? 'Name' : 'LName'; $data = $this->db->fetchAll( $sql, function ($row) use ($entity, $order_by) { return [ 'Inc' => $row[$entity . 'Inc'], 'Name' => $row[$entity . 'Name'], 'LName' => $row[$entity . $order_by], 'altName' => $row[$entity . 'LName'], 'selected' => false, 'attributes' => ['data-search-string' => "{$row[$entity . 'LName']} {$row[$entity . 'Name']}"], ]; } ); return $data; } private function setSelected(&$list, $defaultsIndex) { $default = array_key_exists($defaultsIndex, $this->defaults) ? $this->defaults[$defaultsIndex] : null; if ($list) { $selected_exists = false; if ($default) { foreach ($list as &$record) { if ($record['Inc'] == $default) { $selected_exists = $record['selected'] = true; break; } } } if (!$selected_exists) { $default = null; } } if ($default) { $this->defaults[$defaultsIndex] = $default; } return $default; } private function addEmpty($list) { $empty = ['Inc' => '', 'LName' => '----', 'Name' => '----', 'selected' => false]; if ($list) { $list = array_merge([$empty], $list); } else { $list = [$empty]; } return $list; } public function getSTATEINC() { $params = ['ORDER_BY_NAME' => $this->getConfig('STATE_ORDER_BY_NAME')]; $cache_key = __METHOD__ . implode('_', $params); if (false === ($data = $this->cache->get($cache_key))) { $sql = $this->db->formatExec($this->database . '.dbo.up_WEB_3_hotel_States', $params); $data = $this->fetchList($sql, 'State', $params['ORDER_BY_NAME']); $this->cache->set($cache_key, $data, $this->cache_ttl); } $default = $this->setSelected($data, 'STATEINC'); if (!$default) { $default = $data[0]['Inc']; $data[0]['selected'] = true; } $this->state($default); return $data; } public function getREGIONINC() { $params = [ 'STATE' => $this->defaults['STATEINC'], 'ORDER_BY_NAME' => $this->getConfig('ORDER_BY_NAME'), ]; $cache_key = __METHOD__ . implode('_', $params); if (false === ($data = $this->cache->get($cache_key))) { $sql = $this->db->formatExec($this->database . '.dbo.up_WEB_3_hotel_Regions', $params); $data = $this->fetchList($sql, 'Region', $params['ORDER_BY_NAME']); $this->cache->set($cache_key, $data, $this->cache_ttl); } $this->setSelected($data, 'REGIONINC'); return $this->addEmpty($data); } public function getTOWNTO() { $params = [ 'STATE' => $this->defaults['STATEINC'], 'REGION' => $this->defaults['REGIONINC'], 'ORDER_BY_NAME' => $this->getConfig('ORDER_BY_NAME'), ]; $cache_key = __METHOD__ . implode('_', $params); if (false === ($data = $this->cache->get($cache_key))) { $sql = $this->db->formatExec($this->database . '.dbo.up_WEB_3_hotel_Towns', $params); $data = $this->fetchList($sql, 'Town', $params['ORDER_BY_NAME']); $this->cache->set($cache_key, $data, $this->cache_ttl); } $this->setSelected($data, 'TOWNTO'); return $this->addEmpty($data); } public function getCATEGORY() { $params = [ 'STATE' => $this->defaults['STATEINC'], 'REGION' => $this->defaults['REGIONINC'], ]; $cache_key = __METHOD__ . implode('_', $params); if (false === ($data = $this->cache->get($cache_key))) { $sql = $this->db->formatExec($this->database . '.dbo.up_WEB_3_hotel_Stars', $params); $data = $this->db->fetchAll($sql); $this->cache->set($cache_key, $data, $this->cache_ttl); } if ($data) { $default = $this->defaults['CATEGORY']; foreach ($data as &$row) { $row['selected'] = in_array($row['Inc'], $default); } } return $data; } public function getPARAMS() { $return = []; $default = $this->defaults['PARAMS']; $sql = $this->db->formatExec( $this->database . '.dbo.up_WEB_3_hotel_ParamList', [ 'State' => $this->defaults['STATEINC'], 'Region' => $this->defaults['REGIONINC'], 'Town' => !empty($this->defaults['TOWNTO']) ? $this->defaults['TOWNTO'][0] : null, ] ); if ($res = $this->db->query($sql)) { while ($row = $this->db->fetchRow($res)) { $return[] = [ 'Inc' => $row['ParamInc'], 'Name' => $row['ParamName'], 'LName' => $row['ParamLName'], 'Group' => $row['ParamGroup'], 'LGroup' => $row['ParamLGroup'], 'GroupInc' => $this->_transliterate($row['ParamGroup']), 'selected' => in_array($row['ParamInc'], $default), ]; } } return $return; } public function getROOM() { $i = 0; $return = []; $default = $this->defaults['ROOM']; foreach ($this->room_attr as $row) { $return[] = [ 'Inc' => ++$i, 'Name' => $row, 'LName' => $row, 'selected' => in_array($i, $default), ]; } return $return; } public function roomsInHotel() { $return = []; $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_hotel_Rooms', [ 'Hotel' => $this->hotelinc, 'UserCode' => $this->internet_user(), ] ); if ($res = $this->db->query($sql)) { $messages = Samo_Registry::get('messages'); while ($row = $this->db->fetchRow($res)) { $row['Attributes'] = array(); foreach ($this->room_attr as $key => $attr) { if ($row[$key] and $key != 'Window') { $row['Attributes'][] = isset($messages['ROOM_ATTR_' . strtoupper($key)]) ? $messages['ROOM_ATTR_' . strtoupper($key)] : $attr; } } $return[] = [ 'Inc' => $row['RoomInc'], 'Name' => $row['RoomName'], 'LName' => $row['RoomLName'], 'Attributes' => $row['Attributes'], 'Description' => $row['Window'], ]; } } return $return; } public function showRooms() { return $this->getConfig('SHOW_ROOMS_IN_HOTEL', 'hotels'); } public function price() { if (!$this->price) { $this->price = Samo_Loader::load_object('All_Prices_Model', $this->config); $this->price->defaults = array_merge($this->price->defaults, $this->defaults); $this->price->construct(); $this->price->defaults['TOURINC'] = null; $this->price->defaults['NIGHTS_FROM'] = Samo_Utils::ifs(Samo_Request::intval('NIGHTS_FROM'), Samo_Request::intval('NIGHTS_TILL')); $this->price->defaults['NIGHTS_TILL'] = Samo_Utils::ifs(Samo_Request::intval('NIGHTS_TILL'), Samo_Request::intval('NIGHTS_FROM')); if (is_null($this->price->defaults['NIGHTS_FROM']) == false && is_null($this->price->defaults['NIGHTS_TILL']) == false && $this->price->defaults['NIGHTS_FROM'] > $this->price->defaults['NIGHTS_TILL']) { list($this->price->defaults['NIGHTS_FROM'], $this->price->defaults['NIGHTS_TILL']) = [$this->price->defaults['NIGHTS_TILL'], $this->price->defaults['NIGHTS_FROM']]; } } return $this->price; } private function room() { $result = []; if (!empty($this->defaults['ROOM'])) { $attr = array_keys($this->room_attr); foreach ($this->defaults['ROOM'] as $row) { if (!empty($attr[$row - 1])) { $result[] = $attr[$row - 1]; } } } return !empty($result) ? implode(',', $result) : null; } public function filterKnownHotelTypes(&$params) { $hotel_types = []; $type_tag = $this->hotelTypesFilter(); foreach ($params as $key => $row) { if ($row['LGroup'] == $type_tag) { $hotel_types[] = $row; unset($params[$key]); } } if (!empty($type_tag)) { $params = array_values($params); } return $hotel_types; } public function search() { $preload = 20; $return = $params = $icons = []; $param_inc = !empty($this->defaults['PARAMS']) ? implode(',', $this->defaults['PARAMS']) : null; if ($param_inc) { $sql = $this->db->formatExec( $this->database . '.dbo.up_WEB_3_hotel_ParamList', [ 'State' => $this->defaults['STATEINC'], 'Region' => $this->defaults['REGIONINC'], 'Town' => !empty($this->defaults['TOWNTO']) ? $this->defaults['TOWNTO'][0] : null, 'ParamInc' => $param_inc, ] ); if ($res = $this->db->query($sql)) { $this->defaults['PARAMS'] = []; while ($row = $this->db->fetchRow($res)) { $this->defaults['PARAMS'][] = $row['ParamInc']; $params[$row['ParamInc']] = $this->_set_params($row); } } } $sql = $this->db->formatExec( $this->database . '.dbo.up_WEB_4_hotel_List', [ 'State' => $this->defaults['STATEINC'], 'Region' => $this->defaults['REGIONINC'] > 0 ? $this->defaults['REGIONINC'] : null, 'Town' => !empty($this->defaults['TOWNTO']) ? $this->defaults['TOWNTO'] : null, 'Params' => !empty($this->defaults['PARAMS']) ? implode(',', $this->defaults['PARAMS']) : null, 'Room' => $this->room(), 'Meal' => !empty($this->defaults['MEAL']) ? $this->defaults['MEAL'] : null, 'Star' => !empty($this->defaults['CATEGORY']) ? implode(',', $this->defaults['CATEGORY']) : null, 'Name' => preg_replace('~[\s\n\r\t]+~', '%', trim($this->defaults['HOTELNAME'])), 'Page' => !empty($this->defaults['PAGE']) ? $this->defaults['PAGE'] : 1, 'RowOnPage' => $this->rowOnPage, 'UserCode' => $this->internet_user(), ] ); if ($query = $this->db->query($sql)) { $i = 0; $map = $pic = []; while ($res = $this->db->fetchRow($query)) { $res = $this->_info($res, $i < $preload, true); $res['params']['miss'] = $params; $res['params']['count'] = count($params); $map[$res['key']] = $i; if (isset($res['images'])) { $pic[] = $res['key']; } $return[$i++] = $res; } $more = true; $keys = array_keys($map); while ($incs = array_splice($keys, 0, $more ? $preload : 100)) { $sql = $this->db->formatExec( $this->database . '.dbo.up_WEB_4_hotel_Params', [ 'HotelList' => $incs, 'ParamList' => empty($params) ? null : implode(',', array_keys($params)), 'VipType' => $more ? ($this->hotelTypesFilter()) : null, 'Note' => $more ? 1 : 0, ] ); if ($query = $this->db->query($sql)) { $more = false; $host = Samo_Registry::get('embeded'); while ($res = $this->db->fetchRow($query)) { if ($res['HotelField'] && empty($return[$map[$res['HotelInc']]][$res['HotelField']])) { $return[$map[$res['HotelInc']]][$res['HotelField']] = $res['ParamValue']; $method = '_get_param_' . $res['HotelField']; if (method_exists($this, $method)) { $this->$method($return[$map[$res['HotelInc']]]); } } else { $data = true; if (isset($res['ParamVipType']) && $res['ParamVipType']) { $data = isset($params[$res['ParamInc']]); $return[$map[$res['HotelInc']]]['viptype'][$res['ParamInc']] = $this->_set_params($res); $return[$map[$res['HotelInc']]]['icons']['viptype'][$res['ParamInc']] = [ 'class' => 'hp_' . $res['ParamInc'], 'title' => (!empty($res['ParamNote']) ? strip_tags(html_entity_decode($res['ParamNote'])) : $res['ParamName']) . (!empty($res['ParamValue']) && !($res['ParamType'] == 5 && $res['ParamValue'] == '+') ? (' - ' . $res['ParamValue']) : ''), ]; if (in_array($res['ParamInc'], $this->defaults['PARAMS'])) { $return[$map[$res['HotelInc']]]['params']['data'][$res['ParamInc']] = $this->_set_params($res); $return[$map[$res['HotelInc']]]['params']['data'][$res['ParamInc']]['find'] = 1; } } if ($data) { $return[$map[$res['HotelInc']]]['params']['data'][$res['ParamInc']] = $this->_set_params($res); if (in_array($res['ParamInc'], $this->defaults['PARAMS'])) { $return[$map[$res['HotelInc']]]['params']['data'][$res['ParamInc']]['find'] = 1; $return[$map[$res['HotelInc']]]['params']['find'][$res['ParamInc']] =& $return[$map[$res['HotelInc']]]['params']['data'][$res['ParamInc']]; unset($return[$map[$res['HotelInc']]]['params']['miss'][$res['ParamInc']]); } else { $return[$map[$res['HotelInc']]]['params']['data'][$res['ParamInc']]['find'] = 0; } } } } } } if ($pic) { if ($pics = $this->_get_photos(implode(',', $pic), true)) { foreach ($pics[0] as $row) { $return[$map[$row['hotel']]]['images'][] = $row; } if ($pics[1]) { $return[$map[$row['hotel']]]['logo'] = $pics[1]; } } } } return $return; } public function getStar($text) { $return = false; if (!empty($text)) { if (intval($text)) { $return = intval($text); } elseif (!preg_match('~[^\*\d\s\n\r\t]~', $text)) { if (preg_match_all('~[*]+~', $text, $f)) { $return = 0; foreach ($f[0] as $row) { if ($return < strlen($row)) { $return = strlen($row); } } } } if ($return && strpos($text, '+')) { $return += 0.5; } } return $return; } public function param($inc = null) { $inc = $inc ? intval($inc) : $this->paraminc; $hotel = Samo_Request::intval('HOTELINC'); $sql = $this->db->formatExec($this->database . '.dbo.up_WEB_4_attribute', ['Inc' => $inc]); $this->db->rawMode(true); if ($row = $this->db->fetchOneRow($sql)) { if ($row['datatype'] == 5 && $hotel) { $sql = $this->db->formatExec($this->database . '.dbo.up_WEB_3_hotel_attribute', ['HotelInc' => $hotel, 'AttributeInc' => $inc]); if ($note = $this->db->fetchOne($sql)) { if ($note = trim($note)) { $row['note'] = $note; } } } $name = $row['name']; $note = $row['note']; $pict = ''; if ($row['icon']) { $file = 'data/hotelparam/hp_' . $inc . '_' . $row['laststamp'] . '.png'; if (file_exists(_ROOT . $file)) { $pict = WWWROOT . $file; } } $this->db->rawMode(false); return ['title' => $name, 'pict' => $pict, 'descr' => $note]; } else { $this->db->rawMode(false); return ['title' => '', 'pict' => '', 'descr' => '']; } } public function states() { if (!intval($this->defaults['STATEINC'])) { throw new Samo_Exception('Не указана страна'); } $stateinc = $this->defaults['STATEINC']; $sql = $this->db->formatExec($this->database . '.dbo.up_WEB_3_hotel_StateInfo', ['State' => $this->defaults['STATEINC']]); if ($info = $this->db->fetchRow($sql)) { $info['about'] = $this->config('about', 'state', null, $stateinc); $file = 'data/state/flag_' . $stateinc . '.gif'; $info['flag'] = (file_exists(_ROOT . $file)) ? (Samo_Registry::get('embeded') . WWWROOT . $file) : false; $info['picts'] = $this->_pictures( 'data/state/' . $stateinc . '_gif%s.gif', 'data/state/' . $stateinc . '_jpg%s.jpg', 'data/state/' . $stateinc . '_txt%s.php' ); } return $info; } public function regions() { if (!intval($this->defaults['REGIONINC'])) { throw new Samo_Exception('Не указан регион'); } $regioninc = $this->defaults['REGIONINC']; $sql = $this->db->formatExec($this->database . '.dbo.up_WEB_3_hotel_RegionInfo', ['Region' => $regioninc]); if ($info = $this->db->fetchRow($sql)) { $info['about'] = $this->config('about', 'region_' . $regioninc); $file = 'data/region/flag_' . $regioninc . '.gif'; $info['flag'] = (file_exists(_ROOT . $file)) ? (Samo_Registry::get('embeded') . WWWROOT . $file) : false; $info['picts'] = $this->_pictures( 'data/region/' . $regioninc . '_gif%s.gif', 'data/region/' . $regioninc . '_jpg%s.jpg', 'data/region/' . $regioninc . '_txt%s.php' ); } return $info; } public function towns() { if (empty($this->defaults['TOWNTO'])) { throw new Samo_Exception('Не указан город'); } $towninc = end($this->defaults['TOWNTO']); $sql = $this->db->formatExec($this->database . '.dbo.up_WEB_3_hotel_TownInfo', ['TownTo' => $towninc]); if ($info = $this->db->fetchRow($sql)) { $info['about'] = $this->config('about', 'town_' . $towninc); $file = 'data/town/flag_' . $towninc . '.gif'; $info['flag'] = (file_exists(_ROOT . $file)) ? (Samo_Registry::get('embeded') . WWWROOT . $file) : false; $info['picts'] = $this->_pictures( 'data/town/' . $towninc . '_gif%s.gif', 'data/town/' . $towninc . '_jpg%s.jpg', 'data/town/' . $towninc . '_txt%s.php' ); } return $info; } public function region_list() { if (!intval($this->defaults['STATEINC'])) { throw new Samo_Exception('Не указана страна'); } $sql = $this->db->formatExec($this->database . '.dbo.up_WEB_3_hotel_RegionList', ['State' => $this->defaults['STATEINC']]); return $this->db->fetchAll($sql); } public function town_list() { if (!intval($this->defaults['REGIONINC'])) { throw new Samo_Exception('Не указан регион'); } $sql = $this->db->formatExec($this->database . '.dbo.up_WEB_3_hotel_TownList', ['Region' => $this->defaults['REGIONINC']]); return $this->db->fetchAll($sql); } public function hotels() { return $this->_info($this->hotelinc); } private function _transliterate($name) { static $result = []; if (!isset($result[$name])) { $cyr = ['а', 'б', 'в', 'г', 'д', 'е', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ь', 'ю', 'я', 'А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ь', 'Ю', 'Я']; $lat = ['a', 'b', 'v', 'g', 'd', 'e', 'zh', 'z', 'i', 'y', 'k', 'l', 'm', 'n', 'o', 'p', 'r', 's', 't', 'u', 'f', 'h', 'ts', 'ch', 'sh', 'sht', 'a', 'y', 'yu', 'ya', 'A', 'B', 'V', 'G', 'D', 'E', 'Zh', 'Z', 'I', 'Y', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'F', 'H', 'Ts', 'Ch', 'Sh', 'Sht', 'A', 'Y', 'Yu', 'Ya']; $result[$name] = strtolower(str_replace($cyr, $lat, preg_replace('~[_\-\s\.]+~', '_', preg_replace('~[^0-9a-zа-я\.\_\-\s]~i', '', $name)))); } return $result[$name]; } private function _set_params($res) { $item = [ 'inc' => $res['ParamInc'], 'title' => $res['ParamName'], 'ltitle' => isset($res['ParamLName']) ? $res['ParamLName'] : $res['ParamName'], 'type' => $res['ParamType'], 'group' => $res['ParamGroup'], 'lgroup' => isset($res['ParamLGroup']) ? $res['ParamLGroup'] : $res['ParamGroup'], 'group_inc' => $this->_transliterate($res['ParamGroup']), 'value' => isset($res['ParamValue']) ? $res['ParamValue'] : null, 'note' => isset($res['ParamNote']) && $res['ParamNote'] !== null || ($res['ParamType'] == 5 && !empty($res['ParamValue']) && $res['ParamValue'] != '+'), ]; return $item; } private function _info($info, $more = true, $preview = false) { if (is_int($info)) { $sql = $this->db->formatExec($this->database . '.dbo.up_WEB_3_hotel_Info', ['HotelInc' => $info]); $sql = $this->db->query($sql); if (!($info = $this->db->fetchRow($sql))) { return false; } } $inc = $info['key']; $info['starNum'] = $this->getStar(!empty($info['star']) ? $info['star'] : ''); $vip = $params = $icons = []; if ($more) { $info['images'] = []; if (!$preview) { list($info['images'], $logo) = $this->_get_photos($inc); if ($logo) { $info['logo'] = $logo; } $sql = $this->db->formatExec( $this->database . '.dbo.up_WEB_4_hotel_Params', [ 'HotelList' => $inc, 'Detail' => 1, 'Note' => 1, ] ); if ($query = $this->db->query($sql)) { $viptype = $this->hotelTypesFilter(); $host = Samo_Registry::get('embeded'); while ($res = $this->db->fetchRow($query)) { if ($res['HotelField'] && empty($info[$res['HotelField']])) { $info[$res['HotelField']] = $res['ParamValue']; } else { $group = isset($res['ParamLGroup']) ? $res['ParamLGroup'] : $res['ParamGroup']; if ($viptype == $group) { $vip[$res['ParamInc']] = $this->_set_params($res); } else { $params[$res['ParamInc']] = $this->_set_params($res); } } if ($more && $res['ParamIcon']) { if ($viptype == $res['ParamLGroup']) { $icons['viptype'][$res['ParamInc']] = [ 'class' => 'hp_' . $res['ParamInc'], 'title' => (!empty($res['ParamNote']) ? strip_tags(html_entity_decode($res['ParamNote'])) : $res['ParamName']) . (!empty($res['ParamValue']) && !($res['ParamType'] == 5 && $res['ParamValue'] == '+') ? (' - ' . $res['ParamValue']) : ''), ]; } else { $icons['params'][$res['ParamInc']] = [ 'class' => 'hp_' . $res['ParamInc'], 'title' => !empty($res['ParamNote']) ? strip_tags(html_entity_decode($res['ParamNote'])) : $res['ParamName'], ]; } } } $this->db->freeResult($query); } $this->_get_param_description($info); } } $meals = []; if (empty($info['mealKey']) && !empty($info['meal'])) { $info['mealKey'] = $info['meal']; } if (!empty($info['mealKey'])) { $meals[] = ['inc' => $info['mealKey'], 'title' => $info['meal']]; } $info['params']['data'] = $params; $info['params']['miss'] = $info['params']['find'] = []; $info['params']['count'] = 0; $info['viptype'] = $vip; $info['meals'] = $meals; $info['icons'] = $icons; $info['h_www'] = Samo_Url::parse($info['h_www']); $info['www'] = Samo_Url::parse($info['www']); $info['more'] = $more; return $info; } protected function _get_param_description(&$info) { if (!isset($info['description'])) { $info['description'] = ''; } $info['description_short'] = substr(preg_replace('~[\n\r\s]+~', ' ', strip_tags($info['description'])), 0, 1400); } protected function _get_thumb_size($original_size = []) { if (!$original_size || ($original_size['width'] > $original_size['height'])) { return ['width' => 225, 'height' => 165]; } else { return ['width' => 105, 'height' => 165]; } } private function _get_thumb($image, $thumb, $options = []) { $return = $thumb; if (!file_exists(_ROOT . $thumb)) { if ($this->thumbnail == null) { $this->thumbnail = Samo_Loader::load_object('Thumbnail'); } if (!$options) { $options = $this->_get_thumb_size(); } $options = array_merge(['method' => Thumbnail::METHOD_SCALE_MIN], $options); if (!$this->thumbnail->output(_ROOT . $image, $return, $options)) { $return = false; } } return $return; } public function photo($hotel) { list ($images, $logo) = $this->_get_photos($hotel, 1); if ($logo) { return $logo; } elseif (count($images)) { return reset($images); } return false; } private function _get_photos($hotel, $limit = false) { $logo = false; $result = []; $sql = $this->db->formatExec( $this->database . '.dbo.up_WEB_4_hotel_Photos', [ 'HotelList' => $hotel, 'Limit' => $limit, ] ); if ($res = $this->db->query($sql)) { $host = Samo_Registry::get('embeded'); while ($row = $this->db->fetchRow($res)) { if ($row['Logo']) { $image = 'data/hotel/' . $row['HotelInc'] . '_0_logo_' . $row['Version'] . '.png'; } else { $image = 'data/hotel/' . $row['HotelInc'] . '_' . $row['PhotoInc'] . '_photo_' . $row['Version'] . '.jpg'; } if (file_exists(_ROOT . $image)) { if ($row['Logo']) { $logo = $host . WWWROOT . $image; } else { $result[$row['PhotoInc']] = $this->_get_photo($row, $image); } } } } $result = $this->_arrange_photos_by_thumb_size($result); return [$this->_arrange_photos_by_thumb_size(array_values($result)), $logo]; } protected function _get_photo($photo, $image) { $host = Samo_Registry::get('embeded'); $size = getimagesize(_ROOT . $image); $options = $this->_get_thumb_size(['width' => $size[0], 'height' => $size[1]]); $thumb = str_replace('_photo_', '_thumb_' . implode('_', $options) . '_', $image); if (!$this->_get_thumb($image, $thumb, $options)) { $thumb = false; } return [ 'tmb' => !empty($thumb) ? ($host . WWWROOT . $thumb) : false, 'src' => $host . WWWROOT . $image, 'alt' => $photo['Note'], 'width' => $size[0], 'height' => $size[1], 'hotel' => $photo['HotelInc'], ]; } protected function _arrange_photos_by_thumb_size($items, $max_size = 4) { $_get_size = function ($item) { return ($item['width'] > $item['height']) ? 2 : 1; }; $_get_next = function ($items, $max_size, $depth = 0) use (& $_get_next, $_get_size) { foreach ($items as $key => $item) { $size = $_get_size($item); if ($size == $max_size) { return [$key]; } elseif ($size < $max_size) { $next_items = $items; unset($next_items[$key]); if ($next_items) { if ($next = $_get_next($next_items, $max_size - $size, $depth + 1)) { array_unshift($next, $key); return $next; } } else { return [$key]; } } } return false; }; $return = []; while ($keys = $_get_next($items, $max_size)) { foreach ($keys as $key) { $return[] = $items[$key]; unset($items[$key]); } } if ($items) { foreach ($items as $key => $item) { $return[] = $item; } } return $return; } private function _pictures($mask_tn, $mask_orig, $mask_descr, $max = 50) { $picts = []; $host = Samo_Registry::get('embeded'); for ($i = 1; $i <= $max; $i++) { $idx = ($i < 10) ? '0' . $i : $i; $tn = sprintf($mask_tn, $idx); $orig = sprintf($mask_orig, $idx); if (file_exists(_ROOT . $tn) && file_exists(_ROOT . $orig)) { $file = sprintf($mask_descr, $idx); $descr = (file_exists(_ROOT . $file)) ? file_get_contents(_ROOT . $file) : ''; $_tmp = getimagesize(_ROOT . $orig); $picts[] = ['tn' => $host . WWWROOT . $tn, 'orig' => $host . WWWROOT . $orig, 'descr' => $descr, 'width' => $_tmp[0] + 16, 'height' => $_tmp[1] + 30]; } } return $picts; } public function getPages($max) { $numonpage = $this->tour_config('LINKS_ON_PAGE', 'search'); return $this->pager($max, $this->defaults['PAGE'], $numonpage); } } 