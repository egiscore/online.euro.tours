<?php
 class Invoice_Model extends Samo_EPlatez { protected $_cache_template = null; const MAIL_INVOICE_REQUEST = 16; public $external = false; public function construct($claim = null, $people = null, $order = null) { $this->messages = Samo_Registry::get('messages'); parent::construct($claim, $people, $order); $claimInfo = $this->claimInfo(); $this->defaults['TOURINC'] = $claimInfo['TourInc']; $this->defaults['INVOICE'] = array(); $this->defaults['als'] = 'rub'; $this->defaults['TYPE_OWNER_CONFIG'] = array(); $this->defaults['CANCEL'] = 1; } public function invoice() { $this->fetchTypeOwnerConfig(); $this->is_enabled(); $this->get_template_invoice(); $this->defaults['OWNER_INFO'] = $this->fetchPartnerInfo($this->defaults['TYPE_OWNER_CONFIG']['owner']); $this->defaults['AGENCY_INFO'] = $this->fetchPartnerInfo($this->defaults['INVOICE_CLAIMINFO']['partner']); $this->InvoiceValidUpToDate(); $this->SaveInvoice(); return true; } public function is_enabled() { if (!$this->has_permission('invoice')) { throw new Samo_Exception($this->messages['INVOICE_PERMISSION_DENIED']); } parent:: is_enabled(); $this->enable_checkPlatezkaPSBANK(); $this->defaults['INVOICE_CLAIMINFO'] = $this->fetchInvoiceClaimInfo(); $this->enable_checkHeaderPartner(); $this->enable_checkClaimPartPayment(); return $this->enable_resultInvoice(); } public function get_template_invoice() { if (empty($this->defaults['OwnerInc'])) { if (false !== ($claimInfo = $this->claimInfo())) { $this->defaults['OwnerInc'] = $claimInfo['OwnerInc']; } else { return false; } } if (!isset($this->defaults['TYPE_OWNER_CONFIG']['contracttype'])) { $this->fetchOwner(); } if (isset($_SESSION['samo_auth']) && isset($_SESSION['samo_auth']['type']) && 'person' == $_SESSION['samo_auth']['type']) { $partner = $_SESSION['samo_auth']['Partner']; } else { $partner = $this->defaults['OwnerInc']; } $tpl = $this->get_settings_printform($doccategory = DocCategory::INVOICE, $partner = $partner, $tour = null, $state = null, $inszone = null, $contracttype = $this->defaults['TYPE_OWNER_CONFIG']['contracttype'], $agreement_year = null, $email_type = null, $online_bank = null, $owner = $this->defaults['OwnerInc']); if (!$tpl) { throw new Samo_Exception($this->messages['TEMPLATE_NOT_CONFIGURE'] . $this->defaults['TYPE_OWNER_CONFIG']['contracttype'], 7); } return $tpl; } public function enable_checkPlatezkaPSBANK() { return true; } public function fetchInvoiceClaimInfo() { $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_invoice_getClaimInfo', ['Claim' => $this->defaults['CLAIM']]); return $this->_fetchInvoiceClaimInfo($sql); } protected function _fetchInvoiceClaimInfo($sql) { if (false !== ($res = $this->db->fetchRow($sql))) { return $res; } throw new Samo_Exception($this->messages['CAN_NOT_LOAD_CLAIM_INFO']); } public function enable_checkClaimPartPayment() { $enable_pay_ClaimPartPayment = $this->getConfig('Invoice4PartlyPaidReservations', 'Fields', 0); if (!$enable_pay_ClaimPartPayment && ($this->defaults['INVOICE_CLAIMINFO']['Status'] == Samo_Claim::STATUS_PAID || $this->defaults['INVOICE_CLAIMINFO']['Partpayment'])) { throw new Samo_Exception($this->messages['CLAIM_PAYMENT_PARTPAYMENT'], 5); } return true; } public function fetchConfig() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_platez_getConfig', [ 'Claim' => $this->defaults['CLAIM'], 'UserCode' => $this->internet_user(), ] ); return $this->_fetchConfig($sql); } protected function _fetchConfig($sql) { if (false !== ($res = $this->db->fetchRow($sql))) { $this->defaults['TYPE_OWNER_CONFIG'] = array_merge($this->defaults['TYPE_OWNER_CONFIG'], $res); $tmp = array('document_currency_alias' => strtolower($res['document_currency_alias'])); $this->defaults['INVOICE'] = array_merge($this->defaults['INVOICE'], $tmp); $this->defaults['als'] = $this->defaults['INVOICE']['document_currency_alias']; return true; } throw new Samo_Exception($this->messages['NO_CONTRACT']); } public function fetchPartnerInfo($inc) { if (false !== ($tmp = $this->getPartnerInfo($inc))) { return $tmp; } throw new Samo_Exception($this->messages['CAN_NOT_LOAD_PARTNER_INFO']); } public function enable_resultInvoice() { return true; } public function fetchTypeOwnerConfig() { $this->fetchConfig(); $this->fetchOwner(); } protected function _fetchOwner($sql) { if (false !== ($result = $this->db->query($sql))) { if ($this->db->numRows($result) > 0) { $res = $this->db->fetchRow($result); if ($res['owner'] == 0) { $message = (isset($res['error_text']) && !empty($res['error_text'])) ? $res['error_text'] : $this->messages['UNKNOWN_OWNER']; throw new Samo_Exception($message, 7); } $this->defaults['TYPE_OWNER_CONFIG'] = array_merge($this->defaults['TYPE_OWNER_CONFIG'], $res); $tmp = array( 'contract_datebeg' => $res['contract_datebeg'], 'contract_dateend' => $res['contract_dateend'], 'contract_number' => $res['NDog'], 'HaveDogovor' => (!isset($res['HaveDogovor'])) ? 1 : $res['HaveDogovor'], 'HaveCopy' => (!isset($res['HaveCopy'])) ? 1 : $res['HaveCopy'], ); $this->defaults['INVOICE'] = array_merge($this->defaults['INVOICE'], $tmp); return true; } } throw new Samo_Exception($this->messages['NO_CONTRACT'], 6); } public function SaveInvoice() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_4_invoice_LoadSave', [ 'CLAIM' => $this->defaults['CLAIM'], 'rate_type' => $this->claimcost_rate_type, 'contracttype' => $this->defaults['TYPE_OWNER_CONFIG']['contracttype'], 'reward' => 0, 'owner' => $this->defaults['TYPE_OWNER_CONFIG']['owner'], 'cancel' => $this->defaults['CANCEL'], 'UserCode' => $this->internet_user(), 'Partpass' => $this->getPartPassInc() ] ); return $this->_SaveInvoice($sql); } protected function _SaveInvoice($sql) { if (false !== ($res = $this->db->fetchRow($sql))) { $tmp = array_keys($res); if (in_array('error', $tmp)) { throw new Samo_Exception($res['error']); } $res['catalog'] = $res['pc_cost']; $res['commission'] = $res['pc_commiss']; $res['summa'] = $res['pc_amount']; $this->defaults['INVOICE'] = array_merge($this->defaults['INVOICE'], $res); $this->db->freeResult($res); return true; } throw new Samo_Exception($this->messages['CANNOT_PRINT_INVOICE'], 503); } public function InvoiceValidUpToDate() { $this->defaults['INVOICE']['InvoiceValidUpToDate'] = $this->defaults['TYPE_OWNER_CONFIG']['datenow']->copy()->add_days($this->defaults['TYPE_OWNER_CONFIG']['InvoiceValid']); if ($this->defaults['INVOICE']['InvoiceValidUpToDate']->gt($this->defaults['INVOICE_CLAIMINFO']['datebeg'])) { $this->defaults['INVOICE']['InvoiceValidUpToDate'] = $this->defaults['INVOICE_CLAIMINFO']['datebeg']->copy()->add_days(-1 * $this->defaults['TYPE_OWNER_CONFIG']['InvoiceValidNotLater']); } if ($this->defaults['INVOICE']['InvoiceValidUpToDate']->lt($this->defaults['TYPE_OWNER_CONFIG']['datenow'])) { $this->defaults['INVOICE']['InvoiceValidUpToDate'] = $this->defaults['TYPE_OWNER_CONFIG']['datenow']->copy(); } } public function enable_checkHeaderPartner() { if ($this->defaults['INVOICE_CLAIMINFO']['headerpartner'] > 0 && $this->getPartner() != $this->defaults['INVOICE_CLAIMINFO']['headerpartner']) { if ($this->emailNotice()) { throw new Samo_Exception($this->messages['INVOICE_HEADOFFICE_SEND_SUCCESS'], 3); } else { throw new Samo_Exception($this->messages['INVOICE_HEADOFFICE_SEND_FAILED'], 2); } } return true; } public function emailNotice() { try { if ($this->defaults['INVOICE_CLAIMINFO']['accountemail'] == '') { return false; } $params = [ 'Inc' => $this->defaults['CLAIM'], ]; $return = $this->samotourMail(self::MAIL_INVOICE_REQUEST, $params); } catch (Samo_Exception $e) { throw new Samo_Exception($this->messages['INVOICE_EMAIL_NOTICE_FAILED'], 431); } return $return; } public function pay_variant($claim) { $invoice = $this->is_module_installed('invoice'); if (false !== $invoice) { $this->construct($claim); $claimInfo = $this->claimInfo(); $this->defaults['TOURINC'] = $claimInfo['TourInc']; if ($this->has_permission('invoice')) { if ($this->pay_variant_check_owner($claim, 'invoice')) { if ($this->get_template_invoice()) { return [ 'link' => $invoice['url'] . 'CLAIM=' . $claim, 'external' => $this->external ]; } } } } return false; } public function Check_Print_By_Tour() { if (!isset($this->defaults['TOURINC']) || $this->defaults['CLAIM_INFO']['TourInc'] != $this->defaults['TOURINC']) { $this->defaults['TOURINC'] = $this->defaults['CLAIM_INFO']['TourInc']; } if (!$this->has_permission('invoice')) { $messages = Samo_Registry::get('messages'); throw new Samo_Exception($messages['CL_DOC_PRINT_DISABLED'], 403); } } protected function getExternalDocumentInit() { if ($this->defaults['CLAIM']) { return $this->getExternalDocumentJob(sprintf('invoice_%d.pdf', $this->defaults['CLAIM']), sprintf('invoice_%d_%%s_%%s.pdf', $this->defaults['CLAIM'])); } throw new Samo_Exception($this->messages['CANNOT_PRINT']); } protected function getExternalDocumentParams() { $this->invoice(); return [ 'claim' => $this->defaults['CLAIM'], 'template' => $this->defaults['template'], ]; } } 