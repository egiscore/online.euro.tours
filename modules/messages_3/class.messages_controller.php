<?php
 class Messages_Controller extends Samo_Controller { public $model; public function construct() { Samo_Registry::get('response')->charset = 'utf-8'; parent::construct(); $this->view->assign('settings', $this->model->settings()); } protected function unread_msg($update = false) { return $update; } public function default_action() { Samo_Registry::get('response')->charset = 'windows-1251'; parent::unread_msg(); parent::default_action(); } public function CLAIM_POPUP() { if (($claim = Samo_Request::intval('CLAIM')) && ($messages = $this->model->claim($claim))) { $this->view->assign('byClaim', $messages); } return $this->THREADS_POPUP(); } public function THREADS_POPUP() { $unread = $this->model->unread(); $recent = $this->model->recent(); $showForm = Samo_Utils::ifs(Samo_Request::find('form'), !$unread && !$recent, false); $selector = Samo_Request::get('selector'); $this->view ->assign('claimList', $this->model->claimList()) ->assign('messageCategory', $this->model->messageCategory()) ->assign('showForm', $showForm) ->assign('unread', $unread) ->assign('unreadNextPage', $this->nextPageParams($unread, ['samo_action' => 'NEXT_PAGE', 'filter' => Messages_Model::UNREAD | Messages_Model::TOPICS_ONLY])) ->assign('recent', $recent) ->assign('recentNextPage', $this->nextPageParams($recent, ['samo_action' => 'NEXT_PAGE', 'filter' => Messages_Model::TOPICS_ONLY])) ->element_update($selector, 'thread-list.tpl'); } public function NEXT_PAGE() { $filter = Samo_Utils::ifs(Samo_Request::intval('filter'), 0); $page = Samo_Request::intval('PAGE'); $claim = Samo_Request::intval('CLAIM'); $messages = $this->model->filter($filter, $page, null, $claim); $nextPageLink = Samo_Request::strval('selector'); $this->view ->assign('messages', $messages) ->assign('nextPage', $this->nextPageParams($messages, ['samo_action' => 'NEXT_PAGE', 'filter' => $filter])) ->element_replace($nextPageLink, 'thread-headers.tpl'); } private function nextPageParams($list, $params) { if ($list) { $element = reset($list); $currentPage = $element['Page']; $totalPages = $element['PageCount']; if ($currentPage < $totalPages) { $params['PAGE'] = $currentPage + 1; return $params; } } return false; } public function THREAD_POPUP($root = null) { if ($result = $this->model->tree($root)) { $this->view->assign('messages', $result); } $selector = Samo_Request::get('selector'); $this->view ->assign('messageCategory', $this->model->messageCategory()) ->element_update($selector, 'thread-messages.tpl') ->js_call('samo.message_tree'); parent::unread_msg(true); } public function SAVE_POPUP() { $_POST = Samo_Registry::get('_POST'); try { if ($new = $this->model->create()) { $this->view->assign('newMessage', $new); $this->THREAD_POPUP(Samo_Utils::ifs(Samo_Request::intval('PARENT'), $this->model->last_thread, $new)); } } catch (Samo_Exception $e) { switch ($e->getCode()) { case 1: case 4: $element = 'input.subject'; break; case 5: $element = 'input.claim'; break; case 7: $element = '.messagecategory'; break; default: $element = 'textarea'; break; } $this->view->element_error(Samo_Request::strval('selector') . ' ' . $element, $e->getMessage()); } } public function MARK_READ_POPUP() { $unread = Samo_Request::integers('MSGLIST'); if ($unread && $messages = $this->model->read($unread)) { $elements = array_map( function ($id) { return '#msg-' . $id; }, array_keys($messages) ); $this->view->remove_class(implode(',', $elements), 'message-unread'); } } } 