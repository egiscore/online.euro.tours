<?php
 class Messages_Model extends Samo { protected $auth_required = array('agency'); protected $cl_refer = ''; protected $page = 1; protected $rec_on_page = 12; public $last_thread = null; const UNREAD = 2; const TOPICS_ONLY = 4; public function settings() { return ['can_reply' => true, 'can_create_new' => true]; } public function construct() { parent::construct(); if ($this->action != 'default_action') { $this->db->clientCharset('utf8'); } } public function read($messages = array()) { if (count($messages)) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_4_message_read', [ 'PartPass' => $this->getPartPassInc(), 'MessageList' => implode(',', $messages), 'UserCode' => $this->internet_user(), ] ); $result = $this->db->fetchAllWithKey($sql, 'MessageInc'); return $result; } return false; } public function tree($parent = null) { if ($parent = Samo_Utils::ifs($parent, Samo_Request::intval('PARENT'))) { $result = $this->filter(null, null, $parent); return $result; } return false; } protected function message($text, $parent = null, $claim = null, $messagetype = null) { $messages = Samo_Registry::get('messages'); if (empty($text)) { throw new Samo_Exception($messages['MSG_ERROR_TEXT_EMPTY'], 2); } if (empty($messagetype) && !empty($this->messageCategory())) { throw new Samo_Exception($messages['MSG_ERROR_MESSAGETYPE_EMPTY'], 7); } if (null !== $claim) { try { $model = new Samo_Claim(); $model->construct($claim); } catch (Samo_Exception $e) { throw new Samo_Exception(sprintf($messages['MSG_ERROR_CLAIM'], $claim), 5); } } $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_5_message_sent', [ 'PartPass' => $this->getPartPassInc(), 'Text' => $this->db->quoteNvarchar($text, 'utf8'), 'Parent' => $parent, 'Claim' => $claim, 'MessageType' => $messagetype, 'UserCode' => $this->internet_user(), ] ); $log = array( 'partpass' => $this->getPartPassInc(), 'sql' => $sql, 'claim' => $claim, 'message' => 'SEND', 'priority' => 'messages' ); $msgid = $this->db->web_log_table($log); $e = null; try { if ($return = $this->db->fetchRow($sql)) { $log['result']['return'] = $return; $this->last_thread = $return['MessageParent']; $return = $return['MessageInc']; } else { $log['result']['return'] = false; } } catch (Database_Exception $e) { $log['result']['error'] = $this->db->lastError(); } $this->db->web_log_table($log, $msgid); if ($e) { throw $e; } return $return; } public function create($text = null, $parent = null, $claim = null, $messagetype = null) { $text = Samo_Utils::ifs($text, Samo_Request::strval('TEXT', 1)); $parent = Samo_Utils::ifs($parent, Samo_Request::intval('PARENT')); $claim = Samo_Utils::ifs($claim, Samo_Request::intval('CLAIM')); $messages = Samo_Registry::get('messages'); if (($_claim = Samo_Request::find('CLAIM')) && $_claim != $claim) { throw new Samo_Exception(sprintf($messages['MSG_ERROR_CLAIM'], $_claim), 5); } $settings = $this->settings(); if ($parent && !$settings['can_reply']) { throw new Samo_Exception($messages['MSG_REPLY_DENY'], 6); } if (!$parent && !$settings['can_create_new']) { throw new Samo_Exception($messages['MSG_CREATE_DENY'], 6); } $messagetype = Samo_Utils::ifs($messagetype,Samo_Request::intval('MESSAGETYPE')); return $this->message($text, $parent, $claim, $messagetype); } public function filter($filter = 0, $page = 1, $parent = null, $claim = null, $buyer = null) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_message_list', [ 'PartPass' => $this->getPartPassInc(), 'RecOnPage' => $this->rec_on_page, 'Page' => $page, 'Filter' => $filter, 'Parent' => $parent, 'Claim' => $claim, 'PhysBuyer' => $buyer, 'LangId' => Samo_Request::langid(), 'UserCode' => $this->internet_user(), ] ); $old = $this->db->clientCharset('utf8'); $return = $this->db->fetchAll($sql); if ($old !== 'utf8') { $this->db->clientCharset($old); } return $return; } public function unread() { return $this->filter(self::UNREAD | self::TOPICS_ONLY); } public function unreadCount($claim = null, $buyer = null) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_message_count', [ 'PartPass' => $this->getPartPassInc(), 'Claim' => $claim, 'PhysBuyer' => $buyer, 'UserCode' => $this->internet_user(), ] ); $result = [ 'total' => 0, 'urgent' => 0, ]; $messages = $this->db->fetchRow($sql); if (false !== $messages) { $result['total'] = $messages['UnreadCount']; $result['urgent'] = $messages['UrgentCount']; } return $result; } public function recent($page = null) { $page = Samo_Utils::ifs($page, Samo_Request::intval('PAGE', 1, 1000), 1); return $this->filter(self::TOPICS_ONLY, $page); } public function claim($claim) { $old = $this->rec_on_page; $this->rec_on_page = 10000; $result = $this->filter(self::TOPICS_ONLY, 1, null, $claim); $this->rec_on_page = $old; return $result; } public function claimList() { $return = []; $settings = $this->settings(); if ($settings['can_reply'] || $settings['can_create_new']) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_message_claimList', [ 'PartPass' => $this->getPartPassInc(), 'UserCode' => $this->internet_user(), 'LangId' => Samo_Request::langid(), 'PhysBuyer' => ($buyer = $_SESSION['samo_auth']['PhysBuyerInc']) ? $buyer : null, ] ); $messages = Samo_Registry::get('messages'); $empty = [0 => ['id' => 0, 'name' => mb_convert_encoding($messages['MSG_WITHOUT_CLAIM'], 'utf-8', 'cp1251')]]; $list = ($list = $this->db->fetchAll($sql)) ? array_merge($empty, $list) : []; $selected = isset($_SESSION['samo_auth']['CLAIM']) ? $_SESSION['samo_auth']['CLAIM'] : Samo_Request::intval('CLAIM'); $return = array_map( function($claim) use ($selected) { $claim['selected'] = $claim['id'] == $selected; return $claim; }, $list ); if (isset($_SESSION['samo_auth']['CLAIM'])) { $return = array_filter( $return, function($claim) { return $claim['selected']; } ); } } return $return; } public function messageCategory() { $return = []; $settings = $this->settings(); if ($settings['can_reply'] || $settings['can_create_new']) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_message_MessageCategory', [ 'PartPass' => $this->getPartPassInc(), 'UserCode' => $this->internet_user(), 'LangId' => Samo_Request::langid(), ] ); $messages = Samo_Registry::get('messages'); $empty = [0 => ['id' => 0, 'name' => mb_convert_encoding($messages['MSG_MESSAGECATEGORY'], 'utf-8', 'cp1251')]]; $list = $this->db->fetchAll($sql); $return = ($list) ? array_merge($empty, $list) : []; } return $return; } } 