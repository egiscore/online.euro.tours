<?php
 class Pay_Variant_Model extends Samo_EPlatez { public $cash = null; public function is_enabled() { $this->defaults['CLAIMTYPE'] = 1; $this->defaults['CLAIMBEG'] = $this->defaults['CLAIMEND'] = $this->defaults['CLAIM']; if ($result = $this->claimInfo()) { if ($result['AccessPay'] == 1) { return true; } } throw new Samo_Exception($this->messages['PAY_VARIANT_CLAIM_NOT_FOUND']); } public function payVariants($module = 'pay_variant') { $result = $keys = array(); $is_admin = Samo_Request::is_admin(); $db = ($is_admin) ? '<OFFICEDB>' : '<ONLINEDB>'; $sql = $this->db->formatExec($db . '.dbo.up_WEB_3_tour_config', ['Section' => $module, 'UserCode' => $this->internet_user()]); $variants = Samo_Utils::ifs($this->db->fetchAllWithKey($sql, 'What'), array()); $cost = 0; try { if ($claimCost = $this->claimCost()) { $amount_field = $_SESSION['samo_auth']['type'] == 'agency' ? 'Amount' : 'Amount_to_pay_person'; $cost = isset($claimCost[1]) ? $claimCost[1][$amount_field] : $claimCost[0][$amount_field]; } } catch (Samo_Exception $e) { $cost = -0; } $filter = 'person' == $_SESSION['samo_auth']['type'] ? 'can_pay_person' : 'can_pay_agency'; foreach ($variants as $variant => $data) { if (0 !== $data['Value']) { $vars = false; $check_owner = false; try { $model = \Samo_Loader::load_object(ucwords($variant . '_Model', '_'), $this->config); if (method_exists($model, 'pay_variant')) { $vars = $model->pay_variant($this->defaults['CLAIM']); if (false === $vars) { $data['Value'] = 0; } else { $check_owner = true; } } } catch (\Samo_Exception $e) { if (501 == $e->getCode()) { $data['Value'] = 0; } if (0 == $e->getCode() && strpos($e->getMessage(), ' not found in the file') !== false && in_array($variant, ['deposit', 'rfzbank'])) { $data['Value'] = 0; } } if (0 != $data['Value']) { $enable_owner = true; if (!$check_owner) { $enable_owner = $this->pay_variant_check_owner($this->defaults['CLAIM'], $variant); } if ($enable_owner) { $sql = $this->db->formatExec($db . '.dbo.up_WEB_3_tour_config', ['Section' => $variant, 'UserCode' => $this->internet_user()]); $data = array_map( function ($el) { return $el['Value']; }, Samo_Utils::ifs($this->db->fetchAllWithKey($sql, 'What'), []) ); if ((isset($data[$filter]) && 1 == $data[$filter])) { if (isset($data['link'])) { $link = $data['link']; foreach (['CLAIM' => $this->defaults['CLAIM'], 'AMOUNT' => $cost] as $param => $value) { if (false !== strpos($link, '{' . $param . '}')) { $link = str_replace('{' . $param . '}', $value, $link); } else { $link .= (false !== strpos($link, '?') ? '&' : '?') . $param . '=' . $value; } } $data['link'] = $link; } $files = array( _ROOT . 'templates/' . $variant . '/pay_variant.tpl', _ROOT . 'templates/pay_variant/variant.tpl', ); $data['name'] = $variant; $data['tpl'] = $this->find_template($files); if (isset($data['description'])) { $data['description'] = str_replace(array('{WWWROOT}'), array(WWWROOT), $data['description']); $data['resource'] = 'string:' . $data['description']; } else { $data['resource'] = 'string:'; } $data['vars'] = $vars; $data['sort'] = isset($data['sort']) ? intval($data['sort']) : 0; $result[$variant] = $data; } } } } } uasort( $result, function ($a, $b) { return $a['sort'] < $b['sort'] ? -1 : 1; } ); return $result; } } 