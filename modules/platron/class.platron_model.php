<?php
 class Platron_Model extends Samo_Acquiring_PG { protected $moduleName = 'platron'; protected $OPT_CREATE_CHECK_STATUS_JOB = false; const PLATRON_CAPTURE_URL = 'https://www.platron.ru/do_capture.php'; const PLATRON_REFUND_URL = 'https://www.platron.ru/revoke.php'; const PLATRON_RECEIPT_URL = 'https://www.platron.ru/receipt.php'; protected static function addPG($data) { if (is_array($data)) { foreach ($data as $i => $d) { $key = is_numeric($i) ? $i : 'pg_'.$i; $data[$key] = static::addPG($d); if (!is_numeric($i)) { unset($data[$i]); } } } return $data; } public static function getDataValues($data) { $tmp = []; foreach ($data as $i => $j) { $tmp[] = [$i, $j]; } uasort( $tmp, function ($a, $b) { if ($a[0] == $b[0]) { return 0; } return $a[0] > $b[0] ? 1 : -1; } ); $tmp = array_values($tmp); foreach ($tmp as $ind => $d) { if (is_array($d[1])) { unset($tmp[$ind]); $tmp2 = []; foreach ($d[1] as $i => $j) { $tmp2 = array_merge($tmp2, static::getDataValues($j)); } $tmp = array_merge(array_merge($tmp2, array_slice($tmp, 0, $ind)), array_slice($tmp, $ind)); } } return $tmp; } public static function signData($data, $script) { if (!isset($data['salt'])) { $data['salt'] = uniqid(); } if (!isset($data['merchant_id'])) { $data['merchant_id'] = Samo_Acquiring::acquiringConfig('PLATRON_MERCHANT_ID'); } $script = trim(basename($script)); $d = $data; $d = static::getDataValues($d); $tmp = []; foreach ($d as $dd) { $tmp[] = $dd[1]; } $d = $tmp; array_unshift($d, $script); array_push($d, Samo_Acquiring::acquiringConfig('PLATRON_SECRET_KEY')); $data['sig'] = md5(implode(';', $d)); $data = static::addPG($data); return $data; } protected static function orderInfo($inumber) { return self::_request(Samo_Acquiring::acquiringConfig('PLATRON_STATUS_URL'), array('order_id' => $inumber)); } protected static function _request($url, $data) { $data = self::signData($data, $url); $url = $url . '?' . http_build_query($data); $res = Samo_Curl::request($url, null, 'GET'); $res = new Andr_Xml($res); if ((string)$res->pg_status != 'ok') { $message = Samo_EPlatez::messages('ACQUIRING_REQUEST_FAILED'); if (isset($res->pg_error_description)) { $message .= '(' . (string)$res->pg_error_description . ')'; } throw new Samo_Exception($message); } return $res; } protected static function supportRequest($url, $inumber) { $info = self::orderInfo($inumber); self::_request($url, array('payment_id' => (string)$info->pg_payment_id)); return true; } public static function capturePay($inumber) { return self::supportRequest(self::PLATRON_CAPTURE_URL, $inumber); } public static function refundPay($inumber) { return self::supportRequest(self::PLATRON_REFUND_URL, $inumber); } public static function sendCheck($inumber, $data) { $items = []; foreach ($data as $d) { $items[] = [ 'label' => mb_convert_encoding($d['label'], 'utf-8', 'windows-1251'), 'quantity' => 1, 'price' => $d['price'], ]; } self::_request( self::PLATRON_RECEIPT_URL, [ 'operation_type' => 'payment', 'order_id' => $inumber, 'items' => $items, ] ); return true; } } 