<?php
 class Profile_Controller extends Samo_Controller { public function construct() { $this->is_embedable = false; } public function RECOVERY_PASSWORD() { $this->default_app_env(); $this->view ->render('recovery'); } public function SEARCH_PARTPASS() { $response = Samo_Registry::get('response'); $email = Samo_Request::email('search'); $alias = (!$email) ? Samo_Request::strval('search') : null; try { if ($this->model->request_change_password($email, $alias)) { $output = ($alias) ? $this->messages['RECOVERY_PASSWORD_CONFIRM_ALIAS'] : $this->messages['RECOVERY_PASSWORD_CONFIRM_MAIL']; if ($response->respond_to_js()) { $this->view->element_text('#recovery .container', $output)->add_class('#recovery .container', 'note'); } else { $this->view ->assign('message', $output) ->render('recovery'); } } } catch (Samo_Exception $e) { $this->view->error($e->getMessage()); } } public function CONFIRM_EMAIL() { $this->auth_init(); if (!isset($_SESSION['params'])) { return $this->view->redirect_to(Samo_Url::route('profile', array('samo_action' => 'recovery_password'))); } $this->default_app_env(); $email = isset($_SESSION['params']['email']) ? $_SESSION['params']['email'] : null; $alias = isset($_SESSION['params']['alias']) ? $_SESSION['params']['alias'] : null; $result = $this->model->search_partpass($email, $alias); if (1 == count($result)) { $user = reset($result); return $this->CHANGE_PASSWORD($user); } $this->view ->assign('users', $result) ->render('choose-partpass'); return true; } public function CHANGE_PASSWORD($user = null) { if (null === $user) { $this->auth_init(); if (!isset($_SESSION['params'])) { return $this->view->redirect_to(Samo_Url::route('profile', array('samo_action' => 'recovery_password'))); } $email = isset($_SESSION['params']['email']) ? $_SESSION['params']['email'] : null; $alias = isset($_SESSION['params']['alias']) ? $_SESSION['params']['alias'] : null; $result = $this->model->search_partpass($email, $alias); $partpass = Samo_Request::intval('partpass'); $exists = false; foreach ($result as $user) { if ($user['PartPassInc'] == $partpass) { $exists = $user; break; } } } else { $exists = true; } try { if ($exists && $this->model->reset_password($user)) { unset($_SESSION['params']); $message = sprintf($this->messages['RECOVERY_PASSWORD_SUCCESS'], $user['Email']); $response = Samo_Registry::get('response'); if ($response->respond_to_js()) { $this->view->element_text('#choose-partpass .container', $message)->add_class('#choose-partpass .container', 'note'); } else { $this->view->assign('message', $message); } $this->view->render('recovery'); return true; } throw new Samo_Exception($this->messages['RECOVERY_PASSWORD_COMMON_ERROR'], 500); } catch (Samo_Exception $e) { $this->view->error($e->getMessage()); } } public function allow_js() { if (in_array($this->action, ['internal', 'sso'])) { $this->allow_js = false; } return parent::allow_js(); } public function INTERNAL() { $response = Samo_Registry::get('response'); $response->respond_to('js-api'); $response->charset = 'utf-8'; $login = Samo_Request::strval('login', 2, 32); $signature = Samo_Request::strval('signature', 32, 32); $client_id = Samo_Request::strval('client_id', 16, 32); $nonce = Samo_Request::strval('nonce', 1, 32); $auth = $this->model->internal_auth($client_id, $login, $nonce, $signature); $utf = function($el) use (&$utf) { if (is_scalar($el)) { return mb_convert_encoding($el, 'utf-8', 'cp1251'); } if (is_array($el)) { foreach ($el as $idx => $val) { $el[$utf($idx)] = $utf($val); } return $el; } }; $auth = ($auth) ? $utf($auth) : $auth; $callback = Samo_Request::strval('callback'); $error = Samo_Utils::ifs(Samo_Request::strval('error'), $callback); if (!$auth) { $auth = ['error' => 'Invalid login or/and password']; } $jsfunc = (!empty($error) && !$auth) ? $error : $callback; $this->view->json_output($auth, $jsfunc); } public function SSO() { $response = Samo_Registry::get('response'); $code = Samo_Request::strval('code', 32, 32); if ($code) { $this->auth_init(); if (!isset($_SESSION['samo_auth']) || !isset($_SESSION['samo_auth']['code']) || $code !== $_SESSION['samo_auth']['code']) { $codeinfo = $this->model->checkCodeAuth($code); if (isset($codeinfo['auth'])) { $_SESSION['samo_auth'] = $codeinfo['auth']; $_SESSION['samo_auth']['code'] = $code; } else { $_SESSION['samo_auth'] = false; } } } $format = Samo_Utils::ifs(Samo_Request::strval('format'), 'js'); if ($format == 'js') { $response->respond_to('js-api'); $callback = Samo_Utils::ifs(Samo_Request::strval('callback'), 'void'); $error = Samo_Utils::ifs(Samo_Request::strval('error'), $callback); $auth = isset($_SESSION['samo_auth']) && $_SESSION['samo_auth'] !== false; $jsfunc = (!empty($error) && !$auth) ? $error : $callback; $this->view->json_output($auth, $jsfunc); } if ($format == 'image') { $response->respond_to('gif'); $response->output(base64_decode("R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==")); } } public function LOGOUT() { $this->auth_init(); $_SESSION = array(); $format = Samo_Utils::ifs(Samo_Request::strval('format'), 'html'); $response = Samo_Registry::get('response'); switch ($format) { case 'js': $response->respond_to('js-api'); $callback = Samo_Utils::ifs(Samo_Request::strval('callback'), 'void'); $this->view->json_output(true, $callback); break; case 'image': $response->respond_to('gif'); $response->output(base64_decode("R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==")); break; default: $response->refresh(); break; } } public function PARTNER_AGREEMENT() { $this->view->render('partner_agreement'); } public function contractPreview() { $this->auth_init(); if (false !== ($res = $this->model->getExternalDocument())) { if (!isset($res['error'])) { return $this->view->js_call('samo.download_result', array_merge($res, array('label' => $this->messages['PARTNER_CONTRACT_LINK']))); } } $this->view->js_call('samo.download_result', array_merge($res, array('label' => ' '))); } public function contractSave() { $this->auth_init(); if (false !== ($res = $this->model->contractSave())) { if (isset($_SESSION) && isset($_SESSION['return_url'])) { $response = Samo_Registry::get('response'); $response->redirect_to($_SESSION['return_url']); unset($_SESSION['return_url'], $_SESSION['tpl']); } } } public function PARTNER_DISCOUNT() { $this->auth_init(); $this->view->assign('PERSONAL_AREA', $this->model->links()); if ($show_discount = $this->model->show_partner_discount()) { $partner = Samo_Loader::load_object('Samo_Partner'); $partner->construct(); $tourInc = Samo_Request::intval('TOURINC'); if ($tourInc) { $partner->defaults['TOURINC'] = $tourInc; $this->view->assign('PARTNER_DISCOUNT', $partner->discountPercent($tourInc)); } $this->view->assign('TOURINC', $partner->discountTours()); $this->view->render('partner_discount'); } else { $this->view->error($this->messages['PARTNER_DISCOUNT_ERROR']); } } public function AGENCYDISCOUNT() { $this->auth_init(); $partner = Samo_Loader::load_object('Samo_Partner'); $partner->construct(); $this->view->element_text('#discount', $partner->discountPercent(Samo_Request::intval('TOURINC'))); } public function PARTNER_CURATOR() { $this->auth_init(); $this->view->assign('PERSONAL_AREA', $this->model->links()); $partner = Samo_Loader::load_object('Samo_Partner'); $partner->construct(); $this->view->assign('CURATOR', $partner->getCurator()); $this->view->render('partner_curator'); } } 