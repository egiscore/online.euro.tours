<?php
 class Profile_Model extends Samo { const MAIL_CHANGE_PASSWORD_REQUEST = 7; const MAIL_NEW_PASSWORD = 6; public function search_partpass($mail, $alias = null) { $email = Samo_Validate::email($mail) ? $mail : null; $alias = (!$email && !$alias) ? $mail : $alias; if (!$email && !$alias) { return false; } $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_search_partpass', [ 'Email' => $email, 'Alias' => $alias, ] ); $rows = $this->db->fetchAll( $sql, function ($row) use ($email) { $string = str_replace("\r\n", ' ', $row['Email']); $string = str_replace("\n", ' ', $string); $row['Email'] = null; foreach (preg_split('/[\s,;]/', $string) as $token) { $mail = filter_var($token, FILTER_VALIDATE_EMAIL); if ($mail && ($email === null || $mail == $email)) { $row['Email'] = $mail; break; } } return $row; } ); if (false !== $rows && $alias == null) { $rows = array_filter( $rows, function ($row) use ($email) { if ($row['Email'] == $email) { return true; } return false; } ); } return $rows; } public function confirm_email($params) { if (!isset($params['ip'])) { $params['ip'] = Samo_Request::remote_addr(); } $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_online_link', [ 'Entity' => 'CONFIRM_EMAIL_PARTPASS', 'User' => $this->internet_user(), 'Params' => http_build_query($params), 'Ttl' => 86400, ] ); $url = $this->db->fetchOne($sql); return $url; } public function request_change_password($email, $alias) { $messages = Samo_Registry::get('messages'); $result = $this->search_partpass($email, $alias); if (false !== $result && count($result)) { if (null !== $alias) { if (1 == count($result)) { $mail = $result[0]['Email']; } else { throw new Samo_Exception($messages['RECOVERY_PASSWORD_COMMON_ERROR'], 500); } } else { $mail = $email; } $params = array( 'email' => $mail, 'alias' => $alias, ); if ($link = $this->confirm_email($params)) { $params['link'] = $link; return $this->samotourMail(self::MAIL_CHANGE_PASSWORD_REQUEST, $params, $mail); } throw new Samo_Exception($messages['RECOVERY_PASSWORD_CONFIRMATION_ERROR'], 501); } else { throw new Samo_Exception($messages['RECOVERY_PASSWORD_ACCOUNT_NOT_FOUND'], 404); } } public function reset_password($userdata) { $messages = Samo_Registry::get('messages'); if ($userdata) { if ($info = $this->change_password($userdata)) { $params = array( 'inc' => $info['PartPassInc'], 'password' => $info['Psw'], 'email' => $userdata['Email'], 'link' => Samo_Url::route('/'), ); return $this->samotourMail(self::MAIL_NEW_PASSWORD, $params, $userdata['Email']); } } throw new Samo_Exception($messages['RECOVERY_PASSWORD_COMMON_ERROR']); } protected function change_password($partpass) { $password = Samo_Utils::generatePassword(); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_SaveEditPartpass', [ 'PartpassInc' => $partpass['PartPassInc'], 'Psw' => $password, 'UserCode' => $this->internet_user(), ] ); if ($result = $this->db->fetchRow($sql)) { $result['Psw'] = $password; return $result; } return false; } public function internal_auth($client_id, $login, $nonce, $signature) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_partner_sso', [ 'Client_id' => $client_id, 'Alias' => $login, 'Nonce' => $nonce, 'Signature' => '0x' . $signature, ] ); if (false !== ($query = $this->db->query($sql))) { if ($auth = $this->db->fetchRow($query)) { $this->db->nextResult($query); $code = $this->db->fetchOne($query); $result = [ 'Partner' => $auth['Partner'], 'PartPassInc' => $auth['PartPassInc'], 'Parttype' => $auth['Parttype'], 'OfficialName' => $auth['OfficialName'], 'ParttypeName' => $auth['ParttypeName'], 'PartPassAlias' => $auth['PartPassAlias'], 'PartPassName' => $auth['PartPassName'], 'LogonImgUrl' => Samo_Url::route('profile', ['samo_action' => 'sso', 'code' => $code, 'format' => 'image']), 'LogonScriptUrl' => Samo_Url::route('profile', ['samo_action' => 'sso', 'code' => $code, 'format' => 'js']), 'LogoutImgUrl' => Samo_Url::route('profile', ['samo_action' => 'logout', 'code' => $code, 'format' => 'image']), 'LogoutScriptUrl' => Samo_Url::route('profile', ['samo_action' => 'logout', 'code' => $code, 'format' => 'js']), ]; return $result; } } return false; } protected function getExternalDocumentInit() { return $this->getExternalDocumentJob(sprintf('agreement_agency_%d.pdf', $this->getPartner()), sprintf('agreement_agency_%d_%%s_%%s.pdf', $this->getPartner())); } protected function getExternalDocumentParams() { $tpl = $this->get_settings_printform(DocCategory::AGREEMENT_AGENCY); if (false !== $tpl) { $_SESSION['tpl'] = $tpl; $params = ['template' => $tpl, 'partner' => $this->getPartner(), 'partpass' => $this->getPartPassInc()]; return $params; } $messages = Samo_Registry::get('messages'); throw new Samo_Exception($messages['TEMPLATE_NOT_CONFIGURE']); } public function contractSave() { $messages = Samo_Registry::get('messages'); $CONTRACTAGREE = Samo_Utils::ifs(Samo_Request::intval('CONTRACTAGREE', 0, 1), 0); if (!$CONTRACTAGREE) { throw new Samo_Exception($messages['PARTNER_CONTRACT_AGREE_MUST'], 1); } $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_webst_save_partner_agreement', [ 'Partner' => $this->getPartner(), 'Partpass' => $this->getPartPassInc(), 'UserCode' => $this->internet_user(), 'Template' => $_SESSION['tpl'], 'IP' => Samo_Request::remote_addr(), 'LangId' => Samo_Request::langid(), ] ); if (false !== ($row = $this->db->fetchRow($sql))) { if (array_key_exists('error_code', $row)) { throw new Samo_Exception($row['error'], $row['error_code']); } $_SESSION['samo_auth']['agreement'] = 1; return true; } throw new Samo_Exception($messages['INTERNAL_SERVER_ERROR']); } public static function show_partner_discount() { return !$_SESSION['samo_auth']['mode']; } public static function links() { $return = []; $registry = Samo_Registry::instance(); $module = isset($registry['module']) ? $registry['module']['module'] : 'cl_refer'; $messages = isset($registry['messages']) ? $registry['messages'] : []; $modules = isset($messages['PERSONAL_AREA']) ? $messages['PERSONAL_AREA'] : []; $selected_exists = false; foreach ($modules as $alias => $title) { $params = []; if ($alias == 'profile:partner_discount' && !self::show_partner_discount()) { continue; } if ($alias == 'profile:partner_curator' && (!isset($_SESSION['samo_auth']['Supervisors']) || $_SESSION['samo_auth']['Supervisors'] == 0)) { continue; } if (strpos($alias, ':') !== false) { list($alias, $samo_action) = explode(':', $alias); $params['samo_action'] = $samo_action; } $key = (isset($params['samo_action'])) ? $params['samo_action'] : $alias; $external = isset($registry['routes'][$alias]); $selected = ($key == $alias && $module == $alias) || ($key != $alias && Samo_Request::get('samo_action') == $key); if (!$external && !method_exists('Cl_Refer_Controller', $alias)) { continue; } $url = $external ? Samo_Url::route($alias, $params) : Samo_Url::route('cl_refer', ['samo_action' => $alias]); $return[$key] = [ 'id' => $key, 'name' => $title, 'selected' => $selected, 'url' => $url, ]; $selected_exists = $selected_exists || $selected; } if (!$selected_exists) { foreach ($return as $key => $val) { $return[$key]['selected'] = true; break; } } return $return; } public function auth_required() { return (!in_array($this->action, ['search_partpass', 'confirm_email', 'recovery_password', 'change_password', 'internal'])) ? ['agency'] : false; } } 