<?php
class Psb_Model extends Samo_Acquiring { protected $moduleName = 'psb'; public function __construct() { $inc = $this->acquiringConfig('PSB_SAMO_INC'); $login = $this->acquiringConfig('PSB_SAMO_ALIAS'); if ($inc && $login) { parent::__construct(); $this->bankInc = $inc; $this->bankAlias = $login; } else { if ($this->is_module_installed('psb')) { throw new Samo_Exception(get_called_class() . ' was not configured', 501); } } } public static function getPSB() { return Samo_Loader::load_object( 'Psb', self::acquiringConfig('PSB_TERMINAL'), self::acquiringConfig('PSB_MERCHANT'), self::acquiringConfig('PSB_MERCHANT_NAME'), self::acquiringConfig('PSB_KEY') ); } public function getFormAction() { return $this->getPSB()->getPayURL(); } public function getHiddenFields() { return [ 'AMOUNT' => '', 'CURRENCY' => '', 'ORDER' => '', 'DESC' => '', 'TERMINAL' => '', 'TRTYPE' => '', 'MERCHANT' => '', 'MERCH_NAME' => '', 'TIMESTAMP' => '', 'NONCE' => '', 'BACKREF' => '', 'P_SIGN' => '', ]; } protected function _ID($id) { return str_pad($id, 6, '0', STR_PAD_LEFT); } public function makeFormData() { $return = false; $logger = Samo_Loader::load_object('WSPAY_Logger'); $logger->init(); $logger->setMethod(__METHOD__); try { $info = $this->getPayInfo(); $inv = $this->getInvoice(); $logger->setInumber($inv['inumber']); $inv = $this->getInvoiceInfo($inv['inumber']); $logger->setClaim($this->_claim); $subject = sprintf($this->messages['ACQUIRING_PAYMENT_PURPOSE'], $this->_claim); $isB2C = self::isB2C(); $page = ($isB2C) ? 'cl_refer_person' : 'cl_refer'; $params = ['CLAIM' => $this->_claim]; if ($isB2C && $this->acquiringConfig('PSB_PRE_AUTH')) { $params['DOPAY'] = Cl_Refer_Person_Controller::PAYMENT_WAIT; } $logger->log($params, 'params'); $return = $this->getPSB()->getFormData($this->_amount, $info['currency'], $this->_ID($inv['Id']), $subject, Samo_Url::parse(Samo_Url::route($page, $params)), $this->acquiringConfig('PSB_PRE_AUTH') ? 12 : 1); } catch (Exception $e) { $logger->exception($e); } $logger->log($return, 'result'); $logger->commit(); return $return; } public static function parseCallbackNotify($data) { $return = false; $logger = Samo_Loader::load_object('WSPAY_Logger'); $logger->init(); $psb = static::getPSB(); $isHold = $data['TRTYPE'] == 12; $isPay = $data['TRTYPE'] == 1; $isCapture = $data['TRTYPE'] == 21; if ($isHold) { $logger->setMethod(__METHOD__ . '_hold'); } if ($isPay) { $logger->setMethod(__METHOD__ . '_pay'); } if ($isCapture) { $logger->setMethod(__METHOD__ . '_capture'); } $sign = $psb->sign($data, ['AMOUNT','CURRENCY','ORDER','MERCH_NAME','MERCHANT','TERMINAL','EMAIL','TRTYPE','TIMESTAMP','NONCE','BACKREF', 'RESULT', 'RC', 'RCTEXT', 'AUTHCODE', 'RRN', 'INT_REF']); if ($sign == $data['P_SIGN']) { if (isset($data['RESULT']) && isset($data['ORDER'])) { $id = $data['ORDER']; $invoice = static::getInvoiceInfo(null, $id); $logger->setInumber($invoice['INumber']); if ((string)$data['RESULT'] === '0') { $bank = self::acquiringConfig('PSB_SAMO_ALIAS', null, $invoice['INumber']); if ($isPay || $isCapture) { static::confirmOrder($bank, $invoice['INumber']); } elseif ($isHold) { self::setInvoiceExternalData($invoice['INumber'], [$data['RRN'], $data['INT_REF']]); static::setHoldInvoiceByINumber($bank, $invoice['INumber']); } $return = true; } else { $logger->log(var_export($data, true), 'UnexpectedResult'); } } } else { $logger->log(var_export(['expected P_SIGN' => $sign, 'actual' => $data['P_SIGN']], true), 'IncorrectRequest'); } $logger->log($return, 'Result'); $logger->commit(); return $return; } protected function _reverse($invoice) { $this->getPSB()->reverse($invoice['RubSum'], $invoice['Currency'], $this->_ID($invoice['Id']), Samo_Url::route('/'), $invoice['ExternalData'][0], $invoice['ExternalData'][1]); return true; } protected function _capture($invoice) { $this->getPSB()->capture($invoice['RubSum'], $invoice['Currency'], $this->_ID($invoice['Id']), Samo_Url::route('/'), $invoice['ExternalData'][0], $invoice['ExternalData'][1]); return true; } public function pay_variant($claim) { if (parent::pay_variant($claim)) { if ($this->pay_variant_check_owner($claim, 'psb')) { return true; } } return false; } } 