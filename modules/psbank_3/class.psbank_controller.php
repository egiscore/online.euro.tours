<?php
 class Psbank_Controller extends Samo_Controller { protected $document = 'pdf'; public function CHECK() { try { $this->Assign_Check(); } catch (Samo_Exception $e) { $this->view->popup_message($e->getMessage(), $this->messages['POPUP_TITLE'], 350, 60); } } public function Assign_Check() { $model = $this->model; $model->is_enabled(); $model->getPaymentInfo(); if (false !== ($bank = $model->getBankList())) { $model->get_payer_fields(); $this->view ->assign('person', ($_SESSION['samo_auth']['type'] === 'person')) ->assign('CLAIM', $model->defaults['CLAIM']) ->assign('PAYED', $model->defaults['CLAIM_COST'][1]['Paid']) ->assign('SCHEDULE', $model->schedule()) ->assign('CONFIG_BUH_CURR', $model->defaults['TYPE_OWNER_CONFIG']['document_currency_alias']) ->assign('MIN_AMOUNT', $model->defaults['CLAIM_COST'][1]['MinAmount']) ->assign('MAX_AMOUNT', $model->defaults['CLAIM_COST'][1]['Debt']) ->assign('MAX_AMOUNT_enable', $model->defaults['EDIT_AMOUNT_ENABLE']) ->js_var('samo.CLAIM', $model->defaults['CLAIM']) ->assign('payers', $model->PAYERS()) ->assign('bank', $bank) ->assign('fields', $this->model->fields) ->assign('update_warrant', $this->model->getConfig('UPDATE_WARRANT', 'warrant')) ->popup_template('form.tpl', $this->messages['POPUP_TITLE'], $width = 480, $height = 80) ->set_selected('.PAYER', $model->defaults['LAST_PAYER']) ->js_call('samo.psbank'); } else { throw new Samo_Exception($this->messages['NO_BANK_LIST']); } } public function PLATEZKA() { try { if (Samo_Request::is_post()) { $model = $this->model; $model->is_enabled(); $model->getPayerInfo(); $this->model->get_template_psbank(); if ($this->model->external) { $this->PDF_SAMOTOUR(); } else { $count = 1; $max_summ = $this->model->getMaxSumm(); $topay = $_topay = $this->model->defaults['PAYER']['TOPAY']; if ($max_summ && $max_summ < $topay) { $topay = $max_summ - 1; $count = ceil($this->model->defaults['PAYER']['TOPAY'] / $topay); } if (!isset($this->model->defaults['PAYERS'])) { $this->model->defaults['PAYERS'] = array(); } if (!isset($this->model->defaults['inumbers'])) { $this->model->defaults['inumbers'] = array(); } if ($count > 1) { for ($k = 0; $k < $count; $k++) { $this->model->defaults['PAYER']['TOPAY'] = $k + 1 == $count ? ($_topay - $topay * $k) : $topay; $model->prepare_psbank(); $model->SaveToInvoicesForBank(); $this->model->defaults['inumbers'][] = $this->model->defaults['inumber']; $this->model->defaults['PAYER']['inumbers'] = $this->model->defaults['inumber']; $this->model->defaults['PAYERS'][] = $this->model->defaults['PAYER']; } } else { $model->prepare_psbank(); $model->SaveToInvoicesForBank(); $this->model->defaults['PAYER']['inumbers'] = $this->model->defaults['inumber']; } $model->save_warrant(); $this->render_pdf(); } } else { $this->PDF_SAMOTOUR(); } } catch (Samo_Exception $e) { $this->view->js_call('samo.psbankButtonShow'); $this->view->error($e->getMessage()); } } protected function render_pdf() { $inumber = $this->model->defaults['inumber']; $INVOICESFORBANK['inumber'] = $inumber; $code = uniqid(); $pdf_file = sprintf('dnl/ps_%s_%s.pdf', empty($this->model->defaults['inumbers']) ? $inumber : implode('-', $this->model->defaults['inumbers']), $code); $this->view->assign('owner_info', $this->model->defaults['OWNER_INFO']) ->assign('INVOICE_CLAIMINFO', $this->model->defaults['CLAIM_INFO']) ->assign('partner_info', $this->model->defaults['AGENCY_INFO']) ->assign('INVOICESFORBANK', $INVOICESFORBANK) ->assign('payer', $this->model->defaults['PAYER']) ->assign('payers', !empty($this->model->defaults['PAYERS']) ? $this->model->defaults['PAYERS'] : array()) ->assign('WARRANTY', $this->model->check_warranty()) ->assign('TYPE_OWNER_CONFIG', $this->model->defaults['TYPE_OWNER_CONFIG']) ->assign('CLAIM', $this->model->defaults['CLAIM']) ->assign('CLAIM_COST', $this->model->defaults['CLAIM_COST']); foreach ($this->model->claimPeoples() as $people) { if (substr($people['Human'], 0, 2) === 'MR') { $this->view->assign('claim_tourist', $people); break; } } $this->view->render_fpdf($this->model->defaults['template'], $pdf_file) ->js_call('samo.download_result', array('guid' => Samo_Request::find('guid'), 'label' => '', 'url' => WWWROOT . $pdf_file)) ->remove_class('.samo-delayed-download', 'dog') ->element_attr('.samo-delayed-download', 'target', '_blank'); $pdf_url = WWWROOT . $pdf_file; Samo_Registry::get('response')->redirect_to($pdf_url); } } 