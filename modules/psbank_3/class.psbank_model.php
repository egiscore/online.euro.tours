<?php
 class Psbank_Model extends Samo_EPlatez { protected $auth_required = array('agency', 'person'); public $fields = array(); private $schedule = null; public function construct($claim = null, $people = null, $order = null) { parent:: construct($claim, $people, $order); $this->defaults['RUB'] = 1; $this->defaults['LAST_PAYER'] = 0; $this->defaults['WARRANTY'] = 0; } public function is_enabled() { parent:: is_enabled(); return $this->enable_resultPsBank(); } public function enable_resultPsBank() { return true; } public function getBankList() { $params = [ 'CLAIM' => $this->defaults['CLAIM'], ]; $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_psbank_bank_list', $params); if ($return = $this->db->fetchAll($sql)) { $defaultExists = false; foreach ($return as &$row) { if ($this->defaults['BANK'] > 0) { $row['Default'] = false; if ($row['Inc'] == $this->defaults['BANK']) { $defaultExists = true; $row['Default'] = true; } } else { if (!$defaultExists && $row['Default']) { $defaultExists = true; } } } if (!$defaultExists) { if (1 == count($return)) { $return[0]['Default'] = true; } else { array_unshift( $return, ['Inc' => 0, 'Name' => '-----', 'Default' => true, 'Ratio' => 1.0] ); } } } return $return; } public function PAYERS() { $params = [ 'Partner' => $this->getPartner(), 'CLAIM' => (isset($this->defaults['CLAIM'])) ? $this->defaults['CLAIM'] : 'null', 'person' => ($_SESSION['samo_auth']['type'] === 'person') ? 1 : 'null', 'UserCode' => $this->internet_user(), ]; $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_psbank_payers_list', $params); return $this->_PAYERS($sql); } protected function _PAYERS($sql) { $result = array(); if ($payers = $this->db->fetchAllWithKey($sql, 'inc')) { $last_date = Samo_Datetime::parse('-10 year'); $last_inc = 0; $ONLY_CLAIM_PAYERS = 0; foreach ($payers as $payer) { $ONLY_CLAIM_PAYERS = $payer['ONLY_CLAIM_PAYERS']; foreach (array('Born',) as $field) { $payer[$field] = Samo_Loader::load_object('Samo_Datetime', $payer[$field]); } $inc = $payer['inc']; if ($payer['IDate']->gt($last_date)) { $last_date = $payer['IDate']; $last_inc = $inc; } unset($payer['inc']); $result[$inc] = array('value' => $inc, 'title' => $payer['FIO'], 'data' => $payer); } $this->defaults['LAST_PAYER'] = $last_inc; $this->defaults['ONLY_CLAIM_PAYERS'] = $ONLY_CLAIM_PAYERS; } return $result; } public function getPayerInfo() { $this->get_payer_fields(); $this->check_payer_field(); $this->getPaymentInfo(); $this->checkPayment(); } public function checkPayment() { $max_amount = Samo_Utils::ifs(Samo_Request::floatval('MAX_AMOUNT'), null); if (!$this->defaults['EDIT_AMOUNT_ENABLE'] || $max_amount >= $this->defaults['CLAIM_COST'][1]['Debt']) { $this->defaults['PAYER']['TOPAY'] = $this->defaults['CLAIM_COST'][1]['Debt']; } else { $messages = Samo_Registry::get('messages'); $min_payment = $this->defaults['CLAIM_COST'][1]['MinAmount']; $epsilon = 0.01; $this->schedule($claiminc = $this->defaults['CLAIM']); if ($this->schedule == null) { if ($min_payment && abs($max_amount - $min_payment) > $epsilon) { throw new Samo_Exception(sprintf($messages['ACQUIRING_AMOUNT_OVER_MIN_LIMIT'], $min_payment, $this->defaults['CLAIM_COST'][1]['CurrencyAlias']), 1); } } else { $schedule_pay = $this->schedule[0]['value']; if ($max_amount < $min_payment) { if ($max_amount < $schedule_pay) { throw new Samo_Exception(sprintf($messages['ACQUIRING_AMOUNT_OVER_MIN_LIMIT'], $min_payment, $this->defaults['CLAIM_COST'][1]['CurrencyAlias']), 2); } } } $this->defaults['PAYER']['TOPAY'] = $max_amount; } } public function getMaxSumm() { $summ = $this->config('max_summ', 'psbank'); return intval($summ); } protected function getExternalDocumentInit() { if ($this->defaults['CLAIM']) { return $this->getExternalDocumentJob(sprintf('bank_%d.pdf', $this->defaults['CLAIM']), sprintf('bank_%d_%%s_%%s.pdf', $this->defaults['CLAIM'])); } throw new Samo_Exception($this->messages['CANNOT_PRINT']); } public function get_template_psbank() { $this->fetchOwner(); return $res = $this->get_settings_printform(['doccategory' => 20, 'online_bank' => $this->defaults['BANK'], 'owner' => $this->defaults['TYPE_OWNER_CONFIG']['owner']]); } protected function getExternalDocumentParams() { if (false == $this->is_enabled() || false === $this->get_template_psbank()) { throw new Samo_Exception($this->messages['CANNOT_PRINT']); } $this->getPayerInfo(); $this->prepare_psbank(); $inumber = $this->SaveToInvoicesForBank(); $this->save_warrant(); $params = array( 'claim' => $this->defaults['CLAIM'], 'template' => $this->defaults['template'], 'inumber' => $inumber, ); return $params; } public function prepare_psbank() { $this->fetchOwner(); if (!$this->defaults['PAYER']['PAYER_PGIVENDATE']->is_null()) { $messages = Samo_Registry::get('messages'); if (!$this->defaults['TYPE_OWNER_CONFIG']['contract_dateend']->is_null() && $this->defaults['PAYER']['PAYER_PGIVENDATE']->gt($this->defaults['TYPE_OWNER_CONFIG']['contract_dateend'])) { throw new Samo_Exception($messages['PSBANK_WRONG_PGIVENDATE']); } if ($this->defaults['PAYER']['PAYER_PGIVENDATE']->gt(Samo_Datetime::today())) { throw new Samo_Exception($messages['PSBANK_WRONG_PGIVENDATE']); } if ($this->defaults['PAYER']['PAYER_BORN']->gt(Samo_Datetime::today())) { throw new Samo_Exception($messages['PSBANK_WRONG_BORN']); } } $this->defaults['OWNER_INFO'] = $this->fetchPartnerInfo($this->defaults['TYPE_OWNER_CONFIG']['owner']); $this->defaults['AGENCY_INFO'] = $this->fetchPartnerInfo($this->defaults['CLAIM_INFO']['PartnerInc']); $this->fetch_eplatez_Number(); } public function check_warranty() { $warranty = $this->defaults['WARRANTY']; if (!empty($warranty)) { $sql = "exec " . $this->OFFICE_SQLSERVER . "." . $this->OFFICEDB . ".dbo.up_Web_3_check_warrant @Inc = " . $warranty; if (false !== ($row = $this->db->fetchRow($sql))) { return $row; } } return false; } public function save_warrant() { $params = array( 'partner' => $this->getPartner(), 'name' => $this->defaults['PAYER']['PAYER_FIO'], 'lname' => $this->defaults['PAYER']['PAYER_FIO'], 'pserie' => $this->defaults['PAYER']['PAYER_PSERIE'], 'pnumber' => $this->defaults['PAYER']['PAYER_PNUMBER'], 'pissue' => $this->defaults['PAYER']['PAYER_PGIVENDATE'], 'pgiven' => $this->defaults['PAYER']['PAYER_PGIVENORG'], 'pcodeorg' => $this->defaults['PAYER']['PAYER_PGIVENORG_MENT'], 'born' => $this->defaults['PAYER']['PAYER_BORN'], 'address' => $this->defaults['PAYER']['PAYER_ADDRESS'], 'datebeg' => Samo_Datetime::today(), 'dateend' => $this->defaults['TYPE_OWNER_CONFIG']['contract_dateend'], 'phones' => $this->defaults['PAYER']['PAYER_PHONES'], 'UserCode' => $this->internet_user(), 'haveoriginal' => 0, 'havecopy' => 0, 'update' => $this->getConfig('UPDATE_WARRANT', 'warrant'), ); $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_warrant_save', $params); return $this->_save_warrant($sql); } protected function _save_warrant($sql) { $partpass = Samo_Utils::ifs($this->getPartPassInc(), 'null'); $log_array = array( 'partpass' => $partpass, 'sql' => $sql, 'priority' => 'psbank', ); $id = $this->db->web_log_table($log_array); try { $row = $this->db->fetchRow($sql); $log_array['result']['resultset'] = $row; $log_array['message'] = 'SAVE_PSBANK_WARRANT'; } catch (Samo_Exception $e) { $row = false; $log_array['result']['error'] = ($e instanceof Database_Exception) ? $this->db->lastError() : $e->getMessage(); $log_array['message'] = 'ERROR_PSBANK_SAVE_WARRANT'; } $this->db->web_log_table($log_array, $id); if (false !== $row) { if (array_key_exists('error_code', $row)) { if (empty($row['error_code'])) { $this->defaults['WARRANTY'] = $row['newinc']; } elseif (in_array($row['error_code'], array(1, 2))) { $this->defaults['WARRANTY'] = $row['oldinc']; } else { throw new Samo_Exception($row['error'], $row['error_code']); } } else { if (array_key_exists('error', $row) && $row['error'] != '') { throw new Samo_Exception($row['error']); } } return true; } throw new Samo_Exception($this->messages['ERROR_ON_SAVE_PAYER']); } public function get_payer_fields() { if (false !== ($res = $this->getOnline_field($entity = 'psbank', $group = 'Group'))) { $this->fields = array_merge_recursive($this->fields, $res); return true; } return false; } public function check_payer_field() { $messages = Samo_Registry::get('messages'); $inc = -1; $collection = Samo_Request::post('frm'); foreach ($this->fields as &$fgroup) { foreach ($fgroup as &$field) { $tmp = trim(@$collection[$field['Entity']][$inc][$field['Field']]); if ('' == $tmp && $field['Required']) { throw new Samo_Exception( $messages['EMPTY_REQUIRED_FIELD'] . ' "' . $field['Title'] . '"', 1 ); } if ($field['Type'] == 'date') { $tmp = Samo_Datetime::parse($tmp); } $field['new_value'] = $tmp; } } foreach ($this->fields as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Editable']) { $this->check_field($value = $field['new_value'], $field = $field); } $this->defaults['PAYER'][$field['Field']] = $field['new_value']; } } } public function pay_variant($claim) { if ($this->is_module_installed('psbank')) { $this->construct($claim); $claimInfo = $this->claimInfo(); if ($this->has_permission('psbank')) { if ($this->pay_variant_check_owner($claim, 'psbank')) { return true; } } } return false; } public function schedule($claiminc = null) { return false; if ($this->schedule != null) { return $this->schedule; } $routes = Samo_Registry::get('routes'); if (isset($routes['cl_refer'])) { try { $model = Samo_Loader::load_object('Cl_Refer_Model', $this->config); $model->construct(); $model->defaults['CLAIM'] = $claiminc ? $claiminc : $this->defaults['CLAIM']; $claim = $model->claimInfo(); $today = Samo_Datetime::today(); if ($result = $model->GetPaymentSchedule()) { $debt = $debt_cost = 0; foreach ($result as $key => $row) { if ($debt < $row['fpercent']) { $debt = $row['fpercent']; $debt_cost = $this->defaults['CLAIM_COST'][1]['Debt'] / (100 - $debt) * $debt; } if ($result[$key]['status'] != 1 && $row['pdate']->format('Ymd') >= $today->format('Ymd')) { if ($row['tpercent'] == 100) { $result[$key]['value'] = $this->defaults['CLAIM_COST'][1]['Debt']; } else { $result[$key]['value'] = round($this->defaults['CLAIM_COST'][1]['Debt'] / (100 - $debt) * $row['tpercent'], 2) - $debt_cost; if ($result[$key]['value'] > 0) { $result[$key]['value'] = number_format($result[$key]['value'], 2, '.', ''); } else { unset($result[$key]); } } } else { unset($result[$key]); } } if (count($result)) { $this->schedule = array_values($result); $this->schedule[0]['selected'] = true; } } } catch (Exception $e) { $this->schedule = array(); } } return $this->schedule; } public function scheduleValidAmount($value) { $data = $this->schedule(); if (!empty($data)) { $return = false; foreach ($data as $row) { if ($row['value'] == $value) { $return = true; break; } } return $return; } return true; } } 