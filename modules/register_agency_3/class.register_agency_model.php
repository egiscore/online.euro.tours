<?php
 class Register_Agency_Model extends Samo_Partner { public function METROSTATION() { $this->PARTNER_TOWN = Samo_Utils::ifs(Samo_Request::intval('TOWN'), $this->PARTNER_TOWN); return parent::METROSTATION(); } public function get_fields_partner() { $partner = parent::get_fields_partner(); foreach ($partner as &$fields) { foreach ($fields as &$field) { if ($field['Visible']) { $field['Editable'] = true; } } } $this->fields_partner = $partner; return $this->fields_partner; } public function getStates($selected = null) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_partner_StateList', [ 'UserCode' => $this->internet_user(), 'Order_By_Name' => $this->config('STATE_ORDER_BY_NAME'), ] ); if (false !== ($states = $this->db->fetchAllWithKey($sql, 'id'))) { $selected = Samo_Utils::ifs($selected, $this->getRussiaStateInc()); foreach ($states as &$state) { $state['selected'] = $state['id'] == $selected; $state['attrs'] = ['data-search-string' => $state['searchTerms']]; } } return $states; } public function getRussiaStateInc() { return $this->getConfig('DaDataRuState', 'Online', 0); } public function get_fields_partpass() { $partpass = parent::get_fields_partpass(); foreach ($partpass as &$fields) { foreach ($fields as &$field) { if ($field['Visible']) { $field['Editable'] = true; } } } $this->fields_partpass = $partpass; return $this->fields_partpass; } public function save() { if ($this->can_create_login()) { $this->defaults['PARTPASS_ALIAS'] = Samo_Utils::ifs(Samo_Request::strval('PARTPASS_ALIAS'), ''); $this->get_fields_partpass(); $this->CheckPartPassFields(); $this->CheckDoubleLogin(); } $this->get_fields_partner(); $res = $this->SaveEditPartner(false); $this->defaults['PARTNER'] = $res['partnerinc']; $this->notify_touroperator($this->defaults['PARTNER']); if ($this->can_create_login()) { $this->defaults['AUTHORPARTPASSINC'] = null; $this->defaults['PARTPASS_ADMINISTRATOR'] = $this->first_login_administrator; $this->SaveEditPartpass(); } return $this->defaults['PARTNER']; } protected function notify_touroperator($partner) { try { $this->samotourMail(self::MAIL_NEW_PARTNER_TOUROPERATOR, ['Inc' => $partner]); $this->samotourMail(self::MAIL_NEW_PARTNER_AGENCY, ['Inc' => $partner]); } catch (Samo_Exception $e) { $e; } } public function get_template() { try { $tpl = $this->getConfig('register_agency_success', 'notes'); } catch (Samo_Exception $e) { $tpl = ''; } return !empty($tpl) ? 'string:' . $tpl : false; } public function check_captcha() { if (!isset($_SESSION['captcha_keystring']) or empty($_SESSION['captcha_keystring']) or !isset($_POST['are_you_human']) or Samo_Request::post('are_you_human') !== $_SESSION['captcha_keystring']) { $messages = Samo_Registry::get('messages'); throw new Samo_Exception($messages['INCORRECT_CAPTCHA'], 1); } return true; } public function suggest() { $inn = Samo_Request::get('query'); $this->CheckPartner( [ 'inn' => $inn, 'partner' => 0 ] ); $dadata = Samo_Loader::load_object('DadataClient', $this->config); try { $dadata->init($inn, 'json'); $data = $dadata->getByInn(); if (!$data) { throw new DadataClientException("Data on the Dadata service on request INN {$inn} was not found."); } return mb_convert_encoding(json_encode($data), 'windows-1251', 'utf-8'); } catch (DadataClientException $e) { $e->getError(); } } } 