<?php
 class Reports_Model extends Samo { protected $auth_required = ['agency']; protected $template = null; protected $params = null; protected $OutputFormat = null; public function construct() { $this->template = Samo_Request::intval('template'); } public function getReportList($template = null) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEBST_report_list', [ 'PartPass' => $this->getPartPassInc(), 'LangId' => Samo_Request::langid(), 'UserCode' => $this->internet_user(), ] ); $template = ($template) ?: $this->template; return $this->db->fetchAll( $sql, function($row) use ($template) { $row['selected'] = $row['Inc'] == $template; return $row; } ); } public function sql_getOnline_field($template, $entityInc = null) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEBST_report_params', [ 'Template' => $template, 'PartPass' => $this->getPartPassInc(), 'LangId' => Samo_Request::langid(), 'Values' => (is_array($this->params)) ? $this->packPrintParams($this->params) : null, 'UserCode' => $this->internet_user(), ] ); return $sql; } public function getReportParams($template = null, $params = null) { $template = ($template) ?: $this->template; if ($params) { $this->params = $params; } $fields = []; if (false !== ($res = $this->getOnline_field($template))) { $variants = $this->db->fetchAllWithKeyGroup(null, 'Field'); foreach ($res as &$fgroup) { foreach ($fgroup as &$field) { $field['Variants'] = isset($variants[$field['Field']]) ? $variants[$field['Field']] : null; if (null !== ($value = Samo_Request::get($field['Field']))) { $field['Value'] = $value; } } } unset($fgroup, $field); $fields = $res; } if (!count($fields)) { $fields['System'][] = [ 'Group' => 'System', 'Title' => 'template', 'Entity' => 'report', 'Field' => 'template', 'Type' => 'system', 'Value' => $template, 'EntityInc' => $template, 'Class' => null, 'EntityField' => 'template', 'Editable' => 0, 'Visible' => 0, 'Required' => 0, 'min_length' => null, 'max_length' => null, ]; } return $fields; } protected function getExternalDocumentInit() { $is_post = Samo_Request::is_post(); return $this->getExternalDocumentJob( Samo_Request::strval('guid'), ($is_post) ? sprintf('report_%s_%s_%%s_%%s.pdf', Samo_Datetime::now()->format('dmY-His'), Samo_Request::strval('guid')) : null, ($is_post) ? $this->getExtension() : null ); } protected function getExternalDocumentParams() { $params = $this->checkRequestParams(); return array_merge( $params, [ 'partner' => $this->getPartner(), 'partpass' => $this->getPartpassInc(), ] ); } private function formatDate($date) { $date = new Samo_Datetime($date); return $date->format('Ymd'); } private function checkRequestParams() { $return = false; $post = Samo_Request::post('frm') ?: []; $post = (isset($post['report'])) ? $post['report'] : [0 => []]; $template = key($post); if ($template) { $templates = $this->getReportList($template); $selected = array_filter( $templates, function($report) { return $report['selected']; } ); if (!count($selected)) { throw new Samo_Exception("Template report not found. Template send = {$template}"); } $return = []; $values = reset($post); $params = $this->getReportParams($template); $fields = []; array_map( function($group) use (&$fields) { $fields = array_merge($fields, $group); }, $params ); foreach ($fields as $field) { $fieldName = $field['Field']; $fieldValue = isset($values[$fieldName]) ? $values[$fieldName] : $field['Value']; if ($field['Required'] && !$fieldValue) { throw new Samo_Exception("The value of the field can not be empty. Field send = {$fieldName}"); } if (isset($field['Variants']) && $field['Value'] != $fieldValue) { $variants = array_map( function ($variant) { return $variant['Inc']; }, $field['Variants'] ); if (!in_array($fieldValue, $variants)) { throw new Samo_Exception("Invalid value passed for parameter. Value send = {$fieldValue}"); } } $this->check_field($fieldValue, $field); if ('date' == $field['Type']) { $fieldValue = $this->formatDate($fieldValue); } if ('OutputFormat' == $fieldName) { $this->OutputFormat = mb_strtolower($fieldValue); } $return[$fieldName] = $fieldValue; } $return['template'] = $template; } return $return; } private function getExtension() { if (null == $this->OutputFormat) { $this->OutputFormat = 'pdf'; } return $this->OutputFormat; } } 