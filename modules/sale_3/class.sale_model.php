<?php
 class Sale_Model extends Samo { protected $rec_on_page = 10; public function construct() { $this->defaults['TOWNINC'] = Samo_Utils::ifs(Samo_Request::intval('TOWNINC'), $this->townFrom()); $this->defaults['METRO'] = Samo_Request::intval('METRO',1); $this->defaults['PAGE'] = Samo_Utils::ifs(Samo_Request::intval('PAGE'), 1); } public function getTOWNINC() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_sale_Town', [ 'UserCode' => $this->internet_user(), 'Order_By_Name' => $this->getConfig('ORDER_BY_NAME'), ] ); return $this->_getTOWNINC($sql); } protected function _getTOWNINC($sql) { $return[] = array('Inc' => 0, 'LName' => '----', 'Name' => '----', 'selected' => false); $order_by = ($this->getConfig('TOWN_ORDER_BY_NAME')) ? 'Name' : 'LName'; $default = $this->defaults['TOWNINC']; $selected_exists = false; if ($res = $this->db->query($sql)) { while ($row = $this->db->fetchRow($res)) { if (!$selected_exists) { $selected_exists = $row['selected'] = ($row['Inc'] == $default); } else { $row['selected'] = false; } $return[] = [ 'Inc' => $row['Inc'], 'Name' => $row['Name'], 'LName' => $row[$order_by], 'altName' => $row['LName'], 'selected' => $row['selected'] ]; } } return $return; } public function getMETRO() { $return = array(); $return[] = array('Inc' => 0, 'LName' => '----', 'Name' => '----', 'selected' => false); $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_sale_Metro', [ 'Town' => $this->defaults['TOWNINC'], 'UserCode' => $this->internet_user(), 'ORDER_BY_NAME' => $this->getConfig('ORDER_BY_NAME') ] ); if ($result = $this->db->fetchAll($sql)) { foreach ($result as $metro) { $return[] = [ 'Inc' => $metro['metrostation'], 'Name' => $metro['Name'], 'LName' => $metro['LName'], 'altName' => $metro['altName'], 'selected' => $metro['metrostation'] == $this->defaults['METRO'], 'attributes' => ['data-search-string' => "{$metro['Name']} {$metro['altName']}"] ]; } } return $return; } public function getCoordinates() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_sale_Map', [ 'UserCode' => $this->internet_user(), ] ); if ($return = $this->db->fetchAll($sql)) { foreach ($return as &$partner) { $partner['www'] = Samo_Url::parse($partner['www']); } } return count($return) ? $return : []; } public function getSaleList() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_sale_List', [ 'Town' => $this->defaults['TOWNINC'], 'Metro' => $this->defaults['METRO'], 'Page' => $this->defaults['PAGE'], 'UserCode' => $this->internet_user(), 'RecOnPage' => $this->rec_on_page, ] ); if ($return = $this->db->fetchAll($sql)) { $messages = Samo_Registry::get('messages'); foreach ($return as $idx => $partner) { $phones = array(); foreach (array('phones', 'phones1', 'phones2') as $field) { if (!empty($partner[$field])) { $tmp = explode(',', $partner[$field]); $phones = array_merge($phones, $tmp); } unset($partner[$field]); } $partner['phones'] = $phones; $mobiles = array(); foreach (array('faxes', 'faxes1') as $field) { if (!empty($partner[$field])) { $tmp = explode(',', $partner[$field]); $mobiles = array_merge($mobiles, $tmp); } unset($partner[$field]); } $partner['mobiles'] = $mobiles; $partner['phprefix'] = str_replace(array('(', ')'), '', $partner['phprefix']); $emails = array(); foreach (array('email', 'email1', 'email2') as $field) { if (!empty($partner[$field])) { $tmp = explode(',', $partner[$field]); foreach ($tmp as $email) { if (Samo_Validate::email($email)) { $emails[] = $email; } } } unset($partner[$field]); } $partner['emails'] = $emails; $partner['www'] = Samo_Url::parse($partner['www']); $tmp = explode("|", $partner['icq']); $partner['icq'] = array(); foreach ($tmp as $data) { if ($uin = trim($data)) { $partner['icq'][] = array('title' => $uin, 'uin' => preg_replace('~[^\d]~', '', $uin), 'name' => $messages['SALE_ICQ_CONCULTANT']); } } $return[$idx] = $partner; } } return $return; } public function getPages($max) { $numonpage = $this->rec_on_page; if ($max <= $numonpage) { $return = range(1, $max); } else { $current = $this->defaults['PAGE']; $half = ceil($numonpage / 2); $low = ($current - $half); if ($low <= 0) { $low = 1; } $hi = $low + $numonpage; if ($hi > $max) { $hi = $max; } $return = range($low, $hi); } return (count($return) > 1) ? $return : false; } public function getPage() { return $this->defaults['PAGE']; } } 