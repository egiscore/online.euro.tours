<?php
 class Sberbank_Model extends Samo_Acquiring { const GOOD_ORDER_STATUS = 2; const HOLD_ORDER_STATUS = 1; const CURRENCY = 643; const CURRENCY_ALIAS = 'RUB'; const OPT_RESULT_TRY_COUNT = 2; protected static $_messages = array(); protected $moduleName = 'sberbank'; public static function getNoActualOrderErrorCodes() { return array(2, 6, 3, 5); } public function construct($claim = null, $people = null, $order = null) { parent::construct($claim, $people, $order); self::$_messages = $this->messages; $this->checkSberbankParams(); $this->defaults['BANK'] = $this->getSberParams('SBERBANK_SAMO_INC'); } protected static function _getSberParams($key, $claim, $inumber) { return Samo_Acquiring::acquiringConfig($key, $claim, $inumber); } protected function getSberParams($key, $claim = null, $inumber = null) { return static::_getSberParams($key, $claim ? $this->defaults('CLAIM') : $claim, $inumber ? $inumber : $this->defaults('inumber')); } protected static function orderIdFromTransaction($tr) { if (strlen($tr) == 32) { $tr = substr($tr, 0, 8) . '-' . substr($tr, 8, 4) . '-' . substr($tr, 12, 4) . '-' . substr($tr, 16, 4) . '-' . substr($tr, 20); } return $tr; } public function register($orderNumber, $description, $amount) { $amount *= 100; $returnUrl = Samo_Url::parse(Samo_Url::route('sberbank', ['inumber' => $orderNumber, 'samo_action' => 'RESULT', 'CLAIM' => $this->defaults['CLAIM']])); $params = array( 'amount' => $amount, 'currency' => self::CURRENCY, 'language' => 'ru', 'orderNumber' => $orderNumber, 'returnUrl' => $returnUrl, 'description' => $description, 'jsonParams' => array('orderNumber' => $orderNumber, 'reservationNumber' => $this->defaults['CLAIM']), ); $params['userName'] = $this->getSberParams('SBERBANK_USERNAME', null, $orderNumber); $params['password'] = $this->getSberParams('SBERBANK_PASSWORD', null, $orderNumber); $action = 'register'; if ($this->getSberParams('SBERBANK_PRE_AUTH')) { $action = 'registerPreAuth'; } $data = static::getPaymentInfoData($orderNumber); $ph = $em = ''; foreach ($data as $d) { if ($d['payee_email']) { $em = $d['payee_email']; break; } if ($d['payee_phones']) { $ph = $d['payee_phones']; } } if ($ph || $em) { $messages = (!empty(self::$_messages)) ? self::$_messages : Samo_Registry::get('messages'); $params['orderBundle'] = [ 'customerDetails' => [], 'cartItems' => [ 'items' => [ [ 'positionId' => 1, 'name' => Samo_String::set(sprintf($messages['ACQUIRING_OFD_PURPOSE'], $this->_claim))->utf8()->__toString(), 'quantity' => [ 'value' => 1, 'measure' => Samo_String::set($messages['ACQUIRING_OFD_QUANTITY_MEASURE'])->utf8()->__toString(), ], 'itemPrice' => $amount, 'itemCode' => $orderNumber, ], ], ], ]; if ($em) { $params['orderBundle']['customerDetails']['email'] = Samo_String::set($em)->utf8()->__toString(); } else { $params['orderBundle']['customerDetails']['phone'] = Samo_String::set($ph)->utf8()->__toString(); } $params['orderBundle'] = json_encode($params['orderBundle']); } $res = self::doRequest($action, $params); if ($oId = isset($res->orderId) ? $res->orderId : (isset($res->OrderId) ? $res->OrderId : false)) { $spool = (defined('MAIL_SPOOL')) ? MAIL_SPOOL : _ROOT . 'data/spool/'; $taskid = Samo_Utils::randomString(13); $taskfile = $spool . 'cron_sberbank_check_' . $taskid . '.php'; $class = get_class($this); $job = 'if (time() - filemtime(__FILE__) > 3 * 24 * 3600) { return true; }' . PHP_EOL . 'require_once "includes/classes/class.samo_config.php";' . PHP_EOL . 'Samo_Loader::register_autoload();' . PHP_EOL . 'Samo_Registry::set(\'logger\', Log::singleton(LOG_TYPE));' . PHP_EOL . '$sb_res = false; ' . PHP_EOL . 'try { '.$class.'::payResult(\'' . $oId . '\', \'' . $orderNumber . '\'); $sb_res = true; } catch (Sberbank_Exception $e) {if (false !== array_search($e->getCode(), Sberbank_Model::getNoActualOrderErrorCodes())) {$sb_res = true;} else { throw $e;}}' . PHP_EOL . 'return $sb_res;'; $job = '<' . '?php' . PHP_EOL . $job; Samo_Utils::writeFile($taskfile, $job); } return $res; } public static function getOrderStatus($order, $params = []) { $params = array_merge(array('orderId' => $order, 'language' => 'ru'), $params); $res = self::doRequest('getOrderStatus', $params); return $res; } public static function doRequest($action, $params = array()) { $sberbank = Samo_Loader::load_object('Samo_Sberbank'); return $sberbank->doRequest($action, $params); } private function checkSberbankParams() { foreach (array('SBERBANK_USERNAME', 'SBERBANK_PASSWORD', 'SBERBANK_SAMO_INC', 'SBERBANK_SAMO_LOGIN', 'SBERBANK_URL') as $c) { if (!$this->getSberParams($c)) { $messages = (count(self::$_messages)) ? self::$_messages : Samo_Registry::get('messages'); self::_die($messages['SBERBANK_PARAMS_NOT_SETS']); } } } public static function _die($message, $code = null) { throw new Sberbank_Exception($message, $code); } public function getPaymentInfoForSberbank() { parent::getPaymentInfo(); $this->defaults['sberbank'] = array( 'paid' => $this->defaults['CLAIM_COST'][1]['Paid'], 'amount' => $this->defaults['CLAIM_COST'][1]['Debt'], 'min_amount' => $this->defaults['CLAIM_COST'][1]['MinAmount'], 'currency_public' => $this->defaults['TYPE_OWNER_CONFIG']['document_currency_alias'], 'currency' => self::CURRENCY_ALIAS, ); return $this->defaults['sberbank']; } public function getSberUrl() { $amount = floatval(Samo_Request::find('amount')); if (!$amount) { self::_die(Samo_EPlatez::messages('SBERBANK_EMPTY_AMOUNT')); } $this->fetchOwner(); $this->getPaymentInfo(); $min_amount = $this->defaults['CLAIM_COST'][1]['MinAmount']; $epsilon = 0.01; if ($min_amount && $amount < $min_amount && abs($amount - $min_amount) > $epsilon) { self::_die(sprintf(Samo_EPlatez::messages('ACQUIRING_AMOUNT_OVER_MIN_LIMIT'), ceil($min_amount), $this->defaults['CLAIM_COST'][1]['CurrencyAlias'])); } $max_amount = $this->defaults['CLAIM_COST'][1]['Debt']; if ($amount > $max_amount && abs($amount - $max_amount) > $epsilon) { self::_die(sprintf(Samo_EPlatez::messages('ACQUIRING_AMOUNT_OVER_MAX_LIMIT'), $this->defaults['CLAIM_COST'][1]['Debt'], $this->defaults['CLAIM_COST'][1]['CurrencyAlias'])); } $this->fetch_eplatez_Number(); $this->defaults['PAYER']['TOPAY'] = $amount; $this->setPayerInfo(); $this->defaults['FIRM'] = 'SBERBANK'; $this->SaveToInvoicesForBank(); $order = $this->defaults['inumber']; $subject = sprintf(Samo_EPlatez::messages('ACQUIRING_PAYMENT_PURPOSE'), $this->defaults['CLAIM']); $result = $this->register($order, mb_convert_encoding($subject, 'utf-8', 'windows-1251'), $amount); $oId = isset($result->orderId) ? $result->orderId : (isset($result->OrderId) ? $result->OrderId : false); $transaction = str_replace('-', '', $oId); if (strlen($transaction) > 32) { self::_die('Invalid TransactionId format!'); } $this->defaults['TRANSACTIONID'] = $transaction; $this->SaveToInvoicesForBank(); return $result->formUrl; } public static function holdAction($inumber, $action, $TransactionId = null, $RubSum = null) { if (!$TransactionId || !$RubSum) { $model = self::_getModel($inumber); $invoice = $model->getInvoiceData($inumber); $TransactionId = $invoice['TransactionId']; $RubSum = $invoice['RubSum']; } $id = self::orderIdFromTransaction($TransactionId); if (!$id || !$inumber) { throw new Sberbank_Exception(Samo_EPlatez::messages('ACQUIRING_PARAMETERS_NOT_PASSED')); } $params = ['orderId' => $id, 'language' => 'ru']; $params['userName'] = Samo_Acquiring::acquiringConfig('SBERBANK_USERNAME', null, $inumber); $params['password'] = Samo_Acquiring::acquiringConfig('SBERBANK_PASSWORD', null, $inumber); $params['amount'] = $RubSum * 100; $params['orderNumber'] = $inumber; self::doRequest($action, $params); self::payResult($id, $inumber, false); return false; } protected static function _getModel($inumber = null) { try { $routes = Samo_Registry::get('routes'); } catch (Exception $e) { if (defined('ROUTES_PATH')) { include ROUTES_PATH; } else { include _ROOT . 'routes.php'; } } include_once $routes['wspay']['path'] . 'lib.php'; $model = Samo_Loader::load_class('WSPAY_model'); $model = new $model(connectdb()); $model->getBank(Samo_Acquiring::acquiringConfig('SBERBANK_SAMO_LOGIN', null, $inumber)); return $model; } public static function payResult($id = false, $inumber = false, $dieIfNotGoodStatus = true) { $return = false; $id = $id ? $id : Samo_Request::find('orderId'); $inumber = $inumber ? $inumber : Samo_Request::find('inumber'); $model = self::_getModel($inumber); $id = self::orderIdFromTransaction($id); if (!$id || !$inumber) { self::_die(Samo_EPlatez::messages('SBERBANK_RESULT_ERROR')); } $res = false; $error = false; $errorCode = null; for ($i = 0; $i < self::OPT_RESULT_TRY_COUNT; $i++) { try { $params['userName'] = static::_getSberParams('SBERBANK_USERNAME', null, $inumber); $params['password'] = static::_getSberParams('SBERBANK_PASSWORD', null, $inumber); $res = self::getOrderStatus($id, $params); break; } catch (Exception $e) { if ($e instanceof Samo_Exception) { $errorCode = $e->getCode(); $error = $e->getMessage(); break; } sleep(1); continue; } } if ($error) { self::_die($error, $errorCode); } if (!$res) { self::_die(sprintf(Samo_EPlatez::messages('SBERBANK_RESULT_ERROR_INUMBER'), $inumber)); } if ($res->OrderNumber != $inumber) { self::_die(sprintf(Samo_EPlatez::messages('SBERBANK_RESULT_ERROR_INVALID_INUMBER'), $inumber)); } if (!isset($res->OrderStatus)) { self::_die(Samo_EPlatez::messages('SBERBANK_ERROR_ORDER_NOT_FOUND')); } $orderStatus = (int)$res->OrderStatus; $paid = $orderStatus == self::GOOD_ORDER_STATUS; $prePaid = $orderStatus == self::HOLD_ORDER_STATUS; $amount = floatval($res->Amount) / 100; $resultMessage = ''; if ($paid || $prePaid) { try { $invoice = $model->getInvoiceData($inumber); if (floatval($invoice['RubSum']) > $amount) { self::_die(Samo_EPlatez::messages('SBERBANK_RESULT_ERROR_BAD_AMOUNT')); } if ($paid) { if ($invoice['ConfirmPay'] == 1) { self::_die(Samo_EPlatez::messages('SBERBANK_RESULT_ERROR_ALREADY_CONFIRM')); } $model->confirmInvoiceByINumber($inumber, PSBANK_DEFAULT_OPERATION); $resultMessage = Samo_EPlatez::messages('SBERBANK_RESULT_OK'); } else { $model->setHoldInvoiceByINumber($inumber); $resultMessage = Samo_EPlatez::messages('SBERBANK_RESULT_HOLD'); } } catch (WSPAY_exception $e) { restore_error_handler(); self::_die($e->getMessage(), 5); } restore_error_handler(); } else { $msgKey = 'SBERBANK_RESULT_ERROR_STATUS_' . $orderStatus; $msg = Samo_EPlatez::messages($msgKey); if ($msg !== $msgKey) { $resultMessage = $msg; } else { $msgKey = 'SBERBANK_RESULT_ERROR_STATUS_UNKNOWN'; $msg = Samo_EPlatez::messages($msgKey); if ($msg !== $msgKey) { $resultMessage = $msg; } else { $resultMessage = 'Unknown error status'; } } switch ($orderStatus) { case 3: case 4: case 6: $ec = 2; break; default: $ec = 0; break; } if ($dieIfNotGoodStatus) { self::_die($resultMessage, $ec); } } $return = array( 'inumber' => $inumber, 'amount' => $amount, 'currency' => self::CURRENCY_ALIAS, 'cardHolder' => $res->cardholderName, 'result' => $resultMessage ); return $return; } public function pay_variant($claim) { if ($this->is_module_installed('sberbank')) { try { $this->checkSberbankParams(); } catch (Samo_Exception $e) { throw new Samo_Exception($e->getMessage(), 501); } return true; } return false; } } class Samo_Sberbank { public function doRequest($action, $params = array()) { $errorCode = null; $registry = Samo_Registry::instance(); $oldLogger = null; if (isset($registry['logger'])) { $oldLogger = $registry['logger']; } $logger = Samo_Loader::load_object('WSPAY_Logger', $oldLogger); $logger->init(); $logger->setMethod(__METHOD__); if (isset($params['orderNumber'])) { $logger->setInumber($params['orderNumber']); } else { if ($inumber = Samo_Request::find('inumber')) { $logger->setInumber($inumber); } else { if ($claim = Samo_Request::find('CLAIM')) { $logger->setClaim($claim); } } } $registry['logger'] = $logger; if (isset($params['jsonParams'])) { $params['jsonParams'] = json_encode($params['jsonParams']); } if (!isset($params['password'])) { $params['password'] = Samo_Acquiring::acquiringConfig('SBERBANK_PASSWORD'); } if (!isset($params['userName'])) { $params['userName'] = Samo_Acquiring::acquiringConfig('SBERBANK_USERNAME'); } $url = Samo_Acquiring::acquiringConfig('SBERBANK_URL') . $action . '.do'; $error = false; $res = false; try { $res = Samo_Curl::request($url, $params); } catch (Exception $e) { $logger->exception($e); $error = 'Unknown error'; } $logger->commit(); if ($oldLogger) { $registry['logger'] = $oldLogger; } if (!$res) { $error = 'Unknown error'; } else { $res = json_decode($res); } if (!$res) { $error = Samo_EPlatez::messages('ACQUIRING_HANDLE_RESPONSE_FAILED'); } if (!$error) { if ($errorCode = isset($res->ErrorCode) ? $res->ErrorCode : (isset($res->errorCode) ? $res->errorCode : null)) { if ($error = isset($res->ErrorMessage) ? $res->ErrorMessage : (isset($res->errorMessage) ? $res->errorMessage : false)) { $error = mb_convert_encoding($error, 'windows-1251', 'utf-8'); } else { $error = Samo_EPlatez::messages('ACQUIRING_UNKNOWN_ERROR'); } } } if ($error) { throw new Sberbank_Exception($error, $errorCode); } return $res; } } 