<?php
 class Search_Hotel_Api extends Search_Api { public function __construct(Samo_Config $config, $callback = null) { parent::__construct($config, $callback); $this->defaults['TOWNFROMINC'] = Samo::TOWNFROMHOTELINC; $this->defaults['PACKET'] = Search_Api::PACKET_ONLY_HOTELS; } protected function filterTownFrom($town) { return (Samo::TOWNFROMHOTELINC == $town['id']); } protected function _getPACKET_TYPES() { $result = parent::_getPACKET_TYPES(); foreach ($result as & $item) { $check = (Search_Api::PACKET_ONLY_HOTELS == $item['id']); $item['available'] = $check; $item['selected'] = $check; } $this->setParams('PACKET', Search_Api::PACKET_ONLY_HOTELS); return $result; } public function state($stateinc = null) { $return = parent::state($stateinc); if (null !== $stateinc) { $this->defaults['STATEINC'] = $return; } return $return; } protected function _getSTATEFROM($orderByName = null) { $result = array(); $selected_exists = false; if (false !== ($states = getServers())) { if (null === $orderByName) { $orderByName = $this->getConfig('STATE_ORDER_BY_NAME'); } $name = $orderByName ? 'Name' : 'LName'; $nameAlt = $orderByName ? 'LName' : 'Name'; if (!($selected = $this->getParam('STATEFROM'))) { $defaultTown = Samo_Request::intval('TOWNFROMINC'); if (!$defaultTown) { $defaultTown = TOWNFROMINC; } foreach ($states as $state) { if ($state['townFrom'] == $defaultTown) { $selected = $state['stateFrom']; break; } } } $apiVersion = Samo_Request::api_version(); foreach ($states as $state) { if (!isset($result[$state['stateFrom']])) { if (!$this->filterTownFrom(['id' => $state['townFrom']])) { continue; } if (defined('STATEFROM') && STATEFROM != $state['stateFrom']) { continue; } $item = [ 'id' => $state['stateFrom'], 'name' => $state['stateFrom' . $name], 'selected' => 0, ]; if ('2.0' != $apiVersion) { $item['nameAlt'] = $state['state' . $nameAlt]; } if (!$selected_exists && $selected == $state['stateFrom']) { $selected_exists = $item['selected'] = 1; $this->defaults['STATEFROM'] = $state['stateFrom']; } $result[$item['id']] = $item; } } if (count($result)) { usort( $result, function ($a, $b) { return strcasecmp($a['name'], $b['name']); } ); } } return $result; } private function STATES($orderByName = null) { if (!array_key_exists('STATEFROM', $this->defaults)) { throw new Samo_Exception('Method expects parameter "STATEFROM", which was not supplied.'); } $STATEFROM = $this->getParam('STATEFROM'); if (isset($this->_cacheState[$STATEFROM])) { return $this->_cacheState[$STATEFROM]; } $result = []; $selected_exists = false; if (false !== ($states = getServers())) { if (null === $orderByName) { $orderByName = $this->getConfig('STATE_ORDER_BY_NAME'); } $name = $orderByName ? 'Name' : 'LName'; $nameAlt = $orderByName ? 'LName' : 'Name'; if (!($selected = $this->getParam('STATEINC'))) { $selected = $this->getConfig('STATE_DEFAULT'); } $apiVersion = Samo_Request::api_version(); foreach ($states as $state) { if (!isset($result[$state['state']])) { if (!$this->filterTownFrom(['id' => $state['townFrom']])) { continue; } if (null === $STATEFROM || $STATEFROM == $state['stateFrom']) { $item = [ 'id' => $state['state'], 'name' => $state['state' . $name], 'selected' => 0, ]; if ('2.0' != $apiVersion) { $item['nameAlt'] = $state['state' . $nameAlt]; } if (!$selected_exists && $selected == $state['state']) { $selected_exists = $item['selected'] = 1; $this->state($selected); } $result[$item['id']] = $item; } } } if (count($result)) { usort( $result, function ($a, $b) { return strcasecmp($a['name'], $b['name']); } ); } } return $this->_cacheState[$STATEFROM] = $result; } protected function _getSTATES($orderByName = null) { return $this->STATES($orderByName); } } 