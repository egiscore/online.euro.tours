<?php
 class Search_Tour_Controller extends Samo_Controller { protected $options_only = array(); protected $val_controls = array(); protected $chlb_controls = array(); protected $chb_controls = array(); public $model = null; public function __construct() { $this->actions = array( 'THE_BEST_ADMIN' => array('TOWNFROMINC', 'STATEINC', 'INCOMINGPARTNER', 'TOURINC', 'PACKET', 'HOTELTYPES', 'STARS', 'TOWNS', 'HOTELS', 'ADULT', 'CHILD', 'MEALS', 'PROGRAMINC', 'NIGHTS_FROM', 'NIGHTS_TILL'), 'INIT' => array('TOWNFROMINC', 'STATEINC', 'INCOMINGPARTNER', 'TOURINC', 'TOURTYPE', 'PACKET', 'PROGRAMGROUPINC', 'PROGRAMINC', 'PTYPE', 'MEALS', 'HOTELTYPES', 'STARS', 'TOWNS', 'HOTELS', 'CURRENCY', 'CHECKIN_BEG', 'CHECKIN_END', 'COSTMIN', 'COSTMAX', 'ADULT', 'CHILD', 'NIGHTS_FROM', 'NIGHTS_TILL', 'FREIGHT', 'FILTER_DEFAULT', 'MOMENT_CONFIRM', 'CHILD_IN_BED', 'NOTE', 'ROOMS', 'UFILTER'), 'TOWNFROMINC' => array('STATEINC', 'INCOMINGPARTNER', 'TOURINC', 'TOURTYPE', 'PACKET', 'PROGRAMGROUPINC', 'PROGRAMINC', 'PTYPE', 'TOWNS', 'MEALS', 'HOTELTYPES', 'STARS', 'HOTELS', 'ADULT', 'CHILD', 'CHECKIN_BEG', 'CHECKIN_END', 'CURRENCY', 'NIGHTS_FROM', 'NIGHTS_TILL', 'FREIGHT', 'FILTER_DEFAULT', 'MOMENT_CONFIRM', 'CHILD_IN_BED', 'NOTE', 'DefaultAges', 'UFILTER'), 'STATEINC' => array('INCOMINGPARTNER', 'TOURINC', 'TOURTYPE', 'PACKET', 'PROGRAMGROUPINC', 'PROGRAMINC', 'TOWNS', 'MEALS', 'HOTELTYPES', 'STARS', 'HOTELS', 'ADULT', 'CHILD', 'CHECKIN_BEG', 'CHECKIN_END', 'CURRENCY', 'NIGHTS_FROM', 'NIGHTS_TILL', 'FREIGHT', 'FILTER_DEFAULT', 'MOMENT_CONFIRM', 'CHILD_IN_BED', 'NOTE', 'DefaultAges', 'UFILTER'), 'INCOMINGPARTNER' => array('TOURINC', 'TOURTYPE', 'PACKET', 'PROGRAMGROUPINC', 'PROGRAMINC', 'TOWNS', 'HOTELTYPES', 'HOTELS', 'ADULT', 'CHILD', 'CHECKIN_BEG', 'CHECKIN_END', 'CURRENCY', 'NIGHTS_FROM', 'NIGHTS_TILL', 'FREIGHT', 'FILTER_DEFAULT', 'MOMENT_CONFIRM', 'CHILD_IN_BED', 'NOTE', 'DefaultAges', 'UFILTER'), 'TOURTYPE' => array('TOURINC', 'PACKET', 'PROGRAMGROUPINC', 'PROGRAMINC', 'TOWNS', 'HOTELTYPES', 'HOTELS', 'ADULT', 'CHILD', 'CHECKIN_BEG', 'CHECKIN_END', 'CURRENCY', 'NIGHTS_FROM', 'NIGHTS_TILL', 'FREIGHT', 'FILTER_DEFAULT', 'MOMENT_CONFIRM', 'CHILD_IN_BED', 'NOTE', 'DefaultAges', 'UFILTER'), 'TOURINC' => array('PACKET', 'PROGRAMGROUPINC', 'PROGRAMINC', 'TOWNS', 'HOTELS', 'ADULT', 'CHILD', 'CHECKIN_BEG', 'CHECKIN_END', 'CURRENCY', 'NIGHTS_FROM', 'NIGHTS_TILL', 'FREIGHT', 'FILTER_DEFAULT', 'MOMENT_CONFIRM', 'CHILD_IN_BED', 'NOTE', 'DefaultAges', 'UFILTER'), 'PROGRAMGROUPINC' => array('PROGRAMINC', 'PACKET', 'HOTELS', 'TOWNS', 'CHECKIN_BEG', 'CHECKIN_END', 'UFILTER'), 'PROGRAMINC' => array('PACKET', 'HOTELS', 'TOWNS', 'CHECKIN_BEG', 'CHECKIN_END', 'UFILTER'), 'ADULT' => array('CHECKIN_BEG', 'CHECKIN_END', 'NIGHTS_FROM', 'NIGHTS_TILL'), 'CHILD' => array('CHECKIN_BEG', 'CHECKIN_END', 'NIGHTS_FROM', 'NIGHTS_TILL'), 'CHECKIN_BEG' => array('NIGHTS_FROM', 'NIGHTS_TILL'), 'CHECKIN_END' => array('NIGHTS_FROM', 'NIGHTS_TILL'), ); $this->embeddable = array_merge(array('default_action', 'PRICES'), $this->actions['INIT']); parent::__construct(); $state = Samo_Request::get('STATEINC'); $townFrom = Samo_Request::get('TOWNFROMINC'); $srv = Samo_Registry::get('ServerSettings'); if ($townFrom && $state && $this->action != 'admin_action') { if ($srv['state'] != $state || $srv['townFrom'] != $townFrom) { throw new DatabaseServer_Exception('Unavailable direction', 2000004, Samo_Registry::get('db')); } } } public function empty_form($empty = null) { if (null !== $empty) { $this->empty_form = (bool)$empty; } if ($this->empty_form) { if (false !== strpos(get_class($this->model), 'Search_Hotel')) { $this->model = Samo_Loader::load_object('Search_Hotel_Stub'); } else { $this->model = Samo_Loader::load_object('Search_Tour_Stub'); } $res = array(); foreach (array('TOWNFROMINC', 'STATEINC', 'ADULT', 'CHILD', 'NIGHTS_FROM', 'NIGHTS_TILL') as $control) { $res[$control] = $this->model->loadData($control); } $res['SEARCHMODE'] = $this->model->SEARCHMODE(); $this->view->js_var('samo.CROSS_RATES', array()) ->assign('filter', Samo_Utils::ifs(Samo_Request::intval('FILTER'), 0)) ->assign('freight', Samo_Utils::ifs(Samo_Request::intval('FREIGHT'), 0)) ->assign('moment_confirm', Samo_Utils::ifs(Samo_Request::intval('MOMENT_CONFIRM'), 0)) ->assign('child_in_bed', Samo_Utils::ifs(Samo_Request::intval('CHILD_IN_BED'), 0)) ->assign('SHOW_STATS_LINK', false) ->assign('PARTNER_SELECTED', false) ->assign('viptype', array()) ->assign('MAX_CHILD_AGE', 12) ->assign('AGE1', 4) ->assign('AGE2', 6) ->assign('AGE3', 8) ->bulk_assign($res); if ($this->action == 'embed') { $this->view->full_paths(true); Samo_Registry::get('response')->respond_to('js'); if (!Samo_Request::bitval('is_js')) { $this->view->document_write(true); } } parent::default_action(); } } public function construct() { $this->options_only = array('STATEINC', 'TOWNFROMINC', 'TOURINC', 'TOURTYPE', 'PROGRAMGROUPINC', 'PROGRAMINC', 'NIGHTS_FROM', 'NIGHTS_TILL', 'CURRENCY', 'CHILD', 'ADULT'); $this->val_controls = array('COSTMIN', 'COSTMAX'); $this->chlb_controls = array('TOWNS', 'HOTELTYPES', 'STARS', 'MEALS', 'ROOMS', 'UFILTER'); $this->chb_controls = array('FREIGHT', 'FILTER_DEFAULT', 'MOMENT_CONFIRM', 'CHILD_IN_BED'); $this->persistent = array('STATEINC', 'TOWNFROMINC', 'CURRENCY'); if ($this->model->getSEARCH_INCOMINGPARTNER_FILTER() == 2) { $this->chlb_controls[] = 'INCOMINGPARTNER'; } else { $this->options_only[] = 'INCOMINGPARTNER'; } } public function admin_action() { $res = array(); foreach ($this->actions['THE_BEST_ADMIN'] as $control) { $res[$control] = $this->model->loadData($control); } $this->view->bulk_assign($res); } public function default_action() { if ($this->empty_form) { return $this->empty_form(); } $this->view->assign('SEARCH_TOURTYPE_FILTER', $this->model->getSEARCH_TOURTYPE_FILTER()); $this->view->assign('SEARCH_PROGRAMTYPE_FILTER', $this->model->getSEARCH_PROGRAMTYPE_FILTER()); $this->view->assign('SEARCH_INCOMINGPARTNER_FILTER', $this->model->getSEARCH_INCOMINGPARTNER_FILTER()); $this->view->assign('DEFAULT_GROUP_BY_HOTEL', $this->model->getDEFAULT_GROUP_BY_HOTEL()); $this->view->assign('SEARCH_UFILTER', $this->model->getSEARCH_UFILTER()); $res = array(); foreach ($this->actions['INIT'] as $control) { if (in_array($control, array('NIGHTS_FROM', 'NIGHTS_TILL', 'ADULT', 'CHILD', 'CHECKIN_BEG', 'CHECKIN_END'))) { if (!is_null($this->model->defaults[$control])) { $this->model->defaults['EXISTS_' . $control] = null; } } $res[$control] = $this->model->loadData($control); if ('TOWNS' == $control) { $this->view->assign('group_expanded', $this->model->expand_townto); } if ($this->model->action != 'embed' && in_array($control, array('NIGHTS_FROM', 'NIGHTS_TILL', 'ADULT', 'CHILD', 'CHECKIN_BEG', 'CHECKIN_END', 'CURRENCY')) && !$this->model->defaults['EXISTS_' . $control]) { $this->view->add_class('.' . $control, 'blink'); } } $res['CURR'] = $this->model->currency(); if (isset($this->model->defaults['AGES']) && is_array($this->model->defaults['AGES'])) { foreach ($this->model->defaults['AGES'] as $idx => $age) { if ($idx <= 2) { $this->view->assign('AGE' . ($idx + 1), $age); } else { break; } } } $res['SEARCHMODE'] = $this->model->SEARCHMODE($this instanceof Fast_Search_Controller); $ages = Samo_Utils::ifs(Samo_Request::integers('AGES'), $this->model->getDefaultAges()); foreach ($ages as $idx => $age) { $this->view->assign('AGE' . ($idx + 1), $age); } $this->view->js_var('samo.CROSS_RATES', $this->model->getCurrencyRates()) ->js_var('samo.roundConfig', $this->model->roundConfig()) ->assign('filter', isset($res['FILTER_DEFAULT']) ? $res['FILTER_DEFAULT'] : $this->model->defaults['FILTER']) ->assign('moment_confirm', isset($res['MOMENT_CONFIRM']) ? $res['MOMENT_CONFIRM'] : $this->model->defaults['MOMENT_CONFIRM']) ->assign('freight', isset($res['FREIGHT']) ? $res['FREIGHT'] : $this->model->defaults['FREIGHT']) ->assign('moment_confirm', isset($res['MOMENT_CONFIRM']) ? $res['MOMENT_CONFIRM'] : $this->model->defaults['MOMENT_CONFIRM']) ->assign('child_in_bed', isset($res['CHILD_IN_BED']) ? $res['CHILD_IN_BED'] : $this->model->defaults['CHILD_IN_BED']) ->assign('SHOW_STATS_LINK', $this->model->show_stats_link) ->assign('PARTNER_SELECTED', isset($this->model->defaults['PARTNER_SELECTED']) && $this->model->defaults['PARTNER_SELECTED']) ->assign('HOTELSSEL', $this->model->separate_selected_hotels) ->assign('MAX_CHILD_AGE', $this->model->maxChildAge()) ->bulk_assign($res); if (isset($_GET['DOLOAD'])) { $this->_PRICES(); } parent::default_action(); } protected function _PRICES() { $result = $this->model->getPrices(); $this->view->assign('subfilter', $this->model->defaults['PACKET']) ->assign('townFrom', $this->model->townFrom()) ->assign('state', $this->model->state()) ->assign('SEARCH_BY_HOTEL_NIGHTS', $this->model->getConfig('SEARCH_BY_HOTEL_NIGHTS', 'online_config', 0)) ->assign('show_link_to_spog', $this->model->show_link_to_spog); if (Samo_Request::get('PARTITION_PRICE') == (Search_Api::PARTITION_BY_HOTEL + Search_Api::PARTITION_BY_CHECKIN + Search_Api::PARTITION_BY_NIGHTS)) { $this->view ->assign('PARTITION_PRICE', Samo_Request::get('PARTITION_PRICE')) ->assign('groupByPartPrice', true); } if ($result) { if (isset($result['part']) && $result['part']) { if (isset($result['error'])) { switch ($result['error']) { case 101: $this->view->error(sprintf($this->messages['TOUR_SEARCH_REDUCE_DATE_RANGE'], $result['errorParam'])); break; case 102: $this->view->error(sprintf($this->messages['TOUR_SEARCH_REDUCE_INTERVAL_NIGHTS'], $result['errorParam'])); break; default: $this->view->error($this->messages['TOUR_SEARCH_TOO_MANY_ROWS']); break; } } else { $this->view->message($this->messages['TOUR_SEARCH_TOO_MANY_ROWS']); } } if (!empty($result['prices']) && empty($result['error'])) { $a = $result; $this->view->assign('prices', $result); if ($pages = $this->model->getPages($result['pager']['total'])) { $this->view->assign('pages', $pages) ->assign('current_page', $result['pager']['current']); } } } } public function PRICES() { $this->_PRICES(); if (Samo_Request::get('PARTITION_PRICE')) { $this->view->assign('groupByPartPrice', true); } $this->view->element_update('resultset', 'resultset.tpl') ->assign('groupResult', false) ->js_call('samo.initResultset') ->js_call('samo.groupResultSearch'); } public function PRICESGROUP() { $this->_PRICES(); $this->view ->assign('groupResult', true) ->element_update('resultsetGrouped', 'resultset.tpl'); } public function samo_action($action) { if ($this->warn_unavailable_direction()) { return false; } if (!isset($this->actions[$action])) { Samo_Registry::get('response')->not_found(); } $category = array(); foreach ($this->actions[$action] as $control) { $this->view->assign('SHOWICON', false); $result = $this->model->loadData($control); if ($control == 'CHECKIN_BEG' || $control == 'CHECKIN_END') { $this->view->calendar_attrs($control, $result['value'], $result['startDate'], $result['validDates']); } else { if ('NOTE' == $control) { $this->view->js_call_if_exists('samo.note', strval($result)); } if (!in_array($control, $this->val_controls)) { if (in_array($control, $this->chb_controls)) { $this->view->element_prop(preg_replace('~_DEFAULT$~', '', $control), 'checked', $result); } elseif (!in_array($control, $this->chlb_controls)) { if (in_array($control, $this->options_only)) { $this->view->add_options($control, $result, '../api_controls.tpl'); if ('CHILD' == $control) { $this->view->element_trigger($control, 'draw_child_ages'); } } } else { if ($control == 'STARS' || $control == 'HOTELTYPES') { $category[$control] = $result; if ($control == 'STARS') { $this->view->assign('SHOWICON', true); $this->view->assign('ICONTYPE', 'hp'); $this->view->hotel_category($control, $category, '../api_controls.tpl'); } } else { if ('TOWNS' == $control) { $this->view->assign('group_expanded', $this->model->expand_townto); } if ('UFILTER' == $control) { $this->view->assign('SHOWICON', true); $this->view->assign('ICONTYPE', 'uf'); } $this->view->checklistbox_update($control, $result, '../api_controls.tpl'); } } } else { $this->view->element_value($control, $result); } if ($control == 'DefaultAges') { $this->view->js_call('samo.setDefaultAges', $result); } if ($control == 'HOTELS') { $this->view->add_hotels('HOTELS', $result); $this->view->element_value('hotelsearch', ''); } elseif ($control == 'PACKET') { $full = true; foreach ($result as $packet_type => $data) { if ($data['available']) { $this->view->remove_class('.subfilter' . $packet_type, 'hidden'); if ($data['selected']) { $this->view->radio_value('PACKET', $packet_type); } } else { if ($packet_type == Search_Api::PACKET_FULL) { $full = false; } $this->view->add_class('.subfilter' . $packet_type, 'hidden'); } } if (!$result[Search_Api::PACKET_ONLY_FREIGHTS]['available'] && !$result[Search_Api::PACKET_ONLY_HOTELS]['available']) { if ($full) { $this->view->add_class('.subfilter0', 'hidden'); } $this->view->add_class('.programm_filter', 'hidden'); } else { $this->view->remove_class('.programm_filter', 'hidden'); } if ($this->model->defaults['PACKET'] != Search_Api::PACKET_ONLY_FREIGHTS) { $this->view->remove_class('.HOTELSCONTAINER', 'hidden'); } else { $this->view->add_class('.HOTELSCONTAINER', 'hidden'); } } elseif ($control == 'PROGRAMGROUPINC') { if (empty($result)) { $this->view->add_class('.ptype_group_filter', 'hidden'); } else { $this->view->remove_class('.ptype_group_filter', 'hidden'); } } elseif ($control == 'INCOMINGPARTNER') { if (empty($result)) { $this->view->add_class('.incoming-slider', 'hidden'); } else { $this->view->remove_class('.incoming-slider', 'hidden'); } } } if (in_array($control, array('NIGHTS_FROM', 'NIGHTS_TILL', 'ADULT', 'CHILD', 'CHECKIN_BEG', 'CHECKIN_END', 'CURRENCY')) && !$this->model->defaults['EXISTS_' . $control]) { $this->view->add_class('.' . $control, 'blink'); } } return true; } public function CONTENT() { if ($packet = $this->model->packet_content()) { try { $result = $this->model->getSERVICES(); } catch (Bron_Exception $e) { $result = false; } $this->model->ServiceRequiredContent($packet, $result); $this->view->assign('packet', $packet); if ($result) { $this->view->assign('SERVICES', $result); } $this->view->popup_template('packet.tpl', '', 800, 50); } else { $this->view->message($this->messages['NO_DATA']); } } public function PAYMENTSCHEDULE() { if ($paymentschedule = $this->model->paymentschedule()) { $this->view->assign('paymentschedule', $paymentschedule)->popup_template('../paymentschedule.tpl', $this->messages['PAYMENT_SCHEDULE_TITLE'], 500, 50); } else { $this->view->message($this->messages['NO_DATA']); } } public function STATS() { $result = $this->model->stats(); $routes = Samo_Registry::get('routes'); if (isset($routes['freight_monitor'])) { $this->load_messages($routes['freight_monitor']); } $this->view ->assign('SEARCH_BY_HOTEL_NIGHTS', $this->model->getConfig('SEARCH_BY_HOTEL_NIGHTS', 'online_config', 0)) ->bulk_assign($result) ->assign('lang', $this->messages) ->popup_close() ->popup_template('stats.tpl', $this->messages['TOUR_SEARCH_PRICE_STATS'], 800, 500) ->js_var('resultPrices', is_array($result['info']['prices']) ? $result['info'] : false) ->js_call('samo.price_chart'); } public function COMMISSIONS() { $result = $this->model->commissions(); $this->view->assign('result', $result); $this->view->popup_template('commissions.tpl', '', 500, 50); } public function allow_js() { return true; } } 