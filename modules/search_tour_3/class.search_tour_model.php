<?php
 class Search_Tour_Model extends Samo { protected $recheck_dates = false; protected $api_name = 'Search_Tour_Api'; public $max_adult_count; public $max_child_count = 3; public $min_adult_count = 0; public $min_child_count = 0; public $show_link_to_spog = true; public $show_stats_link = true; public $separate_selected_hotels = false; public $expand_townto = false; public $placeStatusAlias = ['Y' => 'yesplace', 'F' => 'yesnoplace', 'N' => 'noplace', 'R' => 'requestplace']; public function __construct(Samo_Config $config = null) { parent::__construct($config); if (!isset($this->defaults['TOWNFROMINC'])) { $this->defaults['TOWNFROMINC'] = Samo_Request::intval('TOWNFROMINC'); } if (!isset($this->defaults['STATEINC'])) { $this->defaults['STATEINC'] = Samo_Request::intval('STATEINC'); } $this->defaults['TOURINC'] = Samo_Utils::ifs(Samo_Request::intval('TOURINC'), null); $this->defaults['CHECKIN'] = Samo_Request::date('CHECKIN', null, Samo_Datetime::parse('2 year')); $this->defaults['CHECKOUT'] = Samo_Request::date('CHECKOUT', null, Samo_Datetime::parse('2 year')); $this->defaults['CURRENCY'] = Samo_Utils::ifs(Samo_Request::intval('CURRENCY'), null); $this->defaults['EXISTS_NIGHTS_FROM'] = false; $this->defaults['EXISTS_NIGHTS_TILL'] = false; $this->defaults['EXISTS_CHECKIN_BEG'] = $this->defaults['EXISTS_CHECKIN_END'] = false; $this->defaults['EXISTS_ADULT'] = $this->defaults['EXISTS_CHILD'] = false; $this->defaults['EXISTS_CURRENCY'] = false; } public function construct() { $api = $this->api(); $api->getTOWNFROMS(); $api->getSTATES(); $this->townFrom($api->TOWNFROMINC); $this->state($api->STATEINC); $this->defaults['TOWNS'] = Samo_Utils::ifs(Samo_Request::integers('TOWNS', 1), Samo_Request::integers('TOWNTO', 1)); $this->defaults['MEALS'] = Samo_Utils::ifs(Samo_Request::integers('MEALS', 1), Samo_Request::integers('MEAL', 1)); $this->defaults['UFILTER'] = Samo_Request::integers('UFILTER', 1, 7); $this->defaults['MEALINC'] = Samo_Request::intval('MEALINC', 1); $this->defaults['MINDAYSBEFORE'] = Samo_Utils::ifs(Samo_Request::intval('MINDAYSBEFORE', 1), 0); $this->defaults['MAXPERIOD'] = Samo_Request::intval('MAXPERIOD', 0, 30); $mindate = Samo_Datetime::today()->add_days($this->defaults['MINDAYSBEFORE']); $maxdate = Samo_Datetime::today()->add_days(730); $this->defaults['CHECKIN_BEG'] = Samo_Request::date('CHECKIN_BEG', $mindate, $maxdate); $this->defaults['CHECKIN_END'] = Samo_Request::date('CHECKIN_END', $mindate, $maxdate); $this->defaults['COSTMIN'] = Samo_Utils::ifs(Samo_Request::intval('COSTMIN', 0), Samo_Request::intval('PRICE_MIN', 0)); $this->defaults['COSTMAX'] = Samo_Utils::ifs(Samo_Request::intval('COSTMAX', $this->defaults['COSTMIN']), Samo_Request::intval('PRICE_MAX', $this->defaults['COSTMIN'])); $this->defaults['TOURTYPE'] = Samo_Request::intval('TOURTYPE', 1); $this->defaults['INCOMINGPARTNER'] = Samo_Request::integers('INCOMINGPARTNER', 1); $this->api()->getTOURS(); if (0 === Samo_Request::intval('ADULT') && 0 === Samo_Request::intval('CHILD')) { unset($_GET['ADULT'], $_GET['CHILD']); unset($_GET['NIGHTS_TILL'], $_GET['NIGHTS_FROM']); } $this->defaults['NIGHTS_FROM'] = Samo_Utils::notnull(Samo_Request::intval('NIGHTS_FROM'), Samo_Request::intval('NIGHTS_TILL')); $this->defaults['NIGHTS_TILL'] = Samo_Utils::notnull(Samo_Request::intval('NIGHTS_TILL'), Samo_Request::intval('NIGHTS_FROM')); if (null !== $this->defaults['NIGHTS_FROM'] && null !== $this->defaults['NIGHTS_TILL'] && $this->defaults['NIGHTS_FROM'] > $this->defaults['NIGHTS_TILL']) { list($this->defaults['NIGHTS_FROM'], $this->defaults['NIGHTS_TILL']) = array($this->defaults['NIGHTS_TILL'], $this->defaults['NIGHTS_FROM']); } $this->min_adult_count = $this->api()->getMIN_PEOPLE(); $this->max_adult_count = $this->api()->getMAX_PEOPLE(); $this->min_child_count = $this->api()->getMIN_CHILD(); $this->max_child_count = $this->api()->getMAX_CHILD(); $this->defaults['ADULT'] = (null !== Samo_Request::find('ADULT')) ? Samo_Utils::ifs(Samo_Request::intval('ADULT', 0, $this->max_adult_count), 0) : $this->getADULT_DEFAULT(); $this->defaults['CHILD'] = (null !== Samo_Request::find('CHILD')) ? Samo_Utils::ifs(Samo_Request::intval('CHILD', 0, $this->max_child_count), 0) : $this->getCHILD_DEFAULT(); $this->defaults['PACKET'] = Samo_Utils::ifs(Samo_Request::intval('PACKET'), Search_Api::PACKET_FULL); $this->defaults['SORT_TYPE'] = 1; $this->defaults['PRICEPAGE'] = Samo_Utils::ifs(Samo_Request::intval('PRICEPAGE'), 1); $this->defaults['MAXRECORD'] = null; $this->defaults['REC_ON_PAGE'] = $this->getConfig('REC_ON_PAGE'); $this->defaults['AGES'] = Samo_Request::integers('AGES', 0, $this->maxChildAge()); $this->defaults['PROGRAMGROUPINC'] = Samo_Utils::ifs(Samo_Request::intval('PROGRAMGROUPINC', 1), null); $this->defaults['PROGRAMINC'] = Samo_Utils::ifs(Samo_Request::integers('PROGRAMINC', 1), null); $this->defaults['HTPLACEINC'] = Samo_Request::intval('HTPLACEINC', 1); $this->defaults['ROOMS'] = Samo_Utils::ifs(Samo_Request::integers('ROOMS', 1), Samo_Request::integers('ROOM', 1)); $this->defaults['ROOMINC'] = Samo_Request::intval('ROOMINC'); $this->defaults['STARS'] = Samo_Request::integers('STARS', 1); $this->defaults['HOTELS'] = Samo_Request::integers('HOTELS', 1); $this->defaults['HOTELTYPES'] = Samo_Request::integers('HOTELTYPES', 1); $this->defaults['FILTER'] = (null !== Samo_Request::find('FILTER')) ? Samo_Utils::ifs(Samo_Request::intval('FILTER'), 0) : $this->getFILTER_DEFAULT(); $this->defaults['MOMENT_CONFIRM'] = (null !== Samo_Request::find('MOMENT_CONFIRM')) ? Samo_Utils::ifs(Samo_Request::bitval('MOMENT_CONFIRM'), 0) : $this->getMOMENT_CONFIRM(); $this->defaults['FREIGHT'] = (null !== Samo_Request::find('FREIGHT')) ? Samo_Utils::ifs(Samo_Request::bitval('FREIGHT'), 0) : $this->getFREIGHT(); $this->defaults['CHILD_IN_BED'] = (null !== Samo_Request::find('CHILD_IN_BED')) ? Samo_Utils::ifs(Samo_Request::bitval('CHILD_IN_BED'), 0) : $this->getCHILD_IN_BED(); $this->defaults['ACTION'] = $this->action; if (null === ($catClaim = Samo_Request::hexval('CATCLAIM'))) { if (null !== ($catClaim = Samo_Utils::ifs(Samo_Request::find('CLAIMINC'), Samo_Request::find('CLAIM')))) { $catClaim = (ctype_xdigit($catClaim)) ? $this->cat_claim($catClaim) : $catClaim; } } $this->defaults['CATCLAIM'] = $catClaim; $this->defaults['SHOW_THEBEST'] = Samo_Request::get('SHOW_THEBEST') !== null ? Samo_Request::get('SHOW_THEBEST') : $this->getConfig('SHOW_THEBEST'); $this->defaults['HOTELS_ANY'] = Samo_Request::bitval('HOTELS_ANY'); } public function auth_required() { if ($this->action == 'embed' && Samo_Request::get('embed_action') == 'COMMISSIONS') { return ['agency']; } elseif ($this->action == 'COMMISSIONS') { return ['agency']; } return parent::auth_required(); } public function getTOWNFROMINC() { $towns = $this->api()->getTOWNFROMS(); $is_default_action = $this->action == 'default_action' || ($this->action == 'embed'); if ($is_default_action && !$towns) { throw new DatabaseServer_Exception('Unknown town', 2000004, $this->db); } if ($is_default_action && ((null !== ($townfrom = Samo_Request::get('TOWNFROMINC')) && $townfrom != $this->townFrom()))) { throw new DatabaseServer_Exception('Unknown town', 2000004, $this->db); } return $towns; } public function getSTATEINC() { $states = $this->api()->getSTATES(); $selected = array_filter( $states, function ($state) { return $state['selected'] == 1; } ); if (!count($selected)) { $defaultState = $this->getConfig('STATE_DEFAULT'); $default = array_filter( $states, function ($state) use ($defaultState) { return $state['id'] == $defaultState; } ); if (count($default)) { foreach ($states as &$state) { if ($state['id'] == $defaultState) { $this->state($defaultState); $state['selected'] = 1; break; } } } else { foreach ($states as &$state) { $this->state($state['id']); $state['selected'] = 1; break; } } } $is_default_action = $this->action == 'default_action' || ($this->action == 'embed'); if ($is_default_action && !$states) { throw new DatabaseServer_Exception('Unknown state', 2000004, $this->db); } $requestedState = Samo_Request::get('STATEINC'); if ($is_default_action && !empty($requestedState) && $requestedState != $this->state()) { throw new DatabaseServer_Exception('Unknown state', 2000004, $this->db); } return $states; } public function getMAX_PEOPLE() { return $this->api()->getMAX_PEOPLE(); } public function getMAX_CHILD() { return $this->api()->getMAX_CHILD(); } public function getDefaultAges() { return $this->api()->getDefaultAges(); } public function getADULT() { return $this->getList('ADULT', $this->tour_config('MIN_PEOPLE', 'search'), $this->tour_config('MAX_PEOPLE', 'search'), $this->tour_config('ADULTCOUNT', 'search')); } public function getCHILD() { return $this->getList('CHILD', $this->tour_config('MIN_CHILD', 'search'), $this->tour_config('MAX_CHILD', 'search'), $this->tour_config('CHILDCOUNT', 'search')); } private function getList($index, $min, $max, $default) { $return = array(); $real_param = $param = Samo_Request::intval($index); if (null === $real_param) { $param = min($this->defaults[$index], $max); } for ($value = $min; $value <= $max; $value++) { $selected = ($param == $value); if (!$this->defaults['EXISTS_' . $index] && $selected) { $this->defaults[$index] = $value; $this->defaults['EXISTS_' . $index] = true; } $return[$value] = array('id' => $value, 'name' => $value, 'selected' => $selected); } if ($this->defaults['EXISTS_' . $index] == false) { if (null !== $this->defaults['EXISTS_' . $index]) { $this->defaults[$index] = $default; $return[$default]['selected'] = true; } else { $return[$real_param] = array('id' => $real_param, 'name' => $real_param, 'nameAlt' => $real_param, 'selected' => true); } } return $return; } public function getADULT_DEFAULT() { return $this->api()->getADULT(); } public function getCHILD_DEFAULT() { return $this->api()->getCHILD(); } public function getNIGHTS_FROM() { if (($data = $this->api()->getNIGHTS()) && !empty($data['nights'])) { if (null === ($param = $this->defaults['NIGHTS_FROM'])) { $param = $data['default']['from']; if ($this->defaults['NIGHTS_TILL'] < $param && null !== $this->defaults['NIGHTS_TILL']) { $param = $this->defaults['NIGHTS_TILL']; } } foreach ($data['nights'] as $value) { $selected = ($param == $value); if (!$this->defaults['EXISTS_NIGHTS_FROM'] && $selected) { $this->defaults['EXISTS_NIGHTS_FROM'] = $this->defaults['NIGHTS_FROM'] = $value; } $res[$value] = array('id' => $value, 'name' => $value, 'nameAlt' => $value, 'selected' => $selected, 'attributes' => ['class-yesplace' => in_array($value, $data['places'])]); } if (1 == count($res)) { $this->defaults['NIGHTS_FROM'] = $param = $value; } if ($this->defaults['EXISTS_NIGHTS_FROM'] == false) { if (($this->defaults['EXISTS_NIGHTS_FROM'] === false || null === $this->defaults['NIGHTS_FROM']) && count($res) > 1) { $selected = false; foreach ($res as $key => $row) { if ($selected === false || $row['id'] < $param) { $selected =& $res[$key]; } else { break; } } if (null === $this->defaults['NIGHTS_FROM']) { $this->defaults['EXISTS_NIGHTS_FROM'] = $selected['id']; } $selected['selected'] = true; $this->defaults['NIGHTS_FROM'] = $selected['id']; } else { $res[$this->defaults['NIGHTS_FROM']] = array('id' => $this->defaults['NIGHTS_FROM'], 'name' => $this->defaults['NIGHTS_FROM'], 'nameAlt' => $this->defaults['NIGHTS_FROM'], 'selected' => true); ksort($res); } } } return $res; } public function getNIGHTS_TILL() { if (($data = $this->api()->getNIGHTS()) && !empty($data['nights'])) { if (null === ($param = $this->defaults['NIGHTS_TILL'])) { $param = $data['default']['till']; if ($this->defaults['NIGHTS_FROM'] > $param && null !== $this->defaults['NIGHTS_FROM']) { $param = $this->defaults['NIGHTS_FROM']; } } foreach ($data['nights'] as $value) { $selected = ($param == $value); if (!$this->defaults['EXISTS_NIGHTS_TILL'] && $selected) { $this->defaults['EXISTS_NIGHTS_TILL'] = $this->defaults['NIGHTS_TILL'] = $value; } $res[$value] = array('id' => $value, 'name' => $value, 'nameAlt' => $value, 'selected' => $selected, 'attributes' => ['class-yesplace' => in_array($value, $data['places'])]); } if (1 == count($res)) { $this->defaults['NIGHTS_TILL'] = $param = $value; } if ($this->defaults['EXISTS_NIGHTS_TILL'] == false) { if (($this->defaults['EXISTS_NIGHTS_TILL'] === false || null === $this->defaults['NIGHTS_TILL']) && count($res) > 1) { foreach ($res as $key => $row) { $selected =& $res[$key]; if ($param < $selected['id']) { break; } } if (null === $this->defaults['NIGHTS_TILL']) { $this->defaults['EXISTS_NIGHTS_TILL'] = $selected['id']; } $selected['selected'] = true; $this->defaults['NIGHTS_TILL'] = $selected['id']; } else { $res[$this->defaults['NIGHTS_TILL']] = array('id' => $this->defaults['NIGHTS_TILL'], 'name' => $this->defaults['NIGHTS_TILL'], 'nameAlt' => $this->defaults['NIGHTS_TILL'], 'selected' => true, 'places' => false); ksort($res); } } } return $res; } public function getFREIGHT() { return $this->api()->getFREIGHT(); } public function getFILTER_DEFAULT() { return $this->api()->getFILTER(); } public function getMOMENT_CONFIRM() { return $this->api()->getMOMENT_CONFIRM(); } public function getCHILD_IN_BED() { return $this->api()->getCHILD_IN_BED(); } public function getCOSTMIN() { return ($tmp = intval($this->defaults['COSTMIN'])) ? $tmp : ''; } public function getCOSTMAX() { return ($tmp = intval($this->defaults['COSTMAX'])) ? $tmp : ''; } public function getSEARCH_UFILTER() { return $this->config('SEARCH_UFILTER', 'online_config'); } public function getSEARCH_PROGRAMTYPE_FILTER() { return $this->config('SEARCH_PROGRAMTYPE_FILTER', 'online_config'); } public function getSEARCH_TOURTYPE_FILTER() { return $this->config('SEARCH_TOURTYPE_FILTER', 'online_config'); } public function getSEARCH_INCOMINGPARTNER_FILTER() { return $this->config('SEARCH_INCOMINGPARTNER_FILTER', 'online_config'); } public function getDEFAULT_GROUP_BY_HOTEL() { return $this->config('DEFAULT_GROUP_BY_HOTEL', 'online_config'); } public function getTOURINC() { $messages = Samo_Registry::get('messages'); $tours = $this->api()->getTOURS(); if (1 == count($tours)) { $tours[0]['selected'] = true; $this->defaults['TOURINC'] = $tours[0]['id']; } return array_merge( [ ['id' => 0, 'nameAlt' => $messages['TOUR_ANY_LNAME'], 'name' => $messages['TOUR_ANY_NAME'], 'selected' => false], ], $tours ); } public function getTOURTYPE() { if ($this->getSEARCH_TOURTYPE_FILTER() == 0) { return false; } $messages = Samo_Registry::get('messages'); return array_merge( [ 0 => [ 'id' => 0, 'name' => $messages['TOURTYPE_ANY_LNAME'], 'nameAlt' => $messages['TOURTYPE_ANY_NAME'], 'selected' => false ] ], $this->api()->getTOUR_TYPES() ); } public function getINCOMINGPARTNER() { if ($this->getSEARCH_INCOMINGPARTNER_FILTER() == 0) { return false; } $messages = Samo_Registry::get('messages'); $data = array_merge( $this->getSEARCH_INCOMINGPARTNER_FILTER() == 2 ? [] : [ 0 => [ 'id' => 0, 'name' => $messages['TOURTYPE_ANY_LNAME'], 'nameAlt' => $messages['TOURTYPE_ANY_NAME'], 'selected' => false ] ], $this->api()->getINCOMING_PARTNERS() ); foreach ($data as &$partner) { if ($partner['selected']) { $this->defaults['PARTNER_SELECTED'] = true; } } return $data; } public function getTOWNS() { return $this->api()->getTOWNS(); } public function getSTARS() { $return = $this->api()->getSTARS(); if ($return && is_array($return) && Samo_Request::get('page') == 'fast_search') { $return = array_merge([['id' => 0, 'name' => '-----', 'nameAlt' => '-----', 'selected' => false]], $return); } return $return; } public function getMEALS() { return $this->api()->getMEALS(); } public function getROOMS() { return $this->api()->getROOMS(); } public function getHOTELS($useFilter = false) { return $this->api()->getHOTELS($useFilter); } public function getPrices() { $api = $this->api(); if (Samo_Request::get('PARTITION_PRICE')) { $api->setParams('PARTITION_PRICE', Samo_Request::get('PARTITION_PRICE')); } if ($data = $api->getPRICES()) { $hotelUrl = Samo_Url::route('hotels'); foreach ($data['prices'] as $key => $row) { if ($hotelUrl && $row['hotelUrl'] && strpos($row['hotelUrl'], $hotelUrl) === 0) { $params = [ 'TOWNFROMINC' => $row['townFromKey'], 'CHECKIN_BEG' => $row['checkIn']->format('sql'), 'NIGHTS_FROM' => $api->getParam('NIGHTS_FROM'), 'NIGHTS_TILL' => $api->getParam('NIGHTS_TILL'), ]; if (Samo::TOWNFROMHOTELINC == $row['townFromKey']) { $params['STATEFROM'] = $api->getParam('STATEFROM'); } $data['prices'][$key]['hotelUrl'] = $row['hotelUrl'] . '&' . http_build_query($params); } } } return $data; } private function getCheckin($type = 'CHECKIN_BEG') { $method = 'get' . $type; if ($result = $this->api()->$method()) { if (!($param = Samo_Request::find($type))) { $param = $result['value']; } else { $param = $this->defaults[$type]; } $diff = $param->diff($result['startDate']); $status = strlen($result['validDates']) <= $diff ? '0' : substr($result['validDates'], $diff, 1); if ('0' !== $status) { $this->defaults['EXISTS_' . $type] = true; } elseif (null !== $this->defaults['EXISTS_' . $type]) { $validDates = str_replace(['2', '3'], '1', $result['validDates']); $left = strrpos(substr($validDates, 0, $diff), '1'); $right = strpos(substr($validDates, $diff + 1), '1'); if (false !== $right) { $right += $diff + 1; if (false === $left) { $left = $right; } } elseif (false !== $left) { $right = $left; } else { return $result; } if ($diff - $left < $right - $diff) { $selected = $left; } elseif ($diff - $left > $right - $diff) { $selected = $right; } else { $selected = ($type == 'CHECKIN_BEG') ? $left : $right; } $result['value'] = $this->defaults[$type] = $result['startDate']->copy()->add_days($selected); } } return $result; } public function getCHECKIN_BEG() { return $this->getCheckin('CHECKIN_BEG'); } public function getCHECKIN_END() { return $this->getCheckin('CHECKIN_END'); } public function getPages($max) { $numonpage = $this->tour_config('LINKS_ON_PAGE', 'search'); return $this->pager($max, $this->defaults['PRICEPAGE'], $numonpage); } public function getUFILTER() { return $this->api()->getUfilters(); } public function currency() { return $this->api()->currency(); } public function getCURRENCY() { $api = $this->api(); $currencies = $api->getCURRENCIES(); if ($currencies) { foreach (array_reverse($currencies) as $currency) { if ($currency['selected']) { break; } } if (($selected = $this->defaults['CURRENCY']) && ($selected != $currency['id'])) { $api->setParams('CURRENCY', $currency['id']); $this->defaults['CURRENCY'] = $currency['id']; foreach (['COSTMIN', 'COSTMAX'] as $field) { if (isset($this->defaults[$field]) && ($value = $this->defaults[$field])) { $this->defaults[$field] = $this->convertPrice($value, $selected, $currency['id'], null); } } } else { $this->defaults['EXISTS_CURRENCY'] = true; } } return $currencies; } public function packet_content() { if ($data = $this->api()->getPACKET()) { foreach ($data as $key => $row) { $data[$key]['image'] = $row['type'] . '.gif'; } } return $data; } public function getPROGRAMGROUPINC() { $messages = Samo_Registry::get('messages'); return array_merge( array(array('id' => 0, 'name' => $messages['TOUR_ANY_NAME'], 'nameAlt' => $messages['TOUR_ANY_NAME'], 'selected' => false)), $this->api()->getPROGRAM_GROUPS() ); } public function getPROGRAMINC() { if ($this->getSEARCH_PROGRAMTYPE_FILTER() == 0) { return false; } $messages = Samo_Registry::get('messages'); return array_merge(array(array('id' => 0, 'name' => $messages['TOUR_ANY_NAME'], 'nameAlt' => $messages['TOUR_ANY_NAME'], 'selected' => false)), $this->api()->getPROGRAMS()); } public function getPACKET() { return $this->api()->getPACKET_TYPES(); } public function paymentschedule($cat_claim = null) { $api = $this->api(); $return = $api->getPAYMENTS_SCHEDULE(); return $return; } public function stats() { $this->defaults['SHOW_PLACES'] = intval($this->getConfig('FreiMonitorPlaces', 'Online')); $result = array(); if ($info = $this->api()->getPRICE_DYNAMICS()) { if ($info['hotel_monitor']) { $checkin = $info['datebeg']; $nights = $info['hnights']; $checkout = $checkin->copy()->add_days($nights); $messages = Samo_Registry::get('messages'); foreach ($info['hotel_monitor'] as $key => $row) { $date = $row['date']; $date2 = $row['date']->copy()->add_days(1); $outside = 0; if ($date->diff($checkin) < 0 || $date->diff($checkout) >= 0) { $outside = 1; } elseif ($info['stopSale']) { if ($date2->gt($info['StopSaleDateBeg']) && $date->lte($info['StopSaleDateEnd'])) { $row['status'] = 'N'; } } $arr = array( 'statusAlias' => $this->placeStatusAlias[$row['status']], 'statusName' => $messages['TOUR_SEARCH_PRICE_STATS_HOTEL_MONITOR_' . $row['status']], 'outerDay' => ($date->diff($checkout) == 0) ? 0 : $outside, 'outerNight' => $outside, ); $info['hotel_monitor'][$key] = array_merge($info['hotel_monitor'][$key], $arr); } } $routes = Samo_Registry::get('routes'); if ($this->defaults['PACKET'] != Search_Api::PACKET_ONLY_HOTELS && isset($routes['freight_monitor'])) { $checkin = $info['datebeg']; $checkout = $info['dateout']; $this->api_name = 'Freight_Monitor_Api'; $api = $this->api(); $api->setParams('TOURINC', $info['tourKey']); $api->setParams('CHECKIN', $checkin); $api->setParams('CHECKOUT', $checkout); $api->setParams('SPOINC', $info['spog']); $api->setParams('NIGHTS', $info['nights']); $api->setParams('SHOW_PLACES', $this->defaults['SHOW_PLACES']); $result = $api->getFreightsRoundTrip(); if (!isset($result['routes'])) { $messages = Samo_Registry::get('messages'); $result['routes'] = array(); $result['classesRoutes'] = [ 'econom' => 1, 'busines' => 0, 'comfort' => 0, 'premium' => 0, ]; foreach (['direct', 'back'] as $direction) { $step = array( 'info' => ['date' => ($direction == 'direct' ? $checkin : $checkout), 'sourceTown' => ($direction == 'direct' ? $messages['TOUR_SEARCH_ARRIVAL_DATE'] : $messages['TOUR_SEARCH_DEPARTURE_DATE']), 'targetTown' => null], 'freights' => array(), ); foreach ($result[$direction] as $row) { $step['freights'][] = $row; $result['classesRoutes']['busines'] += ($row['places'][1]['status'] == 'noplace') ? 0 : 1; $result['classesRoutes']['comfort'] += ($row['places'][2]['status'] == 'noplace') ? 0 : 1; $result['classesRoutes']['premium'] += ($row['places'][3]['status'] == 'noplace') ? 0 : 1; } $result['routes'][] = $step; } unset($result['direct'], $result['back']); } else { foreach ($result as $key => $rows) { foreach ($rows as $row) { if (!isset($result['classesRoutes'])) { $result['classesRoutes'] = [ 'econom' => 1, 'busines' => 0, 'comfort' => 0, 'premium' => 0, ]; } foreach ($row['freights'] as $fr) { $result['classesRoutes']['busines'] += ($fr['places'][1]['status'] == 'noplace') ? 0 : 1; $result['classesRoutes']['comfort'] += ($fr['places'][2]['status'] == 'noplace') ? 0 : 1; $result['classesRoutes']['premium'] += ($fr['places'][3]['status'] == 'noplace') ? 0 : 1; } } } } if (isset($result['routes'])) { $logo_dir = 'data/partner'; foreach ($result['routes'] as $key => &$rows) { foreach ($rows['freights'] as &$row) { $file = Samo_Utils::findFile(_ROOT . $logo_dir, 'logo_' . $row['transportCompanyKey'] . '_*'); if ($file) { $row['transportCompanyLogo'] = WWWROOT . $logo_dir . '/' . $file; } } } } if (isset($result['classesRoutes'])) { $result['classesRoutes']['busines'] = (boolean)$result['classesRoutes']['busines']; $result['classesRoutes']['comfort'] = (boolean)$result['classesRoutes']['comfort']; $result['classesRoutes']['premium'] = (boolean)$result['classesRoutes']['premium']; } } } $info['bron'] = true; if (is_array($info['prices'])) { foreach ($info['prices'] as $key => $val) { if ($val['id'] == $info['id']) { $info['bron'] = $val['bron']; $info['stopSale'] = $val['stopSale']; $info['stopSpog'] = $val['stopSpog']; $info['note'] = $val['note']; } } } return array( 'info' => $info, 'freights' => $result, ); } public function _setShowPlace(& $res, $back = false) { if (count($res) > 0) { $class_map = [0 => 'econom', 1 => 'busines', 2 => 'comfort', 3 => 'premium']; foreach ($class_map as $key => $class) { $placeShow = 0; foreach ($res as & $row) { $_status = $row['places'][$key]['status']; $row['places'][$key]['tdclass'] = $this->placeStatusAlias[$_status]; if ($key == 0 || !in_array($_status, array('N', ''))) { $placeShow = 1; } } $res[0][($back ? 'back_' : 'direct_') . $class] = $placeShow; } } } public function getHOTELTYPES() { return $this->api()->getHOTEL_TYPES(); } public function getNOTE() { return $this->tour_config('note', 'search'); } public function getSERVICES() { return $this->api()->getADDITIONAL_SERVICES(); } public function commissions() { $data = $this->api()->getCOMMISSIONS(); return $data; } public function ServiceRequiredContent(&$packet, &$services) { if ($services) { foreach ($services as &$servtype) { foreach ($servtype['services'] as $key => $service) { if ($service['Required']) { $packet[] = [ 'type' => 'service', 'name' => $servtype['name'] . ': ' . $service['title'], 'nameAlt' => $servtype['nameAlt'] . ': ' . $service['titleAlt'], 'dateBeg' => $service['dateBeg'], 'dateEnd' => $service['dateEnd'], 'url' => $service['url'], 'color' => 'white', 'image' => 'service.gif', ]; unset($servtype['services'][$key]); } } } } return true; } } 