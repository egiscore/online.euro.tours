<?php
 class Tickets_Api extends Api_Model { const MAX_CHILD_COUNT = 3; public $cache_class = null; protected $max_adult_count = 10; protected $max_child_count = 3; private $tourTypeTickets = 1; private $additional_infant = 0; public function __construct(Samo_Config $config, $callback = null) { $this->field_type['integers'] = array('AGES'); $this->field_type['string'][] = 'SOURCE'; $this->field_type['string'][] = 'TARGET'; $this->field_type['string'][] = 'claimDocument'; parent::__construct($config, $callback); } public function tourTypeTickets($value = null) { if (null !== $value) { $this->tourTypeTickets = $value; } return $this->tourTypeTickets; } public function max_adult_count() { return $this->max_adult_count; } public function max_child_count() { return min($this->max_child_count, self::MAX_CHILD_COUNT); } public function _getADULTS() { return [ 'min' => 0, 'max' => $this->max_adult_count(), 'default' => 1, ]; } public function _getCHILDS() { return [ 'min' => 0, 'max' => $this->max_child_count(), 'default' => 0, ]; } public function _getCLASSES() { if (is_null($this->cache_class)) { $cache_key = __METHOD__; if (false === ($this->cache_class = $this->cache->get($cache_key))) { $sql = $this->db->formatExec('<ONLINEDB>.[dbo].[sl_avia_get_Class]', ['TourType' => $this->tourTypeTickets]); $return = false; if (false !== ($classes = $this->db->fetchAll($sql))) { $return = array(); foreach ($classes as $row) { $return[] = array( 'id' => $row['ClassInc'], 'name' => $this->messages('FRCLASS_' . $row['ClassInc']), 'nameAlt' => $this->messages('FRCLASS_' . $row['ClassInc']), ); } } $this->cache_class = $this->cache->set($cache_key, $return); } } return $this->setSelected($this->cache_class, $this->getParam('CLASS')); } public function _getCURRENCIES() { $params = [ 'TourType' => $this->tourTypeTickets, 'TOWNFROM' => $this->getParam('TOWNFROMINC'), 'TOWNTO' => $this->getParam('TOWNTOINC'), 'UserCode' => $this->internet_user(), ]; $sql = $this->db->formatExec('<ONLINEDB>.[dbo].[up_WEB_3_tickets_currency]', $params); if (false === ($data = $this->cache->get($sql))) { $data = array(); if (false !== ($res = $this->db->query($sql))) { if ($this->db->numRows($res)) { while (false !== ($row = $this->db->fetchRow($res))) { $data[] = array( 'id' => $row['CurrencyInc'], 'name' => $row['CurrencyName'], 'nameAlt' => $row['CurrencyName'], ); } } } $this->cache->set($sql, $data); } return $this->setSelected($data, $this->getParam('CURRENCYINC')); } private function portId($port) { $result = array(); $result[] = $port['TownInc']; if ($port['PortInc'] > 0) { $result[] = $port['PortInc']; } return implode('.', $result); } public function _getSOURCES($town = null) { $params = [ 'TourType' => $this->tourTypeTickets, 'UserCode' => $this->internet_user(), ]; $sql = $this->db->formatExec('<ONLINEDB>.[dbo].[sl_avia_get_townFrom]', $params); return $this->getTOWNS($sql, 'FROM', $town); } public function _getTARGETS($town = null) { $params = array( 'TownFrom' => $this->getParam('TOWNFROMINC'), 'TourType' => $this->tourTypeTickets, 'UserCode' => $this->internet_user(), ); $sql = $this->db->formatExec('<ONLINEDB>.[dbo].[sl_avia_get_townTo]', $params); return $this->getTOWNS($sql, 'TO', $town); } public function _getAIRLINES() { $params = array( 'SourceTown' => $this->getParam('TOWNFROMINC'), 'SourcePort' => $this->getParam('PORTFROMINC'), 'TargetTown' => $this->getParam('TOWNTOINC'), 'TargetPort' => $this->getParam('PORTTOINC'), 'Tour' => $this->getParam('TOURINC'), 'Order_By_Name' => $this->getConfig('ORDER_BY_NAME'), 'UserCode' => $this->internet_user(), 'Developer' => 0, 'TourType' => $this->tourTypeTickets, ); $sql = $this->db->formatExec('<ONLINEDB>.[dbo].[up_WEB_3_tickets_airlines]', $params); $airlines = $this->db->fetchAll($sql); if ($airlines) { $airlines = $this->setSelected($airlines, $this->getParam('AIRLINE')); } return $airlines; } private function getTOWNS($sql, $type, $town = null) { $cache_key = $sql; if (false === ($data = $this->cache->get($cache_key))) { if (false !== ($res = $this->db->query($sql))) { if ($this->db->numRows($res)) { $data = array(); $stateField = $this->config('STATE_ORDER_BY_NAME', 'online_config') ? 'Name' : 'LName'; $townField = $this->config('TOWN_ORDER_BY_NAME', 'online_config') ? 'Name' : 'LName'; while (false !== ($row = $this->db->fetchRow($res))) { $data[] = array( 'id' => $this->portId($row), 'name' => $row['TownPort' . $townField], 'townKey' => $row['TownInc'], 'townNameAlt' => $row['TownName'], 'townName' => $row['Town' . $townField], 'stateKey' => $row['StateInc'], 'stateNameAlt' => $row['StateName'], 'stateName' => $row['State' . $stateField], 'portKey' => $row['PortInc'], 'portAlias' => isset($row['PortAlias']) ? $row['PortAlias'] : null, 'portNameAlt' => $row['PortName'], 'portName' => $row['Port' . $townField], 'townPortNameAlt' => $row['TownPortName'], 'townPortName' => $row['TownPort' . $townField], 'tourKey' => $row['TourInc'], 'stateFromKey' => $row['stateFromKey'] ); } } } $this->cache->set($cache_key, $data); } return $this->setSelectedPort($data, $type, $town); } private function setSelectedPort($data, $type, $return_tour = null) { $town = $port = array(); $tour = $selected_idx = false; if ($data) { foreach ($data as $key => $row) { $selected = ($row['townKey'] == $this->getParam('TOWN' . $type . 'INC') && $row['portKey'] == $this->getParam('PORT' . $type . 'INC')); if ($tour == false && $row['townKey'] == $return_tour) { $tour = $row; } $data[$key]['selected'] = $selected; if ($selected) { $selected_idx = $key; $this->setParams('PORT' . $type . 'INC', $row['portKey']); if (isset($row['tourKey']) && $type == 'TO') { $this->setParams('TOURINC', $row['tourKey']); } } else { if (empty($town) && $row['townKey'] == $this->getParam('TOWN' . $type . 'INC')) { $selected_idx = $key; } if (empty($port) && ($row['townKey'] == $this->getParam('TOWN' . $type . 'INC') && !$this->getParam('PORT' . $type . 'INC') || $row['portKey'] == $this->getParam('PORT' . $type . 'INC'))) { $selected_idx = $key; } } } if ($selected_idx == false) { $selected_idx = 0; $data[$selected_idx]['selected'] = true; if (isset($data[$selected_idx]['tourKey']) && $type == 'TO') { $this->setParams('TOURINC', $data[$selected_idx]['tourKey']); } $this->setParams('TOWN' . $type . 'INC', $data[$selected_idx]['townKey']); $this->setParams('PORT' . $type . 'INC', $data[$selected_idx]['portKey']); } } return is_null($return_tour) ? $data : $tour; } public function _getCHECKINS() { return $this->datepicker( array( 'source_town' => $this->getParam('TOWNFROMINC'), 'source_port' => $this->getParam('PORTFROMINC'), 'target_town' => $this->getParam('TOWNTOINC'), 'target_port' => $this->getParam('PORTTOINC'), 'tour' => $this->getParam('TOURINC') ), 'CHECKIN' ); } public function _getCHECKOUTS() { return $this->datepicker( array( 'source_town' => $this->getParam('TOWNTOINC'), 'source_port' => $this->getParam('PORTTOINC'), 'target_town' => $this->getParam('TOWNFROMINC'), 'target_port' => $this->getParam('PORTFROMINC'), 'tour' => $this->getParam('TOURINC') ), 'CHECKOUT' ); } private function datepicker($params, $value) { $first = Samo_Datetime::null(); if (!array_key_exists('UserCode', $params)) { $params['UserCode'] = $this->internet_user(); } if ($data = $this->db->fetchRow($this->db->formatExec('<ONLINEDB>.[dbo].[sl_avia_get_fly_dates]', $params))) { if (($pos = strpos($data['avail_days'], '1')) !== false) { $first = $data['startdate']->copy()->add_days($pos); } $param = $this->getParam($value); if (null === $param || $param->is_null()) { $this->setParams($value, $first); } $data = array('validDates' => $data['avail_days'], 'startDate' => $data['startdate'], 'validFirst' => $first, 'value' => $this->getParam($value)); } else { $data = array('validDates' => '', 'startDate' => Samo_Datetime::today(), 'validFirst' => $first, 'value' => $this->getParam($value)); } if (version_compare(Samo_Request::api_version(), '2.0') >= 0) { $data['validDates'] = str_replace(['0', '1', '2'], ['N', 'R', 'Y'], $data['validDates']); $data['startDate'] = $data['startDate']->format('Y-m-d'); $data['value'] = $data['value']->format('Y-m-d'); unset($data['validFirst']); } return $data; } public function _getPRICES() { $peoplecount = 0; foreach (array('ADULT', 'CHILD', 'INFANT') as $age) { if (!$peoples = $this->getParam($age)) { $this->setParams($age, 0); } else { $peoplecount += $peoples; } } if (!$peoplecount) { return false; } $child = $this->getParam('CHILD'); $infant = $this->getParam('INFANT'); $params = array( 'TOWNFROM' => $this->getParam('TOWNFROMINC'), 'TOWNTO' => $this->getParam('TOWNTOINC'), 'PORTFROM' => $this->getParam('PORTFROMINC'), 'PORTTO' => $this->getParam('PORTTOINC'), 'DATEBEG' => $this->getParam('CHECKIN'), 'DATEBEG_DELTA' => $this->getParam('CHECKIN_DELTA'), 'DATEEND' => $this->getParam('CHECKOUT'), 'DATEEND_DELTA' => $this->getParam('CHECKOUT_DELTA'), 'ADULT' => $this->getParam('ADULT'), 'CHILD' => $child, 'INFANT' => $infant, 'CURRENCY' => $this->getParam('CURRENCYINC'), 'ONLINE_CLASS' => $this->getParam('CLASS'), 'YESPLACES' => $this->getParam('YESPLACES'), 'ONEWAY' => $this->getParam('CHECKOUT')->is_null(), 'AirCompany' => $this->getParam('AIRLINE'), 'TourType' => $this->tourTypeTickets, 'UserCode' => $this->internet_user(), 'langid' => Samo_Request::langid(), ); $ages = $this->getParam('AGES'); $ageCount = min($child + $infant, self::MAX_CHILD_COUNT); if ($ageCount && count($ages) < $ageCount) { throw new Samo_Exception('Expected parameter: AGES=' . implode(',', range(1, $ageCount * 2, 2)) . ', actual: ' . ($ages ? 'AGES=' . implode(',', $ages) : 'not set'), 406); } for ($i = 0; $i < $ageCount; $i++) { if (isset($ages[$i]) && $ages[$i] >= 0) { $params['AGE' . ($i + 1)] = intval($ages[$i]); } else { $params['AGE' . ($i + 1)] = null; } } $class = ''; $return = array(); if ($classes = $this->getCLASSES()) { foreach ($classes as $row) { if ($row['id'] == $this->getParam('CLASS')) { $class = $row['name']; break; } } } $sql = $this->db->formatExec('<OFFICEDB>.[dbo].[sl_avia_SearchPrice]', $params); $this->db->errorField('error'); if (false !== ($res = $this->db->query($sql))) { $this->db->errorField(''); if ($this->db->numRows($res)) { $from = null; $host_name = $this->hostname(); while (false !== ($row = $this->db->fetchRow($res))) { $row['id'] = $row['Claim']; unset($row['Claim']); $name = array(); $directions = array("" => 'CHECKIN'); if (!$params['ONEWAY']) { $directions['Back'] = 'CHECKOUT'; } foreach ($directions as $suffix => $date) { $name[] = sprintf("%s (%s) %s %s (%s %s -> %s %s) ", $row['FreightName' . $suffix], $row['TranTypeName' . (($suffix) ? 'Out' : 'In')], $this->getParam($date), $row['SrcTownName' . $suffix], $row['SrcPortAlias' . $suffix], $row['SrcTime' . $suffix], $row['TrgPortAlias' . $suffix], $row['TrgTime' . $suffix]); } $row['name'] = implode(', ', $name); $row['checkIn'] = $row['DateBeg']; $row['checkOut'] = $row['DateBegBack']; $row['SrcTime'] = $row['SrcTime']->format('time'); $row['TrgTime'] = $row['TrgTime']->format('time'); $row['SrcTimeBack'] = $row['SrcTimeBack']->format('time'); $row['TrgTimeBack'] = $row['TrgTimeBack']->format('time'); $row['classKey'] = $this->getParam('CLASS'); $row['className'] = $class; $row['price'] = $row['TotalCost']; $row['MostRelevant'] = ($params['DATEBEG_DELTA'] || $params['DATEEND_DELTA']) && $row['MostRelevant']; switch ($row['BlockStatusIn']) { case 1: $key = 'TICKETS_YES_PLACE'; break; case 2: $key = 'TICKETS_REQUEST_PLACE'; break; case 3: $key = 'TICKETS_YESNO_PLACE'; break; default: $key = 'TICKETS_NO_PLACE'; } $row['BlockCountIn'] = $this->messages($key); switch ($row['BlockStatusOut']) { case 1: $key = 'TICKETS_YES_PLACE'; break; case 2: $key = 'TICKETS_REQUEST_PLACE'; break; case 3: $key = 'TICKETS_YESNO_PLACE'; break; default: $key = 'TICKETS_NO_PLACE'; } $row['BlockCountOut'] = $this->messages($key); foreach (['In', 'Out'] as $direction) { if (isset($row['Partner' . $direction . 'Inc']) && $row['Partner' . $direction . 'Logo']) { $file = 'data/partner/logo_' . $row['Partner' . $direction . 'Inc'] . '_' . $row['Partner' . $direction . 'Logo'] . '.png'; if (file_exists(_ROOT . $file) && is_file(_ROOT . $file)) { $row['Partner' . $direction . 'Logo'] = $host_name . WWWROOT . $file; } else { $row['Partner' . $direction . 'Logo'] = ''; } } } $return[] = $row; } } } return $return; } protected function _getALL() { $result = array(); foreach (array( 'SOURCES', 'TARGETS', 'AIRLINES', 'CHECKINS', 'CHECKOUTS', 'CLASSES', 'CURRENCIES', 'ADULTS', 'CHILDS', ) as $row) { $method = '_get' . $row; if (method_exists($this, $method)) { $result[$row] = $this->$method(); } } return $result; } protected function _getCALC() { $result = $this->calculate(Bron_Claim::CALC_WITHOUT_SAVE); unset($result['claim']); return $result; } protected function _getBRON() { $result = $this->calculate(Bron_Claim::CALC_AND_SAVE); return $result; } protected function calculate($mode) { $claimDocument = $this->getParam('claimDocument'); $_GET['TICKET'] = $claimDocument['catalogKey']; $model = Samo_Loader::load_object('Bron_Model', $this->config); $model->construct(); $packetInfo = $model->fetchClaimInfo(); $model->check_packet(); $strict_check = true; $offer = Samo_Loader::load_object('Bron_Claim', $this->config, $packetInfo, $strict_check); $offer->log_priority = 'tickets'; $clients = array(); $i = 1; foreach ($claimDocument['peoples'] as $people) { $clients[] = array( 'peopleKey' => $i, 'common' => -$i, ); if (!is_numeric($people['sex'])) { $people['sex'] = ($people['sex'] == 'MALE') ? 1 : 0; } $people['key'] = $i; $samo_people = Samo_Loader::load_object('Samo_People', $this->config, $packetInfo, $strict_check); try { $samo_people->load_from_array($people); } catch (Samo_People_Exception $e) { throw new Samo_Exception(implode(', ', array_keys($e->getErrors()))); } $offer->add_people($samo_people); $i++; } $info = $model->getFREIGHTS(); $model->getTOURISTS(); $id = 0; foreach ($info as $route_info) { $freight = $route_info['freights'][0]; $order = Samo_Loader::load_object('Bron_Order', $this->config, $packetInfo, $strict_check); $order->load_from_array( array( 'type' => 'F', 'id' => $id, 'key' => $freight['Inc'], 'classKey' => $freight['ClassInc'], 'frplaceKey' => $freight['FrPlaceInc'], 'datebeg' => $freight['DateBeg'], 'dateend' => $freight['DateEnd'], 'count' => count($claimDocument['peoples']), 'addinfant' => $this->additional_infant, 'clients' => $clients, ) ); $offer->add_order($order); $id++; } $offer->partpass = $this->getPartPassInc(); if (false !== ($services = $model->getASERVICES())) { foreach ($services as $service) { if ($service['selected'] || $service['required']) { $order = Samo_Loader::load_object('Bron_Order', $this->config, $packetInfo, $strict_check); $order->load_from_array( array( 'type' => 'S', 'id' => $id, 'key' => $service['Inc'], 'datebeg' => $service['DateBeg'], 'dateend' => $service['DateEnd'], 'count' => count($claimDocument['peoples']), 'classKey' => (isset($service['ClassInc']) ? $service['ClassInc'] : null), 'routeIndex' => $service['RouteIndex'], 'departureTownKey' => (isset($service['departureTownKey']) ? $service['departureTownKey'] : null), 'arrivalTownKey' => (isset($service['arrivalTownKey']) ? $service['arrivalTownKey'] : null), 'transportCompanyKey' => (isset($service['transportCompanyKey']) ? $service['transportCompanyKey'] : null), 'transportKey' => (isset($service['transportKey']) ? $service['transportKey'] : null), 'addinfant' => 0, 'serviceTypeKey' => $service['ServiceTypeInc'], 'serviceCategoryKey' => $service['ServiceCategoryInc'], 'clients' => $clients, ) ); $offer->add_order($order); $id++; } } } $errorMessage = ''; $row = array(); $calc_result = $offer->calc_save($mode, $row, $errorMessage); if ($errorMessage) { throw new Samo_Exception($errorMessage); } elseif (!$calc_result) { throw new Samo_Exception('ERROR!!!'); } $result = array( 'claim' => $row['Claim'], 'price' => $row['PriceStr'], 'currency' => $row['Currency_Alias'], 'currencyKey' => $row['Currency'], ); return $result; } public function setParams($params = array(), $value = null) { $result = $this->defaults; if (is_string($params) && !empty($params) && !is_null($value)) { $this->defaults[$params] = $value; } elseif (is_array($params)) { $result = $this->defaults = array_merge($this->defaults, $params); } if (array_key_exists('TOURTYPE', $this->defaults)) { $this->tourTypeTickets($this->defaults['TOURTYPE']); } foreach (array('SOURCE' => 'FROM', 'TARGET' => 'TO') as $api => $model) { if (isset($this->defaults[$api])) { list($town, $port) = explode('.', $this->defaults[$api] . '.'); $result['TOWN' . $model . 'INC'] = $this->defaults['TOWN' . $model . 'INC'] = ($town = intval($town)) ? $town : null; $result['PORT' . $model . 'INC'] = $this->defaults['PORT' . $model . 'INC'] = ($port = intval($port)) ? $port : null; unset($this->defaults[$api]); } } return $result; } public function hostname() { return $this->host_name; } } 