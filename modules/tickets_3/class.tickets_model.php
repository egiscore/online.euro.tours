<?php
 class Tickets_Model extends Samo { public $cache_class = null; const MAX_DATE_DELTA = 3; protected $messages; public function construct() { parent:: construct(); $this->messages = Samo_Registry::get('messages'); $this->defaults['PORTFROMINC'] = Samo_Utils::ifs(Samo_Request::intval('PORTFROMINC'), null); $this->defaults['TOWNFROMINC'] = Samo_Utils::ifs(Samo_Request::intval('TOWNFROMINC'), null); $this->defaults['PORTTOINC'] = Samo_Utils::ifs(Samo_Request::intval('PORTTOINC'), null); $this->defaults['TOWNTOINC'] = Samo_Utils::ifs(Samo_Request::intval('TOWNTOINC'), null); $this->defaults['AIRLINE'] = Samo_Utils::ifs(Samo_Request::intval('AIRLINE'), null); $this->defaults['FREIGHTINC'] = Samo_Utils::ifs(Samo_Request::intval('FREIGHTINC'), null); $this->defaults['FREIGHTBACK'] = Samo_Request::bitval('FREIGHTBACK'); $this->defaults['FREIGHTBACKINC'] = Samo_Utils::ifs(Samo_Request::intval('FREIGHTBACKINC'), null); $this->defaults['TOURINC'] = null; $this->defaults['ONLY_ROUNDTRIP'] = $this->getConfig('ONLY_ROUNDTRIP', 'tickets'); $today = Samo_Datetime::today(); $this->defaults['CHECKIN'] = Samo_Request::date('CHECKIN', $today, Samo_Datetime::parse('2 year')); $this->defaults['CHECKIN_DELTA'] = Samo_Utils::ifs(Samo_Request::intval('CHECKIN_DELTA',0, self::MAX_DATE_DELTA), 0); $this->defaults['CHECKOUT'] = Samo_Request::date('CHECKOUT', $today, Samo_Datetime::parse('2 year')); $this->defaults['CHECKOUT_DELTA'] = Samo_Utils::ifs(Samo_Request::intval('CHECKOUT_DELTA',0, self::MAX_DATE_DELTA), 0); $this->defaults['ADULT'] = Samo_Utils::ifs(Samo_Request::intval('ADULT'), 0); $this->defaults['CHILD'] = Samo_Utils::ifs(Samo_Request::intval('CHILD'), 0); $this->defaults['INFANT'] = Samo_Utils::ifs(Samo_Request::intval('INFANT'), 0); $this->defaults['NIGHTS'] = $this->defaults['CHECKOUT']->diff($this->defaults['CHECKIN']); $this->defaults['CURRENCYINC'] = Samo_Request::intval('CURRENCYINC'); $this->defaults['CLASS'] = Samo_Request::intval('CLASS'); if (is_null($this->defaults['CLASS'])) { $this->getCLASS(); } $this->defaults['AGES'] = Samo_Request::integers('AGES', 0, $this->maxChildAge()); $this->defaults['YESPLACES'] = Samo_Utils::ifs(Samo_Request::intval('YESPLACES'), 0); foreach (array('PORTFROMINC', 'TOWNTOINC', 'PORTTOINC') as $var) { if (is_null($this->defaults[$var]) && isset($_COOKIE['pt' . $var]) && !isset($_GET[$var])) { $this->defaults[$var] = $_COOKIE['pt' . $var]; } } $this->getTOWNFROMINC(); $this->getTOWNTOINC(); } public function defaults($var) { return (isset($this->defaults[$var])) ? $this->defaults[$var] : ''; } public function api($class = null, $set = true) { return parent::api($class, $set); } public function getTOWNFROMINC($town = null) { $towns = $this->api()->getSOURCES($town); $this->defaults['PORTFROMINC'] = $this->api()->getParam('PORTFROMINC'); return $this->groupPorts($this->searchTerms($towns)); } public function getTOWNTOINC($town = null) { $towns = $this->api()->getTARGETS($town); $this->defaults['TOURINC'] = $this->api(null, false)->getParam('TOURINC'); $this->defaults['PORTTOINC'] = $this->api()->getParam('PORTTOINC'); return $this->groupPorts($this->searchTerms($towns)); } private function searchTerms($towns) { if ($towns) { foreach ($towns as &$port) { $terms = array(); foreach ($port as $value) { if (!intval($value)) { $terms[] = $value; } } $port['tags'] = array_unique($terms); } } return $towns; } private function groupPorts($towns) { if (!$towns) { return $towns; } $data = array(); foreach ($towns as $row) { if (!isset($data[$row['stateName']])) { $data[$row['stateName']] = array(); } $data[$row['stateName']][] = $row; } return $data; } public function getCHECKIN() { return $this->api()->getCHECKINS(); } public function getCHECKOUT() { return $this->api()->getCHECKOUTS(); } public function getCURRENCY() { $curr = $this->api()->getCURRENCIES(); if (null === $this->defaults['CURRENCYINC']) { $first = reset($curr); $this->api()->setParams('CURRENCYINC', $first['id']); } return $curr; } public function getCLASS() { $classes = $this->api()->getCLASSES(); if (null === $this->defaults['CLASS'] && is_array($classes)) { $first = reset($classes); $this->api()->setParams('CLASS', $first['id']); } return $classes; } public function getAIRLINES() { $airlines = $this->api()->getAIRLINES(); if (!empty($airlines) && count($airlines) > 1) { array_unshift($airlines, ['id' => 0, 'name' => '']); } return $airlines; } public function getADULT() { return $this->getList($this->api()->max_adult_count(), 'ADULT'); } public function getCHILD() { return $this->getList($this->api()->max_child_count(), 'CHILD'); } public function getCHECKIN_DELTA() { return $this->getList(self::MAX_DATE_DELTA, 'CHECKIN_DELTA'); } public function getCHECKOUT_DELTA() { return $this->getList(self::MAX_DATE_DELTA, 'CHECKOUT_DELTA'); } private function getList($max, $index) { $return = array(); $param = Samo_Request::find($index); if (is_null($param)) { $param = min($this->defaults[$index], $max); } for ($value = 0; $value <= $max; $value++) { $selected = ($param == $value); $return[$value] = array('id' => $value, 'name' => $value, 'nameAlt' => $value, 'selected' => $selected); } return $return; } public function getPRICES() { if ($this->defaults['ONLY_ROUNDTRIP'] && $this->defaults['CHECKOUT']->is_null()) { throw new Samo_Exception($this->messages['TICKETS_CHECKOUT_EMPTY']); } $prices = $this->api()->getPRICES(); return $prices; } } 