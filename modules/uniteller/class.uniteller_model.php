<?php
 class Uniteller_Model extends Samo_Acquiring { protected $moduleName = 'uniteller'; const PAY_TTL = 3600; public function __construct() { parent::__construct(); $this->checkUnitellerParams(); $this->bankInc = $this->acquiringConfig('UNITELLER_SAMO_INC'); $this->bankAlias = $this->acquiringConfig('UNITELLER_SAMO_LOGIN'); } public function getFormAction() { return $this->acquiringConfig('UNITELLER_PAY_URL'); } public function getHiddenFields() { return array( 'Shop_IDP' => $this->acquiringConfig('UNITELLER_SHOP_ID'), 'Order_IDP' => '', 'Subtotal_P' => '', 'Lifetime' => self::PAY_TTL, 'PT_Code' => '', 'Signature' => '', 'URL_RETURN_OK' => '', 'URL_RETURN_NO' => '', 'URL_RETURN' => '' ); } public function makeFormData() { $this->checkUnitellerParams(); $amount = $this->_amount; if (!$amount) { $this->_die($this->messages['UNITELLER_EMPTY_AMOUNT']); } $invoice = $this->getInvoice(); $orderId = $invoice['inumber']; $return = array( 'Shop_IDP' => $this->acquiringConfig('UNITELLER_SHOP_ID'), 'Order_IDP' => $orderId, 'Subtotal_P' => $amount, 'MeanType' => '', 'EMoneyType' => '', 'Lifetime' => self::PAY_TTL, 'Customer_IDP' => '', 'Card_IDP' => '', 'IData' => '', 'PT_Code' => '' ); $return['Signature'] = self::makeSignature($return); $okUrl = $this->makeOkURL($invoice['inumber']); $failUrl = $this->makeFailURL($invoice['inumber']); for ($i = 0; $i < 2; $i++) { if ($i) { $url = &$failUrl; } else { $url = &$okUrl; } foreach (array('CLAIM', 'inumber') as $f) { $url = preg_replace('/(&|\?)'.$f.'=.*?(&|$)/', '$2', $url); } } $return['URL_RETURN_OK'] = $okUrl; $return['URL_RETURN_NO'] = $failUrl; $return['URL_RETURN'] = Samo_Request::scheme() . '://' . Samo_Request::host(); return $return; } public static function makeSignature($params) { $arr = array(); foreach ($params as $p) { $arr[] = md5($p || $p == '0' ? $p : ''); } $arr[] = md5(UNITELLER_PASSWORD); $string = implode('&', $arr); return strtoupper(md5($string)); } public function pay_variant($claim) { if ($this->is_module_installed('uniteller')) { try { $this->checkUnitellerParams(); } catch (Samo_Exception $e) { throw new Samo_Exception($e->getMessage(), 501); } return true; } return false; } protected function checkUnitellerParams() { foreach (array( 'PASSWORD', 'SHOP_ID', 'PAY_URL', 'SAMO_INC' ) as $i) { $i = 'UNITELLER_' . $i; if (!defined($i) || !constant($i)) { $this->_die($this->messages['UNITELLER_PARAMS_NOT_SETS']); break; } } } } 