<?php
 class Warrant_Model extends Samo_Claim { public $fields = array(); public $warrant = array(); public function construct($claim = null, $people = null, $order = null) { $this->messages = Samo_Registry::get('messages'); $this->defaults['peop'] = Samo_Request::intval('peop'); return parent::construct($claim, $people, $order); } public function people_warrants($pp = null) { $partner = $this->getPartner(); $sql = $this->createSql_people_warrants($partner, $pp); $result = $this->db->fetchAll($sql); $this->warrant = $result; return $this->warrant; } public function get_template_warrant() { $res = $this->get_settings_printform($doccategory = 16, $partner = null, $tour = null, $state = null, $inszone = null, $contracttype = null, $agreement_year = null); if ($res) { return true; } throw new Samo_Exception($this->messages['TEMPLATE_NOT_INSTALL']); } public function get_partner_info() { return $this->getPartnerInfo($this->getPartner()); } public function Save_Warrant() { $this->get_warrant_fields(); $this->check_warrant_field(); $this->getDates_warrant(); $this->Save_Warrant_sql(); } protected function Save_Warrant_sql() { $params = array( 'partner' => $this->getPartner(), 'name' => $this->defaults['PAYER_FIO'], 'lname' => $this->defaults['PAYER_FIO'], 'pserie' => $this->defaults['PAYER_PSERIE'], 'pnumber' => $this->defaults['PAYER_PNUMBER'], 'pissue' => $this->defaults['PAYER_PGIVENDATE'], 'pgiven' => $this->defaults['PAYER_PGIVENORG'], 'pcodeorg' => $this->defaults['PAYER_PGIVENORG_MENT'], 'born' => $this->defaults['PAYER_BORN'], 'address' => $this->defaults['PAYER_ADDRESS'], 'datebeg' => $this->defaults['DateBeg_Warrant'], 'dateend' => $this->defaults['DateEnd_Warrant'], 'phones' => $this->defaults['PAYER_PHONES'], 'UserCode' => $this->internet_user(), 'haveoriginal' => 0, 'havecopy' => 0, ); $sql = $this->db->formatExec('<OFFICEDB>.dbo.up_WEB_3_warrant_save', $params); return $this->_Save_Warrant_sql($sql); } protected function _Save_Warrant_sql($sql) { $partpass = Samo_Utils::ifs($this->getPartPassInc(), 'null'); $log_array = array( 'partpass' => $this->db->quote($partpass), 'sql' => $sql, 'priority' => 'warrant', ); $id = $this->db->web_log_table($log_array); try { $row = $this->db->fetchRow($sql); $log_array['result']['resultset'] = $row; $log_array['message'] = 'SAVE_WARRANT'; } catch (Samo_Exception $e) { $row = false; $log_array['result']['error'] = ($e instanceof Database_Exception) ? $this->db->lastError() : $e->getMessage(); $log_array['message'] = 'ERROR_SAVE_WARRANT'; } $this->db->web_log_table($log_array, $id); if (false !== $row) { $tmp = array_keys($row); if (in_array('error', $tmp) && $row['error'] != '') { throw new Samo_Exception($row['error']); } return true; } $messages = Samo_Registry::get('messages'); throw new Samo_Exception($messages['WARRANT_NOT_SAVED']); } public function getDates_warrant() { $messages = Samo_Registry::get('messages'); $sql = $this->createSql_getDates_warrant(); if (false !== ($row = $this->db->fetchRow($sql))) { $this->defaults['DateBeg_Warrant'] = $row['DateBeg']; $this->defaults['DateEnd_Warrant'] = $row['DateEnd']; if (!$this->defaults['PAYER_PGIVENDATE']->is_null()) { if (!$this->defaults['DateEnd_Warrant']->is_null() && $this->defaults['PAYER_PGIVENDATE']->gt($this->defaults['DateEnd_Warrant'])) { throw new Samo_Exception($messages['WARRANT_WRONG_PGIVENDATE'], 2); } $today = Samo_Datetime::today(); if ($this->defaults['PAYER_PGIVENDATE']->gt($today)) { throw new Samo_Exception($messages['WARRANT_WRONG_PGIVENDATE'], 3); } if ($this->defaults['DateBeg_Warrant']->lt($today)) { $this->defaults['DateBeg_Warrant'] = $today; } } if (isset($this->defaults['PAYER_BORN']) && !$this->defaults['PAYER_BORN']->is_null()) { if ($this->defaults['PAYER_BORN']->gt($today)) { throw new Samo_Exception($messages['WARRANT_WRONG_BORN'], 4); } if (!$this->defaults['PAYER_PGIVENDATE']->is_null()) { if ($this->defaults['PAYER_BORN']->gt($this->defaults['PAYER_PGIVENDATE'])) { throw new Samo_Exception($messages['WARRANT_WRONG_BORN'], 4); } } } return true; } throw new Samo_Exception($messages['WARRANT_NO_CONTRACT'], 1); } protected function createSql_getDates_warrant() { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_4_warrant_contract', [ 'ContractInc' => Samo_Request::intval('INC'), 'Partner' => $this->getPartner(), 'UserCode' => $this->internet_user(), ] ); return $sql; } protected function createSql_people_warrants($partner, $people) { $sql = $this->db->formatExec( '<OFFICEDB>.dbo.up_WEB_3_warrant_search', [ 'Partner' => $partner, 'People' => $people, 'UserCode' => $this->internet_user(), ] ); return $sql; } public function get_warrant_fields() { if (false !== ($res = $this->getOnline_field($entity = 'warrant', $group = 'Group'))) { $this->fields = array_merge_recursive($this->fields, $res); if (Samo_Request::get('BOSS')) { $partner = $this->get_partner_info(); foreach ($this->fields as &$wfield) { foreach ($wfield as &$field) { if ($field['Field'] == 'PAYER_FIO') { $field['Value'] = $partner['Partner_partnerboss']; } } } } return true; } return false; } public function check_warrant_field() { $messages = Samo_Registry::get('messages'); $inc = -1; $collection = Samo_Request::post('frm'); foreach ($this->fields as &$fgroup) { foreach ($fgroup as &$field) { $tmp = trim(@$collection[$field['Entity']][$inc][$field['Field']]); if ('' == $tmp && $field['Required']) { throw new Samo_Exception( $messages['EMPTY_REQUIRED_FIELD'] . ' "' . $field['Title'] . '"', 1 ); } if ($field['Type'] == 'date') { $tmp = Samo_Datetime::parse($tmp); } $field['new_value'] = $tmp; } } foreach ($this->fields as &$fgroup) { foreach ($fgroup as &$field) { if ($field['Editable']) { $this->check_field($value = $field['new_value'], $field = $field); } $this->defaults[$field['Field']] = $field['new_value']; } } } protected function getExternalDocumentInit() { if ($this->defaults['peop']) { return $this->getExternalDocumentJob(sprintf('warrant_%d.pdf', $this->defaults['peop']), sprintf('warrant_%d_%%s_%%s.pdf', $this->defaults['peop'])); } throw new Samo_Exception($this->messages['CANNOT_PRINT']); } protected function getExternalDocumentParams() { $this->people_warrants($this->defaults['peop']); if (false === $this->warrant) { throw new Samo_Exception($this->messages['ACCESS_DENIED']); } $params = array( 'inc' => $this->warrant[0]['inc'], 'template' => $this->defaults['template'] ); return $params; } } class Warrant_Exception extends Samo_Exception { } 