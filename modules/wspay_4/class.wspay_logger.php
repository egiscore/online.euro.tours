<?php
class WSPAY_Logger { const TTL = 7; private $id = null; private $params = []; private $queryLogger = null; public function __construct($queryLogger = null) { $this->params['adate'] = Samo_Datetime::now()->format('sqldatetime'); $this->params['message']['Server'] = Samo_Request::host(); $this->params['message']['IP'] = Samo_Request::remote_addr(); if (null !== $queryLogger) { $this->queryLogger = $queryLogger; } } public function setClaim($claim) { $this->params['claim'] = $claim; } public function setINumber($inumber) { $this->params['inumber'] = $inumber; } public function setMethod($method) { $this->params['message']['Method'] = $method; } public function init() { $request = file_get_contents('php://input'); $this->params['message']['RequestHeaders'] = $this->requestHeaders(); $this->params['message']['Request'] = $request; } public function error($message, $code) { $this->params['message']['Error'] = $message; $this->params['message']['ErrorCode'] = $code; $this->commit(); } public function exception(Exception $e) { $this->params['message']['Error'] = $e->getMessage(); $this->params['message']['ErrorCode'] = $e->getCode(); $this->commit(); } public function log($message, $type = null) { if (!array_key_exists('log', $this->params['message'])) { $this->params['message']['log'] = []; } if (null == $type) { $this->params['message']['log'][] = $message; } else { $this->params['message']['log'][$type] = $message; } } public function info($message) { if ($this->queryLogger) { $this->queryLogger->info($message); } } public function commit($response = null) { $return = true; if ($response) { $this->params['message']['ResponseStatus'] = isset($this->params['message']['Error']) ? 500 : 200; $this->params['message']['ResponseHeaders'] = headers_list(); $this->params['message']['Response'] = $response; } $this->params['message']['Duration'] = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT']; try { $id = self::writeLog($this->params, $this->id); if (null === $this->id && $id !== false) { $this->id = $id; } } catch (Exception $e) { $return = false; } return $return; } public static function writeLog($data, $id = null, $async = true) { $return = false; try { $db = Samo_Registry::get('db'); } catch (Samo_Exception $e) { unset($e); include _ROOT . 'includes/db.php'; $db = db_connect(null, null); } $_data = array( 'adate' => Samo_Datetime::now()->format('sqldatetime'), 'edate' => null, 'claim' => null, 'inumber' => null, 'message' => [], ); $data = array_merge($_data, $data); if (!$data['claim'] && !$data['inumber']) { try { if (isset($data['message']['Request']) && !empty($data['message']['Request'])) { $request = $data['message']['Request']; libxml_use_internal_errors(true); $doc = new DOMDocument('1.0', 'utf-8'); $doc->loadXML($request); unset($doc); $errors = libxml_get_errors(); if (empty($errors)) { if (preg_match('~<inumber.*>(.*)</inumber>~i', $request, $matches)) { $data['inumber'] = $matches[1]; } elseif (preg_match('~<reservationnumber.*>(.*)</reservationnumber>~i', $request, $matches)) { $data['claim'] = $matches[1]; } else { throw new InvalidArgumentException('Cannot parse xml request'); } } else { throw new InvalidArgumentException('Looks like not xml request'); } } if (isset($data['message']['Method']) && 'Samo_Sberbank::doRequest' == $data['message']['Method']) { if (isset($data['message']['log']) && count($data['message']['log'])) { if ($orderInfo = json_decode($data['message']['log'][1], true)) { if (isset($orderInfo['OrderNumber'])) { $data['inumber'] = $orderInfo['OrderNumber']; } } } } if (!$data['claim'] && !$data['inumber']) { throw new InvalidArgumentException('Cannot find claim or inumber'); } } catch (\Exception $e) { $data['claim'] = -1; $data['inumber'] = -1; $data['message']['LoggerError'] = $e->getMessage(); } } if ($async) { $data['edate'] = Samo_Datetime::now()->format('sqldatetime'); } if (null !== $id) { $data['inc'] = $id; } try { $params = $data; $params['message'] = $db->quoteNvarchar(var_export($data['message'], true), 'utf-8'); $sql = $db->formatExec('<BANKDB>.[dbo].[up_WEB_3_wspay_log]', $params); $return = $db->fetchOne($sql); } catch (Database_Exception $e) { if ($async) { $spool = (defined('MAIL_SPOOL')) ? MAIL_SPOOL : _ROOT . 'data/spool/'; $task_id = Samo_Utils::randomString(); $taskfile = $spool . 'cron_wspaylog_' . $task_id . '.php'; $job = []; $job[] = '<' . '?php'; $job[] = 'if (time() - filemtime(__FILE__) > ' . self::TTL . ' * 24 * 3600) { return true; }'; $job[] = 'require_once "includes/classes/class.samo_config.php";'; $job[] = 'Samo_Loader::register_autoload();'; $job[] = '$data = ' . var_export($data, true) . ';'; $job[] = '$data["edate"] = Samo_DateTime::now()->format("sqldatetime");'; $job[] = 'return WSPAY_logger::writeLog($data, ' . (($id == null) ? 'null' : $id) . ', false);'; Samo_Utils::writeFile($taskfile, implode(PHP_EOL, $job)); Samo_Utils::exec_job($task_id); } } return $return; } private function requestHeaders() { $return = []; if (isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_URI']) { $return[$_SERVER['REQUEST_METHOD']] = $_SERVER['REQUEST_URI']; } if (!function_exists('apache_request_headers')) { foreach ($_SERVER as $key => $value) { if (substr($key, 0, 5) == 'HTTP_') { $key = str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($key, 5))))); $return[$key] = $value; } } } else { $return = array_merge($return, apache_request_headers()); } return $return; } } 