<?php
 class WSPAY_model { protected $db = null; protected $cfg = null; protected $bank = null; private $cache = array(); public $rateType = 2; public $currType = 'PayCurr'; protected $internet_user; public $dateType = null; public $cash = 1; public $nullRubCurrencyAlias = 'RUB'; const TICKET_NOT_FOUND = 100; const TICKET_ACCESS_DENIED = 101; const CLAIM_OWNER_ACCESS_DENIED = 102; const CLAIM_PARTNER_ACCESS_DENIED = 103; const TICKET_CONFIRMED = 104; const CANCEL_CLAIM = 105; const CLAIM_NOT_FOUND = 106; const CLAIM_OR_PASSPORT_INCORRECT = 107; const BANK_NOT_FOUND = 108; const CURRENCY_NOT_FOUND = 109; const CURRENCY_RATE_INVALID = 110; const PAYMENT_MINUS = 111; const CLAIM_CANNOT_PAY = 112; const CONFIG_ERROR = 113; const CLAIM_COST_ERROR = 114; const TICKET_CREATE_ERROR = 115; const CLAIM_NOT_CONFIRMED = 116; const CLAIM_STATUS_INCORRECT = 117; const CLAIM_REQUEST_CANCEL = 118; const WRONG_PARAMETERS = 119; const DOUBLE_TICKET = 120; protected $OFFICEDB = null; protected $ONLINEDB = null; protected $OFFICE_SQLSERVER = null; protected $BANKDB = 'INVOICESFORBANK'; public function __construct($db) { if (!Samo_Registry::find('cache')) { Samo_Registry::load('cache', 'Samo_Cache'); } $this->db = $db; $this->cfg = Samo_Config::factory(); $storage = Samo_Registry::instance(); $settings = $storage['ServerSettings']; $this->OFFICEDB = $settings['officeSamoDB']; $this->ONLINEDB = $settings['onlineSamoDB']; $this->OFFICE_SQLSERVER = $settings['officeSamoAlias']; $this->messages = include __DIR__ . '/lang/messages_' . Samo_Request::lang() . '.php'; if (defined('CLAIMCOST_DATETYPE')) { $this->dateType = CLAIMCOST_DATETYPE; } } public function getInvoiceData($INumber) { $return = $this->_getInvoiceData($INumber); $this->_checkInvoice($return); return $return; } protected function _getInvoiceData($INumber) { $qres = $this->__getInvoiceData($INumber); if ($this->db->numRows($qres) != 0) { $row = $this->db->fetchRow($qres); $row['IDate'] = Samo_Datetime::parse($row['IDate120']); $row['PaspWhen'] = Samo_Datetime::parse($row['PaspWhen120']); $row['ConfirmDateTime'] = Samo_Datetime::parse($row['ConfirmDateTime120']); $row['CurSum'] = round($row['CurSum'], 2); $row['RubSum'] = round($row['RubSum'], 2); if ($row['RubCurrency'] == '') { $row['RubCurrency'] = $this->nullRubCurrencyAlias; } $this->_checkBankInvoice($row); $claim = $this->_getInvoiceClaim($row['Id']); if ((false !== array_key_exists('FirmID', $row)) && ($row['FirmID'] != '')) { $this->_checkBankFirmId($row['FirmID']); if (false !== ($partner = $this->_getPartner($row['FirmID']))) { $row['Partner'] = $partner; if (!array_key_exists('OwnerINN', $claim)) { $claim['OwnerINN'] = $partner['partnerinn']; } } } $row['Claim'] = $claim; return $row; } else { throw new WSPAY_exception(sprintf($this->messages['WSPAY_TICKET_NOT_FOUND'], $INumber), self::TICKET_NOT_FOUND); } } public function __getInvoiceData(...$par) { $sql = 'EXEC <BANKDB>.dbo.up_getInvoiceData @INumber = %s, @Confirmed = 1'; return $this->_query($sql, $par); } protected function _checkBankInvoice($invoice) { if (array_key_exists('Bank', $invoice) && ($invoice['Bank']) && ($invoice['Bank'] != $this->bank['Inc'])) { throw new WSPAY_exception($this->messages['WSPAY_ACCESS_DANIED_FOR_TICKET'], self::TICKET_ACCESS_DENIED); } else { return true; } } protected function _checkBankFirmId($FirmId) { $sql = 'EXEC <BANKDB>.dbo.up_CheckBankFirmId @Bank = %s, @FirmId = %s'; $qres = $this->_query($sql, array($this->bank['Inc'], $FirmId)); if ($this->db->numRows($qres) != 0) { return true; } else { throw new WSPAY_exception($this->messages['WSPAY_ACCESS_DANIED_FOR_OWNER'], self::CLAIM_OWNER_ACCESS_DENIED); } } protected function _checkBankPartner($Partner) { $sql = 'EXEC <BANKDB>.dbo.up_CheckBankPartner @Bank = %s, @Partner = %s'; $qres = $this->_query($sql, array($this->bank['Inc'], $Partner)); if ($this->db->numRows($qres) != 0) { return true; } else { throw new WSPAY_exception($this->messages['WSPAY_ACCESS_DANIED_FOR_PARTNER'], self::CLAIM_PARTNER_ACCESS_DENIED); } } protected function _checkInvoice($invoice) { if ($invoice['ConfirmPay'] == 1) { throw new WSPAY_exception(sprintf($this->messages['WSPAY_TICKET_ALREADY_CONFIRMED'], $invoice['INumber'], $invoice['ConfirmDateTime']->format('datetime')), self::TICKET_CONFIRMED); } if (array_key_exists('Claim', $invoice) && ($invoice['Claim']['Status'] == Samo_Claim::STATUS_CANCELED)) { throw new WSPAY_exception(sprintf($this->messages['WSPAY_IMPOSSIBLE_TO_PAY_TICKET'], $invoice['Claim']['StatusName']), self::CANCEL_CLAIM); } return true; } public function confirmInvoiceByINumber($INumber, $Operation = null, $operationType = null) { $res = $this->getInvoiceData($INumber); $Operation = (intval($Operation) != 0) ? intval($Operation) : 1; try { $qres = $this->__confirmInvoiceByINumber($INumber, $Operation, $operationType); } catch (DataBase_Exception $e) { if (strpos($e->getError(), 'Can not confirm payment in Tour Operator program') !== false) { throw new WSPAY_exception($this->messages['WSPAY_IMPOSSIBLE_TO_PAY_TICKET_DOUBLE'], self::DOUBLE_TICKET); } else { throw $e; } } $res = array_merge( $res, array( 'ConfirmPay' => 1, 'Operation' => $Operation, ) ); return $res; } public function setHoldInvoiceByINumber($INumber) { $sql = 'EXEC <BANKDB>.dbo.up_holdInvoiceByINumber @INumber = %s'; return $this->_query($sql, $INumber); } public function __confirmInvoiceByINumber(...$par) { $sql = 'EXEC <BANKDB>.dbo.up_confirmInvoiceByINumber @INumber = %s, @Operation = %s'; if (isset($par[2]) && $par[2]) { $sql .= ', @Operation_Type = %s'; } return $this->_query($sql, $par); } protected function _getPartner($inc) { if (is_null($return = $this->_cache(array(__FUNCTION__, $inc)))) { $sql = 'EXEC ' . $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_partner_GetInfo @partner = %s'; $qres = $this->_query($sql, array($inc)); if ($this->db->numRows($qres) != 0) { $return = $this->db->fetchRow($qres); } else { $return = false; } $this->_cache(array(__FUNCTION__, $inc), $return); } return $return; } protected function _getInvoiceClaim($IId) { $sql = 'EXEC <BANKDB>.dbo.up_GetInvoiceClaim @IId = %s'; $qres = $this->_query($sql, array(intval($IId))); if ($this->db->numRows($qres) != 0) { $claim = $this->db->fetchRow($qres); $res = $this->_getClaim($claim['Claim']); return array_merge($claim, $res); } throw new WSPAY_exception($this->messages['WSPAY_CLAIM_NOT_FOUND'], self::CLAIM_NOT_FOUND); } protected function _getClaim($Inc, $Passport = null, $PartnerLogin = null) { if (is_null($claim = $this->_cache(array(__FUNCTION__, $Inc)))) { if (!is_null($Passport) && ('null' == strtolower($Passport))) { if (defined('WSPAY_NULL_PASSPORT') && WSPAY_NULL_PASSPORT) { $Passport = null; } else { throw new WSPAY_exception($this->messages['WSPAY_INCORRECT_INFORMATION'], self::CLAIM_OR_PASSPORT_INCORRECT); } } if (!is_null($PartnerLogin) && ('null' == strtolower($PartnerLogin))) { if (defined('WSPAY_NULL_LOGIN') && WSPAY_NULL_LOGIN) { $PartnerLogin = null; } else { throw new WSPAY_exception($this->messages['WSPAY_INCORRECT_INFORMATION'], self::CLAIM_OR_PASSPORT_INCORRECT); } } $sql = 'EXEC ' . $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_3_wspay_Claim @Claim = %s, @Passport = %s, @PartnerLogin = %s, @UserCode = %s'; $qres = $this->_query($sql, array(intval($Inc), $Passport, $PartnerLogin, $this->cfg->internet_user())); if ($this->db->numRows($qres) != 0) { $claim = $this->db->fetchRow($qres); $this->_cache(array(__FUNCTION__, $Inc), $claim); } else { throw new WSPAY_exception($this->messages['WSPAY_INCORRECT_INFORMATION'], self::CLAIM_OR_PASSPORT_INCORRECT); } } return $claim; } public function getBank($Alias) { if (!is_null($this->bank)) { return $this->bank; } $sql = $this->db->formatExec( '<BANKDB>.dbo.up_GetBank', [ 'Login' => $Alias, 'Ip' => Samo_Request::remote_addr(), ] ); $qres = $this->_query($sql, null); if ($this->db->numRows($qres) != 0) { $this->bank = $this->db->fetchRow($qres); $this->bank['RateType'] = is_null($this->bank['RateType']) ? $this->rateType : $this->bank['RateType']; return $this->bank; } else { throw new WSPAY_exception(sprintf($this->messages['WSPAY_USER_NOT_FOUND'], $Alias), self::BANK_NOT_FOUND); } } public function recalcInvoicePaySum(&$row) { $currencyTo = $this->bank['ConvertToCurrency']; if ($currencyTo != '') { $row['RubCurrency'] = $currencyTo; if ($currencyTo != $row['Currency']) { $currencyFrom = $this->_currencyInc($row['Currency']); $currencyTo = $this->_currencyInc($currencyTo); $kurs = $this->_currencyRate($currencyFrom, $currencyTo); } else { $kurs = 1; } $row['RubSum'] = round($row['CurSum'] * $kurs, 2); } return true; } private function _currencyInc($alias) { if (is_null($currencies = $this->_cache(__FUNCTION__))) { $currencies = array(); $sql = $this->ONLINEDB . '.dbo.up_WEB_3_currency_list'; $qres = $this->_query($sql, array()); if ($this->db->numRows($qres) != 0) { while ($row = $this->db->fetchRow($qres)) { $currencies[] = $row; } } $this->_cache(__FUNCTION__, $currencies); } foreach ($currencies as $currency) { if (strtoupper($currency['Alias']) == strtoupper($alias)) { return $currency['Inc']; } } throw new WSPAY_exception(sprintf($this->messages['WSPAY_CURRENCY_NOT_FOUND'], $alias), self::CURRENCY_NOT_FOUND); } private function _currencyRate($currencyFrom, $currencyTo, $date = null) { if (is_null($rate = $this->_cache(array(__FUNCTION__, $currencyFrom, $currencyTo, $date)))) { $sql = 'EXEC ' . $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEB_4_return_Rate @date = %s, @SrcCurr = %s, @DestCurr = %s, @Rate = %s, @UserCode = %s'; $qres = $this->_query($sql, array(is_null($date) ? Samo_Datetime::today() : $date, $currencyFrom, $currencyTo, $this->bank['RateType'], $this->cfg->internet_user())); if ($this->db->numRows($qres) != 0) { $rate = $this->db->fetchRow($qres); $rate = round($rate['kurs'], 4); $this->_cache(array(__FUNCTION__, $currencyFrom, $currencyTo, $date), $rate); } if (!$rate) { throw new WSPAY_exception($this->messages['WSPAY_CURRENCY_RATE_INVALID'], self::CURRENCY_RATE_INVALID); } } return $rate; } public function getClaim($Inc, $Passport = null, $PayCurrency = null, $PartnerLogin = null) { $claim = $this->_getClaim($Inc, $Passport, $PartnerLogin); $this->_checkClaimForPay($claim); $cost = $this->_calcClaimCost($Inc, $PayCurrency); $claim['ResDebt'] = $cost['res']['Debt_person']; $claim['ResSum'] = $cost['res']['Amount_to_pay_person']; $claim['ResCurrency'] = $cost['res']['CurrencyAlias']; $claim['PayDebt'] = $cost['pay']['Debt_person']; $claim['PaySum'] = $cost['pay']['Amount_to_pay_person']; $claim['PayCurrency'] = $cost['pay']['CurrencyAlias']; $claim['OwnerINN'] = $this->config['owner_partnerinn']; return $claim; } public function payClaim($Inc, $Passport, $PaySum, $TransactionId, $PayCurrency, $PartnerLogin, $inn = null, $operationType = null) { if (false == ($INumber = $this->_checkRepeatablePays($Inc, $TransactionId))) { $claim = $this->_getClaim($Inc, $Passport, $PartnerLogin); $this->_checkClaimForPay($claim); if ($PaySum <= 0) { throw new WSPAY_exception($this->messages['WSPAY_PAYMENT_ERROR_MINUS'], self::PAYMENT_MINUS); } $INumber = $this->_saveInvoiceData($claim, $Passport, $PaySum, $TransactionId, $PayCurrency, $inn, $operationType); } return $this->_getInvoiceData($INumber); } protected function _checkRepeatablePays($Claim, $TransactionId) { if ($TransactionId != '') { $config = $this->getConfig($Claim); $sql = 'EXEC <BANKDB>.dbo.up_CheckRepeatablePays @TransactionId = %s, @FirmId = %s'; $qres = $this->_query($sql, array($TransactionId, $config['owner'])); if ($this->db->numRows($qres) != 0) { $row = $this->db->fetchRow($qres); return $row['INumber']; } } return false; } protected function getConfig($Claim) { if (!isset($this->config) || (is_null($this->config))) { $this->config = $this->_getOwner($Claim); } return $this->config; } protected function _getOwner($Claim) { $qres = $this->__getOwner($Claim, $this->cash, $this->bank['Inc']); if ($this->db->numRows($qres) != 0) { $row = $this->db->fetchRow($qres); if ($row['owner'] != 0) { if (isset($row['percent'])) { $row['percent'] = null; } if (false !== ($partner = $this->_getPartner($row['owner']))) { foreach ($partner as $key => $val) { $row['owner_' . $key] = $val; } return $row; } } elseif ($row['owner'] == 0) { throw new WSPAY_exception(sprintf($this->messages['WSPAY_CLAIM_CANNOT_PAY'], $Claim), self::CLAIM_CANNOT_PAY); } } throw new WSPAY_exception($this->messages['WSPAY_CONFIG_ERROR'], self::CONFIG_ERROR); } protected function __getOwner(...$par) { $sql = 'EXEC ' . $this->OFFICE_SQLSERVER . '.' . $this->OFFICEDB . '.dbo.up_WEBST_getOwner @CLAIM = %s, @partner = 0, @cash = %s, @BankCode = %s'; return $this->_query($sql, $par); } protected function _recalcClaimCost(& $cost, $payCurrency = null) { if (is_null($payCurrency)) { return; } $PAYCURRENCY = strtoupper($payCurrency); if ($PAYCURRENCY != strtoupper($cost['pay']['CurrencyAlias'])) { if ($PAYCURRENCY == strtoupper($cost['res']['CurrencyAlias'])) { $cost['pay'] = $cost['res']; } else { $currencyFrom = $this->_currencyInc($cost['res']['CurrencyAlias']); $currencyTo = $this->_currencyInc($PAYCURRENCY); $rate = $this->_currencyRate($currencyFrom, $currencyTo, $cost['res']['rate_dateex']); foreach (array('Catalog', 'Amount', 'Debt', 'Commiss', 'Discount', 'Supplement', 'Paid', 'CostForCommiss') as $key) { $cost['pay'][$key] = round($cost['res'][$key] * $rate, 2); } $cost['pay']['CurrencyAlias'] = $payCurrency; $cost['pay']['CurrencyInc'] = $currencyTo; $cost['pay']['rateex'] = $rate; } } } protected function _calcClaimCost($Claim, $PayCurrency = null) { $qres = $this->__calcClaimCost($Claim, $this->bank['RateType'], $this->currType, $this->dateType, $this->cfg->internet_user()); if ($this->db->numRows($qres) == 2) { $res = $this->db->fetchRow($qres); $pay = $this->db->fetchRow($qres); $cost = array('res' => $res, 'pay' => $pay); foreach (array('res', 'pay') as $type) { foreach (array('Catalog', 'Amount', 'Debt', 'Commiss', 'Discount', 'Supplement', 'Paid', 'CostForCommiss', 'Debt_person', 'Amount_to_pay_person') as $key) { $cost[$type][$key] = round($cost[$type][$key] * $this->bank['Ratio'], 2); } } $this->_recalcClaimCost($cost, $PayCurrency); return $cost; } throw new WSPAY_exception($this->messages['WSPAY_CLAIM_COST_ERROR'], self::CLAIM_COST_ERROR); } protected function __calcClaimCost(...$par) { $sql = 'EXEC <OFFICEDB>.dbo.up_WEB_4_claim_Cost @Claim = %s, @RateType = %s, @CurrType = %s, @DateType = %s, @RateDate = NULL, @UserCode = %s'; return $this->_query($sql, $par); } protected function _newINumber($owner = null, $partner = null) { $sql = "EXEC <BANKDB>.dbo.up_GetNewInvoiceNumber @Firm = %s, @INumber = '', @retDataset = 1, @FirmId = %s, @Partner = %s"; $qres = $this->_query($sql, array($this->bank['Alias'], $owner, $partner)); if ($this->db->numRows($qres) != 0) { $row = $this->db->fetchRow($qres); return $row['inumber']; } throw new WSPAY_exception($this->messages['WSPAY_TICKET_CREATE_ERROR'], self::TICKET_CREATE_ERROR); } protected function _saveInvoiceData($claim, $Passport, $Sum, $TransactionId, $PayCurrency = null, $inn = null, $operationType = null) { $config = $this->getConfig($claim['Inc']); $INumber = $this->_newINumber($config['owner'], $claim['Partner']); $cost = $this->_calcClaimCost($claim['Inc'], $PayCurrency); $rate = $cost['pay']['rateex']; $payCurrency = $cost['pay']['CurrencyAlias']; $paySum = round($Sum, 2); $resCurrency = $cost['res']['CurrencyAlias']; $resSum = round($paySum / $rate, 4); $detail = '{' . implode('|', array($claim['Inc'], $resSum, $resCurrency, $paySum, $rate)) . '}'; $firm = $config['owner_partnerlname']; $qres = $this->__saveInvoiceData($INumber, Samo_Datetime::today()->format('sql'), $Passport, $resSum, $resCurrency, $paySum, $detail, $firm, $config['owner'], $payCurrency, $TransactionId, $this->bank['Inc'], $inn, $operationType); if ((false !== $qres) && ($row = $this->db->fetchRow($qres))) { $INumber = $row['Number']; } return $INumber; } protected function __saveInvoiceData(...$par) { $sql = "EXEC <BANKDB>.dbo.up_AddInvoice
            @INumber = %s,
            @IDate = %s,
            @Payer = '" . Samo_Request::remote_addr() . "',
            @Doctype = 1, -- russian passport 
            @PaspSer = null,
            @PaspNumber = %s,
            @PaspWhen = null,
            @PaspWhere = null,
            @PaspCodeOrg = null,
            @Address = null,
            @CurSum = %s,
            @Currency = %s,
            @RubSum = %s,
            @InvDetail = %s,
            @Firm = %s,
            @finished = 1,
            @FirmID = %s,
            @RubCurrency = %s,
            @TransactionId = %s,
            @Bank = %s,
            @INN = %s
        "; if (isset($par[13]) && $par[13]) { $sql .= ', @Operation_Type = %s'; } return $this->_query($sql, $par); } protected function _query($sql, $par = null) { $sql = $this->db->formatQuery($sql, $par); $log = array( 'priority' => 'wspay', 'message' => 'SAVE', 'sql' => $sql ); $msgid = $this->db->web_log_table($log); try { $qres = $this->db->execQuery($sql, null, true); } catch (Database_Exception $e) { $log['result']['error'] = $this->db->lastError(); } $this->db->web_log_table($log, $msgid); if (isset($e)) { throw $e; } return $qres; } protected function _cache($key, $val = null) { if (is_array($key)) { $key = implode('_', $key); } if (!is_null($val)) { $this->cache[$key] = $val; } else { if (array_key_exists($key, $this->cache)) { $val = $this->cache[$key]; } } return $val; } protected function _checkClaimForPay($claim) { if (!$claim['AccessPay']) { throw new WSPAY_exception($this->messages['WSPAY_CLAIM_CANNOT_PAY2'], self::CLAIM_CANNOT_PAY); } $config = $this->getConfig($claim['Inc']); $this->_checkBankFirmId($config['owner']); $this->_checkBankPartner($claim['Partner']); return true; } } 