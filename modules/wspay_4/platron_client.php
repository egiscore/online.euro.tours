<?php
 define('PLATRON_CHECKING', 0); define('PLATRON_CAPTURE', 1); define('PLATRON_REFUND', 2); define('PLATRON_RESULT', 3); define('PLATRON_CAPTURE_REQUEST', 4); define('PLATRON_REFUND_REQUEST', 5); $action = ''; if (isset($_REQUEST['check'])) { $action = PLATRON_CHECKING; } else { if (isset($_REQUEST['capture'])) { $action = PLATRON_CAPTURE; } else { if (isset($_REQUEST['refund'])) { $action = PLATRON_REFUND; } else { if (isset($_REQUEST['capture_request'])) { $action = PLATRON_CAPTURE_REQUEST; } else { if (isset($_REQUEST['refund_request'])) { $action = PLATRON_REFUND_REQUEST; } else { $action = PLATRON_RESULT; } } } } } function platron_signature($data) { unset($data['pg_sig']); $script = trim(basename($_SERVER['PHP_SELF'])); ksort($data); array_unshift($data, $script); array_push($data, Samo_Acquiring::acquiringConfig('PLATRON_SECRET_KEY')); return md5(join(';', $data)); } function platron_answer($message, $code = 'error') { $data = array( 'status' => $code, 'description' => mb_convert_encoding($message, 'utf-8', 'windows-1251') ); $data = Platron_Model::signData($data, $_SERVER['PHP_SELF']); $res = '<response>'; foreach ($data as $i => $j) { $res .= '<' . $i . '>' . $j . '</' . $i . '>'; } $res .= '</response>'; header('Content-Type: text/xml;charset=utf-8'); echo $res; exit; } ini_set('display_errors', 0); error_reporting(E_ALL); try { include_once '../../properties.php'; if (DEBUG) { file_put_contents(dirname(INCLUDE_PATH_CACHE) . '/platron_client.log', date('Y-m-d H:i:s', $_SERVER['REQUEST_TIME']) . ' [' . $_SERVER['REMOTE_ADDR'] . '] ' . var_export($_REQUEST, true) . PHP_EOL, FILE_APPEND); } include_once 'lib.php'; include_once _ROOT . 'includes/classes/class.samo_config.php'; Samo_Loader::register_autoload(); Samo_Registry::set('logger', Log::singleton(LOG_TYPE)); $db = connectdb(); Samo_Acquiring::$isB2C = isset($_REQUEST['b2c']) && $_REQUEST['b2c']; $model = Samo_Loader::load_class('WSPAY_model'); $model = new $model($db); $data = array(); foreach ($_REQUEST as $n => $v) { if ($n == 'amount' || (strlen($n) > 3 && strpos($n, 'pg_') === 0)) { $data[$n] = $v; } } if (!$data || !isset($data['pg_salt']) || !isset($data['pg_sig']) || !isset($data['pg_order_id']) || (!isset($data['pg_result']) && ($action == PLATRON_RESULT)) || (!isset($data['pg_amount']) && ($action == PLATRON_CHECKING || $action == PLATRON_RESULT)) ) { platron_answer('No data!'); } if ($data['pg_sig'] !== platron_signature($data)) { platron_answer('Invalid signature!'); } if (!$INUMBER = $data['pg_order_id']) { platron_answer('Cant find pay number!'); } $bank = $model->getBank(Samo_Acquiring::acquiringConfig('PLATRON_SAMO_LOGIN')); switch ($action) { case PLATRON_RESULT: if (!$RESULT = intval($data['pg_result'])) { platron_answer('Pay is not confirmed!', isset($data['pg_can_reject']) && $data['pg_can_reject'] == 1 ? 'reject' : 'ok'); } case PLATRON_CHECKING: $res = $model->getInvoiceData($INUMBER); $AMOUNT = floatval(str_replace(',', '.', $data['pg_amount'])); if ((string)floatval($res['RubSum']) > (string)$AMOUNT) { platron_answer('Wrong amount!'); } if ($action == PLATRON_RESULT) { Platron_Model::confirmOrder(Samo_Acquiring::acquiringConfig('PLATRON_SAMO_LOGIN'), $INUMBER); platron_answer('Pay ' . $INUMBER . ' confirmed!', 'ok'); } else { platron_answer('Pay ' . $INUMBER . ' is valid!', 'ok'); } break; case PLATRON_CAPTURE: platron_answer('Pay ' . $INUMBER . ' clearing is ok!', 'ok'); break; case PLATRON_REFUND: platron_answer('Pay ' . $INUMBER . ' cancelling is ok!', 'ok'); break; case PLATRON_CAPTURE_REQUEST: Platron_Model::capturePay($INUMBER); platron_answer('Pay ' . $INUMBER . ' capture is ok!', 'ok'); break; case PLATRON_REFUND_REQUEST: Platron_Model::refundPay($INUMBER); platron_answer('Pay ' . $INUMBER . ' refund is ok!', 'ok'); break; } } catch (WSPAY_Exception $e) { $msg = $e->getMessage(); platron_answer($msg); } catch (Exception $e) { platron_answer('Unknown error!'); } 