<?php
 class Sberbank_Client { const ACTION_CHECK = 'check'; const ACTION_PAYMENT = 'payment'; const STR_OK = 'OK'; const STR_UNKNOWN = 'UNKNOWN'; const CODE_ERROR = -1; const CODE_OK = 0; const CODE_UNKNOWN_ACTION = 2; const CODE_CLAIM_NOT_FOUND = 3; const CODE_BAD_SUM = 4; const CODE_BAD_TRANSACTION_ID = 5; const CODE_BAD_PAY_DATE = 6; const CODE_TRANSACTION_ALREADY_EXISTS = 8; const CODE_NOT_CONFIRMED = 12; public $model = null; public $db = null; public $bank = null; public function __construct(WSPAY_model $model, Samo_Database $db) { $this->model = $model; $this->db = $db; } public function dispatch(Samo_Request $request) { try { $this->auth($request); $ACTION = $request->find('ACTION'); if (!in_array($ACTION, [Sberbank_Client::ACTION_CHECK, Sberbank_Client::ACTION_PAYMENT])) { throw new Sberbank_Client_Exception(Samo_EPlatez::messages('ACQUIRING_UNKNOWN_REQUEST_TYPE'), Sberbank_Client::CODE_UNKNOWN_ACTION); } return $this->{$ACTION}($request); } catch (WSPAY_exception $e) { switch ($e->getCode()) { case WSPAY_model::BANK_NOT_FOUND: $code = Sberbank_Client::CODE_NOT_CONFIRMED; break; case WSPAY_model::CLAIM_NOT_FOUND: case WSPAY_model::CLAIM_OR_PASSPORT_INCORRECT: case WSPAY_model::TICKET_NOT_FOUND: case WSPAY_model::TICKET_ACCESS_DENIED: $code = Sberbank_Client::CODE_CLAIM_NOT_FOUND; break; case WSPAY_model::PAYMENT_MINUS: $code = Sberbank_Client::CODE_BAD_SUM; break; case WSPAY_model::TICKET_CONFIRMED: case WSPAY_model::DOUBLE_TICKET: $code = Sberbank_Client::CODE_TRANSACTION_ALREADY_EXISTS; break; default: $code = Sberbank_Client::CODE_ERROR; break; } $message = $e->getMessage(); throw new Sberbank_Client_Exception($message, $code, $e); } } protected function auth(Samo_Request $request) { $login = $request->find('login'); $claim = $inumber = null; if ($ACCOUNT = $request->find('ACCOUNT')) { if (is_numeric($ACCOUNT)) { $claim = $ACCOUNT; } else { $inumber = $ACCOUNT; } } if (!$login && ($cLogin = Samo_Acquiring::acquiringConfig('SBERBANK_CLIENT_LOGIN', $claim, $inumber))) { return $this->model->getBank($cLogin); } $bank = $this->model->getBank($login); $salt = $request->find('salt'); $psw = $request->find('psw'); if (md5($salt . $bank['Psw']) != $psw) { throw new Sberbank_Client_Exception(sprintf(Samo_EPlatez::messages('ACQUIRING_BANK_LOGIN_NOT_FOUND'), $login), Sberbank_Client::CODE_NOT_CONFIRMED); } return $bank; } protected function check(Samo_Request $request) { $ACCOUNT = $request->find('ACCOUNT'); if (is_numeric($ACCOUNT)) { $result = $this->model->getClaim($ACCOUNT); $fio = $result['BuyerName'] ? $result['BuyerName'] : $result['PeopleLName']; $balance = $result['PayDebt']; } else { $invoice = $this->model->getInvoiceData($ACCOUNT); $this->model->recalcInvoicePaySum($invoice); $fio = $invoice['Payer']; $balance = $invoice['RubSum']; } return $this->response( [ 'FIO' => trim($fio) ? $fio : self::STR_UNKNOWN, 'ADDRESS' => self::STR_UNKNOWN, 'ACCOUNT_BALANCE' => str_replace(',', '.', strval($balance)), ] ); } protected function payment(Samo_Request $request) { $ACCOUNT = $request->find('ACCOUNT'); $AMOUNT = $request->floatval('AMOUNT'); $ot = $request->find('PAY_CHAN'); if (is_numeric($ACCOUNT)) { $PAY_ID = $request->find('PAY_ID'); $result = $this->model->payClaim($ACCOUNT, null, $AMOUNT, $PAY_ID, null, null, null, $ot); $dt = $result['ConfirmDateTime']; $id = $result['INumber']; } else { $invoice = $this->model->getInvoiceData($ACCOUNT); $this->model->recalcInvoicePaySum($invoice); if (floor($AMOUNT) != floor($invoice['RubSum'])) { throw new Sberbank_Client_Exception(Samo_EPlatez::messages('ACQUIRING_INCORRECT_AMOUNT'), Sberbank_Client::CODE_BAD_SUM); } $this->model->confirmInvoiceByINumber($ACCOUNT, null, $ot); $dt = Samo_Datetime::now(); $id = $ACCOUNT; } return $this->response( [ 'REG_DATE' => $dt->format('d.m.Y_H:i:s'), 'PAY_ID_EXT' => $id, ] ); } public static function response($data) { $default = ['CODE' => Sberbank_Client::CODE_OK, 'MESSAGE' => Sberbank_Client::STR_OK]; $data = array_merge($default, $data); $xml = new Andr_Xml('<?xml version="1.0" encoding="utf-8"?><response/>'); foreach ($data as $key => $val) { $xml->addChild($key, strConv($val)); } $str = $xml->saveXML(); return $str; } } class Sberbank_Client_Exception extends Exception { public function __construct($message = '', $code = 0, Exception $previous = null) { if (!in_array($code, [-1, 0, 2, 3, 4, 5, 6, 8, 12])) { $code = -1; } return parent::__construct($message, $code, $previous); } } class Sberbank_Client_Log { public static $time = null; public static function write($data) { if (!self::$time) { self::$time = date('Y-m-d H:i:s', @$_SERVER['REQUEST_TIME']); } if (defined('SBERBANK_CLIENT_LOG')) { file_put_contents(SBERBANK_CLIENT_LOG, self::$time . ' [' . @$_SERVER['REMOTE_ADDR'] . '] ' . PHP_EOL . var_export($data, true) . PHP_EOL, FILE_APPEND | LOCK_EX); } } } try { include_once '../../properties.php'; Sberbank_Client_Log::write($_REQUEST); include_once 'lib.php'; include_once _ROOT . 'includes/classes/class.samo_config.php'; Samo_Loader::register_autoload(); $db = connectdb(); $model = Samo_Loader::load_object('WSPAY_model', $db); $client = Samo_Loader::load_object('Sberbank_Client', $model, $db); $request = Samo_Loader::load_object('Samo_Request'); $response = $client->dispatch($request); } catch (Sberbank_Client_Exception $e) { $response = Sberbank_Client::response(['CODE' => $e->getCode(), 'MESSAGE' => $e->getMessage()]); } catch (Exception $e) { $response = Sberbank_Client::response(['CODE' => Sberbank_Client::CODE_ERROR, 'MESSAGE' => $e->getMessage()]); } if (isset($e)) { Sberbank_Client_Log::write($e); } Sberbank_Client_Log::write($response); header('Content-Type: text/xml;charset=utf-8'); echo $response; 