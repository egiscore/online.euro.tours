<?php
 class WSPAY_service { protected $model = null; private $logger = null; private $_header_security = false; private $_header_security_fault = false; protected $user = ''; public function __construct($model, $logger) { $this->model = $model; $this->logger = $logger; } public function __call($func, $args) { $this->logger->setMethod($func); $paramObj = $args[0]; if (isset($paramObj->ReservationNumber)) { $this->logger->setClaim($paramObj->ReservationNumber); } if (isset($paramObj->INumber)) { $this->logger->setINumber($paramObj->INumber); } if (is_soap_fault($res = $this->_init())) { $this->logger->exception($res); return $res; } Samo_Debug_Helper::proctitle('WSPAY::' . $func); $method = '_' . $func; if (method_exists($this, $method)) { object_walk_recursive($args, 'strDeConv'); $db = Samo_Registry::get('db'); $params = $db->getConnectParams(); $sql = $db->formatExec( $params['database'] . '.dbo.up_WEB_3_online_stats', [ 'module' => 'wspay', 'action' => $func, 'client' => ip2long(Samo_Request::remote_addr()), ] ); $db->query($sql); $db->freeResult(); unset($sql, $params); $e = null; try { $output = call_user_func_array(array($this, $method), $args); } catch (WSPAY_exception $e) { $this->logger->exception($e); throw $e; } } else { throw new Exception('Function ' . $method . ' does not exists.'); } array_walk_recursive($output, 'strConv'); return $output; } protected function _getInvoiceData($input) { if (is_object($input) && (isset($input->INumber)) && trim($input->INumber) != '') { $res = $this->model->getInvoiceData($input->INumber); $this->model->recalcInvoicePaySum($res); return array('invoiceData' => $this->_setInvoiceData($res)); } else { throw new WSPAY_exception('Wrong parameters', WSPAY_model::WRONG_PARAMETERS); } } protected function _confirmInvoice($input) { if (is_object($input) && (isset($input->INumber)) && trim($input->INumber) != '') { $operation = (isset($input->Operation)) ? $input->Operation : null; $res = $this->model->confirmInvoiceByINumber($input->INumber, $operation); return array('invoiceData' => $this->_setInvoiceData($res)); } else { throw new WSPAY_exception('Wrong parameters', WSPAY_model::WRONG_PARAMETERS); } } protected function _getReservationData($input) { if (is_object($input) && isset($input->ReservationNumber) && ($input->ReservationNumber > 0) && ( (isset($input->PassportNumber) && trim($input->PassportNumber) != '') || (isset($input->PartnerLogin) && trim($input->PartnerLogin) != '') ) ) { $PassportNumber = isset($input->PassportNumber) ? trim($input->PassportNumber) : null; $PayCurrency = isset($input->PayCurrency) ? trim($input->PayCurrency) : null; $PartnerLogin = isset($input->PartnerLogin) ? trim($input->PartnerLogin) : null; $res = $this->model->getClaim($input->ReservationNumber, $PassportNumber, $PayCurrency, $PartnerLogin); return array('reservationData' => $this->_setReservationData($res)); } else { throw new WSPAY_exception('Wrong parameters', WSPAY_model::WRONG_PARAMETERS); } } protected function _payReservation($input) { if (is_object($input) && isset($input->ReservationNumber) && ($input->ReservationNumber > 0) && ( (isset($input->PassportNumber) && trim($input->PassportNumber) != '') || (isset($input->PartnerLogin) && trim($input->PartnerLogin) != '') ) ) { $PassportNumber = isset($input->PassportNumber) ? trim($input->PassportNumber) : null; $PayCurrency = isset($input->PayCurrency) ? trim($input->PayCurrency) : null; $PartnerLogin = isset($input->PartnerLogin) ? trim($input->PartnerLogin) : null; $inn = isset($input->Inn) ? trim($input->Inn) : null; $res = $this->model->payClaim($input->ReservationNumber, $PassportNumber, $input->PaySum, $input->TransactionId, $PayCurrency, $PartnerLogin, $inn); return array('invoiceData' => $this->_setInvoiceData($res)); } else { throw new WSPAY_exception('Wrong parameters', WSPAY_model::WRONG_PARAMETERS); } } protected function _setInvoiceData($res) { $res['IDate'] = $res['IDate']->format('xml'); $res['PaspWhen'] = ($res['PaspWhen']->not_null()) ? $res['PaspWhen']->format('xml') : null; $res['ConfirmDateTime'] = ($res['ConfirmDateTime']->not_null()) ? $res['ConfirmDateTime']->format('xmldatetime') : null; $res['ResSum'] = $res['CurSum']; $res['ResCurrency'] = $res['Currency']; $res['PaySum'] = $res['RubSum']; $res['PayCurrency'] = @$res['RubCurrency']; $this->_setOwnerINN($res); $res['reservationData'] = $this->_setReservationData($res['Claim']); return $res; } protected function _setOwnerINN(&$res) { if ((array_key_exists('Partner', $res)) && (array_key_exists('partnerinn', $res['Partner'])) && ($res['Partner']['partnerinn'] != '')) { $res['OwnerINN'] = strConv($res['Partner']['partnerinn']); } else { $res['OwnerINN'] = 'unknown'; } return true; } protected function _setReservationData(&$claim) { $claim['Number'] = $claim['Inc']; $claim['Tour'] = trim($claim['TourLName']) ? $claim['TourLName'] : 'unknown'; $claim['StartDate'] = $claim['DateBeg']->format('xml'); $claim['EndDate'] = $claim['DateEnd']->format('xml'); $claim['Departure'] = trim($claim['TownFromName']) ? $claim['TownFromName'] : 'unknown'; $claim['Hotel'] = trim($claim['HotelLName']) ? $claim['HotelLName'] : 'unknown'; $claim['Town'] = trim($claim['TownLName']) ? $claim['TownLName'] : 'unknown'; $claim['State'] = trim($claim['StateLName']) ? $claim['StateLName'] : 'unknown'; $claim['Tourist'] = trim($claim['PeopleLName']) ? $claim['PeopleLName'] : 'unknown'; $claim['Buyer'] = (!is_null($claim['BuyerName'])) ? $claim['BuyerName'] : null; $claim['OwnerINN'] = (isset($claim['OwnerINN']) && $claim['OwnerINN'] != '') ? $claim['OwnerINN'] : 'unknown'; $claim['Invoice'] = trim($claim['InvoiceNumber']) ? trim($claim['InvoiceNumber']) : null; $claim['InvoiceDate'] = ($claim['InvoiceDate']->not_null()) ? $claim['InvoiceDate']->format('xml') : null; return $claim; } public function security($input) { $this->_header_security = true; $UsernameToken = @$input->UsernameToken; if (!$UsernameToken) { $this->_header_security_fault = "UsernameToken incorrect."; return; } $Username = @$UsernameToken->Username->_; if (!$Username) { $this->_header_security_fault = "Username incorrect."; return; } $PasswordDigest = @$UsernameToken->Password->_; if (!$PasswordDigest) { $this->_header_security_fault = "PasswordDigest incorrect."; return; } $Nonce = @$UsernameToken->Nonce->_; if (!$Nonce) { $this->_header_security_fault = "Nonce incorrect."; return; } $Nonce = base64_decode($Nonce); $Created = @$UsernameToken->Created->_; if (!$Created) { $this->_header_security_fault = "Created incorrect."; return; } if (!preg_match("/([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z)/i", $Created, $matches)) { $this->_header_security_fault = "Created incorrect."; return; } if (false !== ($bank = $this->model->getBank($Username))) { $PasswordDigest = bin2hex(base64_decode($PasswordDigest)); $Sample_PasswordDigest = sha1($Nonce . $Created . $bank['Psw']); if ($PasswordDigest == $Sample_PasswordDigest) { $this->user = $bank; } else { $this->_header_security_fault = "Login failed."; } } else { $this->_header_security_fault = "Login failed"; } } private function _init() { if (!$this->_header_security) { return new SoapFault('Client', 'Wrong request. SOAP-ENV:Header Security not found.'); } if (false !== $this->_header_security_fault) { header('SoapFault: ' . strConv($this->_header_security_fault)); return new SoapFault('Client', strConv($this->_header_security_fault)); } return true; } protected function _getReservationDataSimple($input) { if (is_object($input) && isset($input->ReservationNumber) && ($input->ReservationNumber > 0)) { $res = $this->model->getClaim($input->ReservationNumber, null); return array('reservationData' => $this->_setReservationData($res)); } else { throw new WSPAY_exception('Wrong parameters', WSPAY_model::WRONG_PARAMETERS); } } protected function _payReservationSimple($input) { if (is_object($input) && isset($input->ReservationNumber) && ($input->ReservationNumber > 0)) { $PayCurrency = isset($input->PayCurrency) ? trim($input->PayCurrency) : null; $inn = isset($input->Inn) ? trim($input->Inn) : null; $res = $this->model->payClaim($input->ReservationNumber, null, $input->PaySum, $input->TransactionId, $PayCurrency, null, $inn); return array('invoiceData' => $this->_setInvoiceData($res)); } else { throw new WSPAY_exception('Wrong parameters', WSPAY_model::WRONG_PARAMETERS); } } } 