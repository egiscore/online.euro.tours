<?php
 use Phalcon\Mvc\Controller; use Phalcon\Mvc\View; use Phalcon\Exception as Ex; use \Phalcon\Text; use Samo\Api\Api; class ApiController extends Controller { public $registerApi; public $api; private $params; public function initialize() { $this->response->setContentType('application/json'); $this->dispatcher->setParam('api', true); $this->dispatcher->setParam('callback', $this->request->get('callback') ?: false); $this->registerApi = [ 'check_passport' => 'Samo\Api\CheckPassportApi', 'servers_cache' => 'Samo\Api\ServersCacheApi', 'refbook' => 'Samo\Api\RefBookApi', 'documents' => 'Samo\Api\DocumentsApi', 'partners' => 'Samo\Api\PartnersApi', ]; $this->params = (object)array_merge( $this->request->get(), $this->request->getPost(), ['uploadFiles' => $this->request->getUploadedFiles()], ['IP' => Samo_Request::remote_addr()], $this->dispatcher->getParams() ); $this->api = new Api($this->params); } public function indexAction() { $this->response->setContentType("text/html", "UTF-8"); $this->dispatcher->setParam('api', false); $this->view->setTemplateAfter('blank'); $this->view->setRenderLevel(View::LEVEL_AFTER_TEMPLATE); } public function authAction() { $this->view->disable(); $this->response->setContentType('application/json'); if ($this->request->getPost('response')) { $this->session->set('captcha', 1); $this->session->set('captchaTTL', time() + $this->config->session->captchaTTL); $this->sendResponse($this->request->getPost('response')); } else { $this->sendResponse([]); } } public function getAction() { try { $this->view->disable(); $result = $this->api->get($this->dispatcher->getParam('entity')); $this->sendResponse($result); } catch (Ex $e) { $this->sendResponse(['error' => $e->getMessage()]); } } protected function sendResponse($result) { if (!$callback = $this->dispatcher->getParam('callback')) { if (!mb_check_encoding(serialize($result), 'UTF-8')) { array_walk_recursive( $result, function (&$value, $key) { if (is_string($value)) { \Core::decodeCP1251ToUtf8($value); } } ); } $this->response->setJsonContent($result)->send(); } else { $this->response->setContent($callback . "(" . json_encode($result) . ")")->send(); } } public function getEntityAction() { try { $this->view->disable(); $entity = $this->dispatcher->getParam('entity'); $method = $this->dispatcher->getParam('method'); if ($method === null) { $this->response->redirect("api/doc/{$entity}"); } else { if (array_key_exists($entity, $this->registerApi)) { try { $api = new $this->registerApi[$entity]($this->params); $result = $api->get($method); $this->sendResponse($result); } catch (Ex $e) { $this->response->setStatusCode(405); if ($e instanceof Samo\Exception) { $this->sendResponse($e->getErrorMessage()); } else { if (APPMODE == 'dev') { $this->sendResponse( [ 'error' => $e->getMessage(), 'code' => $e->getCode(), 'trace' => $e->getTraceAsString() ] ); } else { $this->sendResponse( [ 'error' => $e->getMessage(), 'code' => $e->getCode(), ] ); } } } } else { $apiName = Text::camelize($entity) . 'Api'; throw new Ex("{$apiName} not registered in ApiController!"); } } } catch (Ex $e) { $this->response->setStatusCode(422); $this->sendResponse(['error' => $e->getMessage(), 'code' => $e->getCode()]); } } public function docAction($entity = []) { $this->response->setContentType("text/html", "UTF-8"); $this->dispatcher->setParam('api', false); $this->view->setTemplateAfter('blank'); $this->view->setRenderLevel(View::LEVEL_AFTER_TEMPLATE); if ($entity) { $this->view->pick("api/{$entity}"); } } } 