<?php
 abstract class Collection implements IteratorAggregate, ArrayAccess, Countable { private $type; private $collection = []; public $resultEmpty = false; public function __construct($type) { $this->type = $type; } private function checkType(&$object) { if (get_class($object) != $this->type) { throw new Exception( 'Object instanceof `' . get_class($object) . '` not supported in collection type of `' . $this->type . '`' ); } } public function add() { $args = func_get_args(); foreach ($args as $object) { $this->checkType($object); $this->collection[] = $object; } return $this; } public function remove() { $args = func_get_args(); foreach ($args as $object) { unset($this->collection[array_search($object, $this->collection)]); } return $this; } public function clear() { $this->collection = []; return $this; } public function isEmpty() { return empty($this->collection); } public function getIterator() { return new CollectionIterator($this->collection); } public function findFirst() { $object = array_shift($this->collection); array_unshift($this->collection, $object); return $object; } public function offsetSet($offset, $object) { $this->checkType($object); if ($offset === null) { $offset = max(array_keys($this->collection)) + 1; } $this->collection[$offset] = $object; } public function offsetExists($offset) { return isset($this->collection[$offset]); } public function offsetUnset($offset) { unset($this->collection[$offset]); } public function offsetGet($offset) { if (isset($this->collection[$offset]) === false) { return null; } return $this->collection[$offset]; } public function count() { return count($this->collection); } public function toArray($index = false) { $array = []; foreach ($this->collection as $object) { if ($index && isset($object->$index)) { $array[$object->$index] = $object->toArray(); } else { $array[] = $object->toArray(); } } return $array; } } 