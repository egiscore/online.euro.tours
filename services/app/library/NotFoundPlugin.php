<?php
 use Phalcon\Events\Event; use Phalcon\Mvc\User\Plugin; use Phalcon\Dispatcher; use Phalcon\Mvc\Dispatcher\Exception as DispatcherException; use Phalcon\Mvc\Dispatcher as MvcDispatcher; use Phalcon\Di; class NotFoundPlugin extends Plugin { public function beforeException(Event $event, MvcDispatcher $dispatcher, \Exception $exception) { if ($exception instanceof DispatcherException) { switch ($exception->getCode()) { case Dispatcher::EXCEPTION_HANDLER_NOT_FOUND: case Dispatcher::EXCEPTION_ACTION_NOT_FOUND: $message = '404 Not Found!'; $dispatcher->forward( [ 'controller' => 'errors', 'action' => 'show404', 'params' => [$message] ] ); return false; } } $message = $exception->getMessage(); $code = $exception->getCode(); if ($dispatcher->getParam('api')) { if ($callback = $dispatcher->getParam('callback')) { echo $callback . "(" . json_encode(['error' => $message]) . ")"; } else { $this->response->setStatusCode(500); if ($exception instanceof Samo\DB\Exception) { echo json_encode($exception->getError()); } else { echo json_encode(['error' => $message, 'code' => $code]); } } return false; } else { $this->_log($message); $dispatcher->forward( [ 'controller' => 'errors', 'action' => 'show500', 'params' => [$message] ] ); return false; } } private function _log($query) { if (Di::getDefault()->get('config')->env->debug) { return true; } } } 