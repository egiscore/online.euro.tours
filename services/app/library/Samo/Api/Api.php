<?php
 namespace Samo\Api; use Phalcon\Mvc\Dispatcher; use Phalcon\Exception as Ex; use Phalcon\Di; use Phalcon\DiInterface; use Monolog\Logger; use Phalcon\Text; use Samo\AntiBot\AntiBot; use Samo\Config\Settings; use Samo\DB\DB; use Samo\Session; class Api implements ApiInterface { protected $di; protected $db; protected $dispatcher; protected $registerPublicMethods; protected $antiBot; protected $publicMethods = []; protected $params; protected $settings; protected $session; protected $messages; protected $requireAuth = false; public function __construct($params) { try { $this->di = Di::getDefault(); $this->db = $this->di->get('db'); $this->settings = new Settings($params, $this->db); $this->dispatcher = $this->di->get('dispatcher'); $this->antiBot = new AntiBot(); $this->session = $this->di->get('session'); if (php_sapi_name() != 'cli') { if ($this->dispatcher->getControllerName() == 'api' && !$this->auth()) { throw new Ex('Auth is required', 201); } } $this->messages = \Samo_Registry::get('messages'); $this->params = $params; } catch (Ex $exception) { return ['error' => $exception->getMessage()]; } } protected function addPublicMethods($methods) { if (is_array($methods)) { $this->publicMethods = array_merge($methods, $this->publicMethods); } else { throw new Ex('As an argument, an array is expected in Api::addPublicMethods', Logger::ERROR); } } public function get($entity, $access = false) { $method = 'get' . Text::camelize($entity); $existMethod = method_exists($this, $method); $disableAntiBot = $this->antiBot->isDisable(); $access = ($access || in_array($method, $this->publicMethods)); if ($existMethod && $disableAntiBot && $access) { return $this->$method($this->params); } else { if ($disableAntiBot) { throw new Ex($method . " method not found in " . get_class($this), 500); } return ['error' => 'Robot']; } } public function getParam($name) { if (isset($this->params->$name) && !empty($this->params->$name)) { return $this->params->$name; } return false; } public function setParam($name, $value) { if ($name) { $this->params->$name = $value; } } public function setParams($params) { if (!is_array($params)) { throw new Ex('Api::setParams - invalid data type passed'); } foreach ($params as $key => $val) { $this->params->$key = $val; } } protected function auth() { return $this->session->hasAuth(); } } 