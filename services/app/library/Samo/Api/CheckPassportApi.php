<?php
 namespace Samo\Api; use Phalcon\Validation; use Phalcon\Validation\Validator\Numericality as NumVal; use Phalcon\Validation\Validator\Date as DateVal; use Phalcon\Exception as Ex; use Samo\Config\Settings; class CheckPassportApi extends Api { protected $refBookApi; protected $serversCacheApi; protected $settings; public $defaultCheckIn; public $defaultNights = 7; public $defaultStatesBorn; public $defaultCitizenShip; public $defaultValidDate; public function __construct($params) { parent::__construct($params); $this->addPublicMethods(['getData', 'getResult']); $this->serversCacheApi = new ServersCacheApi($params); $this->refBookApi = new RefBookApi($params); $this->defaultValidDate = $this->setDate($this->getParam('VALIDDATE')); $this->defaultCheckIn = $this->setDate($this->getParam('CHECKIN'), 'tomorrow'); $this->defaultNights = $this->getParam('NIGHTS') ?: $this->defaultNights; $this->defaultStatesBorn = $this->getParam('BORNPLACE'); $this->defaultCitizenShip = $this->getParam('CITIZENSHIP'); } public function getData() { $this->setParam('STATE', $this->defaultCitizenShip); $citizenShips = $this->refBookApi->getStates(); $this->setParam('STATE', $this->defaultStatesBorn); $placesOfBorn = $this->refBookApi->getStates(); return array_merge( $this->serversCacheApi->getData(), [ 'CheckIn' => $this->defaultCheckIn, 'Nights' => $this->defaultNights, 'CitizenShips' => $citizenShips, 'PlacesOfBorn' => $placesOfBorn, 'ValidDate' => $this->defaultValidDate ] ); } public function getResult() { $this->validateParams(); $params = [ 'State' => $this->getParam('STATEINC'), 'PlaceOfBorn' => $this->getParam('BORNPLACE'), 'Citizenship' => $this->getParam('CITIZENSHIP'), 'CheckIn' => $this->getParam('CHECKIN'), 'Nights' => $this->getParam('NIGHTS'), 'UserCode' => $this->settings->getUserCode(), 'Pvaliddate' => $this->getParam('VALIDDATE') ]; $sql = $this->db->prepare('up_WEBST_passport_check', $params); $result = $this->db->resultCollection($sql, 'passport_check', true); return $result->findFirst()->toArray(); } private function setDate($date, $default = false) { if (\Samo_Datetime::check($date)) { return \Samo_Datetime::parse($date)->format(); } elseif ($default) { return \Samo_Datetime::parse($default)->format(); } return false; } private function validateParams() { $validator = new Validation(); $this->createRules($validator); $errors = $validator->validate($this->params); if ($errors->count()) { foreach ($errors as $message) { throw new Ex($message, 5051); } } } private function createRules(Validation &$validator) { $messages = [ 'NumVal' => 'Parameter %s is not numeric', 'DateVal' => 'Incorrect format date %s' ]; $fields = [ 'STATEINC' => 'NumVal', 'BORNPLACE' => 'NumVal', 'CITIZENSHIP' => 'NumVal', 'NIGHTS' => 'NumVal', 'CHECKIN' => 'DateVal', 'VALIDDATE' => 'DateVal' ]; foreach ($fields as $param => $type) { $message = [$param => sprintf($messages[$type], $param)]; switch ($type) { case 'NumVal': $validator->add($param, new NumVal(['message' => $message])); break; case 'DateVal': $validator->add($param, new DateVal(['format' => [$param => 'Ymd'], 'message' => $message])); break; } } } } 