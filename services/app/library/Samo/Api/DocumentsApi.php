<?php
 namespace Samo\Api; use Phalcon\Exception as Ex; use Phalcon\Text; use Samo\DB\DB; use Samo\DB\Exception as DBEx; use Samo\DB\Exception; use Samo\Validators\DocumentsValidator; class DocumentsApi extends Api { const ERROR_ONLINE_PAYMENT_RETURN = 1; const ERROR_GET_AIV = 2; const ERROR_CREATE_JOB = 3; const ERROR_JOB_INC = 4; const ERROR_WRITE_FILE = 5; const ERROR_EMPTY_CONTENT = 6; const ERROR_ACCESS_TO_JOB = 7; const ERROR_PAYMENT_INC = 8; const ERROR_CLAIM_FROM = 9; const TYPE_FOR_RETURN = 21; const TYPE_FOR_TRANSFER = 22; protected $refBookApi; protected $partnerApi; protected $currencies; protected $template; protected $validator; public function __construct($params) { parent::__construct($params); $this->addPublicMethods( [ 'getData', 'getMoneyBack', 'getJobStatus', 'getJobInc', 'getUploadFile', 'getUploadedDocument', 'getEdocTypes' ] ); $this->refBookApi = new RefBookApi($params); $this->partnerApi = new PartnersApi($params); $this->currencies = $this->refBookApi->getCurrencies(); $this->validator = new DocumentsValidator(); if (!$this->template = $this->getTemplateInc()) { throw new Ex('Template not found', self::ERROR_GET_AIV); } } public function getData($params) { $params->doctype = self::TYPE_FOR_RETURN; $partnerInfo = $this->partnerApi->getInfo(); return [ 'currencies' => $this->currencies, 'partner' => [ 'account' => $partnerInfo['partnerrs'], 'bik' => $partnerInfo['partnerbik'] ], 'payments' => $this->getPaymentsReturn(), 'eDocTypes' => $this->getEdocTypes($params) ]; } public function getUploadedDocument($params) { $this->validator->validate('uploadedDocument', $params); if (!$link = $this->findFile($params->document)) { $procParams = [ 'Claim' => $params->claim, 'Document' => $params->document, 'UserCode' => $this->settings->getUserCode(), 'Partpass' => $this->session->partPassInc() ]; $query = $this->db->prepare('up_WEB_5_claim_document', $procParams); try { $this->db->rawMode(true); $result = $this->db->result($query, DB::FETCH_ROW); $ext = explode('.', $result['FileName']); $ext = array_pop($ext); $path = $this->getFilePath($result['Inc'], $ext); $this->writeFile($path, $result['Content']); $link = WWWROOT . $path; $this->db->rawMode(false); } catch (\Samo_Exception $e) { throw new DBEx($e->getMessage(), $e->getCode(), $query); } } return ['link' => $link]; } public function getMoneyBack($params) { $this->validator->validate('moneyBack', $params); $payment = $this->getPaymentInc($params); if (!$params->paymentInc = $payment['inc']) { throw new Ex('Return payment record not found', self::ERROR_ONLINE_PAYMENT_RETURN); } $job = $this->createJob($params->paymentInc); return [ 'job' => $job, 'payment' => $payment ]; } public function getJobStatus($params) { $this->validator->validate('jobStatus', $params); $this->jobPermission($params->jobInc, 'set'); if ($path = $this->findFile($params->jobInc, 'pdf')) { return ['jobStatus' => 2, 'link' => $path]; } $procParams = ['job' => $params->jobInc]; $query = $this->db->prepare('up_WEB_3_printform_get_job', $procParams); try { $result = $this->db->result($query, DB::FETCH_ROW); } catch (\Samo_Exception $e) { throw new DBEx($e->getMessage(), $e->getCode(), $query); } if ($result['status'] == 2) { $path = $this->getFilePath($params->jobInc, 'pdf'); $this->writeFile($path, $result['content']); $this->jobPermission($params->jobInc, 'unset'); return ['jobStatus' => 2, 'link' => $path]; } else { return ['jobStatus' => 102]; } } private function writeFile($path, $content) { if (empty($content)) { throw new Ex("Content not found", self::ERROR_EMPTY_CONTENT); } if (!file_put_contents(ROOT_DIR . '/' . $path, $content)) { throw new Ex('Can not write a file ' . ROOT_DIR . $path, self::ERROR_WRITE_FILE); } $umask = umask(0); @chmod(ROOT_DIR . '/' . $path, 0666); umask($umask); } private function jobPermission($jobInc, $action) { $key = "jobId-{$jobInc}"; if ($action === 'set') { if (!$this->session->has($key)) { throw new Ex("Job {$key} access denied", self::ERROR_ACCESS_TO_JOB); } } if ($action === 'unset') { $this->session->remove($key); } } private function createJob($paymentInc) { $procParams = [ 'claim' => null, 'template' => $this->template, 'params' => "inc='{$paymentInc}'", 'priority' => 1, 'embedfonts' => 1 ]; try { $query = $this->db->prepare('up_report_CREATE_JOB', $procParams); $result = $this->db->result($query, DB::FETCH_ROW); } catch (\Samo_Exception $e) { throw new DBEx($e->getMessage(), $e->getCode(), $query); } if (!(int)$result['JobInc']) { throw new Ex('Job not found', self::ERROR_CREATE_JOB); } $key = "jobId-{$result['JobInc']}"; $this->session->set($key, $result['JobInc']); return ['inc' => $result['JobInc']]; } public function getJobInc($params) { $this->validator->validate('jobInc', $params); return ['job' => $this->createJob($params->paymentInc)]; } public function getUploadFile($params) { $params->supportTypes = $this->getEdocTypes($params); $this->validator->validate('uploadFile', $params); $file = $params->uploadFiles[0]; if (file_exists($file->getTempName()) && $content = file_get_contents($file->getTempName())) { $name = $file->getName(); \Core::decodeUtf8ToCP1251($name); $procParams = [ 'Inc' => null, 'Claim' => $params->claim, 'MimeType' => $file->getType(), 'Content' => '0x' . bin2hex($content), 'Name' => $name, 'IP' => $params->IP, 'FileName' => $name, 'partpass' => $this->session->partPassInc(), 'user' => $this->settings->getUserCode(), 'doctype' => $params->doctype, 'PReturnInc' => $params->payment, 'Incoming' => 1, 'Private' => 0 ]; $query = $this->db->prepare('up_external_document_Edit', $procParams); return $this->db->result($query, DB::FETCH_ROW); } return ['error' => true]; } private function getTemplateInc() { $procParams = ['doccategory' => \DocCategory::MONEY_BACK]; $query = $this->db->prepare('up_WEB_3_GET_AIV_Template', $procParams); try { $result = $this->db->result($query, DB::FETCH_ROW); } catch (\Samo_Exception $e) { throw new DBEx($e->getMessage(), $e->getCode(), $query); } return (int)$result['tpl']; } private function getPaymentsReturn() { $procParams = [ 'partpass' => $this->session->partPassInc(), 'user' => $this->settings->getUserCode() ]; $query = $this->db->prepare('up_WEBST_Get_OnlinePaymentReturnList', $procParams); try { $result = $this->db->resultCollection($query, 'online_payment_return', $this->currencies); } catch (\Samo_Exception $e) { throw new DBEx($e->getMessage(), $e->getCode(), $query); } return $result->toArray(); } private function getPaymentInc($params) { $procParams = [ 'partpass' => $this->session->partPassInc(), 'rs' => $params->account, 'bik' => $params->bik, 'recipient_name' => $params->name, 'summa' => $params->summ, 'currency' => $params->cur, 'claim_from' => $params->claimFrom, 'lang' => $this->settings->lang, 'user' => $this->settings->getUserCode(), ]; $query = $this->db->prepare('up_WEB_3_Create_OnlinePaymentReturn', $procParams); try { $result = $this->db->result($query, DB::FETCH_ROW); return $this->getPayment($result['Inc']); } catch (\Database_Exception $e) { throw new DBEx($e->getMessage(), $e->getCode(), $query, $params, $e->getError()); } catch (\Samo_Exception $e) { throw new DBEx($e->getMessage(), $e->getCode(), $query, $params); } } private function getPayment($inc) { $list = $this->getPaymentsReturn(); foreach ($list as $item) { if ($item['inc'] == $inc) { return $item; } } return []; } private function getFilePath($id, $format, $path = 'dnl/') { $hash = md5($id); $hash = Text::upper($hash); $hash = chunk_split($hash, 4, '-'); $hash .= 'F.' . $format; return $path . $hash; } private function findFile($id, $format = '', $dnl = 'dnl/') { $path = $this->getFilePath($id, $format, $dnl); $name = $this->getFilePath($id, '', ''); $rootPath = ROOT_DIR . '/' . $path; if (file_exists($rootPath)) { return WWWROOT . $path; } else { $find = false; $handle = opendir(ROOT_DIR . '/' . $dnl); while (($file = readdir($handle)) !== false) { if (strstr($file, $name)) { $find = strstr($file, $name); } } return $find ? WWWROOT . $dnl . $find : false; } } private function getUploadFormat($types, $needle) { if (is_array($types)) { foreach ($types as $type) { $inc = isset($type['Inc']) ? $type['Inc'] : false; if ($inc && $inc == $needle) { return $type; } } } return false; } public function getEdocTypes($params) { $query = $this->db->prepare('up_WEB_3_Edoc_Types', []); try { $result = $this->db->result($query); } catch (\Database_Exception $e) { throw new DBEx($e->getMessage(), $e->getCode(), $query, $params, $e->getError()); } catch (\Samo_Exception $e) { throw new DBEx($e->getMessage(), $e->getCode(), $query, $params); } if (isset($params->doctype)) { return $this->getUploadFormat($result, $params->doctype); } return $result; } } 