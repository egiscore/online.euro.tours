<?php
 namespace Samo\Api; use Samo\Config\Settings; use Phalcon\Exception as Ex; use Samo\Config\TourConfig; class ServersCacheApi extends Api { const IGNORE_TOWN_ID = 1; const GET_BY_TOWN_STATE = 1; const GET_BY_STATE = 2; const GET_BY_TOWN = 3; public $serversCache; public $defaultTown = false; public $defaultState = false; public $resultManager; public $result = false; private $_langNameField; public function __construct($params) { parent::__construct($params); $this->addPublicMethods(['getTowns', 'getStates', 'getData']); $this->resultManager = new \ResultManager($this->settings); $this->_langNameField = $this->settings->getLangNameField(); $this->init(); } public function getTowns() { $townsCollection = \CollectionFactory::create('TownServersCache'); foreach ($this->serversCache as $item) { if ($item['townFrom'] != self::IGNORE_TOWN_ID) { $towns[$item['townFrom']] = $item; } } $this->resultManager->usort($towns, 'town'); foreach ($towns as $item) { $town = new \TownServersCache(); $town->id = $item['townFrom']; $town->name = $item['town' . $this->_langNameField]; $town->selected = $this->defaultTown == $item['townFrom']; $townsCollection->add($town); } return $townsCollection->toArray(); } public function getStates() { $statesCollection = \CollectionFactory::create('StateServersCache'); foreach ($this->serversCache as $item) { if ($item['townFrom'] == $this->defaultTown) { $states[$item['state']] = $item; } } $this->resultManager->usort($states, 'state'); foreach ($states as $item) { $state = new \StateServersCache(); $state->id = $item['state']; $state->name = $item['state' . $this->settings->getLangNameField()]; $state->selected = $this->defaultState == $item['state']; $statesCollection->add($state); } return $statesCollection->toArray(); } public function getData() { return [ 'Towns' => $this->getTowns(), 'States' => $this->getStates(), ]; } public function create() { if (!defined('TOWNSFROM_CACHE') || TOWNSFROM_CACHE === '') { throw new Ex('Check TOWNSFROM_CACHE in properties.php'); } try { $params = [ 'Select' => 1, 'Update' => 0 ]; $query = $this->db->prepare('up_WEB_3_servers_cache', $params); $result = $this->db->resultCollection($query, 'servers_cache', true); if (!$result->count() && $result->resultEmpty) { throw new Ex("Check STATEFROM in properties.php"); } if ($defaultState = $this->getDefaultState()) { foreach ($result as $item) { if ($item->townFrom == TOWNFROMINC && $item->state == $defaultState) { $item->default = true; break; } } } if ($result->isEmpty() && !file_exists(TOWNSFROM_CACHE)) { $item = new \ServersCache(); $item->townFrom = $item->state = 100500; $item->townName = $item->stateLName = 'Unknown town'; $item->stateName = $item->stateLName = $item->stateFromName = $item->stateFromLName = 'Unknown state'; $item->officeSamoAlias = $item->officeCatalogAlias = OFFICE_SQLSERVER; $item->officeSamoDB = OFFICEDB; $item->officeCatalogDB = $item->onlineCatalogDB = 'WWWBRON'; $item->onlineIP = hostname; $item->onlineAlias = OFFICE_SQLSERVER == '' ? OFFICE_SQLSERVER : 'WEBSQL'; $item->onlineSamoDB = OFFICE_SQLSERVER == '' ? OFFICEDB : 'ONLINEWEB'; $item->stateFrom = 100501; $item->redirect = false; $item->default = true; $result->add($item); } if ($result->count()) { $this->rebuild($result); } else { throw new Ex('cannot find online servers'); } return true; } catch (Ex $e) { return false; } } private function getDefaultState() { $tourConfig = new TourConfig('online_config'); $tourConfig->what = 'STATE_DEFAULT'; $tourConfig->userCode = $this->settings->getUserCode() ?: 'NULL'; $result = $tourConfig->result(false); return $result->Value; } private function rebuild(\Collection $result) { $temp = TOWNSFROM_CACHE . '.new'; $vars = var_export($result->toArray(), true); $content = '<?php' . PHP_EOL . '$TOWNSFROM  = ' . $vars . ';' . PHP_EOL; if (file_put_contents($temp, $content, LOCK_EX)) { $old = \Core::getHash(TOWNSFROM_CACHE, 'md5_file'); $new = \Core::getHash($temp, 'md5_file'); if (!file_exists(TOWNSFROM_CACHE) || $old != $new) { if (rename($temp, TOWNSFROM_CACHE)) { \Core::resetOpcache(TOWNSFROM_CACHE); umask(0); @chmod(TOWNSFROM_CACHE, 0666); return true; } else { return unlink($temp); } } } throw new Ex('File "' . TOWNSFROM_CACHE . '" not saved!'); } private function init() { if (!file_exists(TOWNSFROM_CACHE) || $this->getParam('CREATE_SERVERS_CACHE')) { $this->create(); } @include TOWNSFROM_CACHE; if (!isset($TOWNSFROM)) { throw new Ex('servers_cache.php is broken.'); } $this->serversCache = $TOWNSFROM; $this->setDefaults(); } private function setDefaults() { $this->result = $this->getByParams(); if (!$this->result) { foreach ($this->serversCache as $key => $item) { if ($item['default']) { $this->result = $this->buildDefault($this->serversCache[$key]); break; } } if (!$this->result) { $this->result = $this->buildDefault($this->serversCache[0]); } } $this->defaultTown = $this->result->townFrom; $this->defaultState = $this->result->state; } private function buildDefault($result) { if (is_array($result)) { $model = new \ServersCache($result); } else { throw new Ex("Missing param result in builder ServersCacheApi"); } return $model; } private function getByParams() { $result = false; $townFromInc = $this->getParam('TOWNFROMINC'); $stateInc = $this->getParam('STATEINC'); if (!$townFromInc && !$stateInc) { return $result; } $filter = $this->getFilterFromParams($townFromInc, $stateInc); foreach ($this->serversCache as $key => $item) { if ($this->getConditionFromParams($townFromInc, $stateInc, $item, $filter) === true) { $result = $this->buildDefault($this->serversCache[$key]); break; } } if (!$result) { throw new Ex("Incorrect input params", 1); } return $result; } private function getFilterFromParams($townFromInc, $stateInc) { if ($townFromInc && $stateInc) { $filter = self::GET_BY_TOWN_STATE; } elseif (!$townFromInc) { $filter = self::GET_BY_STATE; } else { $filter = self::GET_BY_TOWN; } return $filter; } private function getConditionFromParams($townFromInc, $stateInc, $item, $filter) { switch ($filter) { case self::GET_BY_TOWN_STATE: $condition = ($townFromInc == $item['townFrom'] && $stateInc == $item['state']); break; case self::GET_BY_TOWN: $condition = ($townFromInc == $item['townFrom']); break; case self::GET_BY_STATE: $condition = ($stateInc == $item['state']); break; default: $condition = true; break; } return $condition; } } 