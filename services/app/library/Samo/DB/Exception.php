<?php
 namespace Samo\DB; use Throwable; class Exception extends \Exception { protected $messages; protected $errors; protected $query; protected $params; protected $sqlError; public function __construct($message = null, $code = 0, $query = null, $params = false, $sqlError = null, Throwable $previous = null) { parent::__construct($message, $code, $previous); $this->messages = \Samo_Registry::get('messages'); $this->query = $query; $this->sqlError = $sqlError; $this->params = $params; strlen($this->query) > 0 && \Core::decodeCP1251ToUtf8($this->query); strlen($this->sqlError) > 0 && \Core::decodeCP1251ToUtf8($this->sqlError); $this->errors = []; } public function getError() { $message = $this->getMessage(); if (array_key_exists($this->getCode(), $this->errors)) { $error = $this->errors[$this->getCode()]; if (isset($this->messages[$error[0]])) { $message = $this->messages[$error[0]]; array_shift($error); if ($this->params && !empty($error)) { foreach ($error as $val) { if (isset($this->params->$val)) { $message = sprintf($message, $this->params->$val); } } } } } \Core::decodeCP1251ToUtf8($message); if (APPMODE == 'dev') { return [ 'error' => $message, 'code' => $this->getCode(), 'trace' => $this->getTraceAsString(), 'query' => $this->query, 'sql_error' => $this->sqlError ]; } else { return [ 'error' => $message, 'code' => $this->getCode(), ]; } } } 