<?php
 namespace Samo\Validators; use Phalcon\Exception as Ex; use Phalcon\Text; use Phalcon\Validation; use Phalcon\Validation\Validator\Numericality; use Phalcon\Validation\Validator\PresenceOf; use Phalcon\Validation\Validator\Callback; class DocumentsValidator { public function validate($name, $params) { $rules = $name . 'Rules'; if (method_exists($this, $rules)) { $validator = new Validation(); $this->$rules($validator); $errors = $validator->validate($params); if ($errors->count()) { foreach ($errors as $message) { throw new Ex($message, 5051); } } return true; } throw new Ex("Method {$rules} not found."); } private function moneyBackRules(Validation $validator) { $validator->add('claimFrom', new Numericality(['message' => 'Parameter "claimFrom" is not numeric'])); $validator->add('summ', new Numericality(['message' => 'Parameter "summ" is not numeric'])); $validator->add('cur', new Numericality(['message' => 'Parameter "cur" is not numeric'])); $validator->add('name', new PresenceOf(['message' => 'Parameter "name" is empty'])); $validator->add( 'account', new Callback( [ 'callback' => function ($data) { if (isset($data->account)) { $account = $data->account; if (strlen($account) == 20) { return new Numericality(['message' => 'Parameter "account" is not numeric']); } } return false; }, 'message' => 'The parameter "account" must contain 20 characters' ] ) ); $validator->add( 'bik', new Callback( [ 'callback' => function ($data) { if (isset($data->bik)) { $bik = $data->bik; if (strlen($bik) == 9) { return new Numericality(['message' => 'Parameter "bik" is not numeric']); } } return false; }, 'message' => 'The parameter "bik" must contain 9 characters' ] ) ); } private function jobStatusRules(Validation $validator) { $validator->add('jobInc', new Numericality(['message' => 'Parameter "jobInc" is not numeric'])); } private function jobIncRules(Validation $validator) { $validator->add('paymentInc', new Numericality(['message' => 'Parameter "paymentInc" is not numeric'])); } private function uploadFileRules(Validation $validator) { $validator->add( 'uploadFile', new Callback( [ 'callback' => function ($data) { $file = $data->uploadFiles[0]; $type = $file->getExtension(); $size = $file->getSize() / 1024; $suppostSize = $data->supportTypes['upload_size']; $supportTypes = explode(', ', $data->supportTypes['upload_format']); return (($suppostSize >= $size) && in_array(Text::lower($type), $supportTypes)); }, 'message' => 'The size or type of the file is not supported' ] ) ); $validator->add('claim', new Numericality(['message' => 'Parameter "claim" is not numeric'])); $validator->add('doctype', new Numericality(['message' => 'Parameter "doctype" is not numeric'])); $validator->add('payment', new Numericality(['message' => 'Parameter "payment" is not numeric'])); } private function uploadedDocumentRules(Validation $validator) { $validator->add('claim', new Numericality(['message' => 'Parameter "claim" is not numeric'])); $validator->add('document', new Numericality(['message' => 'Parameter "document" is not numeric'])); } } 