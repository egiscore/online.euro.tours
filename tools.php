<?php
set_time_limit(0); ignore_user_abort(1); require_once './properties.php'; include_once _ROOT.'includes/classes/class.samo_config.php'; Samo_Loader::register_autoload(); $workhorse = Samo_Loader::load_object('Samo_Tools'); $proxy = new Security_Samo_Tools($workhorse); if (extension_loaded('soap')) { $server = new SoapServer(null,array('uri' => 'http://samo-soft/')); $server->setObject($proxy); $server->handle(); } else { header('HTTP/1.1 500 SOAP Fault'); header('Content-Type: text/xml; charset=UTF-8'); die( '<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
    <SOAP-ENV:Body>
        <SOAP-ENV:Fault>
            <faultcode xsi:type="xsd:QName">SOAP-ENV:Server</faultcode>
            <faultstring xsi:type="xsd:string">Class \'SoapServer\' not found.</faultstring>
            <faultactor xsi:type="xsd:anyURI">PHP</faultactor>
            <detail xsi:type="xsd:string">Errno: 1' . PHP_EOL . 'Filename: ' . __FILE__ . PHP_EOL . 'Lineno: ' . __LINE__ . '</detail>
        </SOAP-ENV:Fault>
    </SOAP-ENV:Body>
</SOAP-ENV:Envelope>' ); } class Security_Samo_Tools { private $workhorse = null; private $_header_security = false; private $_header_security_fault = false; public function __construct(Samo_Tools $workhorse) { $this->workhorse = $workhorse; } public function security($input) { $this->_header_security = true; $UsernameToken = @$input->UsernameToken; if (!$UsernameToken) { $this->_header_security_fault = "UsernameToken incorrect."; return; } $Username = @$UsernameToken->Username; if (!$Username) { $this->_header_security_fault = "Username incorrect."; return; } $PasswordDigest = @$UsernameToken->Password; if (!$PasswordDigest) { $this->_header_security_fault = "PasswordDigest incorrect."; return; } $Nonce = @$UsernameToken->Nonce; if (!$Nonce) { $this->_header_security_fault = "Nonce incorrect."; return; } $Nonce = base64_decode($Nonce); $Created = @$UsernameToken->Created; if (!$Created) { $Created = @$UsernameToken->{'wsu:Created'}; } if (!$Created) { $this->_header_security_fault = "Created incorrect."; return; } try { $ts = new \DateTime($Created); } catch (\Exception $e) { $this->_header_security_fault = "Created incorrect."; return; } $PasswordDigest = base64_decode($PasswordDigest); if (strlen($PasswordDigest) != 40) { $PasswordDigest = bin2hex($PasswordDigest); } $Sample_PasswordDigest = sha1($Nonce.$Created.TOOLSPROTECT); if ($Username != 'samo' || $PasswordDigest != $Sample_PasswordDigest) { $this->_header_security_fault = "Login failed."; } } private function _check_security() { if (!$this->_header_security || false !== $this->_header_security_fault) { header('SoapFault: Wrong Credentials!'); return new SoapFault('Client','Wrong Credentials!'); } return true; } public function __call($method, $args) { if (is_soap_fault($res = $this->_check_security())) { return $res; } if (method_exists($this->workhorse,$method)) { Samo_Debug_Helper::proctitle('Samo_Tools::'.$method); $output = call_user_func_array(array($this->workhorse,'multiply'),array($method,$args)); } else { throw new SoapFault('Server','Function '.$method.' does not exists.'); } return $output; } } 